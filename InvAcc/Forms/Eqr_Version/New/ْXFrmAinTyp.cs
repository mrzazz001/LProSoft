using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using ProShared.Stock_Data;
using ProShared.GeneralM;
using System.Data.SqlClient;
using System.Data.Linq;
using InvAcc.Controls;

namespace InvAcc.Forms.Eqr_Version.New
{
    public partial class XFrmAinTyp : BaseForm
    {
        public XFrmAinTyp()
        {
            InitializeComponent();
            dbInstance = new Stock_DataDataContext();
            // This line of code is generated by Data Source Configuration Wizard
            t_AinTypsBindingSource.DataSource = db.T_AinTyps;
        }
        public T_User Permmission
        {
            get
            {
                return permission;
            }
            set
            {
                if (value != null && value.UsrNo != "")
                {
                    permission = value;
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 37))
                    {
                        IfAdd = false;
                    }
                    else
                    {
                        IfAdd = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 38))
                    {
                        CanEdit = false;
                    }
                    else
                    {
                        CanEdit = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 39))
                    {
                        IfDelete = false;
                    }
                    else
                    {
                        IfDelete = true;
                    }
                }
            }
        }
      
        private void XtraForm1_Load(object sender, EventArgs e)
        {
            Permmission = dbc.Get_PermissionID(VarGeneral.UserID);
            if (columns_Names_visible.Count == 0)
            {
                columns_Names_visible.Add("AinTyp_No", new ColumnDictinary("الرقـــــم", "No", ifDefault: true, ""));
                columns_Names_visible.Add("NameA", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, ""));
                columns_Names_visible.Add("NameE", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, ""));
            }
           
        }
             public void Button_Search_Click(object sender, BarEvArg e)
        {
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, ""));
            }
            VarGeneral.SFrmTyp = "T_AinTyp";
            frm.TopMost = true;
            frm.ShowDialog();
            if (frm.SerachNo != "")
            {
                var q = (from i in db.T_AinTyps where i.AinTyp_No == int.Parse(frm.Serach_No) select i).FirstOrDefault();
                int index = db.T_AinTyps.ToBindingList<T_AinTyp>().IndexOf(q);
                if(index!=-1)
                {

                    ubar1.Binding.Position = index;
                }
             
            }
        }
   
        private void Button_Add_Click(object sender, BarEvArg e)
        {
            if (ubar1.Button_Add.Visibility == DevExpress.XtraBars.BarItemVisibility.Never || ubar1.Button_Add.Enabled)
            {
                MessageBox.Show((LangArEn == 0) ? "لا يمكن اتمام هذه العملية .. الرجاء مراجعة صلاحيات المستخدمين !" : "Can not complete this process .. please see the powers of the users!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            else if (State != FormState.Edit || MessageBox.Show((LangArEn == 0) ? "تم تعديل السجل الحالي دون حفظ التغييرات .. هل تريد المتابعة؟" : "Not saved the changes, do you really want to continue?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
            {
                int max = 0;
                max = db.MaxAinTypNo;

                AinTyp_NoTextEdit.Text = max.ToString();
                Guid id = Guid.NewGuid();
                AinTyp_NoTextEdit.Tag = id.ToString();
                State = FormState.New;
            }
        }

        private void Button_Save_Click(object sender,  BarEvArg e)
        {
            try
            {
                e.ReturnedCommand = CommandTOexecute.Cancel;
                if (!ubar1.Button_Save.Enabled)
                {
                    return;
                }
                if (State == FormState.Edit && !CanEdit)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن اتمام هذه العملية .. الرجاء مراجعة صلاحيات المستخدمين !" : "Can not complete this process .. please see the powers of the users!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                if (State == FormState.New && !ubar1.Button_Add.Enabled)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن اتمام هذه العملية .. الرجاء مراجعة صلاحيات المستخدمين !" : "Can not complete this process .. please see the powers of the users!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
              
                if (AinTyp_IDTextEdit.Text == "" || NameATextEdit.Text == "" || NameETextEdit.Text == "")
                {
                    MessageBox.Show((LangArEn == 0) ? "لايمكن ان يكون الرمز او الإسم فارغا\u0651" : "Can not be a number or name is empty", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                if (State == FormState.New)
                {
                    e.ReturnedCommand = CommandTOexecute.Ok;   
                  
                
                }
                else if (State == FormState.Edit)
                {

                    e.ReturnedCommand = CommandTOexecute.Ok;

                }
                State = FormState.Saved;
              
              ubar1.  TextBox_Index.Caption = string.Concat(PKeys.IndexOf(string.Concat(data_this.AinTyp_No)) + 1);
                SetReadOnly = true;
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("Save:", error, enable: true);
                MessageBox.Show(error.Message);
            }
        }

        private void Button_Edit_Click(object sender, EventArgs e)
        {
            if (CanEdit && State != FormState.Edit && State != FormState.New && !string.IsNullOrEmpty(AinTyp_IDTextEdit.Text))
            {
                if (State != FormState.New)
                {
                    State = FormState.Edit;
                }
                SetReadOnly = false;
            }
        }
        private void layoutControlGroup1_TextChanged(object sender, EventArgs e)
        {

        }

        private void dataLayoutControl1_Changing(object sender, CancelEventArgs e)
        {
           
        }

        private void t_AinTypsBindingSource_AddingNew(object sender, AddingNewEventArgs e)
        {

            T_AinTyp et = new T_AinTyp();
            et.AinTyp_ID = Guid.NewGuid().ToString();

            et.AinTyp_No = db.MaxAlarmTenantNo;
            e.NewObject = et;
            NameATextEdit.Focus();
        }
    }
}