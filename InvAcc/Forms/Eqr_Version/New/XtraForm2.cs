using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.ComponentModel.DataAnnotations;
using System.IO;
using DevExpress.XtraLayout.Helpers;
using DevExpress.XtraLayout;
using InvAcc.GeneralM;
using System.Data.Linq;
using InvAcc.Stock_Data;
using System.Data.SqlClient;

namespace InvAcc.Forms.Eqr_Version.New
{
    public partial class XtraForm2 : DevExpress.XtraEditors.XtraForm
    {
        Stock_Data.Stock_DataDataContext _db
       ;
        public Stock_Data.Stock_DataDataContext db
        {
            get
            {
                if (_db == null)
                    _db = new Stock_Data.Stock_DataDataContext(VarGeneral.BranchCS);
                return _db;
            }
        }
        
        public XtraForm2()
        {
            InitializeComponent();
 
            VarGeneral.ifadd = 37;
            VarGeneral.ifdelete = 39;
            VarGeneral.canedit = 38;

            // This line of code is generated by Data Source Configuration Wizard

            ubar1.Binding = t_AinTypsBindingSource
                ;
            dataLayoutControl1.DataSource = db.T_AinTyps;
          
        }


        private void XtraForm2_Load(object sender, EventArgs e)
        {
         
        }

        private void windowsUIButtonPanelMain_Click(object sender, EventArgs e)
        {

        }

        private void ubar1_Button_Close_Click(object sender, Controls.ItemEventArg e)
        {
        
    

            Close();
        }

        private void XtraForm2_FormClosing(object sender, FormClosingEventArgs e)
        {
         
        }

        private void ubar1_Button_Save_Click(object sender, Controls.ItemEventArg e)
        {
            try
            {
                (dataLayoutControl1.DataSource as Table<Stock_Data.T_AinTyp>).Context.SubmitChanges();
                db.SubmitChanges();
            }
            catch (SqlException ex3)
            {
                int max = 0;
                max = db.MaxAinTypNo;
                if (ex3.Number != 2627)
                {
                    return;
                }
                MessageBox.Show("الرقم مستخدم من قبل.\n سيتم الحفظ برقم جديد [" + max + "]", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question);
               
                AinTyp_NoTextEdit.EditValue = max;

                db.SubmitChanges();
            }
         

    }
        public Dictionary<string, ColumnDictinary> columns_Names_visible = new Dictionary<string, ColumnDictinary>();

        public void Button_Search_Click(object sender, EventArgs e)
        {
            FrmSearch frm = new FrmSearch();
            frm.Tag = VarGeneral.CurrentLang;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, ""));
            }
            VarGeneral.SFrmTyp = "T_AinTyp";
            frm.TopMost = true;
            frm.ShowDialog();
            if (frm.SerachNo != "")
            {
                AinTyp_NoTextEdit.Text = frm.SerachNo.ToString();
            }
        }

        private void t_AinTypsBindingSource_AddingNew(object sender, AddingNewEventArgs e)
        {
           
        }

        private void NoteTextEdit_EditValueChanged(object sender, EventArgs e)
        {

        }
       

      
        public T_User Permmission
        {
            get
            {
                return permission;
            }
            set
            {
                if (value != null && value.UsrNo != "")
                {
                    permission = value;
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 37))
                    {
                        IfAdd = false;
                    }
                    else
                    {
                        IfAdd = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 38))
                    {
                        CanEdit = false;
                    }
                    else
                    {
                        CanEdit = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 39))
                    {
                        IfDelete = false;
                    }
                    else
                    {
                        IfDelete = true;
                    }
                }
            }
        }
        private T_User permission = new T_User();
        public FormState State
        {
            get
            {
                return statex;
            }
            set
            {
                statex = value;
            }
        }
        FormState statex;
        public bool IfAdd
        {
            set
            {
              ubar1.IfAdd= value;
            }
        }
        public bool IfDelete
        {
            set
            { ubar1.IfDelete = value;    }
        }
        public bool IfSave
        {
            set
            {
                ubar1.IfSave = value; }
        }
        bool canUpdate;
        private bool CanEdit;

        protected bool CanUpdate
        {
            get
            {
                return canUpdate;
            }
            set
            {
                canUpdate = value;
            }
        }
        List<string> pkeys;
        public List<string> PKeys
        {
            get
            {
                return pkeys;
            }
            set
            {
                pkeys = value;
            }
        }
        public bool SetReadOnly
        {
            set
            {
                if (value)
                {
                    State = FormState.Saved;
                }
        
            }
        }
        private void ubar1_Button_Search_Click(object sender, Controls.ItemEventArg e)
        {
            Button_Search_Click(null, null);
        }

        private void ubar1_Button_Add_Click(object sender, Controls.ItemEventArg e)
        {
            AinTyp_NoTextEdit.EditValue = db.MaxAinTypNo;
            Guid id = Guid.NewGuid();
            AinTyp_IDTextEdit.EditValue = id.ToString();
        }

        private void t_AinTypsBindingSource_CurrentChanged(object sender, EventArgs e)
        {

        }

        private void t_AinTypsBindingSource_BindingComplete(object sender, BindingCompleteEventArgs e)
        {

        }

        private void ubar1_Load(object sender, EventArgs e)
        {

        }
    }
}