using C1.Win.C1FlexGrid;
using Check_Data.Forms;
using DevComponents.DotNetBar;
using DevComponents.DotNetBar.Metro;
using Framework;
using Framework.Data;
using Framework.Date;
using InputKey;
using ProShared.DBUdate;
 
using InvAcc.Forms.Shared;
using ProShared.GeneralM;using ProShared;
using InvAcc.Properties;
using ProShared.Stock_Data;
//using InvAcc.Reports;
//using InvAcc.Reports;
using Library.RepShow;
using Microsoft.SqlServer.Management.Common;
using Microsoft.SqlServer.Management.Smo;
using Microsoft.Win32;
using ShamelSynch;
using SSSDateTime.Date;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;
using ProShared;
using ProShared.Forms;
using InvAcc.Forms.Cards;

namespace InvAcc.Forms
{
    public partial  class Frm_Main : Form
    {
        public bool DateSync = false;
        private bool sTimer = true;
        private bool sTimerBackupElc = true;
        private bool sTimerBackupCount = true;
        private string _To = "";
        private string _Ps = "";
        public T_User Permmission
        {
            get
            {
                return permission;
            }
            set
            {
                if (value != null && value.UsrNo != "")
                {
                    permission = value;
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 0))
                    {
                        buttonItem_itmeCat.Enabled = false;
                    }
                    else
                    {
                        buttonItem_itmeCat.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 4))
                    {
                        buttonItem_items.Enabled = false;
                    }
                    else
                    {
                        buttonItem_items.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 8))
                    {
                        buttonItem_unit.Enabled = false;
                    }
                    else
                    {
                        buttonItem_unit.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 12))
                    {
                        buttonItem_Curncy.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Curncy.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 16))
                    {
                        buttonItem_CenterCost.Enabled = false;
                    }
                    else
                    {
                        buttonItem_CenterCost.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 20))
                    {
                        buttonItem_Branch.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Branch.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 24))
                    {
                        buttonItem_Mndob.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Mndob.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 28))
                    {
                        buttonItem_Store.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Store.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 32))
                    {
                        buttonItem_Vender.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Vender.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 36))
                    {
                        buttonItem_Supp.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Supp.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 40))
                    {
                        buttonItem_Employee.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Employee.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 44))
                    {
                        buttonItem_Waiter.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Waiter.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 48))
                    {
                        buttonItem_Driver.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Driver.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.FilStr, 52))
                    {
                        buttonItem_SpicialAddition.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SpicialAddition.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 0))
                    {
                        buttonItem_SalesInv.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SalesInv.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 4))
                    {
                        buttonItem_SalesReturn.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SalesReturn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 8))
                    {
                        buttonItem_PurchaseInv.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PurchaseInv.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 12))
                    {
                        buttonItem_PurchaseReturn.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PurchaseReturn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 16))
                    {
                        buttonItem_CustQutation.Enabled = false;
                    }
                    else
                    {
                        buttonItem_CustQutation.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 20))
                    {
                        buttonItem_SuppQutation.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SuppQutation.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 24))
                    {
                        buttonItem_PurchaseOrder.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PurchaseOrder.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 28))
                    {
                        buttonItem_OpenQuantities.Enabled = false;
                    }
                    else
                    {
                        buttonItem_OpenQuantities.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 32))
                    {
                        buttonItem_TransferIn.Enabled = false;
                    }
                    else
                    {
                        buttonItem_TransferIn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 36))
                    {
                        buttonItem_TransferOut.Enabled = false;
                    }
                    else
                    {
                        buttonItem_TransferOut.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 40))
                    {
                        buttonItem_PaymentOrder.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PaymentOrder.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 44))
                    {
                        buttonItem_PaymentOReturn.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PaymentOReturn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 48))
                    {
                        buttonItem_StockAdjustment.Enabled = false;
                    }
                    else
                    {
                        buttonItem_StockAdjustment.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 52))
                    {
                        buttonItem_Offer.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Offer.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 0))
                    {
                        buttonItem_AccCat.Enabled = false;
                    }
                    else
                    {
                        buttonItem_AccCat.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 4))
                    {
                        buttonItem_AccTree.Enabled = false;
                    }
                    else
                    {
                        buttonItem_AccTree.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 8))
                    {
                        buttonItem_SndGaid.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SndGaid.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 12))
                    {
                        buttonItem_SndCatch.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SndCatch.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 16))
                    {
                        buttonItem_SndExchange.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SndExchange.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 20))
                    {
                        buttonItem_Banks.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Banks.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 24))
                    {
                        buttonItem_BankBranch.Enabled = false;
                    }
                    else
                    {
                        buttonItem_BankBranch.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 28))
                    {
                        buttonItem_CatchAndPay.Enabled = false;
                    }
                    else
                    {
                        buttonItem_CatchAndPay.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 32))
                    {
                        buttonItem_GetAndSetMoney.Enabled = false;
                    }
                    else
                    {
                        buttonItem_GetAndSetMoney.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SndStr, 36))
                    {
                        buttonItem_Boxes.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Boxes.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 0))
                    {
                        buttonItem_ItemDataMain.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ItemDataMain.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 1))
                    {
                        buttonItem_ItemDataQty.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ItemDataQty.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 2))
                    {
                        buttonItem_ItemDataCost.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ItemDataCost.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 3))
                    {
                        buttonItem_ItemDataMove.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ItemDataMove.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 4))
                    {
                        buttonItem_FilesItemsWithDateExp.Enabled = false;
                        buttonItem_MovementItemsWithDateExp.Enabled = false;
                    }
                    else
                    {
                        buttonItem_FilesItemsWithDateExp.Enabled = true;
                        buttonItem_MovementItemsWithDateExp.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 5))
                    {
                        buttonItem_ItemDataImport.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ItemDataImport.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 6))
                    {
                        buttonItem_ItemDataSleep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ItemDataSleep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 7))
                    {
                        buttonItem_ItemDataPrintMove.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ItemDataPrintMove.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 8))
                    {
                        buttonItem_MoveSalse.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MoveSalse.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 9))
                    {
                        buttonItem_MoveSalesReturn.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MoveSalesReturn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 10))
                    {
                        buttonItem_MovePurchaseInv.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MovePurchaseInv.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 11))
                    {
                        buttonItem_MovePurchaseReturn.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MovePurchaseReturn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 12))
                    {
                        buttonItem_MoveCustQutation.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MoveCustQutation.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 13))
                    {
                        buttonItem_MoveSuppQutation.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MoveSuppQutation.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 14))
                    {
                        buttonItem_MovePurchaseOrder.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MovePurchaseOrder.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 15))
                    {
                        buttonItem_MoveOpenQuantities.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MoveOpenQuantities.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 16))
                    {
                        buttonItem_MoveTransferIn.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MoveTransferIn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 17))
                    {
                        buttonItem_MoveTransferOut.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MoveTransferOut.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 18))
                    {
                        buttonItem_MovePaymentOrder.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MovePaymentOrder.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 19))
                    {
                        buttonItem_MovePaymentOReturn.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MovePaymentOReturn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 20))
                    {
                        buttonItem_MoveStockAdjustment.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MoveStockAdjustment.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 21))
                    {
                        buttonItem_ClientBalance.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ClientBalance.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 22))
                    {
                        buttonItem_ClientSleep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ClientSleep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 23))
                    {
                        buttonItem_ClientAge.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ClientAge.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 24))
                    {
                        buttonItem_SupplierBalance.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SupplierBalance.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 25))
                    {
                        buttonItem_SupplierSleep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SupplierSleep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 26))
                    {
                        buttonItem_SupplierAge.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SupplierAge.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 27))
                    {
                        buttonItem_StoreCust.Enabled = false;
                    }
                    else
                    {
                        buttonItem_StoreCust.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 28))
                    {
                        buttonItem_StoreSupp.Enabled = false;
                    }
                    else
                    {
                        buttonItem_StoreSupp.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.StkRep, 29))
                    {
                        buttonItem_InvoiceReport.Enabled = false;
                    }
                    else
                    {
                        buttonItem_InvoiceReport.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 0))
                    {
                        buttonItem_RepAccRecords.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepAccRecords.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 1))
                    {
                        buttonItem_RepPrintAccRecords.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepPrintAccRecords.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 2))
                    {
                        buttonItem_RepAccDirctory.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepAccDirctory.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 3))
                    {
                        buttonItem_RepGeneralLed.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepGeneralLed.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 4))
                    {
                        buttonItem_RepGeneralDaily.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepGeneralDaily.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 5))
                    {
                        buttonItem_RepReviewBalanceOfMovement.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepReviewBalanceOfMovement.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 6))
                    {
                        buttonItem_RepReviewBalance.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepReviewBalance.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 7))
                    {
                        buttonItem_RepReviewTotaly.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepReviewTotaly.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 8))
                    {
                        buttonItem_RepReviewBalanceOfTotaly.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepReviewBalanceOfTotaly.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 9))
                    {
                        buttonItem_RepTradingAcc.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepTradingAcc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 10))
                    {
                        buttonItem_RepProfitAndLossAcc.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepProfitAndLossAcc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 11))
                    {
                        buttonItem_RepBalanceSheet.Enabled = false;
                        // buttonItem_RepBalanceSheet2.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepBalanceSheet.Enabled = true;
                        // buttonItem_RepBalanceSheet2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 12))
                    {
                        buttonItem_SNDReport.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SNDReport.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.AccRep, 13))
                    {
                        buttonItem_AccountTax.Enabled = false;
                    }
                    else
                    {
                        buttonItem_AccountTax.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 0))
                    {
                        radialMenuItem_Setting.Enabled = false;
                        //radialMenuItem_Setting2.Enabled = false;
                    }
                    else
                    {
                        radialMenuItem_Setting.Enabled = true;
                        //radialMenuItem_Setting2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 1))
                    {
                        radialMenuItem_Permisson.Enabled = false;
                        //radialMenuItem_Permisson2.Enabled = false;
                    }
                    else
                    {
                        radialMenuItem_Permisson.Enabled = true;
                        //radialMenuItem_Permisson2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 2))
                    {
                        bubbleButton_SelectBranch.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_SelectBranch.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 3))
                    {
                        radialMenuItem_Backup.Enabled = false;
                        // radialMenuItem_Backup2.Enabled = false;
                    }
                    else
                    {
                        radialMenuItem_Backup.Enabled = true;
                        //   radialMenuItem_Backup2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 4))
                    {
                        radialMenuItem_Restore.Enabled = false;
                        //     radialMenuItem_Restore2.Enabled = false;
                    }
                    else
                    {
                        radialMenuItem_Restore.Enabled = true;
                        //radialMenuItem_Restore2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 6))
                    {
                        //radialMenuItem_AlarmRequest.Enabled = false;
                        radialMenuItem_AlarmRequest2.Enabled = false;
                    }
                    else
                    {
                        //radialMenuItem_AlarmRequest.Enabled = true;
                        radialMenuItem_AlarmRequest2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 7))
                    {
                        //radialMenuItem_AlarmDateExp.Enabled = false;
                        radialMenuItem_AlarmDateExp2.Enabled = false;
                    }
                    else
                    {
                        //radialMenuItem_AlarmDateExp.Enabled = true;
                        radialMenuItem_AlarmDateExp2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 8))
                    {
                        //radialMenuItem_CloseTheYear.Enabled = false;
                        radialMenuItem_CloseTheYear2.Enabled = false;
                    }
                    else
                    {
                        //radialMenuItem_CloseTheYear.Enabled = true;
                        radialMenuItem_CloseTheYear2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 9))
                    {
                        radialMenuItem_Reg.Enabled = false;
                        // radialMenuItem_Reg2.Enabled = false;
                    }
                    else
                    {
                        radialMenuItem_Reg.Enabled = true;
                        //   radialMenuItem_Reg2.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 10))
                    {
                        bubbleButton_BarcodSetting.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_BarcodSetting.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 11))
                    {
                        bubbleButton_InvSetting.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_InvSetting.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 12))
                    {
                        bubbleButton_GaidSetting.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_GaidSetting.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 16))
                    {
                        bubbleButton_TransData.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_TransData.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 25))
                    {
                        buttonItem_OpenAcc.Enabled = false;
                    }
                    else
                    {
                        buttonItem_OpenAcc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 26))
                    {
                        bubbleButton_SMS.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_SMS.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 27))
                    {
                        buttonItem_CalcSalary.Enabled = false;
                    }
                    else
                    {
                        buttonItem_CalcSalary.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 28))
                    {
                        buttonItem_RelaySalary.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RelaySalary.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 29))
                    {
                        buttonItem_UnRealy.Enabled = false;
                    }
                    else
                    {
                        buttonItem_UnRealy.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 30))
                    {
                        buttonItem_EmployeeSalaryRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_EmployeeSalaryRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 31))
                    {
                        bubbleButton_UserPoint.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_UserPoint.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 32))
                    {
                        bubbleButton_UserPointReturn.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_UserPointReturn.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 35))
                    {
                        buttonItem_PartnerAcc.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PartnerAcc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 36))
                    {
                        bubbleButton_SetYearAcc.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_SetYearAcc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 37))
                    {
                        bubbleButton_RepairPurshas.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_RepairPurshas.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 38))
                    {
                        bubbleButton_RepairSales.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_RepairSales.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.SetStr, 44))
                    {
                        bubbleButton_RepPoints.Enabled = false;
                    }
                    else
                    {
                        bubbleButton_RepPoints.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 0))
                    {
                        buttonItem_Emp.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Emp.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 4))
                    {
                        buttonItem_Dept.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Dept.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 8))
                    {
                        buttonItem_Part.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Part.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 12))
                    {
                        buttonItem_Job.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Job.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 16))
                    {
                        buttonItem_Gur.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Gur.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 20))
                    {
                        buttonItem_Projects.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Projects.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 24))
                    {
                        buttonItem_Nation.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Nation.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 28))
                    {
                        buttonItem_Contract.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Contract.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 32))
                    {
                        buttonItem_Vac.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Vac.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 36))
                    {
                        buttonItem_City.Enabled = false;
                    }
                    else
                    {
                        buttonItem_City.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 40))
                    {
                        buttonItem_Religen.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Religen.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 44))
                    {
                        buttonItem_Cars.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Cars.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_FilStr, 48))
                    {
                        buttonItem_Transactions.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Transactions.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 0))
                    {
                        buttonItem_Add.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Add.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 4))
                    {
                        buttonItem_Dis.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Dis.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 8))
                    {
                        buttonItem_VacOp.Enabled = false;
                    }
                    else
                    {
                        buttonItem_VacOp.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 12))
                    {
                        buttonItem_Tickit.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Tickit.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 16))
                    {
                        buttonItem_Advanc.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Advanc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 20))
                    {
                        buttonItem_CallPhone.Enabled = false;
                    }
                    else
                    {
                        buttonItem_CallPhone.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 24))
                    {
                        buttonItem_Rewar.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Rewar.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 28))
                    {
                        buttonItem_Authriz.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Authriz.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 32))
                    {
                        buttonItem_Secretariats.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Secretariats.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 36))
                    {
                        buttonItem_VisaGoBack.Enabled = false;
                    }
                    else
                    {
                        buttonItem_VisaGoBack.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 40))
                    {
                        buttonItem_EndServic.Enabled = false;
                    }
                    else
                    {
                        buttonItem_EndServic.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_MovStr, 44))
                    {
                        buttonItem_Commentary.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Commentary.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 0))
                    {
                        buttonItem_CalcSal.Enabled = false;
                    }
                    else
                    {
                        buttonItem_CalcSal.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 0))
                    {
                        buttonItem_CalcSalByEmpNo.Enabled = false;
                    }
                    else
                    {
                        buttonItem_CalcSalByEmpNo.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 1))
                    {
                        buttonItem_RelaySal.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RelaySal.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 2))
                    {
                        buttonItem_BackRelay.Enabled = false;
                    }
                    else
                    {
                        buttonItem_BackRelay.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 3))
                    {
                        buttonItem_PrintSal.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PrintSal.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 4))
                    {
                        buttonItem_SalaryAdd.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SalaryAdd.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 6))
                    {
                        buttonItem_EmpSalRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_EmpSalRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 7))
                    {
                        buttonItem_AllowncRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_AllowncRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_SalStr, 8))
                    {
                        buttonItem_GenAcc.Enabled = false;
                    }
                    else
                    {
                        buttonItem_GenAcc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 0))
                    {
                        //buttonItem_EmpsRep.Enabled = false;
                    }
                    else
                    {
                        //b//uttonItem_EmpsRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 1))
                    {
                        buttonItem_IDRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_IDRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 2))
                    {
                        buttonItem_PassportRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PassportRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 3))
                    {
                        buttonItem_FormRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_FormRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 4))
                    {
                        buttonItem_LicensRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_LicensRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 5))
                    {
                        buttonItem_MidicAllowncRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_MidicAllowncRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 6))
                    {
                        buttonItem_ReportUpdate.Enabled = false;
                    }
                    else
                    {
                        buttonItem_ReportUpdate.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 7))
                    {
                        buttonItem_RepDocAllownc.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepDocAllownc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 8))
                    {
                        buttonItem_VacRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_VacRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 9))
                    {
                        buttonItem_TicketRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_TicketRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 10))
                    {
                        buttonItem_AutizRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_AutizRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 11))
                    {
                        buttonItem_SecretariatsRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_SecretariatsRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 12))
                    {
                        buttonItem_VisaGoBackRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_VisaGoBackRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 13))
                    {
                        buttonItem_EndServicRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_EndServicRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 14))
                    {
                        buttonItem_AddRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_AddRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 15))
                    {
                        buttonItem_AwardRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_AwardRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 16))
                    {
                        buttonItem_AdvancRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_AdvancRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 17))
                    {
                        buttonItem_Phons.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Phons.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 18))
                    {
                        buttonItem_DisRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_DisRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 19))
                    {
                        buttonItem_CommentaryRep.Enabled = false;
                    }
                    else
                    {
                        buttonItem_CommentaryRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_RepStr, 20))
                    {
                        buttonItem_RepCars.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepCars.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_GenStr, 0))
                    {
                        buttonItem_Attend.Enabled = false;
                    }
                    else
                    {
                        buttonItem_Attend.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_GenStr, 10))
                    {
                        buttonItem_PassPortForm.Enabled = false;
                    }
                    else
                    {
                        buttonItem_PassPortForm.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_GenStr, 11))
                    {
                        buttonItem_UpdateDoc.Enabled = false;
                    }
                    else
                    {
                        buttonItem_UpdateDoc.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Emp_GenStr, 12))
                    {
                        buttonItem_RepVacNeedProv.Enabled = false;
                    }
                    else
                    {
                        buttonItem_RepVacNeedProv.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Eqar_RepStr, 5))
                    {
                        //buttonItem_RentGetRep.Enabled = false;
                    }
                    else
                    {
                        //  buttonItem_RentGetRep.Enabled = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.Eqar_GenStr, 0))
                    {
                        //   buttonItem_RendDesigne.Enabled = false;
                    }
                    else
                    {
                        //     buttonItem_RendDesigne.Enabled = true;
                    }
                    if (VarGeneral.gUserName == "runsetting" && VarGeneral.UserID != 1)
                    {
                        radialMenuItem_Restore.Visible = false;
                        radialMenuItem_NewDataBase.Visible = false;
                        radialMenuItem_DeleteDataBase.Visible = false;
                        radialMenuItem_PathSetting.Visible = false;
                        bubbleButton_ReportOnline.Visible = false;
                        bubbleButton_SetYearAcc.Visible = false;
                        //radialMenuItem_CloseTheYear.Visible = false;
                        radialMenuItem_CloseTheYear2.Visible = false;
                    }
                }
            }
        }
        private void CheckInvReapir()
        {
            try
            {
                Stock_DataDataContext tr = new Stock_DataDataContext(VarGeneral.BranchCS);
                if (tr.T_INVDET_Repairs.Select((T_INVDET_Repair t) => t).ToList().Count > 0)
                {
                    //label_AlarmBackup.Text = "...هناك أصناف تم تعديل تكلفتها  \n يرجى عمل صيانة للمشتريات لتحديث أسعار التكلفة ..";
                    //label_AlarmBackup.Visible = true;
                    //button_AlarmBackupClose.Visible = true;
                    //label_AlarmBackup.BringToFront();
                    //button_AlarmBackupClose.BringToFront();
                }
            }
            catch
            {
            }
        }
        private void FillItemPRice()
        {
            try
            {
                if (Screen.AllScreens.Length <= 1)
                {
                    return;
                }
                Screen[] allScreens = Screen.AllScreens;
                foreach (Screen screen in allScreens)
                {
                    if (!screen.Primary)
                    {
                        FrmItemPriceMonitor frmItemePRice = new FrmItemPriceMonitor();
                        frmItemePRice.StartPosition = FormStartPosition.CenterScreen;
                        if (screen != null)
                        {
                            frmItemePRice.Location = screen.WorkingArea.Location;
                            frmItemePRice.Size = new Size(screen.WorkingArea.Width, screen.WorkingArea.Height);
                            frmItemePRice.Tag = LangArEn;
                            //frmItemePRice.MdiParent = this;
                            //childmin();
                            showChild(frmItemePRice);
                        }
                    }
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("FillItemPRice:", error, enable: true);
            }
        }
#pragma warning disable CS0414 // The field 'Frm_Main.vsz' is assigned but its value is never used
        string vsz = @"FrmWaiterMenueFrmCalacSalaryFrmRelaySalariesFrmInvSaleFrmInvSalesReturnFrmInvPuchaesFrmInvPuchaesReturnFrmCarFixingOrderFrmCustQutationFrmSuppQutationFMPurchaseOrderFMOpenQuantitiesFrmTransferInFrmTransferOutFMPaymentOReturnFrmInvFactFMStockAdjustmentFrmCheckFrmGetSetMoneyFrmReportsViewerFMReceiptVoucherCustSuppFRSuppBalanceFRCustBalanceFMJournalVoucherFMReceiptVoucherFMPaymentVoucherFrmOpenAccFRItemsDataFRItemsDataExpirFRItemsTransfDatExpirFRAccountFRAccountTrancFRAccountTransFRInvoiceFRItemsTransf";
#pragma warning restore CS0414 // The field 'Frm_Main.vsz' is assigned but its value is never used
        class parameterws
        {
            public bool pos;
            public string vtitle;
            public int intyp;
            public int invtype;
            public bool StockOnly;
            public int AccTyp;
            public int vTabAutoAlarm;
            public string name;
            public parameterws(string s) { name = s; }
        }
        List<parameterws> par = new List<parameterws>();
        int pargetindex(string s)
        {
            for (int i = 0; i < par.Count(); i++)
            {
                if (par[i].name == s) return i;
            }
            return -1;
        }
        int runtimefrno = 1;
        void showChild(Form f)
        {
            if (IsFormOpen(f)) { f.Dispose(); return; }
            VarGeneral.UserLang =LangArEn;
            VarGeneral.GeneralPrinter = null;
           // Stock_DataDataContext.sp = 1;
            f.Name += runtimefrno.ToString(); runtimefrno++;
            f.TopLevel = false;
            f.TopMost = false;
            //if (vsz.Contains(f.Name))
            {
                parameterws fs = new parameterws(f.Name);
                fs.pos = VarGeneral
                    ._IsPOS;
                fs.intyp = VarGeneral.InvTyp;
                fs.invtype = VarGeneral.InvType;
                fs.StockOnly = VarGeneral.StockOnly;
                fs.vtitle = VarGeneral.vTitle;
                fs.AccTyp = VarGeneral.AccTyp;
                fs.vTabAutoAlarm = VarGeneral.vTabAutoAlarm;
                if (!par.Contains(fs))
                { par.Add(fs); }
                int fsi = pargetindex(f.Name);
                KeyValuePair<string, int> k = new KeyValuePair<string, int>(f.Name, fsi);
                if (!indexinv.Contains(k))
                { indexinv.Add(k); }
            }
            tabControl1.TabPages.Add(f);
            f.FormClosed += formclosing;
            if (kkk == true)
            {
                expandablePanel3.SendToBack();
                tabControl1.BringToFront();
            }
         Stock_DataDataContext.sp = 0;
        }
        IDictionary<string, int> indexinv = new Dictionary<string, int>();
        private void formclosing(object sender, FormClosedEventArgs e)
        {
            string s = ((Form)sender).Name;
            int fsi = pargetindex(s);
            par.Remove(par[fsi]);
            indexinv.Remove(s);
            if (tabControl1.TabPages.Count == 0)
            {
                if (kkk == true)
                {
                    expandablePanel3.BringToFront();
                }

            }  (sender as Form).Dispose();
        }
        void childmin()
        {
            if (this.ActiveMdiChild != null) this.ActiveMdiChild.WindowState = FormWindowState.Minimized;
        }
        private Stock_DataDataContext db
        {
            get
            {
                if (dbInstance == null)
                {
                    dbInstance = new Stock_DataDataContext(VarGeneral.BranchCS);
                }
                return dbInstance;
            }
        }
        private string _To2 = "";
        private string _Ps2 = "";
        //  private HijriGreg.HijriGregDates n = new HijriGreg.HijriGregDates();
        private ReportOnline _RepOnline;
        private Rate_DataDataContext dbc
        {
            get
            {
                if (dbInstanceRate == null)
                {
                    dbInstanceRate = new Rate_DataDataContext(VarGeneral.BranchRt);
                }
                return dbInstanceRate;
            }
        }
        private void LangChange(int LangVal)
        {
            try {    VarGeneral.UserLang = LangVal;
                ProShared.GeneralM.VarGeneral.currentintlanguage = LangVal;
                LangArEn = LangVal;
                button_RepInvNetTot.Text = (LangArEn == 0 ? "تقرير اجماليات الفواتير" : "Net Totals of Invoices");
            try
                {
                    //SqlConnection conn = new SqlConnection(VarGeneral.BranchCS);
                    //Server server = new Server(new ServerConnection(conn));
                    //try
                    //{
                    //    server.ConnectionContext.ExecuteNonQuery(DbUpdates.S_T_INVHED_INSERT_Create);
                    //    server.ConnectionContext.ExecuteNonQuery(VarGeneral.InvCreateInsertScript);
                    //}
                    //catch
                    //{
                    //}
                    //try
                    //{
                    //    server.ConnectionContext.ExecuteNonQuery(DbUpdates.S_T_INVHED_UPDATE_Create);
                    //    server.ConnectionContext.ExecuteNonQuery(VarGeneral.InvCreateUpdateScript);
                    //}
                    //catch
                    //{
                    //}
                    //try
                    //{
                    //    server.ConnectionContext.ExecuteNonQuery(DbUpdates.T_S_INVDET_INSERT_ALTER);
                    //    server.ConnectionContext.ExecuteNonQuery("  CREATE PROCEDURE [dbo].[S_T_INVDET_INSERT](   \r\n                                                                 @InvDet_ID INT OUTPUT,\r\n                                                                 @InvNo VARCHAR (10)=NULL,\r\n                                                                 @InvId INT =NULL,\r\n                                                                 @InvSer INT =NULL,\r\n                                                                 @ItmNo VARCHAR (50)=NULL,\r\n                                                                 @Cost FLOAT =NULL,\r\n                                                                 @Qty FLOAT =NULL,\r\n                                                                 @ItmDes VARCHAR (50)=NULL,\r\n                                                                 @ItmUnt VARCHAR (100)=NULL,\r\n                                                                 @ItmDesE VARCHAR (50)=NULL,\r\n                                                                 @ItmUntE VARCHAR (100)=NULL,\r\n                                                                 @ItmUntPak FLOAT =NULL,\r\n                                                                 @StoreNo INT=NULL,\r\n                                                                 @Price FLOAT =NULL,\r\n                                                                 @Amount FLOAT =NULL,\r\n                                                                 @RealQty FLOAT =NULL,\r\n                                                                 @itmInvDsc FLOAT =NULL,\r\n                                                                 @DatExper VARCHAR (11)=NULL,\r\n                                                                 @ItmDis FLOAT =NULL,\r\n                                                                 @ItmTyp INT =NULL,\r\n                                                                 @ItmIndex INT =NULL,\r\n                                                                 @ItmWight FLOAT =NULL,\r\n                                                                 @ItmWight_T FLOAT =NULL,\r\n                                                                 @ItmAddCost FLOAT =NULL,\r\n                                                                 @RunCod VARCHAR (100)=NULL,\r\n                                                                 @LineDetails VARCHAR (250)=NULL,\r\n                                                                 @Serial_Key VARCHAR (100)=NULL,\r\n                                                                 @ItmTax FLOAT =NULL,\r\n                                                                 @OfferTyp INT =NULL                                              \r\n                                                          )\r\n                                                          AS\r\n                                                          BEGIN\r\n                                                          INSERT INTO T_INVDET(\r\n                                                                 InvNo,\r\n                                                                 InvId,\r\n                                                                 InvSer,\r\n                                                                 ItmNo,\r\n                                                                 Cost,\r\n                                                                 Qty,\r\n                                                                 ItmDes,\r\n                                                                 ItmUnt,\r\n                                                                 ItmDesE,\r\n                                                                 ItmUntE,\r\n                                                                 ItmUntPak,\r\n                                                                 StoreNo,\r\n                                                                 Price,\r\n                                                                 Amount,\r\n                                                                 RealQty,\r\n                                                                 itmInvDsc,\r\n                                                                 DatExper,\r\n                                                                 ItmDis,\r\n                                                                 ItmTyp,\r\n                                                                 ItmIndex,\r\n                                                                 ItmWight,\r\n                                                                 ItmWight_T,\r\n                                                                 ItmAddCost,\r\n                                                                 RunCod,\r\n                                                                 LineDetails,\r\n                                                                 Serial_Key,\r\n                                                                 ItmTax,\r\n                                                                OfferTyp  \r\n                                                          )\r\n                                                          VALUES\r\n                                                          (\r\n                                                                 \r\n                                                                @InvNo,\r\n                                                                @InvId,\r\n                                                                @InvSer,\r\n                                                                @ItmNo,\r\n                                                                @Cost,\r\n                                                                @Qty,\r\n                                                                @ItmDes,\r\n                                                                @ItmUnt,\r\n                                                                @ItmDesE,\r\n                                                                @ItmUntE,\r\n                                                                @ItmUntPak,\r\n                                                                @StoreNo,\r\n                                                                @Price,\r\n                                                                @Amount,\r\n                                                                @RealQty,\r\n                                                                @itmInvDsc,\r\n                                                                @DatExper,\r\n                                                                @ItmDis,\r\n                                                                @ItmTyp,\r\n                                                                @ItmIndex,\r\n                                                                @ItmWight,\r\n                                                                @ItmWight_T,\r\n                                                                @ItmAddCost,\r\n                                                                @RunCod,\r\n                                                                @LineDetails,\r\n                                                                @Serial_Key,\r\n                                                                @ItmTax,\r\n                                                                @OfferTyp\r\n                                                          )\r\n                                                          SELECT @InvDet_ID = SCOPE_IDENTITY()\r\n                                                            declare @ItemCount int  \r\n                                                            declare @InvTyp int\r\n                                                            declare @MndID int\r\n                                                            declare @CusVenNo varchar(30)\r\n                                                            declare @ItemCountMnd int \r\n                                                            declare @ItemCountCust int \r\n\t\t                                                    select @ItemCount = Count(*) from T_STKSQTY where itmNo = @ItmNo and storeNo =@StoreNo;\r\n                                                            select @InvTyp = InvTyp from T_INVHED where InvHed_ID = @InvId;\r\n                                                            if((@InvTyp != 7 and @InvTyp != 8 and @InvTyp != 9 and @InvTyp != 21) and @ItmTyp <> 3)\r\n                                                            begin\r\n\t\t\t                                                          if(@ItmTyp <> 2)\r\n\t\t\t                                                          begin\r\n\t\t                                                                    Update T_Items SET OpenQty = OpenQty+@RealQty WHERE Itm_No = @ItmNo;\r\n\t\t\t                                                                if(@ItemCount > 0)\r\n\t\t\t                                                                begin\r\n\t\t\t                                                                Update T_STKSQTY SET stkQty = stkQty+@RealQty WHERE itmNo = @ItmNo and storeNo = @StoreNo;\r\n\t\t\t                                                                end\r\n\r\n\t\t\t                                                                if(@ItemCount = 0)\r\n\t\t\t                                                                begin \r\n\t\t\t                                                                INSERT INTO T_STKSQTY(itmNo,storeNo,stkQty,stkInt) VALUES(@ItmNo,@StoreNo,@RealQty,0);\r\n\t\t\t                                                                END\r\n                                                                            if(@InvTyp = 14)\r\n                                                                            begin\r\n\t\t\t\t                                                                Update T_STKSQTY SET stkInt = stkInt+@RealQty WHERE itmNo = @ItmNo and storeNo = @StoreNo;\r\n                                                                            end\r\n\r\n\t\t\t                                                                select @ItemCount = Count(*) from T_QTYEXP where itmNo = @ItmNo and storeNo =@StoreNo and (DatExper = @DatExper and RunCod = @RunCod);\r\n\r\n\t\t\t                                                                if(@ItemCount > 0 and (@DatExper <> '' or @RunCod <> ''))\r\n\t\t\t                                                                begin\r\n\t\t\t                                                                Update T_QTYEXP SET stkQty = stkQty+@RealQty WHERE itmNo = @ItmNo and storeNo = @StoreNo and (DatExper = @DatExper and RunCod = @RunCod);\r\n\t\t\t                                                                end\r\n\r\n\t\t\t                                                                if(@ItemCount = 0 and (@DatExper <> '' or @RunCod <> ''))\r\n\t\t\t                                                                begin \r\n\t\t\t                                                                INSERT INTO T_QTYEXP(itmNo,storeNo,DatExper,stkQty,RunCod) VALUES(@ItmNo,@StoreNo,@DatExper,@RealQty,@RunCod);\r\n\t\t\t                                                                END\r\n                                                                END\r\n\t\t\t                                                          if(@InvTyp = 17)\r\n\t\t\t\t                                                          begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       if(@MndID > 0 )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                    begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                              select @ItemCountMnd = Count(*) from T_StoreMnd where itmNo = @ItmNo and storeNo =@StoreNo and MndNo = @MndID;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      if(@ItemCountMnd > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       Update T_StoreMnd SET stkQty = stkQty + abs(@RealQty) WHERE itmNo = @ItmNo and storeNo = @StoreNo and MndNo = @MndID;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      end\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      if(@ItemCountMnd = 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      begin \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,MndNo) VALUES(@ItmNo,@StoreNo,abs(@RealQty),0,@MndID);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                    END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      else\r\n\t\t\t\t\t\t\t\t\t                                            begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                             select @ItemCountCust = Count(*) from T_StoreMnd where itmNo = @ItmNo and storeNo =@StoreNo and CusVenNo = @CusVenNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      if(@ItemCountCust > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       Update T_StoreMnd SET stkQty = stkQty + abs(@RealQty) WHERE itmNo = @ItmNo and storeNo = @StoreNo and CusVenNo = @CusVenNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      end\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      if(@ItemCountCust = 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      begin \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,CusVenNo) VALUES(@ItmNo,@StoreNo,abs(@RealQty),0,@CusVenNo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                    END\r\n\t\t\t\t                                                          END\t\r\n\t\t\t                                                          if(@InvTyp = 20)\r\n\t\t\t\t                                                          begin\r\n\t\t\t\t                                                              select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t                        if(@MndID > 0 )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                    begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                     select @ItemCountMnd = Count(*) from T_StoreMnd where itmNo = @ItmNo and storeNo =@StoreNo and MndNo = @MndID;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      if(@ItemCountMnd > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       Update T_StoreMnd SET stkQty = stkQty + (-@RealQty) WHERE itmNo = @ItmNo and storeNo = @StoreNo and MndNo = @MndID;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      end\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      if(@ItemCountMnd = 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      begin \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,MndNo) VALUES(@ItmNo,@StoreNo,-@RealQty,0,@MndID);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                     END\r\n\t\t\t\t\t\t\t                                                     else\r\n\t\t\t\t\t\t\t                                                         begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                     select @ItemCountCust = Count(*) from T_StoreMnd where itmNo = @ItmNo and storeNo =@StoreNo and CusVenNo = @CusVenNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      if(@ItemCountCust > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       Update T_StoreMnd SET stkQty = stkQty + (-@RealQty) WHERE itmNo = @ItmNo and storeNo = @StoreNo and CusVenNo = @CusVenNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      end\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      if(@ItemCountCust = 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      begin \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                       INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,CusVenNo) VALUES(@ItmNo,@StoreNo,-@RealQty,0,@CusVenNo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                      END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                     END\r\n\t\t\t\t                                                          end\r\n                                                            end\r\n                                                          RETURN @InvDet_ID\r\n                                                          END");
                    //}
                    //catch (SqlException EX)
                    //{
                    //    MessageBox.Show(EX.Message);
                    //}
                    //try
                    //{
                    //    server.ConnectionContext.ExecuteNonQuery(DbUpdates.S_T_INVDET_DELETE);
                    //    server.ConnectionContext.ExecuteNonQuery("      ALTER PROCEDURE [dbo].[S_T_INVDET_DELETE](\r\n                                                      @InvDet_ID INT \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n                                        declare @InvTyp int \r\n                                        declare @InvId int\r\n                                        declare @MndID int\r\n                                        declare @CusVenNo varchar(30)\r\n                                        declare @PaymentOrderTyp int\r\n                                        declare @ItemCountMnd int \r\n                                        declare @MndKind int \r\n                                         \r\n                                        select @InvId = InvId from T_INVDET where InvDet_ID = @InvDet_ID;\r\n\r\n                                        select @InvTyp = InvTyp from T_INVHED where InvHed_ID = @InvId;\r\n\r\n                                        select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n                                        \r\n                                        select @PaymentOrderTyp = PaymentOrderTyp from T_INVHED where InvHed_ID = @InvId;\r\n\r\n                                        select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n                                        \r\n                                        select @MndKind = Mnd_Typ from T_Mndob where Mnd_ID = @MndID;\r\n                                        \r\n                                        if(@InvTyp != 7 and @InvTyp != 8 and @InvTyp != 9 and @InvTyp != 21)\r\n                                        begin\r\n                                             if((@PaymentOrderTyp <= 0 or @PaymentOrderTyp is null) or  ((@PaymentOrderTyp = 1 or @PaymentOrderTyp = 2) and (@InvTyp = 17 or @InvTyp = 20) ))\r\n\t\t                                      begin\r\n\t\t\t                                      UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_INVDET.RealQty \r\n\t\t\t                                      From T_INVDET Left Join T_Items ON (T_INVDET.ItmNo = T_Items.Itm_No) \r\n\t\t\t                                      where (InvDet_ID = @InvDet_ID) and (T_INVDET.ItmTyp <> 3) and (T_INVDET.ItmTyp <> 2);\r\n\r\n\t\t\t                                      UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_INVDET.RealQty \r\n\t\t\t                                      From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                      where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                    \t\t\t  \r\n\t\t\t                                      UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_INVDET.RealQty \r\n\t\t\t                                      From  T_INVDET Left Join T_QTYEXP ON (T_INVDET.ItmNo = T_QTYEXP.itmNo) AND (T_INVDET.StoreNo = T_QTYEXP.storeNo) AND (T_INVDET.DatExper = T_QTYEXP.DatExper and T_INVDET.RunCod = T_QTYEXP.RunCod )\r\n\t\t\t                                      where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                             end\r\n                                             if(@InvTyp = 14)\r\n\t\t                                      begin\r\n\t\t\t                                      UPDATE T_STKSQTY SET T_STKSQTY.stkInt = T_STKSQTY.stkInt - T_INVDET.RealQty \r\n\t\t\t                                      From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                      where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n\t\t                                      end\r\n                                         if(@InvTyp = 17)\r\n\t                                     begin\r\n\r\n                                    \t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_INVDET.RealQty)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = @MndID ;\r\n\t\t\t\t                                      \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_INVDET.RealQty)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = @CusVenNo ;\r\n                                         end\r\n                                         \r\n                                         if(@InvTyp = 20)\r\n\t                                     begin\r\n                                    \t\t\t\t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = @MndID ;\r\n\t\t\t\t\t                                      \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = @CusVenNo ;\r\n                                         end\r\n                                        end\r\n                                         \r\n                                          DELETE FROM T_INVDET\r\n                                          WHERE      @InvDet_ID = InvDet_ID    \r\n\r\n                                          RETURN\r\n                                          END");
                    //}
                    //catch
                    //{
                    //}
                    //try
                    //{
                    //    server.ConnectionContext.ExecuteNonQuery(DbUpdates.S_T_INVHED_DELETE);
                    //    server.ConnectionContext.ExecuteNonQuery(" ALTER PROCEDURE [dbo].[S_T_INVHED_DELETE](\r\n                                              @InvHed_ID INT \r\n                                  )\r\n                                  AS\r\n                                  BEGIN\r\n                                  declare @InvTyp int\r\n                                  declare @MndID int\r\n                                  declare @CusVenNo varchar(30)\r\n                                  declare @PaymentOrderTyp int\r\n                                  declare @MndKind int \r\n                                       \r\n                                  select @InvTyp = InvTyp from T_INVHED where InvHed_ID = @InvHed_ID;\r\n\r\n                                select @MndID = MndNo from T_INVHED where InvHed_ID = @InvHed_ID;\r\n                                \r\n                                select @PaymentOrderTyp = PaymentOrderTyp from T_INVHED where InvHed_ID = @InvHed_ID;\r\n\r\n                                select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvHed_ID;\r\n\r\n                                select @MndKind = Mnd_Typ from T_Mndob where Mnd_ID = @MndID;\r\n                                \r\n                                  if(@InvTyp != 7 and @InvTyp != 8 and @InvTyp != 9 and @InvTyp != 21)\r\n                                begin\r\n                                  if(@PaymentOrderTyp <= 0 or @PaymentOrderTyp is null)\r\n\t                              begin\r\n\t\t                              UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_INVDET.RealQty \r\n\t\t                              From T_INVDET Left Join T_Items ON (T_INVDET.ItmNo = T_Items.Itm_No) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) \r\n\t\t                              where (InvHed_ID = @InvHed_ID) and (T_INVDET.ItmTyp <> 3) and (T_INVDET.ItmTyp <> 2);\r\n\r\n\t\t                              UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_INVDET.RealQty \r\n\t\t                              From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t                              where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                            \t\t  \r\n\t\t                              UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_INVDET.RealQty \r\n\t\t                              From  T_INVDET Left Join T_QTYEXP ON (T_INVDET.ItmNo = T_QTYEXP.itmNo) AND (T_INVDET.StoreNo = T_QTYEXP.storeNo) AND (T_INVDET.DatExper = T_QTYEXP.DatExper and T_INVDET.RunCod = T_QTYEXP.RunCod ) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)\r\n\t\t                              where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                  end\r\n                                 if(@InvTyp = 17)\r\n\t                             begin\r\n                                         if(@PaymentOrderTyp > 0)\r\n\t                                      begin\r\n \t\t\t\t\t\t\t\t\t\t      UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From T_INVDET Left Join T_Items ON (T_INVDET.ItmNo = T_Items.Itm_No) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) \r\n\t\t\t\t\t\t\t\t\t\t      where (InvHed_ID = @InvHed_ID) and (T_INVDET.ItmTyp <> 3) and (T_INVDET.ItmTyp <> 2);\r\n\r\n\t\t\t\t\t\t\t\t\t\t      UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t      where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                \t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t      UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From  T_INVDET Left Join T_QTYEXP ON (T_INVDET.ItmNo = T_QTYEXP.itmNo) AND (T_INVDET.StoreNo = T_QTYEXP.storeNo) AND (T_INVDET.DatExper = T_QTYEXP.DatExper and T_INVDET.RunCod = T_QTYEXP.RunCod ) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)\r\n\t\t\t\t\t\t\t\t\t\t      where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                          end\r\n\t\t\t\t\t\t\t\t\t\t  select @MndID = MndNo from T_INVHED where InvHed_ID = @InvHed_ID;  \t  \r\n\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_INVDET.RealQty)\r\n\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t  where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = @MndID ;\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvHed_ID;  \t  \r\n\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_INVDET.RealQty)\r\n\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t  where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = @CusVenNo ;\r\n                                 end\r\n                                 \r\n                                 if(@InvTyp = 20)\r\n\t                             begin\r\n                                         if(@PaymentOrderTyp > 0)\r\n\t                                      begin\r\n \t\t\t\t\t\t\t\t\t\t      UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From T_INVDET Left Join T_Items ON (T_INVDET.ItmNo = T_Items.Itm_No) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) \r\n\t\t\t\t\t\t\t\t\t\t      where (InvHed_ID = @InvHed_ID) and (T_INVDET.ItmTyp <> 3) and (T_INVDET.ItmTyp <> 2);\r\n\r\n\t\t\t\t\t\t\t\t\t\t      UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t      where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                \t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t      UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From  T_INVDET Left Join T_QTYEXP ON (T_INVDET.ItmNo = T_QTYEXP.itmNo) AND (T_INVDET.StoreNo = T_QTYEXP.storeNo) AND (T_INVDET.DatExper = T_QTYEXP.DatExper and T_INVDET.RunCod = T_QTYEXP.RunCod ) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)\r\n\t\t\t\t\t\t\t\t\t\t      where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                          end\r\n\t\t\t\t\t\t\t\t\t\t\t\t  select @MndID = MndNo from T_INVHED where InvHed_ID = @InvHed_ID;  \t  \r\n\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t  where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = @MndID ;\r\n\t\t\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvHed_ID;  \t  \r\n\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t  where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = @CusVenNo ;\r\n                                 end\r\n                             \r\n                                  if(@InvTyp = 14)\r\n                                  begin\r\n\t\t                              UPDATE T_STKSQTY SET T_STKSQTY.stkInt = T_STKSQTY.stkInt - T_INVDET.RealQty \r\n\t\t                              From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t                              where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                  end       \r\n                                  \r\n                                end\r\n                                  UPDATE T_INVHED SET T_INVHED.IfDel = 1 \r\n                                  FROM  T_INVHED\r\n                                  WHERE  @InvHed_ID = InvHed_ID\r\n\r\n                                  RETURN\r\n                                  END");
                    //}
                    //catch
                    //{
                    //}
                    //try
                    //{
                    //    server.ConnectionContext.ExecuteNonQuery(DbUpdates.S_T_GDDET_INSERT);
                    //    server.ConnectionContext.ExecuteNonQuery("/****** Object:  StoredProcedure [dbo].[S_T_GDDET_INSERT]    Script Date: 12/23/2016 17:51:49 ******/\r\n                                    ALTER PROCEDURE [dbo].[S_T_GDDET_INSERT](   \r\n                                                 @GDDET_ID INT OUTPUT,\r\n                                                 @gdID INT =NULL,\r\n                                                 @gdNo VARCHAR (10)=NULL,\r\n                                                 @gdDes VARCHAR (100)=NULL,\r\n                                                 @gdDesE VARCHAR (100)=NULL,\r\n                                                 @recptTyp VARCHAR (20)=NULL,\r\n                                                 @AccNo VARCHAR (30)=NULL,\r\n                                                 @AccName VARCHAR (50)=NULL,\r\n                                                 @gdValue FLOAT =NULL,\r\n                                                 @recptNo VARCHAR (20)=NULL,\r\n                                                 @Lin INT =NULL,\r\n                                                 @AccNoDestruction VARCHAR (30)=NULL\r\n                                                 \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n\r\n                                          INSERT INTO T_GDDET(\r\n                                                 gdID,\r\n                                                 gdNo,\r\n                                                 gdDes,\r\n                                                 gdDesE,\r\n                                                 recptTyp,\r\n                                                 AccNo,\r\n                                                 AccName,\r\n                                                 gdValue,\r\n                                                 recptNo,\r\n                                                 Lin,\r\n                                                 AccNoDestruction\r\n                                          )\r\n                                          VALUES\r\n                                          (\r\n                                                 \r\n                                                @gdID,\r\n                                                @gdNo,\r\n                                                @gdDes,\r\n                                                @gdDesE,\r\n                                                @recptTyp,\r\n                                                @AccNo,\r\n                                                @AccName,\r\n                                                @gdValue,\r\n                                                @recptNo,\r\n                                                @Lin,\r\n                                                @AccNoDestruction\r\n                                          )\r\n                                          SELECT @GDDET_ID = SCOPE_IDENTITY()\r\n                                          UPDATE T_AccDef SET T_AccDef.Debit = T_AccDef.Debit + ROUND( T_GDDET.gdValue, case when Substring((select MAX(T_SYSSETTING.Seting) from T_SYSSETTING),49,1) = 0 then 2 else 3 end)\r\n                                          From T_AccDef Left Join T_GDDET ON (T_AccDef.AccDef_No = T_GDDET.AccNo) \r\n                                          where @GDDET_ID = GDDET_ID and  T_GDDET.gdValue > 0 ;\r\n                                          UPDATE T_AccDef SET T_AccDef.Credit = T_AccDef.Credit + ABS(ROUND( T_GDDET.gdValue, case when Substring((select MAX(T_SYSSETTING.Seting) from T_SYSSETTING),49,1) = 0 then 2 else 3 end))\r\n                                          From T_AccDef Left Join T_GDDET ON (T_AccDef.AccDef_No = T_GDDET.AccNo) \r\n                                          where @GDDET_ID = GDDET_ID and  T_GDDET.gdValue < 0 ;\r\n                                          UPDATE T_AccDef SET T_AccDef.Balance = T_AccDef.Debit - T_AccDef.Credit\r\n                                          From T_AccDef Left Join T_GDDET ON (T_AccDef.AccDef_No = T_GDDET.AccNo) \r\n                                          where @GDDET_ID = GDDET_ID ;\r\n                                          RETURN\r\n                                          END");
                    //}
                    //catch
                    //{
                    //}
                    //try
                    //{
                    //    server.ConnectionContext.ExecuteNonQuery(DbUpdates.S_T_SINVDET_DELETE);
                    //    server.ConnectionContext.ExecuteNonQuery(" ALTER PROCEDURE [dbo].[S_T_SINVDET_DELETE](\r\n                                                                @SInvDet_ID INT \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n\r\n                                            declare @SInvTyp int \r\n                                            declare @SInvId int\r\n                                            declare @SMndID int\r\n                                            declare @SItemCountMnd int \r\n                                            declare @SMndKind int \r\n                                            declare @SRelation int\r\n                                                   \r\n                                            select @SInvId = SInvId from T_SINVDET where SInvDet_ID = @SInvDet_ID;\r\n\r\n                                            select @SRelation = InvId from T_INVDET where InvDet_ID = @SInvId;\r\n\r\n                                            select @SInvTyp = InvTyp from T_INVHED where InvHed_ID = @SRelation;\r\n\r\n                                            select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n                                            \r\n                                            select @SMndKind = Mnd_Typ from T_Mndob where Mnd_ID = @SMndID;\r\n                                            \r\n                                            if(@SInvTyp != 7 and @SInvTyp != 8 and @SInvTyp != 9 and @SInvTyp != 21)\r\n                                            begin\r\n                                              if(@SMndKind != 1 or @SMndKind is null)\r\n\t\t                                          begin\r\n\t\t\t                                          UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) \r\n\t\t\t                                          where (SInvDet_ID = @SInvDet_ID) and (T_SINVDET.SItmTyp <> 3) and (T_SINVDET.SItmTyp <> 2);\r\n\r\n\t\t\t                                          UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) AND (T_SINVDET.SStoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n                                        \t\t\t  \r\n\t\t\t                                          UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From  T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) AND (T_SINVDET.SStoreNo = T_QTYEXP.storeNo) AND (T_SINVDET.SDatExper = T_QTYEXP.DatExper)\r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n\t\t                                          end\r\n                                              if(@SInvTyp = 14)\r\n\t\t                                          begin\r\n\t\t\t                                          UPDATE T_STKSQTY SET T_STKSQTY.stkInt = T_STKSQTY.stkInt - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) AND (T_SINVDET.SStoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n\t\t                                          end\r\n                                             if(@SInvTyp = 17)\r\n\t                                         begin\r\n\t \t\t                                          UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) \r\n\t\t\t                                          where (SInvDet_ID = @SInvDet_ID) and (T_SINVDET.SItmTyp <> 3) and (T_SINVDET.SItmTyp <> 2);\r\n\r\n\t\t\t                                          UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) AND (T_SINVDET.SStoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n                                        \t\t\t  \r\n\t\t\t                                          UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From  T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) AND (T_SINVDET.SStoreNo = T_QTYEXP.storeNo) AND (T_SINVDET.SDatExper = T_QTYEXP.DatExper)\r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 ;\r\n                                        \t\t\t  \r\n\t                                             -- select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n\t\t                                         -- UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_SINVDET.SRealQty)\r\n\t\t                                         -- From T_SINVDET Left Join T_StoreMnd ON (T_SINVDET.SItmNo = T_StoreMnd.itmNo) AND (T_SINVDET.SStoreNo = T_StoreMnd.storeNo)  \r\n\t\t                                         -- where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2) and T_StoreMnd.MndNo = @SMndID ;\r\n                                             end\r\n                                             \r\n                                             if(@SInvTyp = 20)\r\n\t                                         begin\r\n\t       \t                                          UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) \r\n\t\t\t                                          where (SInvDet_ID = @SInvDet_ID) and (T_SINVDET.SItmTyp <> 3) and (T_SINVDET.SItmTyp <> 2);\r\n\r\n\t\t\t                                          UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) AND (T_SINVDET.SStoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n                                        \t\t\t  \r\n\t\t\t                                          UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From  T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) AND (T_SINVDET.SStoreNo = T_QTYEXP.storeNo) AND (T_SINVDET.SDatExper = T_QTYEXP.DatExper)\r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n                                        \t\t\t  \r\n\t                                            --  select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n\t\t                                        --  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_SINVDET.SRealQty \r\n\t\t                                        --  From T_SINVDET Left Join T_StoreMnd ON (T_SINVDET.SItmNo = T_StoreMnd.itmNo) AND (T_SINVDET.SStoreNo = T_StoreMnd.storeNo)  \r\n\t\t                                        --  where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2) and T_StoreMnd.MndNo = @SMndID ;\r\n                                             end\r\n                                            end\r\n\r\n                                        \r\n\r\n                                          DELETE FROM T_SINVDET\r\n                                          WHERE      @SInvDet_ID = SInvDet_ID   \r\n\r\n                                          RETURN\r\n                                          END");
                    //}
                    //catch
                    //{
                    //}
                    //try
                    //{
                    //    server.ConnectionContext.ExecuteNonQuery(DbUpdates.S_T_SINVDET_INSERT);
                    //    server.ConnectionContext.ExecuteNonQuery("         ALTER PROCEDURE [dbo].[S_T_SINVDET_INSERT](   \r\n                                                 @SInvDet_ID INT OUTPUT,\r\n                                                 @SInvNo VARCHAR (10)=NULL,\r\n                                                 @SInvId INT =NULL,\r\n                                                 @SInvSer INT =NULL,\r\n                                                 @SItmNo VARCHAR (50)=NULL,\r\n                                                 @SCost FLOAT =NULL,\r\n                                                 @SQty FLOAT =NULL,\r\n                                                 @SItmDes VARCHAR (50)=NULL,\r\n                                                 @SItmUnt VARCHAR (100)=NULL,\r\n                                                 @SItmDesE VARCHAR (50)=NULL,\r\n                                                 @SItmUntE VARCHAR (100)=NULL,\r\n                                                 @SItmUntPak FLOAT =NULL,\r\n                                                 @SStoreNo INT=NULL,\r\n                                                 @SPrice FLOAT =NULL,\r\n                                                 @SAmount FLOAT =NULL,\r\n                                                 @SRealQty FLOAT =NULL,\r\n                                                 @SitmInvDsc FLOAT =NULL,\r\n                                                 @SDatExper VARCHAR (11)=NULL,\r\n                                                 @SItmDis FLOAT =NULL,\r\n                                                 @SItmTyp INT =NULL,\r\n                                                 @SItmIndex INT =NULL,\r\n                                                 @SItmWight FLOAT =NULL,\r\n                                                 @SItmWight_T FLOAT =NULL,\r\n                                                 @SQtyDef FLOAT =NULL,\r\n                                                 @SPriceDef FLOAT =NULL,\r\n                                                 @SInvIdHEAD INT =NULL,\r\n                                                 @SItmTax FLOAT =NULL  \r\n                                                 \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n\r\n                                          INSERT INTO T_SINVDET(\r\n                                                 SInvNo,\r\n                                                 SInvId,\r\n                                                 SInvSer,\r\n                                                 SItmNo,\r\n                                                 SCost,\r\n                                                 SQty,\r\n                                                 SItmDes,\r\n                                                 SItmUnt,\r\n                                                 SItmDesE,\r\n                                                 SItmUntE,\r\n                                                 SItmUntPak,\r\n                                                 SStoreNo,\r\n                                                 SPrice,\r\n                                                 SAmount,\r\n                                                 SRealQty,\r\n                                                 SitmInvDsc,\r\n                                                 SDatExper,\r\n                                                 SItmDis,\r\n                                                 SItmTyp,\r\n                                                 SItmIndex,\r\n                                                 SItmWight,\r\n                                                 SItmWight_T,\r\n                                                 SQtyDef,\r\n                                                 SPriceDef,\r\n                                                 SInvIdHEAD,\r\n                                                 SItmTax\r\n                                          )\r\n                                          VALUES\r\n                                          (\r\n                                                @SInvNo,\r\n                                                @SInvId,\r\n                                                @SInvSer,\r\n                                                @SItmNo,\r\n                                                @SCost,\r\n                                                @SQty,\r\n                                                @SItmDes,\r\n                                                @SItmUnt,\r\n                                                @SItmDesE,\r\n                                                @SItmUntE,\r\n                                                @SItmUntPak,\r\n                                                @SStoreNo,\r\n                                                @SPrice,\r\n                                                @SAmount,\r\n                                                @SRealQty,\r\n                                                @SitmInvDsc,\r\n                                                @SDatExper,\r\n                                                @SItmDis,\r\n                                                @SItmTyp,\r\n                                                @SItmIndex,\r\n                                                @SItmWight,\r\n                                                @SItmWight_T,\r\n                                                @SQtyDef,\r\n                                                @SPriceDef,\r\n                                                @SInvIdHEAD,\r\n                                                @SItmTax\r\n                                          )\r\n                                          SELECT @SInvDet_ID = SCOPE_IDENTITY()\r\n\r\n                                                declare @SItemCount int  \r\n                                                declare @SInvTyp int\r\n                                                declare @SMndID int\r\n                                                declare @SItemCountMnd int \r\n                                                declare @SRelation int\r\n                                                   \r\n                                                select @SRelation = InvId from T_INVDET where InvDet_ID = @SInvId;\r\n                                                select @SItemCount = Count(*) from T_STKSQTY where itmNo = @SItmNo and storeNo =@SStoreNo;\r\n                                                select @SInvTyp = InvTyp from T_INVHED where InvHed_ID = @SRelation;\r\n                                                if((@SInvTyp != 7 and @SInvTyp != 8 and @SInvTyp != 9 and @SInvTyp != 21) and @SItmTyp <> 3 and @SItmTyp <> 2)\r\n                                                begin\r\n\r\n                                                    Update T_Items SET OpenQty = OpenQty+@SRealQty WHERE Itm_No = @SItmNo;\r\n                                                    if(@SItemCount > 0)\r\n                                                    begin\r\n                                                    Update T_STKSQTY SET stkQty = stkQty+@SRealQty WHERE itmNo = @SItmNo and storeNo = @SStoreNo;\r\n                                                    end\r\n\r\n                                                    if(@SItemCount = 0)\r\n                                                    begin \r\n                                                    INSERT INTO T_STKSQTY(itmNo,storeNo,stkQty,stkInt) VALUES(@SItmNo,@SStoreNo,@SRealQty,0);\r\n                                                    END\r\n\r\n                                                    if(@SInvTyp = 14)\r\n                                                    begin\r\n                                                        Update T_STKSQTY SET stkInt = stkInt+@SRealQty WHERE itmNo = @SItmNo and storeNo = @SStoreNo;\r\n                                                    end\r\n\r\n                                                    select @SItemCount = Count(*) from T_QTYEXP where itmNo = @SItmNo and storeNo =@SStoreNo and DatExper = @SDatExper;\r\n\r\n                                                    if(@SItemCount > 0 and @SDatExper <> '')\r\n                                                    begin\r\n                                                    Update T_QTYEXP SET stkQty = stkQty+@SRealQty WHERE itmNo = @SItmNo and storeNo = @SStoreNo and DatExper = @SDatExper;\r\n                                                    end\r\n\r\n                                                    if(@SItemCount = 0 and @SDatExper <> '')\r\n                                                    begin \r\n                                                    INSERT INTO T_QTYEXP(itmNo,storeNo,DatExper,stkQty) VALUES(@SItmNo,@SStoreNo,@SDatExper,@SRealQty);\r\n                                                    END\r\n--                                                    if(@SInvTyp = 17)\r\n--                                                        begin\r\n--                                                         select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n--                                                            select @SItemCountMnd = Count(*) from T_StoreMnd where itmNo = @SItmNo and storeNo =@SStoreNo and MndNo = @SMndID;\r\n--                                                                    if(@SItemCountMnd > 0)\r\n--                                                                    begin\r\n--                                                                         Update T_StoreMnd SET stkQty = stkQty + abs(@SRealQty) WHERE itmNo = @SItmNo and storeNo = @SStoreNo and MndNo = @SMndID;\r\n--                                                                    end\r\n--\r\n--                                                                    if(@SItemCountMnd = 0)\r\n--                                                                    begin \r\n--                                                                         INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,MndNo) VALUES(@SItmNo,@SStoreNo,abs(@SRealQty),0,@SMndID);\r\n--                                                                    END\r\n--                                                        end\t\r\n--                                                    if(@SInvTyp = 20)\r\n--                                                        begin\r\n--                                                         select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n--                                                            select @SItemCountMnd = Count(*) from T_StoreMnd where itmNo = @SItmNo and storeNo =@SStoreNo and MndNo = @SMndID;\r\n--                                                                    if(@SItemCountMnd > 0)\r\n--                                                                    begin\r\n--                                                                         Update T_StoreMnd SET stkQty = stkQty + (-@SRealQty) WHERE itmNo = @SItmNo and storeNo = @SStoreNo and MndNo = @SMndID;\r\n--                                                                    end\r\n--\r\n--                                                                    if(@SItemCountMnd = 0)\r\n--                                                                    begin \r\n--                                                                         INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,MndNo) VALUES(@SItmNo,@SStoreNo,-@SRealQty,0,@SMndID);\r\n--                                                                    END\r\n--                                                        end\r\n                                                end\r\n\r\n\r\n                                              RETURN\r\n                                              END");
                    //}
                    //catch
                    //{
                    //}
                    //try
                    //{
                    //    db.ExecuteCommand(DBUdate.DbUpdates.S_T_INVHED_INSERT);
                    //    db.ExecuteCommand("ALTER PROCEDURE [dbo].[S_T_INVHED_INSERT](   \r\n                                                                     @InvHed_ID INT OUTPUT,\r\n                                                                     @InvId FLOAT =NULL,\r\n                                                                     @InvNo VARCHAR (10),\r\n                                                                     @InvTyp INT =NULL,\r\n                                                                     @InvCashPay INT =NULL,\r\n                                                                     @CusVenNo VARCHAR (20)=NULL,\r\n                                                                    @CusVenNm VARCHAR (50)=NULL,\r\n                                                     @CusVenMob VARCHAR (50)=NULL,\r\n                                                                     @CusVenAdd VARCHAR (100)=NULL,\r\n                                                                     @CusVenTel VARCHAR (30)=NULL,\r\n                                                                     @Remark VARCHAR (MAX)=NULL,\r\n                                                                     @HDat VARCHAR (10)=NULL,\r\n                                                                     @GDat VARCHAR (10)=NULL,\r\n                                                                     @MndNo INT =NULL,\r\n                                                                     @SalsManNo VARCHAR (3)=NULL,\r\n                                                                     @SalsManNam VARCHAR (50)=NULL,\r\n                                                                     @InvTot FLOAT =NULL,\r\n                                                                     @InvTotLocCur FLOAT =NULL,\r\n                                                                     @InvDisPrs FLOAT =NULL,\r\n                                                                     @InvDisVal FLOAT =NULL,\r\n                                                                     @InvDisValLocCur FLOAT =NULL,\r\n                                                                     @InvNet FLOAT =NULL,\r\n                                                                     @InvNetLocCur FLOAT =NULL,\r\n                                                                     @CashPay FLOAT =NULL,\r\n                                                                     @CashPayLocCur FLOAT =NULL,\r\n                                                                     @IfRet INT =NULL,\r\n                                                                     @GadeNo FLOAT =NULL,\r\n                                                                     @GadeId FLOAT =NULL,\r\n                                                                     @IfDel INT =NULL,\r\n                                                                     @RetNo VARCHAR (10)=NULL,\r\n                                                                     @RetId FLOAT =NULL,\r\n                                                                     @InvCstNo INT =NULL,\r\n                                                                     @InvCashPayNm VARCHAR (100)=NULL,\r\n                                                                     @RefNo VARCHAR (20)=NULL,\r\n                                                                     @InvCost FLOAT =NULL,\r\n                                                                     @EstDat VARCHAR (10)=NULL,\r\n                                                                     @CustPri INT =NULL,\r\n                                                                     @ArbTaf VARCHAR (150)=NULL,\r\n                                                                     @CurTyp INT =NULL,\r\n                                                                     @InvCash VARCHAR (20)=NULL,\r\n                                                                     @ToStore VARCHAR (3)=NULL,\r\n                                                                     @ToStoreNm VARCHAR (50)=NULL,\r\n                                                                     @InvQty FLOAT =NULL,\r\n                                                                     @EngTaf VARCHAR (150)=NULL,\r\n                                                                     @IfTrans INT =NULL,\r\n                                                                     @CustRep FLOAT =NULL,\r\n                                                                     @CustNet FLOAT =NULL,\r\n                                                                     @InvWight_T FLOAT =NULL,\r\n                                                                     @IfPrint INT =NULL,\r\n                                                                     @LTim VARCHAR (10)=NULL,\r\n                                                                     @CREATED_BY VARCHAR(100) =NULL,\r\n                                                                     @DATE_CREATED datetime =NULL,\r\n                                                                     @MODIFIED_BY VARCHAR (100)=NULL,\r\n                                                                     @DATE_MODIFIED datetime=NULL,\r\n                                                                     @CreditPay float=NULL,\r\n                                                                     @CreditPayLocCur float=NULL,\r\n                                                                     @NetworkPay float=NULL,\r\n                                                                     @NetworkPayLocCur float=NULL,\r\n                                                                     @CommMnd_Inv float=NULL,\r\n                                                                     @MndExtrnal bit=NULL,\r\n                                                                     @CompanyID int=NULL,\r\n                                                                     @InvAddCost float=NULL,\r\n                                                                     @InvAddCostLoc float=NULL,\r\n                                                                     @InvAddCostExtrnal float=NULL,\r\n                                                                     @InvAddCostExtrnalLoc float=NULL,\r\n                                                                     @IsExtrnalGaid bit=NULL,\r\n                                                                     @ExtrnalCostGaidID float=NULL,\r\n                                                                     @Puyaid float=NULL,\r\n                                                                     @Remming float=NULL,\r\n                                                                     @RoomNo int=NULL,\r\n                                                                     @OrderTyp int=NULL,\r\n                                                                     @RoomSts bit=NULL,\r\n                                                                     @chauffeurNo int=NULL,\r\n                                                                     @RoomPerson int=NULL,\r\n                                                                     @ServiceValue float=NULL,\r\n                                                                     @Sts bit=NULL,\r\n                                                                     @PaymentOrderTyp int=NULL,\r\n                                                                     @AdminLock bit=NULL,\r\n                                                                     @DeleteDate VARCHAR (10)=NULL,\r\n                                                                     @DeleteTime VARCHAR (10)=NULL,\r\n                                                                     @UserNew VARCHAR (3)=NULL,\r\n                                                                     @IfEnter int=NULL,\r\n                                                                     @InvAddTax float=NULL,\r\n                                                                     @InvAddTaxlLoc float=NULL,\r\n                                                                     @IsTaxGaid bit=NULL,\r\n                                                                     @TaxGaidID float=NULL,\r\n                                                                     @IsTaxUse bit=NULL,\r\n                                                                     @InvValGaidDis float=NULL,\r\n                                                                     @InvValGaidDislLoc float=NULL,\r\n                                                                     @IsDisGaid bit=NULL,\r\n                                                                     @DisGaidID1 float=NULL,\r\n                                                                     @IsDisUse1 bit=NULL,\r\n                                                                     @InvComm float=NULL,\r\n                                                                     @InvCommLoc float=NULL,\r\n                                                                     @IsCommGaid bit=NULL,\r\n                                                                     @CommGaidID float=NULL,\r\n                                                                     @IsCommUse bit=NULL,\r\n                                                                     @IsTaxLines bit=NULL,\r\n                                                                     @IsTaxByTotal bit=NULL,\r\n                                                                     @IsTaxByNet bit=NULL,\r\n                                                                     @TaxByNetValue float=NULL,\r\n                                                                     @DesPointsValue float=NULL,\r\n                                                                     @DesPointsValueLocCur float=NULL,\r\n                                                                     @PointsCount float=NULL,\r\n                                                                     @IsPoints bit=NULL,\r\n                                                                     @tailor1 VARCHAR (100)=NULL,\r\n                                                                     @tailor2 VARCHAR (100)=NULL,\r\n                                                                     @tailor3 VARCHAR (100)=NULL,\r\n                                                                     @tailor4 VARCHAR (100)=NULL,\r\n                                                                     @tailor5 VARCHAR (100)=NULL,\r\n                                                                     @tailor6 VARCHAR (100)=NULL,\r\n                                                                     @tailor7 VARCHAR (100)=NULL,\r\n                                                                     @tailor8 VARCHAR (100)=NULL,\r\n                                                                     @tailor9 VARCHAR (100)=NULL,\r\n                                                                     @tailor10 VARCHAR (100)=NULL,\r\n                                                                     @tailor11 VARCHAR (100)=NULL,\r\n                                                                     @tailor12 VARCHAR (100)=NULL,\r\n                                                                     @tailor13 VARCHAR (100)=NULL,\r\n                                                                     @tailor14 VARCHAR (100)=NULL,\r\n                                                                     @tailor15 VARCHAR (100)=NULL,\r\n                                                                     @tailor16 VARCHAR (100)=NULL,\r\n                                                                     @tailor17 VARCHAR (100)=NULL,\r\n                                                                     @tailor18 VARCHAR (100)=NULL,\r\n                                                                     @tailor19 VARCHAR (100)=NULL,\r\n                                                                     @tailor20 VARCHAR (100)=NULL,\r\n                                                                     @InvImg [varbinary](max) =NULL\r\n                                                              )\r\n                                                              AS\r\n                                                              BEGIN\r\n\r\n                                                              INSERT INTO T_INVHED(\r\n                                                                     InvId,\r\n                                                                     InvNo,\r\n                                                                     InvTyp,\r\n                                                                     InvCashPay,\r\n                                                                     CusVenNo,\r\n                                                                     CusVenNm,\r\n                                                                     HDat,\r\n                                                                     CusVenAdd,\r\n                                                                     CusVenTel,\r\n                                                                     Remark,\r\n                                                                     GDat,\r\n                                                                     MndNo,\r\n                                                                     SalsManNo,\r\n                                                                     SalsManNam,\r\n                                                                     InvTot,\r\n                                                                     InvTotLocCur,\r\n                                                                     InvDisPrs,\r\n                                                                     InvDisVal,\r\n                                                                     InvDisValLocCur,\r\n                                                                     InvNet,\r\n                                                                     InvNetLocCur,\r\n                                                                     CashPay,\r\n                                                                     CashPayLocCur,\r\n                                                                     IfRet,\r\n                                                                     GadeNo,\r\n                                                                     GadeId,\r\n                                                                     IfDel,\r\n                                                                     RetNo,\r\n                                                                     RetId,\r\n                                                                     InvCstNo,\r\n                                                                     InvCashPayNm,\r\n                                                                     RefNo,\r\n                                                                     InvCost,\r\n                                                                     EstDat,\r\n                                                                     CustPri,\r\n                                                                     ArbTaf,\r\n                                                                     CurTyp,\r\n                                                                     InvCash,\r\n                                                                     ToStore,\r\n                                                                     ToStoreNm,\r\n                                                                     InvQty,\r\n                                                                     EngTaf,\r\n                                                                     IfTrans,\r\n                                                                     CustRep,\r\n                                                                     CustNet,\r\n                                                                     InvWight_T,\r\n                                                                     IfPrint,\r\n                                                                     LTim,\r\n                                                                     CREATED_BY,\r\n                                                                     DATE_CREATED,\r\n                                                                     MODIFIED_BY ,\r\n                                                                     DATE_MODIFIED ,\r\n                                                                     CreditPay ,\r\n                                                                     CreditPayLocCur ,\r\n                                                                     NetworkPay ,\r\n                                                                     NetworkPayLocCur ,\r\n                                                                     CommMnd_Inv ,\r\n                                                                     MndExtrnal ,\r\n                                                                     CompanyID ,\r\n                                                                     InvAddCost ,\r\n                                                                     InvAddCostLoc ,\r\n                                                                     InvAddCostExtrnal ,\r\n                                                                     InvAddCostExtrnalLoc ,\r\n                                                                     IsExtrnalGaid ,\r\n                                                                     ExtrnalCostGaidID ,\r\n                                                                     Puyaid ,\r\n                                                                     Remming ,\r\n                                                                     RoomNo ,\r\n                                                                     OrderTyp ,\r\n                                                                     RoomSts ,\r\n                                                                     chauffeurNo ,\r\n                                                                     RoomPerson ,\r\n                                                                     ServiceValue ,\r\n                                                                     Sts ,\r\n                                                                     PaymentOrderTyp ,\r\n                                                                     AdminLock ,\r\n                                                                     DeleteDate ,\r\n                                                                     DeleteTime ,\r\n                                                                     UserNew ,\r\n                                                                     IfEnter ,\r\n                                                                     InvAddTax ,\r\n                                                                     InvAddTaxlLoc ,\r\n                                                                     IsTaxGaid ,\r\n                                                                     TaxGaidID ,\r\n                                                                     IsTaxUse ,\r\n                                                                     InvValGaidDis ,\r\n                                                                     InvValGaidDislLoc ,\r\n                                                                     IsDisGaid ,\r\n                                                                     DisGaidID1 ,\r\n                                                                     IsDisUse1 ,\r\n                                                                     InvComm ,\r\n                                                                     InvCommLoc ,\r\n                                                                     IsCommGaid ,\r\n                                                                     CommGaidID ,\r\n                                                                     IsCommUse ,\r\n                                                                     IsTaxLines ,\r\n                                                                     IsTaxByTotal ,\r\n                                                                     IsTaxByNet ,\r\n                                                                     TaxByNetValue ,\r\n                                                                     DesPointsValue ,\r\n                                                                     DesPointsValueLocCur ,\r\n                                                                     PointsCount,\r\n                                                                     IsPoints,\r\n                                                                     tailor1 ,\r\n                                                                     tailor2 ,\r\n                                                                     tailor3 ,\r\n                                                                     tailor4 ,\r\n                                                                     tailor5 ,\r\n                                                                     tailor6 ,\r\n                                                                     tailor7 ,\r\n                                                                     tailor8 ,\r\n                                                                     tailor9 ,\r\n                                                                     tailor10 ,\r\n                                                                     tailor11 ,\r\n                                                                     tailor12 ,\r\n                                                                     tailor13 ,\r\n                                                                     tailor14 ,\r\n                                                                     tailor15 ,\r\n                                                                     tailor16 ,\r\n                                                                     tailor17 ,\r\n                                                                     tailor18 ,\r\n                                                                     tailor19 ,\r\n                                                                     tailor20,\r\n                                                                     InvImg\r\n                                                              )\r\n                                                              VALUES\r\n                                                              (\r\n                                                                     \r\n                                                                    @InvId,\r\n                                                                    @InvNo,\r\n                                                                    @InvTyp,\r\n                                                                    @InvCashPay,\r\n                                                                    @CusVenNo,\r\n                                                                    @CusVenNm,\r\n                                                                    @HDat,\r\n                                                                    @CusVenAdd,\r\n                                                                    @CusVenTel,\r\n                                                                    @Remark,\r\n                                                                    @GDat,\r\n                                                                    @MndNo,\r\n                                                                    @SalsManNo,\r\n                                                                    @SalsManNam,\r\n                                                                    @InvTot,\r\n                                                                    @InvTotLocCur,\r\n                                                                    @InvDisPrs,\r\n                                                                    @InvDisVal,\r\n                                                                    @InvDisValLocCur,\r\n                                                                    @InvNet,\r\n                                                                    @InvNetLocCur,\r\n                                                                    @CashPay,\r\n                                                                    @CashPayLocCur,\r\n                                                                    @IfRet,\r\n                                                                    @GadeNo,\r\n                                                                    @GadeId,\r\n                                                                    @IfDel,\r\n                                                                    @RetNo,\r\n                                                                    @RetId,\r\n                                                                    @InvCstNo,\r\n                                                                    @InvCashPayNm,\r\n                                                                    @RefNo,\r\n                                                                    @InvCost,\r\n                                                                    @EstDat,\r\n                                                                    @CustPri,\r\n                                                                    @ArbTaf,\r\n                                                                    @CurTyp,\r\n                                                                    @InvCash,\r\n                                                                    @ToStore,\r\n                                                                    @ToStoreNm,\r\n                                                                    @InvQty,\r\n                                                                    @EngTaf,\r\n                                                                    @IfTrans,\r\n                                                                    @CustRep,\r\n                                                                    @CustNet,\r\n                                                                    @InvWight_T,\r\n                                                                    @IfPrint,\r\n                                                                    @LTim,\r\n                                                                    @CREATED_BY,\r\n                                                                    @DATE_CREATED,\r\n                                                                    @MODIFIED_BY ,\r\n                                                                    @DATE_MODIFIED ,\r\n                                                                    @CreditPay ,\r\n                                                                    @CreditPayLocCur ,\r\n                                                                    @NetworkPay ,\r\n                                                                    @NetworkPayLocCur ,\r\n                                                                    @CommMnd_Inv ,\r\n                                                                    @MndExtrnal ,\r\n                                                                    @CompanyID ,\r\n                                                                    @InvAddCost ,\r\n                                                                    @InvAddCostLoc ,\r\n                                                                    @InvAddCostExtrnal ,\r\n                                                                    @InvAddCostExtrnalLoc ,\r\n                                                                    @IsExtrnalGaid ,\r\n                                                                    @ExtrnalCostGaidID ,\r\n                                                                    @Puyaid ,\r\n                                                                    @Remming ,\r\n                                                                    @RoomNo ,\r\n                                                                    @OrderTyp ,\r\n                                                                    @RoomSts ,\r\n                                                                    @chauffeurNo ,\r\n                                                                    @RoomPerson ,\r\n                                                                    @ServiceValue ,\r\n                                                                    @Sts ,\r\n                                                                    @PaymentOrderTyp ,\r\n                                                                    @AdminLock ,\r\n                                                                    @DeleteDate ,\r\n                                                                    @DeleteTime ,\r\n                                                                    @UserNew ,\r\n                                                                    @IfEnter ,\r\n                                                                    @InvAddTax ,\r\n                                                                    @InvAddTaxlLoc ,\r\n                                                                    @IsTaxGaid ,\r\n                                                                    @TaxGaidID ,\r\n                                                                    @IsTaxUse ,\r\n                                                                    @InvValGaidDis ,\r\n                                                                    @InvValGaidDislLoc ,\r\n                                                                    @IsDisGaid ,\r\n                                                                    @DisGaidID1 ,\r\n                                                                    @IsDisUse1 ,\r\n                                                                    @InvComm ,\r\n                                                                    @InvCommLoc ,\r\n                                                                    @IsCommGaid ,\r\n                                                                    @CommGaidID ,\r\n                                                                    @IsCommUse ,\r\n                                                                    @IsTaxLines ,\r\n                                                                    @IsTaxByTotal ,\r\n                                                                    @IsTaxByNet ,\r\n                                                                    @TaxByNetValue ,\r\n                                                                    @DesPointsValue ,\r\n                                                                    @DesPointsValueLocCur ,\r\n                                                                    @PointsCount,\r\n                                                                    @IsPoints,\r\n                                                                    @tailor1 ,\r\n                                                                    @tailor2 ,\r\n                                                                    @tailor3 ,\r\n                                                                    @tailor4 ,\r\n                                                                    @tailor5 ,\r\n                                                                    @tailor6 ,\r\n                                                                    @tailor7 ,\r\n                                                                    @tailor8 ,\r\n                                                                    @tailor9 ,\r\n                                                                    @tailor10 ,\r\n                                                                    @tailor11 ,\r\n                                                                    @tailor12 ,\r\n                                                                    @tailor13 ,\r\n                                                                    @tailor14 ,\r\n                                                                    @tailor15 ,\r\n                                                                    @tailor16 ,\r\n                                                                    @tailor17 ,\r\n                                                                    @tailor18 ,\r\n                                                                    @tailor19 ,\r\n                                                                    @tailor20,\r\n                                                                    @InvImg\r\n                                                              )\r\n\r\n\r\n                                                              SELECT @InvHed_ID = SCOPE_IDENTITY()\r\n                                                                      \r\n\r\n                                                              RETURN\r\n                                                              END");
                    //}
                    //catch (SqlException ex)
                    //{
                    //    MessageBox.Show(ex.Message);
                    //}
                    //try
                    //{
                    //    db.ExecuteCommand(DbUpdates.S_T_INVHED_UPDATE);
                    //    db.ExecuteCommand("ALTER PROCEDURE [dbo].[S_T_INVHED_UPDATE](\r\n                                                                                 @InvHed_ID INT ,\r\n                                                                                 @InvId FLOAT =NULL,\r\n                                                                                 @InvNo VARCHAR (10),\r\n                                                                                 @InvTyp INT =NULL,\r\n                                                                                 @InvCashPay INT =NULL,\r\n                                                                                 @CusVenNo VARCHAR (20)=NULL,\r\n                                                                                 @CusVenNm VARCHAR (50)=NULL,\r\n                                                                                 @CusVenAdd VARCHAR (100)=NULL,\r\n                                                                                 @CusVenTel VARCHAR (30)=NULL,\r\n                                                                                 @Remark VARCHAR (MAX)=NULL,\r\n                                                                                 @HDat VARCHAR (10)=NULL,\r\n                                                                                 @GDat VARCHAR (10)=NULL,\r\n                                                                                 @MndNo INT =NULL,\r\n                                                                                 @SalsManNo VARCHAR (3)=NULL,\r\n                                                                                 @SalsManNam VARCHAR (50)=NULL,\r\n                                                                                 @InvTot FLOAT =NULL,\r\n                                                                                 @InvTotLocCur FLOAT =NULL,\r\n                                                                                 @InvDisPrs FLOAT =NULL,\r\n                                                                                 @InvDisVal FLOAT =NULL,\r\n                                                                                 @InvDisValLocCur FLOAT =NULL,\r\n                                                                                 @InvNet FLOAT =NULL,\r\n                                                                                 @InvNetLocCur FLOAT =NULL,\r\n                                                                                 @CashPay FLOAT =NULL,\r\n                                                                                 @CashPayLocCur FLOAT =NULL,\r\n                                                                                 @IfRet INT =NULL,\r\n                                                                                 @GadeNo FLOAT =NULL,\r\n                                                                                 @GadeId FLOAT =NULL,\r\n                                                                                 @IfDel INT =NULL,\r\n                                                                                 @RetNo VARCHAR (10)=NULL,\r\n                                                                                 @RetId FLOAT =NULL,\r\n                                                                                 @InvCstNo INT =NULL,\r\n                                                                                 @InvCashPayNm VARCHAR (100)=NULL,\r\n                                                                                 @RefNo VARCHAR (20)=NULL,\r\n                                                                                 @InvCost FLOAT =NULL,\r\n                                                                                 @EstDat VARCHAR (10)=NULL,\r\n                                                                                 @CustPri INT =NULL,\r\n                                                                                 @ArbTaf VARCHAR (150)=NULL,\r\n                                                                                 @CurTyp INT =NULL,\r\n                                                                                 @InvCash VARCHAR (20)=NULL,\r\n                                                                                 @ToStore VARCHAR (3)=NULL,\r\n                                                                                 @ToStoreNm VARCHAR (50)=NULL,\r\n                                                                                 @InvQty FLOAT =NULL,\r\n                                                                                 @EngTaf VARCHAR (150)=NULL,\r\n                                                                                 @IfTrans INT =NULL,\r\n                                                                                 @CustRep FLOAT =NULL,\r\n                                                                                 @CustNet FLOAT =NULL,\r\n                                                                                 @InvWight_T FLOAT =NULL,\r\n                                                                                 @IfPrint INT =NULL,\r\n                                                                                 @LTim VARCHAR (10)=NULL,\r\n                                                                                 @CREATED_BY VARCHAR(100) =NULL,\r\n                                                                                 @DATE_CREATED datetime =NULL,\r\n                                                                                 @MODIFIED_BY VARCHAR (100)=NULL,\r\n                                                                                 @DATE_MODIFIED datetime=NULL,\r\n                                                                                 @CreditPay float=NULL,\r\n                                                                                 @CreditPayLocCur float=NULL,\r\n                                                                                 @NetworkPay float=NULL,\r\n                                                                                 @NetworkPayLocCur float=NULL,\r\n                                                                                 @CommMnd_Inv float=NULL,\r\n                                                                                 @MndExtrnal bit=NULL,\r\n                                                                                 @CompanyID int=NULL,\r\n                                                                                 @InvAddCost float=NULL,\r\n                                                                                 @InvAddCostLoc float=NULL,\r\n                                                                                 @InvAddCostExtrnal float=NULL,\r\n                                                                                 @InvAddCostExtrnalLoc float=NULL,\r\n                                                                                 @IsExtrnalGaid bit=NULL,\r\n                                                                                 @ExtrnalCostGaidID float=NULL,\r\n                                                                                 @Puyaid float=NULL,\r\n                                                                                 @Remming float=NULL,\r\n                                                                                 @RoomNo int=NULL,\r\n                                                                                 @OrderTyp int=NULL,\r\n                                                                                 @RoomSts bit=NULL,\r\n                                                                                 @chauffeurNo int=NULL,\r\n                                                                                 @RoomPerson int=NULL,\r\n                                                                                 @ServiceValue float=NULL,\r\n                                                                                 @Sts bit=NULL,\r\n                                                                                 @PaymentOrderTyp int=NULL,\r\n                                                                                 @AdminLock bit=NULL,\r\n                                                                                 @DeleteDate VARCHAR (10)=NULL,\r\n                                                                                 @DeleteTime VARCHAR (10)=NULL,\r\n                                                                                 @UserNew VARCHAR (3)=NULL,\r\n                                                                                 @IfEnter int=NULL,\r\n                                                                                 @InvAddTax float=NULL,\r\n                                                                                 @InvAddTaxlLoc float=NULL,\r\n                                                                                 @IsTaxGaid bit=NULL,\r\n                                                                                 @TaxGaidID float=NULL,\r\n                                                                                 @IsTaxUse bit=NULL,\r\n                                                                                 @InvValGaidDis float=NULL,\r\n                                                                                 @InvValGaidDislLoc float=NULL,\r\n                                                                                 @IsDisGaid bit=NULL,\r\n                                                                                 @DisGaidID1 float=NULL,\r\n                                                                                 @IsDisUse1 bit=NULL,\r\n                                                                                 @InvComm float=NULL,\r\n                                                                                 @InvCommLoc float=NULL,\r\n                                                                                 @IsCommGaid bit=NULL,\r\n                                                                                 @CommGaidID float=NULL,\r\n                                                                                 @IsCommUse bit=NULL,\r\n                                                                                 @IsTaxLines bit=NULL,\r\n                                                                                 @IsTaxByTotal bit=NULL,\r\n                                                                                 @IsTaxByNet bit=NULL,\r\n                                                                                 @TaxByNetValue float=NULL,\r\n                                                                                 @DesPointsValue float=NULL,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     @DesPointsValueLocCur float=NULL,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     @PointsCount float=NULL,\r\n                                                                                 @IsPoints bit=NULL,\r\n                                                                                 @tailor1 VARCHAR (100)=NULL,\r\n                                                                                 @tailor2 VARCHAR (100)=NULL,\r\n                                                                                 @tailor3 VARCHAR (100)=NULL,\r\n                                                                                 @tailor4 VARCHAR (100)=NULL,\r\n                                                                                 @tailor5 VARCHAR (100)=NULL,\r\n                                                                                 @tailor6 VARCHAR (100)=NULL,\r\n                                                                                 @tailor7 VARCHAR (100)=NULL,\r\n                                                                                 @tailor8 VARCHAR (100)=NULL,\r\n                                                                                 @tailor9 VARCHAR (100)=NULL,\r\n                                                                                 @tailor10 VARCHAR (100)=NULL,\r\n                                                                                 @tailor11 VARCHAR (100)=NULL,\r\n                                                                                 @tailor12 VARCHAR (100)=NULL,\r\n                                                                                 @tailor13 VARCHAR (100)=NULL,\r\n                                                                                 @tailor14 VARCHAR (100)=NULL,\r\n                                                                                 @tailor15 VARCHAR (100)=NULL,\r\n                                                                                 @tailor16 VARCHAR (100)=NULL,\r\n                                                                                 @tailor17 VARCHAR (100)=NULL,\r\n                                                                                 @tailor18 VARCHAR (100)=NULL,\r\n                                                                                 @tailor19 VARCHAR (100)=NULL,\r\n                                                                                 @tailor20 VARCHAR (100)=NULL,\r\n                                                                                 @InvImg VARBINARY(max) =NULL\r\n                                  )\r\n                                  AS\r\n                                  BEGIN\r\n\r\n                                  UPDATE T_INVHED\r\n                                  SET    InvId = @InvId,\r\n                                         InvNo = @InvNo,\r\n                                         InvTyp = @InvTyp,\r\n                                         InvCashPay = @InvCashPay,\r\n                                         CusVenNo = @CusVenNo,\r\n                                         CusVenNm = @CusVenNm,\r\n                                         CusVenAdd = @CusVenAdd,\r\n                                         CusVenTel = @CusVenTel,\r\n                                         Remark = @Remark,\r\n                                         HDat = @HDat,\r\n                                         GDat = @GDat,\r\n                                         MndNo = @MndNo,\r\n                                         SalsManNo = @SalsManNo,\r\n                                         SalsManNam = @SalsManNam,\r\n                                         InvTot = @InvTot,\r\n                                         InvTotLocCur = @InvTotLocCur,\r\n                                         InvDisPrs = @InvDisPrs,\r\n                                         InvDisVal = @InvDisVal,\r\n                                         InvDisValLocCur = @InvDisValLocCur,\r\n                                         InvNet = @InvNet,\r\n                                         InvNetLocCur = @InvNetLocCur,\r\n                                         CashPay = @CashPay,\r\n                                         CashPayLocCur = @CashPayLocCur,\r\n                                         IfRet = @IfRet,\r\n                                         GadeNo = @GadeNo,\r\n                                         GadeId = @GadeId,\r\n                                         IfDel = @IfDel,\r\n                                         RetNo = @RetNo,\r\n                                         RetId = @RetId,\r\n                                         InvCstNo = @InvCstNo,\r\n                                         InvCashPayNm = @InvCashPayNm,\r\n                                         RefNo = @RefNo,\r\n                                         InvCost = @InvCost,\r\n                                         EstDat = @EstDat,\r\n                                         CustPri = @CustPri,\r\n                                         ArbTaf = @ArbTaf,\r\n                                         CurTyp = @CurTyp,\r\n                                         InvCash = @InvCash,\r\n                                         ToStore = @ToStore,\r\n                                         ToStoreNm = @ToStoreNm,\r\n                                         InvQty = @InvQty,\r\n                                         EngTaf = @EngTaf,\r\n                                         IfTrans = @IfTrans,\r\n                                         CustRep = @CustRep,\r\n                                         CustNet = @CustNet,\r\n                                         InvWight_T = @InvWight_T,\r\n                                         IfPrint = @IfPrint,\r\n                                         LTim = @LTim,\r\n                                         MODIFIED_BY = @MODIFIED_BY,\r\n                                         DATE_MODIFIED = @DATE_MODIFIED,\r\n                                                                                 CreditPay = @CreditPay,\r\n                                                                                 CreditPayLocCur = @CreditPayLocCur,\r\n                                                                                 NetworkPay = @NetworkPay,\r\n                                                                                 NetworkPayLocCur = @NetworkPayLocCur,\r\n                                                                                 CommMnd_Inv = @CommMnd_Inv,\r\n                                                                                 MndExtrnal = @MndExtrnal,\r\n                                                                                 CompanyID = @CompanyID,\r\n                                                                                 InvAddCost = @InvAddCost,\r\n                                                                                 InvAddCostLoc = @InvAddCostLoc,\r\n                                                                                 InvAddCostExtrnal = @InvAddCostExtrnal,\r\n                                                                                 InvAddCostExtrnalLoc = @InvAddCostExtrnalLoc,\r\n                                                                                 IsExtrnalGaid = @IsExtrnalGaid,\r\n                                                                                 ExtrnalCostGaidID = @ExtrnalCostGaidID,\r\n                                                                                 Puyaid = @Puyaid,\r\n                                                                                 Remming = @Remming,\r\n                                                                                 RoomNo = @RoomNo,\r\n                                                                                 OrderTyp = @OrderTyp,\r\n                                                                                 RoomSts = @RoomSts,\r\n                                                                                 chauffeurNo = @chauffeurNo,\r\n                                                                                 RoomPerson = @RoomPerson,\r\n                                                                                 ServiceValue = @ServiceValue,\r\n                                                                                 Sts = @Sts,\r\n                                                                                 PaymentOrderTyp = @PaymentOrderTyp,\r\n                                                                                 AdminLock = @AdminLock,\r\n                                                                                 DeleteDate = @DeleteDate,\r\n                                                                                 DeleteTime = @DeleteTime,\r\n                                                                                 UserNew = @UserNew,\r\n                                                                                 IfEnter = @IfEnter,\r\n                                                                                 InvAddTax = @InvAddTax,\r\n                                                                                 InvAddTaxlLoc = @InvAddTaxlLoc,\r\n                                                                                 IsTaxGaid = @IsTaxGaid,\r\n                                                                                 TaxGaidID = @TaxGaidID,\r\n                                                                                 IsTaxUse = @IsTaxUse,\r\n                                                                                 InvValGaidDis = @InvValGaidDis,\r\n                                                                                 InvValGaidDislLoc = @InvValGaidDislLoc,\r\n                                                                                 IsDisGaid = @IsDisGaid,\r\n                                                                                 DisGaidID1 = @DisGaidID1,\r\n                                                                                 IsDisUse1 = @IsDisUse1,\r\n                                                                                 InvComm = @InvComm,\r\n                                                                                 InvCommLoc = @InvCommLoc,\r\n                                                                                 IsCommGaid = @IsCommGaid,\r\n                                                                                 CommGaidID = @CommGaidID,\r\n                                                                                 IsCommUse = @IsCommUse,\r\n                                                                                 IsTaxLines = @IsTaxLines,\r\n                                                                                 IsTaxByTotal = @IsTaxByTotal,\r\n                                                                                 IsTaxByNet = @IsTaxByNet,\r\n                                                                                 TaxByNetValue = @TaxByNetValue,\r\n                                                                                 DesPointsValue = @DesPointsValue ,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t DesPointsValueLocCur = @DesPointsValueLocCur ,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t PointsCount = @PointsCount,\r\n                                                                                 IsPoints = @IsPoints,\r\n                                                                                 tailor1 = @tailor1 ,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor2 = @tailor2,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor3 = @tailor3,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor4 = @tailor4,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor5 = @tailor5,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor6 = @tailor6,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor7 = @tailor7,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor8 = @tailor8,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor9 = @tailor9,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor10 = @tailor10,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor11 = @tailor11,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor12 = @tailor12,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor13 = @tailor13,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor14 = @tailor14,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor15 = @tailor15,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor16 = @tailor16,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor17 = @tailor17,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor18 = @tailor18,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor19 = @tailor19,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor20 = @tailor20,\r\n                                                                                 InvImg   = @InvImg \r\n                                  WHERE  @InvHed_ID = InvHed_ID\r\n                                  RETURN\r\n                                  END");
                    //}
                    //catch
                    //{
                    //}
                    try
                    {
                        db.ExecuteCommand("update T_Items set T_Items.OpenQty = 0 where T_Items.Itm_No not in (select itmNo from T_STKSQTY) and T_Items.OpenQty > 0");
                    }
                    catch
                    {
                    }
                }
                catch (Exception error7)
                {
                    VarGeneral.DebLog.writeLog("LangChange_SqlConn:", error7, enable: true);
                }
                labelItem_Level.Text = "version : " + VarGeneral.ProdectNo;
                if (LangVal == 0)
                {
                    try
                    {
                        VarGeneral.CurrentLang = "0";
                        RightToLeft = RightToLeft.Yes;
                        ComponentResourceManager resources = new ComponentResourceManager(typeof(FrmMn));
                        SSSLanguage.Language.ChangeLanguage("ar-SA", this, resources);
                    }
                    catch (Exception error7)
                    {
                        VarGeneral.DebLog.writeLog("a1:", error7, enable: true);
                    }
                    byte[] im;
                    Image r = Resources.appbackground;
                    using (var ms = new MemoryStream())
                    {
                        r.Save(ms, r.RawFormat);
                        im = ms.ToArray();
                    }
                    ribbonButton101.Text = "اعدادات الطابعات";
                    VarGeneral.CurrentLang = "0";
                    VarGeneral.Settings_Sys.BackgroundPic = im;
                    ribbonMenu3.Text = "المندوبين";
                    CarMarkah.Text = "ماركات السيارات";
                    CarModel.Text = "كرت السيارات";
                    Color_Button.Text = "الالوان";
                    radialMenuItem_Reg.Text = "تسجيل المنتج";
                    bubbleButton_Calc.Text = "الالة الحاسبة";
                    CReport_Menue.Text = "التقارير";
                    Button_language.Text = "اللغة الانجليزية";
                    Button_SysSettings.Text = "اعدادات النظام";
                    Button_SysTools.Text = "ادوات النظام";
                    labelItem_Reg.Text = "ننبيه : نسختك هذه تجريبية وغير مفعلة";
                    TTDate.Text = " Date : " + VarGeneral.Gdate + " - " + VarGeneral.Hdate;
                    TTUSr.Text = " USER : " + VarGeneral.UserNameA.ToUpper();
                    TTDataBase.Text = "Data Base : " + VarGeneral.DBNo;
                    TTBranch.Text = "    Branch : " + VarGeneral.BranchNumber + " - " + VarGeneral.BranchNameA;
                    TTServerName.Text = " SERVER: " + VarGeneral.gServerName;
                    sideBarPanelItem_Files.Text = "الكـــروت";
                    sideBarPanelItem_Invioces.Text = "الفواتــــير";
                    sideBarPanelItem_Acc.Text = "الحســـابات";
                    sideBarPanelItem_RepStocks.Text = "تقارير المخــزون";
                    sideBarPanelItem_Emps.Text = "شؤون الموظفين";
                    sideBarPanelItem_RepAcc.Text = "تقارير المحاســـبة";
                    sideBarPanelItem_Hotel.Text = "إدارة الفندق";
                    sideBarPanelItem_Eqar.Text = "إدارة العقارات";
                    switchButtonItem_Exit.OffText = "";
                    switchButtonItem_Exit.OnText = "إيقاف النظام";
                    bubbleButton_BarcodSetting.Text = "إعدادات طباعة الباركود";
                    bubbleButton_ConvertDate.Text = "معالجة التاريخ";
                    bubbleButton_Enter.Text = "دخــــول";
                    //bubbleButton_TablesInfo.Text = "حــول الطــاولات";
                    bubbleButton_GaidSetting.Text = "إعدادات طباعة السندات";
                    bubbleButton_Help.Text = "المساعدة";
                    bubbleButton_InvSetting.Text = "إعدادات طباعة الفواتير";
                    //bubbleButton_InvSettingGroup.Text = "إعدادات طباعة التصنيفات";
                    bubbleButton_SelectBranch.Text = "تغيير الفرع";
                    bubbleButton_Calc.Text = "الآلة الحاسبة";
                    bubbleButton_TransData.Text = "نقل البيانات بين الفروع";
                    bubbleButton_Support.Text = "الدعم الفني";
                    bubbleButton_SMS.Text = "الرسائل النصية";
                    bubbleButton_SetYearAcc.Text = "تعيين السنة المالية";
                    bubbleButton_UserPoint.Text = "تعيين مستخدمين نقاط البيع";
                    bubbleButton_UserPointReturn.Text = "إزالة مستخدمين نقاط البيع";
                    bubbleButfton_RelayInvPoint.Text = "إعادة الترقيم التسلسلي لصناديق الكاشيير";
                    bubbleButton_RepairPurshas.Text = "تحديث اسعار تكلفة المشتريات";
                    bubbleButton_RepairSales.Text = "تحديث أسعار تكلفة المبيعات";
                    bubbleButton_RepPoints.Text = "تقرير ببيانات نقاط العملاء";
                    bubbleButton_ReportOnline.Text = "مزامنة البيانات";
                    //bubbleButton_SendMail.Text = "إرسال نسخة إحتياطية للبيانات";
                    buttonItem_itmeCat.Text = "التصنيف";
                    buttonItem_items.Text = "تعريف صنـف     Ctrl + i";
                    buttonItem_unit.Text = "الوحـــــــدات    Ctrl + U";
                    buttonItem_Curncy.Text = "العملات";
                    buttonItem_CenterCost.Text = "مركز التكلفة";
                    buttonItem_Branch.Text = "الفـــــــــروع    Ctrl + B";
                    buttonItem_Mndob.Text = "المندوبين";
                    buttonItem_Store.Text = "المستودعات";
                    buttonItem_Vender.Text = "العمــــــــــلاء    Ctrl + C";
                    buttonItem_Supp.Text = "المــــــوردين    Ctrl + S";
                    buttonItem_Driver.Text = "مسؤولين التوصيل";
                    buttonItem_Waiter.Text = "نادل المطعم";
                    buttonItem_Table.Text = "الطـــاولات";
                    buttonItem_SpicialAddition.Text = "الإضافات الخاصة";
                    // buttonItem_Emps.Text = "شؤون الموظفين";
                    buttonItem_Employee.Text = "الموظفــــين";
                    buttonItem_CalcSalary.Text = "إصدار الرواتب";
                    buttonItem_RelaySalary.Text = "ترحيل الرواتب";
                    buttonItem_UnRealy.Text = "التراجع عن الترحيل";
                    buttonItem_ReportEmployee.Text = "التقــــارير";
                    //buttonItem_EmployeeRep.Text = "تقرير الموظفين";
                    buttonItem_EmployeeDocRep.Text = "وثائق الموظفين";
                    buttonItem_AlarmDoc.Text = "تنبيهــــات الـــوثائق";
                    buttonItem_PrintSalIssus.Text = "قيود الرواتب الصادرة";
                    buttonItem_PrintSalRelay.Text = "قيود الرواتب المر\u0651حلة";
                    buttonItem_EmployeeSalaryRep.Text = "طباعة مسي\u0651ر الرواتب";
                    buttonItem_SalesInv.Text = "فاتورة مبيعات      Ctrl+F1";
                    buttonItem_SalesReturn.Text = "مرتجع مبيعات     Ctrl+F2";
                    buttonItem_PurchaseInv.Text = "فاتورة مشتريات  Ctrl+F3";
                    buttonItem_PurchaseReturn.Text = "مرتجع مشتريات  Ctrl+F4";
                    buttonItem_CustQutation.Text = (Program.iscarversion() ? "امر طلب" : "عرض سعر للعملاء");
                    buttonItem_SuppQutation.Text = "عرض سعر للموردين";
                    buttonItem_PurchaseOrder.Text = "طلب شراء          Ctrl+F5";
                    buttonItem_OpenQuantities.Text = "بضاعة أول المدة";
                    buttonItem_TransferIn.Text = "إدخال بضاعة";
                    buttonItem_TransferOut.Text = "إخراج بضاعة";
                    buttonItem_PaymentOrder.Text = "صرف بضاعة       Ctrl+F6";
                    buttonItem_PaymentOReturn.Text = "مرتجع صرف بضاعة";
                    buttonItem_StockAdjustment.Text = "تسوية البضاعة";
                    buttonItem_Factory.Text = "انتاج الأصناف - تصنيع";
                    buttonItem_Offer.Text = "العــروض الخــاصة";
                    buttonItem_AccCat.Text = "تصنيف الحسابات";
                    buttonItem_AccTree.Text = "كرت الحسابات Ctrl+A";
                    buttonItem_SndGaid.Text = "القيود اليومية  Ctrl+G";
                    buttonItem_SndCatch.Text = "سند قبض";
                    buttonItem_SndExchange.Text = "سند صرف";
                    buttonItem_OpenAcc.Text = "الأرصدة الإفتتاحية";
                    buttonItem_PartnerAcc.Text = "نسبة الشركاء %";
                    buttonItem_Banks.Text = "البنــــوك";
                    buttonItem_BankBranch.Text = "فـــروع البنــوك";
                    // buttonItem_TMT.Text = "البنوك والأوراق المالية";
                    buttonItem_CatchAndPay.Text = "الأوراق البنكيــة";
                    buttonItem_GetAndSetMoney.Text = "العمليات البنكيــة";
                    buttonItem_Boxes.Text = "إدارة الصناديق - الخزينة";
                    buttonItem_ItemDataMain.Text = "الأصناف";
                    buttonItem_ItemDataQty.Text = "بيانات الأصناف وكمياتها";
                    buttonItem_ItemDataCost.Text = "بيانات الأصناف وتكلفتها";
                    buttonItem_ItemDataMove.Text = "حركة صنف    Ctrl+M";
                    buttonItem_FilesItemsWithDateExp.Text = "بيانات الصــنف بتاريخ الصلاحية";
                    buttonItem_MovementItemsWithDateExp.Text = "حركة صنف حسب تاريخ الصلاحية";
                    buttonItem_ItemDataImport.Text = "الأصناف الواجب توفرها";
                    buttonItem_ItemDataSleep.Text = "الأصناف الراكدة";
                    buttonItem_ItemDataMoreSale.Text = "الأصناف الأكثر مبيعا";
                    buttonItem_ItemDataPrintMove.Text = "طباعة حركة صنف";
                    //buttonItem_ItemMoveInInvoices.Text = "حركة الصنف في ";
                    //buttonItem_RepMnd.Text = "المندوبين";
                    //buttonItem_RepInvGaid.Text = "الفواتير الأجلة ومدفوعاتها";
                    buttonItem_RepSalesGaid.Text = "المبيعات الآجـــلة";
                    //buttonItem_RepPurchaesGaid.Text = "المشتريات الآجـــلة";
                    buttonItem_MoveSalse.Text = "فاتورة المبيعات";
                    buttonItem_MoveSalesReturn.Text = "مرتجع المبيعات ";
                    buttonItem_MovePurchaseInv.Text = "فاتورة المشتريات";
                    buttonItem_MovePurchaseReturn.Text = "مرتجع مشتريات";
                    buttonItem_MoveCustQutation.Text = "عرض سعر للعملاء";
                    buttonItem_MoveSuppQutation.Text = "عرض سعر للموردين";
                    buttonItem_MovePurchaseOrder.Text = "طلب شراء";
                    buttonItem_MoveOpenQuantities.Text = "بضاعة أول المدة";
                    buttonItem_MoveTransferIn.Text = "إدخال بضاعة";
                    buttonItem_MoveTransferOut.Text = "إخراج بضاعة";
                    buttonItem_MovePaymentOrder.Text = "صرف بضاعة";
                    buttonItem_MovePaymentOReturn.Text = "مرتجع صرف بضاعة";
                    buttonItem_MoveStockAdjustment.Text = "تسوية البضاعة";
                    buttonItem_RepAccOther.Text = "تقارير محاسبة آخرى";
                    buttonItem_RepAccRecords.Text = "كشف حساب تفصيـلي  Ctrl+R";
                    //buttonItem_RepAccRecordsStock.Text = "كشف حســاب تفصيلي";
                    buttonItem_RepPrintAccRecords.Text = "كشف بأكثر من حساب Ctrl+T";
                    buttonItem_RepAccDirctory.Text = "كرت الحسابات";
                    // buttonItem_RepAccBanks.Text = "كرت أرقام حسابات البنوك";
                    buttonItem_RepAccBranches.Text = "كرت البنوك وفروعها";
                    buttonItem_RepBankPea.Text = "كشف الأوراق المالية";
                    buttonItem_BankOp.Text = "كشف العمليات البنكية";
                    buttonItem_SNDReport.Text = "تقريـر السندات المـاليـة";
                    buttonItem_GaidSerfGabth.Text = "الفرق بين سندات القبض والصرف";
                    buttonItem_RepGeneralLed.Text = "الإستاذ العام";
                    buttonItem_RepGeneralDaily.Text = "اليومية العامة";
                    buttonItem_RepReviewBalanceOfMovement.Text = "ميزان مراجعة بالحركة";
                    buttonItem_RepReviewBalance.Text = "ميزان مراجعة بالأرصدة";
                    buttonItem_RepReviewTotaly.Text = "ميزان مراجعة بالمجاميع";
                    buttonItem_RepReviewBalanceOfTotaly.Text = "ميزان مراجعة بالأرصدة والمجاميع";
                    buttonItem_RepTradingAcc.Text = "حساب المتاجرة";
                    //buttonItem_RepTradingAcc2.Text = "حساب المتاجرة";
                    buttonItem_RepProfitAndLossAcc.Text = "حساب الأرباح والخساير";
                    //buttonItem_RepProfitAndLossAcc2.Text = "حساب الأرباح والخساير";
                    buttonItem_RepBalanceSheet.Text = "الميزانية العمومية";
                    //buttonItem_RepBalanceSheet2.Text = "الميزانية العمومية";
                    buttonItem_RepOutlay.Text = "تقرير المصروفات";
                    //buttonItem_VendorRep.Text = "العملاء";
                    //buttonItem_SuppRep.Text = "الموردين";
                    buttonItem_CustSndDiscount.Text = "تخفيض المديونية";
                    buttonItem_SuppSndDiscount.Text = "تخفيض المديونية";
                    buttonItem_ClientBalance.Text = "أرصدة العملاء";
                    buttonItem_ClientSleep.Text = "العملاء الراكدون";
                    buttonItem_ClientAge.Text = "ذمم العملاء";
                    buttonItem_SupplierBalance.Text = "أرصدة الموردين";
                    buttonItem_SupplierSleep.Text = "الموردين الراكدون";
                    buttonItem_SupplierAge.Text = "ذمم الموردين";
                    buttonItem_InvComm.Text = "كشف بعمولات المبيعات";
                    buttonItem_GaidComm.Text = "كشف بعمولات الإيردات";
                    //      buttonItem_GaidCommAcc.Text = "كشف بعمولات الإيردات";
                    buttonItem_InvCommUsr.Text = "عمولات مبيعات المستخدمين";
                    buttonItem_GaidCommUsr.Text = "عمولات ايرادات المستخدمين";
                    buttonItem_StoreMnd.Text = "البضاعة المصــــــروفــة ";
                    buttonItem_InvoiceMnd.Text = "تقرير بفواتـير المنـــدوب";
                    buttonItem_StoreCust.Text = "البضاعة المصروفة - عميل";
                    buttonItem_StoreSupp.Text = "البضاعة المصروفة - مــورد";
                    buttonItem_InvoiceReport.Text = "تقــريـر الفــواتــير";
                    radialMenuItem_Setting.Text = "تهيئة النظام";
                    //  radialMenuItem_Setting2.Text = "تهيئة النظام";
                    radialMenuItem_Permisson.Text = "الصلاحيات";
                    //radialMenuItem_Permisson2.Text = "الصلاحيات";
                    //radialMenuItem_Alarm.Text = "التنبيهات";
                    //radialMenuItem_Alarm2.Text = "التنبيهات";
                    radialMenuItem_AlArmDueoInvoic.Text = "تنبيهات الفواتير حسب تاريخ الإستحقاق";
                    radialMenuItem_AlArmDueoInvoic.Text = "ف. بتاريخ الإستحقاق";
                    //radialMenuItem_AlarmRequest.Text = "أصناف يجب توفيرها";
                    radialMenuItem_AlarmRequest2.Text = "أصناف يجب توفيرها";
                    //
                    // radialMenuItem_AlarmRequest.Tooltip = "تنبيه بالأصناف التي وصلت الى حد الطلب";
                    //radialMenuItem_AlarmDateExp.Text = "اصناف منتهية";
                    radialMenuItem_AlarmDateExp2.Text = "اصناف منتهية";
                    //radialMenuItem_AlarmDateExp.Tooltip = "تنبيه بالإصناف منتهية الصلاحية";
                    //radialMenuItem_AlArmBankPeaper.Text = "أوراق البنك";
                    radialMenuItem_AlArmBankPeaper2.Text = "أوراق البنك";
                    //radialMenuItem_AlArmBankPeaper.Tooltip = "تنبيه بالأوراق التي يجب استحقاقها";
                    //radialMenuItem_AlArmEmpDoc.Text = "وثائق الموظفين";
                    //radialMenuItem_AlArmEmpDoc2.Text = "وثائق الموظفين";
                    //radialMenuItem_AlArmEmpDoc.Tooltip = "تنبيهات بوثائق الموظفين المنتهية";
                    expandablePanel3.TitleText = "لـوحة المعلومات السريعة";
                    labelTypSrch.Text = "طريقة الإستعلام حسب :";
                    buttonItem_SrchDay.Text = "اليـــوم";
                    buttonItem_SrchWeek.Text = "الإسبـوع";
                    buttonItem_SrchMonth.Text = "الشهـــر";
                    buttonItem_SrchBtwDate.Text = "مخــصص بين :";
                    ribbonBar1.Text = "إجمالي المبيعات";
                    ribbonBar2.Text = "إجمالي مرتجع المبيعات";
                    ribbonBar3.Text = "إجمالي المشتريات";
                    ribbonBar4.Text = "إجمالي مرتجع المشتريات";
                    ribbonBar6.Text = "عدد فواتير المبيعات";
                    ribbonBar7.Text = "عدد فواتير المشتريات";
                    buttonItem_Emp.Text = "الموظفين";
                    buttonItem_Files.Text = "الملفـــات";
                    buttonItem_EmpMovement.Text = "حركات الموظفين";
                    buttonItem_EmpSalary.Text = "الرواتب";
                    buttonItem_Reports.Text = "التقاريــر";
                    buttonItem_Attend.Text = "الـــــدوام";
                    buttonItem_Forms.Text = "المعاملات الرسمية";
                    buttonItem_Transactions.Text = "المعـــاملات";
                    buttonItem_Commentary.Text = "التعقـــيب";
                    buttonItem_PassPortForm.Text = "إستمارة الجوازات";
                    buttonItem_Dept.Text = "الإدارات";
                    buttonItem_Part.Text = "الأقسام";
                    buttonItem_Job.Text = "الوظــائف";
                    buttonItem_EndServic.Text = "نهاية الخدمة";
                    buttonItem_Gur.Text = "الكفلاء";
                    buttonItem_Nation.Text = "الجنسيات";
                    buttonItem_Contract.Text = "أنواع العقود";
                    buttonItem_Vac.Text = "أنواع الإجازة";
                    buttonItem_City.Text = "المــدن";
                    buttonItem_Religen.Text = "الديــانــات";
                    buttonItem_Cars.Text = "السيارات";
                    buttonItem_Projects.Text = "المشــاريــع";
                    buttonItem_Add.Text = "الإضافــي";
                    buttonItem_Dis.Text = "الخصـــــم";
                    buttonItem_VacOp.Text = "الإجـــازات";
                    buttonItem_Tickit.Text = "التذاكــــر";
                    buttonItem_Advanc.Text = "السلفيات";
                    buttonItem_CallPhone.Text = "المكالمــــات";
                    buttonItem_Rewar.Text = "الحوافز والمكافآت";
                    buttonItem_Authriz.Text = "الإستئـــذان";
                    buttonItem_Secretariats.Text = "العهــــد";
                    buttonItem_VisaGoBack.Text = "تأشيرة الخروج والعودة";
                    buttonItem_CalcSal.Text = "إصدار الرواتب";
                    buttonItem_CalcSalByEmpNo.Text = "إصدار راتب موظف";
                    buttonItem_RelaySal.Text = "ترحيل الرواتب";
                    buttonItem_BackRelay.Text = "إلغاء ترحيـــل الرواتب";
                    buttonItem_SalaryAdd.Text = "العمليات على الرواتب";
                    buttonItem_PrintSal.Text = "طباعة مسي\u0651ر الرواتب";
                    // buttonItem_SalaryOp.Text = "تقرير الزيادة والنقصان";
                    buttonItem_GenAcc.Text = "تحــــديث حسابات الموظفــــين";
                    buttonItem_EmpSalRep.Text = "تقرير راتــــب الموظف";
                    //buttonItem_EmpsRep.Text = "تقرير الموظفين";
                    buttonItem_RepDocuments.Text = "وثائق الموظفين";
                    buttonItem_IDRep.Text = "هويات الموظفين";
                    buttonItem_PassportRep.Text = "جوازات الموظفين";
                    buttonItem_MidicAllowncRep.Text = "التأمين الصحي";
                    buttonItem_FormRep.Text = "إستمارات الموظفين";
                    buttonItem_LicensRep.Text = "رخص الموظفين";
                    buttonItem_UpdateDoc.Text = "تجديد وثائق الموظف";
                    buttonItem_ReportUpdate.Text = "تجديـــد الوثائــق";
                    buttonItem_RepDocAllownc.Text = "تجديد شركات التأمـين";
                    buttonItem_RepMovement.Text = "الحــــركات";
                    buttonItem_VacRep.Text = "تقرير الإجازات";
                    buttonItem_TicketRep.Text = "تقرير التذاكر";
                    buttonItem_AutizRep.Text = "تقرير الإستئذان";
                    buttonItem_SecretariatsRep.Text = "تقرير العهد";
                    buttonItem_VisaGoBackRep.Text = "تقرير تأشيرة الخروج والعودة";
                    buttonItem_EndServicRep.Text = "تقرير نهاية الخدمة";
                    buttonItem_AddDis.Text = "المستحقات والمستقطعات";
                    buttonItem_AddRep.Text = "تقرير الإضافــي";
                    buttonItem_AwardRep.Text = "تقرير الحوافز والمكافآت";
                    buttonItem_AdvancRep.Text = "تقرير السلف";
                    buttonItem_Phons.Text = "تقرير المكالمــــات";
                    buttonItem_DisRep.Text = "تقرير الخصم";
                    buttonItem_CommentaryRep.Text = "تقرير عمليات التعقيب";
                    buttonItem_AllowncRep.Text = "تقرير تأمينات الموظف";
                    buttonItem_RepCars.Text = "تقرير السيــارات";
                    buttonItem_EmpGaidSalRealy.Text = "قيود الرواتب المرح\u0651لة";
                    buttonItem_EmpGaidAdvanceRealy.Text = "قيود السلف المرح\u0651لة";
                    //buttonItem_RepVacNeedProv.Text = "إجازات بإنتظار الموافقة";
                    //buttonItem_HotelFiles.Text = "الملفـــات";
                    //buttonItem_Rooms.Text = "بيانات الغرف";
                    //buttonItem_IDType.Text = "أنواع الهويات";
                    //buttonItem_HotelJobs.Text = "الوظائف";
                    //buttonItem_ServicesType.Text = "أنواع الخدمات";
                    //buttonItem_HotelNation.Text = "الجنسيات";
                    //buttonItem_PhonePrices.Text = "أسعار المكالمات";
                    //buttonItem_HotelMove.Text = "العمليات والحركة";
                    //buttonItem_ServiceUse.Text = "تقديم خدمة للنزلاء";
                    //buttonItem_PhoneUse.Text = "المكالمات الهاتفية";
                    //buttonItem_BlackList.Text = "النزلاء المحظورين";
                    //buttonItem_GuestRoom.Text = "بيانات النزلاء";
                    //buttonItem_Reservation.Text = "بيانات الحجوزات";
                    //buttonItem_ReservationToday.Text = "حجوزات اليوم";
                    //buttonItem_GuestLeaves.Text = "النزلاء المغــادرين";
                    //buttonItem_ServiceToLeave.Text = "خـدمات النــزلاء المغادرين";
                    //buttonItem_PhoneUseToLeave.Text = "مكالمات النزلاء المغادرين";
                    //buttonItem_GuestLeaveGaid.Text = "القيود التلقائية بقيمة فترة الإقامة";
                    //buttonItem_HotelReports.Text = "التقاريــر";
                    //buttonItem_RepRevenue.Text = "إيراد اليوم - الإستقبال";
                    //buttonItem_RepGuests.Text = "النــــزلاء";
                    //buttonItem_RepGuestsData.Text = "تقرير ببيانات جميع النزلاء";
                    //buttonItem_RepGuestReserv.Text = "كشف حساب النزلاء الحاجزين";
                    //buttonItem_RepGuestsAcc.Text = "كشف حساب جميع النزلاء";
                    //buttonItem_RepGuestsAccTotal.Text = "كشف حساب نزيل";
                    //buttonItem_RepGuestRequestByServ.Text = "الخدمات المقدمة للنزلاء";
                    //buttonItem_RepTotalGuestCall.Text = "كشف بحركة المكالمات";
                    //buttonItem_GaidToLeave.Text = "السندات التلقائية بقيمة فترة الإقامة";
                    //buttonItem_RepRoom.Text = "الغـــرف";
                    //buttonItem_RepRoomAccountStatementDuringPeriod.Text = "كشف حساب غرفة خلال فترة";
                    //buttonIte_RepRoomSpecifications.Text = "مواصفات الغرف";
                    //buttonItem_RepRoomMovementDuringPeriod.Text = "حركة الغرف خلال فترة";
                    //buttonItem_RepRoomRepairDuringPeriod.Text = "صيانة الغرفة خلال فترة";
                    //buttonItem_RepPeopelTransDuringPeriod.Text = "نقل السكان خلال فترة";
                    //buttonItem_RepGrouping.Text = "تقرير المجموعات";
                    //txtREmpty.Text = "فارغة";
                    //txtRAvailable.Text = "متاحة للعملية";
                    //txtRBussyDaily.Text = "مشغول يومي";
                    //txtRBussyMonthly.Text = "مشغول شهري";
                    //txtRBussyAppendix.Text = "مشغول ملحق";
                    //txtRClean.Text = "نظافة";
                    //txtRRepair.Text = "صيانة";
                    //txtRLeave.Text = "مغادرة";
                    //ToolStripMenuItem_RoomNo2.Text = "المواصفــــــات";
                    //ToolStripMenuItem_GuestData2.Text = "بيانات النزيل";
                    //ToolStripMenuItem_UseRoom2.Text = "إستخـــــــدام";
                    //ToolStripMenuItem_LeaveRoom2.Text = "     مغــــــــــادرة";
                    //toolStripMenuItem_reservationRoom2.Text = "حجــــــز جــــديد";
                    //toolStripMenuItem_UseReservations2.Text = "إستخدام حجز";
                    //toolStripMenuItem_CancelReservations2.Text = "     الغـــاء حجــــــز";
                    //toolStripMenuItem_RepairRoom2.Text = "تصليــــــــــح";
                    //toolStripMenuItem_CancelRepairRoom2.Text = "     إنهاء التصليحـات";
                    //toolStripMenuItem_ClearRoom2.Text = "تنظيــــــــــف";
                    //toolStripMenuItem_CancelClear2.Text = "     إنهاء التنظيفـات";
                    //toolStripMenuItem_Catch2.Text = "سند قبض نزيل";
                    //toolStripMenuItem_Exchange2.Text = "     سند صرف نزيل";
                    //btnHide.Text = "     إخفـاء القائمة";
                    //try
                    //{
                    //    Frame1.RightToLeft = RightToLeft.No;
                    //    Frame1.RightToLeftLayout = false;
                    //}
                    //catch (Exception error7)
                    //{
                    //    VarGeneral.DebLog.writeLog("a2:", error7, enable: true);
                    //}
                    //try
                    //{
                    //    ToolStripMenuItem_LeaveRoom2.TextAlignment = eButtonTextAlignment.Left;
                    //    ToolStripMenuItem_UseRoom2.TextAlignment = eButtonTextAlignment.Right;
                    //    toolStripMenuItem_CancelRepairRoom2.TextAlignment = eButtonTextAlignment.Left;
                    //    toolStripMenuItem_RepairRoom2.TextAlignment = eButtonTextAlignment.Right;
                    //    toolStripMenuItem_CancelClear2.TextAlignment = eButtonTextAlignment.Left;
                    //    toolStripMenuItem_ClearRoom2.TextAlignment = eButtonTextAlignment.Right;
                    //    toolStripMenuItem_Exchange2.TextAlignment = eButtonTextAlignment.Left;
                    //    toolStripMenuItem_Catch2.TextAlignment = eButtonTextAlignment.Right;
                    //    toolStripMenuItem_CancelReservations2.TextAlignment = eButtonTextAlignment.Left;
                    //    toolStripMenuItem_reservationRoom2.TextAlignment = eButtonTextAlignment.Right;
                    //    ToolStripMenuItem_GuestData2.TextAlignment = eButtonTextAlignment.Right;
                    //    toolStripMenuItem_UseReservations2.TextAlignment = eButtonTextAlignment.Right;
                    //    btnHide.TextAlignment = eButtonTextAlignment.Left;
                    //}
                    //catch (Exception error7)
                    //{
                    //    VarGeneral.DebLog.writeLog("a3:", error7, enable: true);
                    //}
                    //buttonItem_GuestCatch.Text = "سند قبض نزيل";
                    //buttonItem_GuestExchang.Text = "سند صرف نزيل";
                    //radialMenuItem_EndYear.Text = "عملية الإقفال";
                    //radialMenuItem_EndYear2.Text = "عملية الإقفال";
                    //radialMenuItem_CloseTheYear.Text = "إقفال السنة";
                    radialMenuItem_CloseTheYear2.Text = "إقفال السنة";
                    //radialMenuItem_CloseTheYear.Tooltip = "إقفال السنة المالية";
                    //radialMenuItem_OpenCloseTheYear.Text = "قراءة بيانات";
                    radialMenuItem_OpenCloseTheYear2.Text = "قراءة بيانات";
                    //radialMenuItem_OpenCloseTheYear.Tooltip = "قراءة بيانات مقفلة";
                    //buttonItem_OpenDataEnding.Text = "عرض بيانات مقفلة";
                    //radialMenuItem_DbOperation.Text = "البيانات";
                    //radialMenuItem_DbOperation2.Text = "البيانات";
                    buttonItem_DefaultSts.Text = "الرجوع إلى بيانات العمل";
                    radialMenuItem_Backup.Text = "النسخ الإحتياطي";
                    radialMenuItem_Backup.Text = "باك آب";
                    //  radialMenuItem_Backup2.Text = "النسخ الإحتياطي";
                    radialMenuItem_Restore.Text = "استرجاع قاعدة البيانات";
                    radialMenuItem_Restore.Text = "إسترجاع";
                    //radialMenuItem_Restore2.Text = "استرجاع قاعدة البيانات";
                    //radialMenuItem_Attachment.Tooltip = "الإتصال بقاعدة البيانات";
                    //radialMenuItem_Attachment.Text = "إتصال";
                    ribbonMenu2.Text = "حركة صنف في ";
                    ribbonMenu4.Text = "الفواتير الاجله";
                    radialMenuItem_NewDataBase.Text = "إضافة قاعدة بيانات جديدة";
                    //  radialMenuItem_NewDataBase.Text = "جديد";
                    //   radialMenuItem_NewDataBase2.Text = "قاعدة بيانات جديدة";
                    //radialMenuItem_ChangeDataBase.Tooltip = "تغيير قاعدة البيانات";
                    radialMenuItem_DeleteDataBase.Text = "حذف قاعدة بيانات";
                    //radialMenuItem_DeleteDataBase.Text = "حذف";
                    //radialMenuItem_DeleteDataBase2.Text = "حذف قاعدة بيانات";
                    //radialMenuItem_ChangeDataBase.Text = "تغيير";
                    //radialMenuItem_ChangeDataBase2.Text = "تغيير قاعدة البيانات";
                    radialMenuItem_PathSetting.Text = "إعدادات مسار النظام";
                    radialMenuItem_PathSetting.Text = "المسار";
                    // radialMenuItem_PathSetting2.Text = "مسار النظام";
                    radialMenuItem_Reg.Text = "تسجيل المنتج";
                    buttonItem_RepAccOther.Text = "تقارير محاسبية اخرى";
                    //radialMenuItem_Reg2.Text = "تسجيل المنتج";
                    //radialMenuItem_Arabic.Tooltip = "اللغة العربية";
                    //radialMenuItem_Arabic2.Text = "اللغة العربية";
                    //radialMenuItem_English.Tooltip = "اللغة الإنجليزية";
                    //radialMenuItem_English2.Text = "اللغة الإنجليزية";
                    //radialMenuItem_Lang.Text = "اللغة";
                    //buttonItem_HotelSystemSetting.Text = "خيارات النظام";
                    ribbonMenu6.Text = "اخرى";
                    buttonItem_RepPurchaseGaid.Text = "المشتريات الاجله";
                    bubbleButton_ConvertDate.Text = "معالجة التاريخ ";
                    try
                    {
                        //buttonItem_ItemMoveInInvoices.PopupSide = ePopupSide.Left;
                        //buttonItem_RepMnd.PopupSide = ePopupSide.Left;
                        //buttonItem_VendorRep.PopupSide = ePopupSide.Left;
                        //buttonItem_SuppRep.PopupSide = ePopupSide.Left;
                    }
                    catch (Exception error7)
                    {
                        VarGeneral.DebLog.writeLog("a4:", error7, enable: true);
                    }
                    try
                    {
                        //Frame1.RightToLeft = RightToLeft.No;
                        //Frame1.RightToLeftLayout = false;
                    }
                    catch (Exception error7)
                    {
                        VarGeneral.DebLog.writeLog("a5:", error7, enable: true);
                    }
                }
                else
                {
                    try
                    {
                        VarGeneral.CurrentLang = "1";
                        RightToLeft = RightToLeft.No;
                        ComponentResourceManager resources = new ComponentResourceManager(typeof(FrmMn));
                        SSSLanguage.Language.ChangeLanguage("en", this, resources);
                    }
                    catch (Exception error7)
                    {
                        VarGeneral.DebLog.writeLog("e1:", error7, enable: true);
                    }
                    byte[] im;
                    Image r = Resources.appbackground;
                    using (var ms = new MemoryStream())
                    {
                        r.Save(ms, r.RawFormat);
                        im = ms.ToArray();
                    }
                    bubbleButton_ConvertDate.Text = "Date Processing";
                    buttonItem_RepPurchaseGaid.Text = "Futures Purchases";
                    buttonItem_RepAccOther.Text = "Others Account Reports";
                    ribbonMenu4.Text = "Cridet Bills";
                    ribbonMenu3.Text = "Delegates";
                   
                    ribbonMenu2.Text = "Item Movment IN";
                    VarGeneral.Settings_Sys.BackgroundPic = im;
                    ribbonButton101.Text = "Printers settings";
                    radialMenuItem_Reg.Text = "Product Registration";
                    bubbleButton_Calc.Text = "Calculator";
                    CReport_Menue.Text = "Reports";
                    CarMarkah.Text = "Car Brands Card";
                    CarModel.Text = "Car Types Card ";
                    Color_Button.Text = "Colors Card";
                    Button_SysTools.Text = "System Tools";
                    ribbonMenu6.Text = "OTHERS";
                    Button_SysSettings.Text = "System Settings";
                    Button_language.Text = "Arabic Language";
                    labelItem_Reg.Text = "Attention : This version is trial and disabled";
                    TTDate.Text = " Date : " + VarGeneral.Gdate + " - " + VarGeneral.Hdate;
                    TTUSr.Text = " USER : " + VarGeneral.UserNameE.ToUpper();
                    TTDataBase.Text = "Data Base : " + VarGeneral.DBNo;
                    TTBranch.Text = "    Branch : " + VarGeneral.BranchNumber + " - " + VarGeneral.BranchNameE;
                    TTServerName.Text = " SERVER: " + VarGeneral.gServerName;
                    sideBarPanelItem_Files.Text = "Cards";
                    sideBarPanelItem_Invioces.Text = "Invoices";
                    sideBarPanelItem_Acc.Text = "Card Accounts";
                    sideBarPanelItem_RepStocks.Text = "Inventory Reports";
                    sideBarPanelItem_Emps.Text = "Employee";
                    sideBarPanelItem_Hotel.Text = "Hotel";
                    sideBarPanelItem_Eqar.Text = "Real Estate";
                    sideBarPanelItem_RepAcc.Text = "Accounts Reports";
                    switchButtonItem_Exit.OffText = "";
                    switchButtonItem_Exit.OnText = "System Stoped";
                    bubbleButton_BarcodSetting.Text = "Barcode printing settings";
                    bubbleButton_ConvertDate.Text = "Conversion dates";
                    bubbleButton_Enter.Text = "Enter";
                    //    bubbleButton_TablesInfo.Text = "About Tables";
                    bubbleButton_GaidSetting.Text = "Bonds printing settings";
                    bubbleButton_Help.Text = "Help";
                    bubbleButton_InvSetting.Text = "Invoice printing settings";
                    //  bubbleButton_InvSettingGroup.Text = "Categories printing settings";
                    bubbleButton_SelectBranch.Text = "Brache Change ";
                    bubbleButton_RepairPurshas.Text = "Update Cost Price of Purchaes";
                    bubbleButton_RepairSales.Text = "Update Cost Price of Sales";
                    //bubbleButton_Calc.Text = "Calculator";
                    bubbleButton_TransData.Text = "Transfer Data Between Branches";
                    bubbleButton_Support.Text = "Support";
                    bubbleButton_SMS.Text = "Messages";
                    bubbleButton_SetYearAcc.Text = "The appointment of the fiscal year";
                    bubbleButton_UserPoint.Text = "Set POS Users";
                    bubbleButton_UserPointReturn.Text = "Delete POS Users";
                    bubbleButfton_RelayInvPoint.Text = "Re numbering cashier boxes";
                    bubbleButton_RepPoints.Text = "Report Customer Points Data";
                    bubbleButton_ReportOnline.Text = "Online reporting and data synchronization settings";
                    //bubbleButton_SendMail.Text = "Send backup copy of data";
                    buttonItem_itmeCat.Text = "Category";
                    buttonItem_items.Text = "Items";
                    buttonItem_unit.Text = "Unites";
                    buttonItem_Curncy.Text = "Currency";
                    buttonItem_CenterCost.Text = "Cost Center";
                    buttonItem_Branch.Text = "Branches";
                    buttonItem_Mndob.Text = "Delegates";
                    buttonItem_Store.Text = "Warehouses";
                    buttonItem_Vender.Text = "Customers";
                    buttonItem_Supp.Text = "Suppliers";
                    buttonItem_Driver.Text = "Delivery Officer";
                    buttonItem_Waiter.Text = "Waiters";
                    buttonItem_Table.Text = "Tables";
                    buttonItem_SpicialAddition.Text = "Special Additions";
                    //buttonItem_Emps.Text = "HR";
                    buttonItem_Employee.Text = "Employees";
                    buttonItem_CalcSalary.Text = "Calculating salaries";
                    buttonItem_RelaySalary.Text = "Relay salaries";
                    buttonItem_UnRealy.Text = "Undo Relay salaries";
                    buttonItem_ReportEmployee.Text = "Reports";
                    // buttonItem_EmployeeRep.Text = "Employees Report";
                    buttonItem_EmployeeDocRep.Text = "Documents Employees Report";
                    buttonItem_AlarmDoc.Text = "Documents Alerts";
                    buttonItem_PrintSalIssus.Text = "Issued Gaid salaries";
                    buttonItem_PrintSalRelay.Text = "Relay Gaid salaries";
                    buttonItem_EmployeeSalaryRep.Text = "Print Salary";
                    buttonItem_SalesInv.Text = "Sales invoice";
                    buttonItem_SalesReturn.Text = "Returned sales invoice";
                    buttonItem_PurchaseInv.Text = "Purchases invoice";
                    buttonItem_PurchaseReturn.Text = "Returned Purchases invoice";
                    buttonItem_CustQutation.Text = (Program.iscarversion() ? "Order Command" : "Quote clients");
                    buttonItem_SuppQutation.Text = "Quote suppliers";
                    buttonItem_PurchaseOrder.Text = "Purchase Order";
                    buttonItem_OpenQuantities.Text = "Quantitative opening";
                    buttonItem_TransferIn.Text = "The introduction of goods";
                    buttonItem_TransferOut.Text = "Directed by goods";
                    buttonItem_PaymentOrder.Text = "Exchange of goods";
                    buttonItem_PaymentOReturn.Text = "Returned Exchange of goods";
                    buttonItem_StockAdjustment.Text = "Settlement goods";
                    buttonItem_Factory.Text = "Production Varieties - Manufacturing";
                    buttonItem_Offer.Text = "Spicial Offers";
                    buttonItem_AccCat.Text = "Classification of accounts";
                    buttonItem_AccTree.Text = "Card Accounts";
                    buttonItem_SndGaid.Text = "Daily restrictions";
                    buttonItem_SndCatch.Text = "Under arrest";
                    buttonItem_SndExchange.Text = "Under Exchange";
                    buttonItem_OpenAcc.Text = "Opened Balances";
                    buttonItem_PartnerAcc.Text = "Percentage of Partners";
                    buttonItem_Banks.Text = "Bank";
                    buttonItem_BankBranch.Text = "Bank Branches";
                    //buttonItem_TMT.Text = "Branches-Operations a Bank";
                    buttonItem_CatchAndPay.Text = "The Bank peapers";
                    buttonItem_GetAndSetMoney.Text = "The Bank Opearations";
                    buttonItem_Boxes.Text = "Monetary fund";
                    buttonItem_ItemDataMain.Text = "Items";
                    buttonItem_ItemDataQty.Text = "Data items and quantities";
                    buttonItem_ItemDataCost.Text = "Data items and their cost";
                    buttonItem_ItemDataMove.Text = "Movement Class";
                    buttonItem_FilesItemsWithDateExp.Text = "Items Data With Expir Date";
                    buttonItem_MovementItemsWithDateExp.Text = "Items Movement With Expir Date";
                    buttonItem_ItemDataImport.Text = "Items must be met";
                    buttonItem_ItemDataSleep.Text = "Inactive Items";
                    buttonItem_ItemDataMoreSale.Text = "Best Selling Items";
                    buttonItem_ItemDataPrintMove.Text = "Print Item Movement";
                    //buttonItem_ItemMoveInInvoices.Text = "Item Movement in ";
                    //buttonItem_RepMnd.Text = "Delegates";
                    //buttonItem_RepInvGaid.Text = "Outstanding invoices and payments";
                    buttonItem_RepSalesGaid.Text = "Futures Sales";
                    //buttonItem_RepPurchaesGaid.Text = "Forward purchases";
                    buttonItem_MoveSalse.Text = "Sales invoice";
                    buttonItem_MoveSalesReturn.Text = "Returned sales invoice";
                    buttonItem_MovePurchaseInv.Text = "Purchases invoice";
                    buttonItem_MovePurchaseReturn.Text = "Returned Purchases invoice";
                    buttonItem_MoveCustQutation.Text = "Quote clients";
                    buttonItem_MoveSuppQutation.Text = "Quote suppliers";
                    buttonItem_PurchaseOrder.Text = "Purchase Order";
                    buttonItem_MoveOpenQuantities.Text = "Quantitative opening";
                    buttonItem_MoveTransferIn.Text = "The introduction of goods";
                    buttonItem_MoveTransferOut.Text = "Directed by goods";
                    buttonItem_MovePaymentOrder.Text = "Exchange of goods";
                    buttonItem_MovePaymentOReturn.Text = "Returned Exchange of goods";
                    buttonItem_MoveStockAdjustment.Text = "Settlement goods";
                    buttonItem_MovePurchaseOrder.Text = "Purchase Order";
                    //buttonItem_RepAccOther.Text = "Other accounting reports";
                    buttonItem_RepAccRecords.Text = "A detailed account report";
                    //buttonItem_RepAccRecordsStock.Text = "A detailed account report";
                    buttonItem_RepPrintAccRecords.Text = "Report more than one account";
                    buttonItem_RepAccDirctory.Text = "Card Accounts";
                    //buttonItem_RepAccBanks.Text = "Card a Banks Accounts No";
                    buttonItem_RepAccBranches.Text = "Card The Banks and Branches";
                    buttonItem_RepBankPea.Text = "The Bank Peapers Report";
                    buttonItem_BankOp.Text = "The Bank Opearations";
                    buttonItem_SNDReport.Text = "Bounds Report";
                    buttonItem_GaidSerfGabth.Text = "Difference between Receipt and Exchange";
                    buttonItem_RepGeneralLed.Text = "General Ledger";
                    buttonItem_RepGeneralDaily.Text = "Public daily";
                    buttonItem_RepReviewBalanceOfMovement.Text = "the balance of movement";
                    buttonItem_RepReviewBalance.Text = "the balance of stocks";
                    buttonItem_RepReviewTotaly.Text = "the balance of aggregates";
                    buttonItem_RepReviewBalanceOfTotaly.Text = "balance of stocks and aggregates";
                    buttonItem_RepTradingAcc.Text = "Trading account";
                    //buttonItem_RepTradingAcc2.Text = "Trading account";
                    buttonItem_RepProfitAndLossAcc.Text = "Profit and loss account";
                    //buttonItem_RepProfitAndLossAcc2.Text = "Profit and loss account";
                    buttonItem_RepBalanceSheet.Text = "Balance Sheet";
                    //buttonItem_RepBalanceSheet2.Text = "Balance Sheet";
                    buttonItem_RepOutlay.Text = "Expense Report";
                    //buttonItem_VendorRep.Text = "Clients";
                    //buttonItem_SuppRep.Text = "Suppliers";
                    buttonItem_CustSndDiscount.Text = "Debt reduction";
                    buttonItem_SuppSndDiscount.Text = "Debt reduction";
                    buttonItem_ClientBalance.Text = "Clients balance";
                    buttonItem_ClientSleep.Text = "Inactive clients";
                    buttonItem_ClientAge.Text = "Clients Accounts";
                    buttonItem_SupplierBalance.Text = "Suppliers balance";
                    buttonItem_SupplierSleep.Text = "Inactive Suppliers";
                    buttonItem_SupplierAge.Text = "Suppliers Accounts";
                    buttonItem_InvComm.Text = "sales commissions";
                    buttonItem_GaidComm.Text = "Commissions revenue";
                    //buttonItem_GaidCommAcc.Text = "Commissions revenue";
                    buttonItem_InvCommUsr.Text = "sales commissions - Usrs";
                    buttonItem_GaidCommUsr.Text = "Commissions revenue - Users";
                    buttonItem_StoreMnd.Text = "Goods Disbursed";
                    buttonItem_InvoiceMnd.Text = "Invoices Report";
                    buttonItem_StoreCust.Text = "Goods Disbursed To Cust";
                    buttonItem_StoreSupp.Text = "Goods Disbursed To Supp";
                    buttonItem_InvoiceReport.Text = "Invoices Report";
                    radialMenuItem_Setting.Text = "System Setting";
                    //radialMenuItem_Setting2.Text = "System Setting";
                    radialMenuItem_Permisson.Text = "Permissions";
                    //radialMenuItem_Permisson2.Text = "Permissions";
                    //radialMenuItem_Alarm.Text = "Alarms";
                    //radialMenuItem_Alarm2.Text = "Alarms";
                    radialMenuItem_AlArmDueoInvoic.Text = "Billing Alerts by Maturity Date";
                    radialMenuItem_AlArmDueoInvoic.Text = "by Maturity Date";
                    // radialMenuItem_AlarmRequest.Text = "Items an end";
                    radialMenuItem_AlarmRequest2.Text = "Items an end";
                    //radialMenuItem_AlarmRequest.Tooltip = "Alarms Items when demand an end";
                    //radialMenuItem_AlarmDateExp.Text = "Items expiration";
                    radialMenuItem_AlarmDateExp2.Text = "Items expiration";
                    //radialMenuItem_AlarmDateExp.Tooltip = "Alarms Items By the date of expiration";
                    //radialMenuItem_AlArmBankPeaper.Text = "Accrued Peaper";
                    radialMenuItem_AlArmBankPeaper2.Text = "Accrued Peaper";
                    //radialMenuItem_AlArmBankPeaper.Tooltip = "Alarms banknotes to be due";
                    //radialMenuItem_EndYear.Text = "Closing Operation";
                    //radialMenuItem_EndYear2.Text = "Closing Operation";
                    //radialMenuItem_CloseTheYear.Text = "Closing The Year";
                    radialMenuItem_CloseTheYear2.Text = "Closing The Year";
                    //radialMenuItem_CloseTheYear.Tooltip = "Closing The Year";
                    //radialMenuItem_OpenCloseTheYear.Text = "Read Data";
                    radialMenuItem_OpenCloseTheYear2.Text = "Read Data";
                    //radialMenuItem_OpenCloseTheYear.Tooltip = "Read Close Data";
                    //buttonItem_OpenDataEnding.Text = "Show Close Data";
                    buttonItem_DefaultSts.Text = "Back To Working Data";
                    //radialMenuItem_AlArmEmpDoc.Text = "Emp Doc";
                    //radialMenuItem_AlArmEmpDoc2.Text = "Emp Doc";
                    //radialMenuItem_AlArmEmpDoc.Tooltip = "Alarm Employee Documents";
                    expandablePanel3.TitleText = "Quiek Information Panel";
                    labelTypSrch.Text = "Search By :";
                    buttonItem_SrchDay.Text = "Day";
                    buttonItem_SrchWeek.Text = "Week";
                    buttonItem_SrchMonth.Text = "Month";
                    buttonItem_SrchBtwDate.Text = "Between Dates :";
                    ribbonBar1.Text = "Sales Total";
                    ribbonBar2.Text = "Sales Return";
                    ribbonBar3.Text = "Purchases Total";
                    ribbonBar4.Text = "Purchases Return";
                    ribbonBar6.Text = "Sales Inv Count";
                    ribbonBar7.Text = "Purchases Inv Count";
                    buttonItem_Emp.Text = "employees";
                    buttonItem_Files.Text = "Files";
                    buttonItem_EmpMovement.Text = "Employee Movement";
                    buttonItem_EmpSalary.Text = "Salaries";
                    buttonItem_Reports.Text = "Reports";
                    buttonItem_Attend.Text = "Attendance";
                    buttonItem_Forms.Text = "official forms";
                    buttonItem_Transactions.Text = "Treatments";
                    buttonItem_Commentary.Text = "Commentaryies";
                    buttonItem_PassPortForm.Text = "Passport Forms";
                    buttonItem_Dept.Text = "Departments";
                    buttonItem_Part.Text = "Sections";
                    buttonItem_Gur.Text = "Sponsors";
                    buttonItem_Job.Text = "Job";
                    buttonItem_EndServic.Text = "End Service";
                    buttonItem_Nation.Text = "Nationality";
                    buttonItem_Contract.Text = "Contract";
                    buttonItem_Vac.Text = "Vacation Type";
                    buttonItem_City.Text = "City";
                    buttonItem_Religen.Text = "Religen";
                    buttonItem_Cars.Text = "Cars";
                    buttonItem_Projects.Text = "Projects";
                    buttonItem_Add.Text = "ADD";
                    buttonItem_Dis.Text = "Discount";
                    buttonItem_VacOp.Text = "Vacations";
                    buttonItem_Tickit.Text = "Tickets";
                    buttonItem_Advanc.Text = "Advances";
                    buttonItem_CallPhone.Text = "Calling";
                    buttonItem_Rewar.Text = "Reward";
                    buttonItem_Authriz.Text = "Authrization";
                    buttonItem_Secretariats.Text = "Secretariats";
                    buttonItem_VisaGoBack.Text = "Visa Go and Back";
                    buttonItem_CalcSal.Text = "Calculating salaries";
                    buttonItem_CalcSalByEmpNo.Text = "Calculat Emp salary";
                    buttonItem_RelaySal.Text = "Relay salaries";
                    buttonItem_BackRelay.Text = "Cancel deportation salaries";
                    buttonItem_SalaryAdd.Text = "Operations on salaries";
                    buttonItem_PrintSal.Text = "Printable salaries";
                    buttonItem_GenAcc.Text = "Update Accounting of Employee";
                    buttonItem_EmpSalRep.Text = "Report Salary of Employee";
                    buttonItem_EmpRep.Text = "Employee Report";
                    buttonItem_RepDocuments.Text = "Employee Documents";
                    buttonItem_IDRep.Text = "Employee ID";
                    buttonItem_PassportRep.Text = "Employee Passport";
                    buttonItem_MidicAllowncRep.Text = "Midical Allownce";
                    buttonItem_FormRep.Text = "Employee Forms";
                    buttonItem_LicensRep.Text = "Employee Licenses";
                    //     buttonItem_SalaryOp.Text = "Add and Sub Report";
                    buttonItem_UpdateDoc.Text = "Update Documents";
                    buttonItem_ReportUpdate.Text = "Update Documents Report";
                    buttonItem_RepDocAllownc.Text = "Update Allownce Report";
                    buttonItem_RepMovement.Text = "Movements";
                    buttonItem_VacRep.Text = "Vacations Report";
                    buttonItem_TicketRep.Text = "Ticket Report";
                    buttonItem_AutizRep.Text = "Autization Report";
                    buttonItem_SecretariatsRep.Text = "Secretariats Report";
                    buttonItem_VisaGoBackRep.Text = "Visa Go and Back Report";
                    buttonItem_EndServicRep.Text = "End Services Report";
                    buttonItem_AddDis.Text = "Dues and hackers";
                    buttonItem_AddRep.Text = "ADD Report";
                    buttonItem_AwardRep.Text = "Reward Report";
                    buttonItem_AdvancRep.Text = "Advance Report";
                    buttonItem_Phons.Text = "Call Report";
                    buttonItem_DisRep.Text = "Discount Report";
                    buttonItem_CommentaryRep.Text = "Commentary Report";
                    buttonItem_AllowncRep.Text = "Allownces Report";
                    buttonItem_RepCars.Text = "Cars Report";
                    buttonItem_EmpGaidSalRealy.Text = "Salary restrictions phase";
                    buttonItem_EmpGaidAdvanceRealy.Text = "Restrictions on advances";
                    //buttonItem_RepVacNeedProv.Text = "Leave pending approval";
                    //buttonItem_HotelFiles.Text = "Files";
                    //buttonItem_Rooms.Text = "Room Data";
                    //buttonItem_IDType.Text = "ID Types";
                    //buttonItem_HotelJobs.Text = "Jobs";
                    //buttonItem_ServicesType.Text = "Services Types";
                    //buttonItem_HotelNation.Text = "Nationalities";
                    //buttonItem_PhonePrices.Text = "Call Rates";
                    //buttonItem_HotelMove.Text = "Movements";
                    //buttonItem_ServiceUse.Text = "Provide service";
                    //buttonItem_PhoneUse.Text = "Phone calls";
                    //buttonItem_BlackList.Text = "Black List";
                    //buttonItem_GuestRoom.Text = "Guestroom data";
                    //buttonItem_Reservation.Text = "Reservation data";
                    //buttonItem_ReservationToday.Text = "Reservations Today";
                    //buttonItem_GuestLeaves.Text = "Departing guests";
                    //buttonItem_ServiceToLeave.Text = "Departing Services";
                    //buttonItem_PhoneUseToLeave.Text = "Departing Calls";
                    //buttonItem_GuestLeaveGaid.Text = "Auto Bound for stay Value";
                    //buttonItem_RepRevenue.Text = "Revenue today";
                    //buttonItem_RepGuests.Text = "Guests";
                    //buttonItem_RepRoom.Text = "Rooms";
                    //buttonItem_HotelReports.Text = "Reports";
                    //buttonItem_RepGuests.Text = "Guests";
                    //buttonItem_RepGuestsData.Text = "Guests Data";
                    //buttonItem_RepGuestReserv.Text = "Report of inmates booking";
                    //buttonItem_RepGuestsAcc.Text = "Guest account report";
                    //buttonItem_RepGuestsAccTotal.Text = "Total guest account";
                    //buttonItem_RepGuestRequestByServ.Text = "Traffic service";
                    //buttonItem_RepTotalGuestCall.Text = "Traffic Calls";
                    //buttonItem_GaidToLeave.Text = "Automatic bonds for the duration of stay";
                    //buttonItem_RepRoom.Text = "Rooms";
                    //buttonItem_RepRoomAccountStatementDuringPeriod.Text = "Report room account";
                    //buttonIte_RepRoomSpecifications.Text = "Room specifications";
                    //buttonItem_RepRoomMovementDuringPeriod.Text = "Movement of rooms";
                    //buttonItem_RepRoomRepairDuringPeriod.Text = "Maintenance of the room";
                    //buttonItem_RepPeopelTransDuringPeriod.Text = "Population transfer";
                    //buttonItem_RepGrouping.Text = "Groups Report";
                    //txtREmpty.Text = "Empty";
                    //txtRAvailable.Text = "Available";
                    //txtRBussyDaily.Text = "Bussy  Daily";
                    //txtRBussyAppendix.Text = "Bussy Appendix";
                    //txtRClean.Text = "Cleaning";
                    //txtRRepair.Text = "Maintenance";
                    //txtRBussyMonthly.Text = "Bussy Monthly";
                    //txtRLeave.Text = "Departure";
                    //ToolStripMenuItem_RoomNo2.Text = "specifications";
                    //ToolStripMenuItem_GuestData2.Text = "Guest Data";
                    //ToolStripMenuItem_UseRoom2.Text = "Accommodation";
                    //ToolStripMenuItem_LeaveRoom2.Text = "Leave";
                    //toolStripMenuItem_reservationRoom2.Text = "Reservation";
                    //toolStripMenuItem_UseReservations2.Text = "Use Reservation";
                    //toolStripMenuItem_CancelReservations2.Text = "Reservation Cancel";
                    //toolStripMenuItem_RepairRoom2.Text = "maintenance";
                    //toolStripMenuItem_CancelRepairRoom2.Text = "maintenance end";
                    //toolStripMenuItem_ClearRoom2.Text = "Clean";
                    //toolStripMenuItem_CancelClear2.Text = "Clean End";
                    //toolStripMenuItem_Catch2.Text = "arrest Guest";
                    //toolStripMenuItem_Exchange2.Text = "Exchange Guest";
                    //btnHide.Text = "Hide List";
                    //buttonItem_GuestCatch.Text = "Under arrest Guest";
                    //buttonItem_GuestExchang.Text = "Under Exchange Guest";
                    //radialMenuItem_DbOperation.Text = "Data";
                    //radialMenuItem_DbOperation2.Text = "Data";
                    radialMenuItem_Backup.Text = "Backup";
                    radialMenuItem_Backup.Text = "Backup";
                    //radialMenuItem_Backup2.Text = "Backup";
                    radialMenuItem_Restore.Text = "Restore Data Base";
                    radialMenuItem_Restore.Text = "Restore";
                    //radialMenuItem_Restore2.Text = "Restore";
                    //radialMenuItem_Attachment.Tooltip = "Attachment Data Base";
                    //radialMenuItem_Attachment.Text = "Attachment";
                    radialMenuItem_NewDataBase.Text = "Add New Data Base";
                    //radialMenuItem_NewDataBase.Text = "New";
                    //radialMenuItem_NewDataBase2.Text = "New Data Base";
                    radialMenuItem_ChangeDataBase.Text = "Change Data Base";
                    radialMenuItem_DeleteDataBase.Text = "Delete Data Base";
                    //radialMenuItem_DeleteDataBase.Text = "Delete";
                    //radialMenuItem_DeleteDataBase2.Text = "Delete Data Base";
                    //radialMenuItem_ChangeDataBase.Text = "Change";
                    //radialMenuItem_ChangeDataBase2.Text = "Change Data Base";
                    radialMenuItem_PathSetting.Text = "System Path Setting";
                    radialMenuItem_PathSetting.Text = "Path";
                    //radialMenuItem_PathSetting2.Text = "System Path";
                    //radialMenuItem_Reg.Text = "Product Registration";
                    //radialMenuItem_Reg2.Text = "Product Registration";
                    //radialMenuItem_Arabic.Tooltip = "Arabic Language";
                    //radialMenuItem_Arabic2.Text = "Arabic Language";
                    //radialMenuItem_English.Tooltip = "English Language";
                    //radialMenuItem_English2.Text = "English Language";
                    //buttonItem_HotelSystemSetting.Text = "System Options";
                    //radialMenuItem_Lang.Text = "Language";
                    try
                    {
                        //buttonItem_ItemMoveInInvoices.PopupSide = ePopupSide.Right;
                        //buttonItem_RepMnd.PopupSide = ePopupSide.Right;
                        //buttonItem_VendorRep.PopupSide = ePopupSide.Right;
                        //buttonItem_SuppRep.PopupSide = ePopupSide.Right;
                    }
                    catch (Exception error7)
                    {
                        VarGeneral.DebLog.writeLog("e2:", error7, enable: true);
                    }
                    try
                    {
                        //Frame1.RightToLeft = RightToLeft.Yes;
                        //Frame1.RightToLeftLayout = true;
                    }
                    catch (Exception error7)
                    {
                        VarGeneral.DebLog.writeLog("e3:", error7, enable: true);
                    }
                    try
                    {
                        //ToolStripMenuItem_LeaveRoom2.TextAlignment = eButtonTextAlignment.Right;
                        //ToolStripMenuItem_UseRoom2.TextAlignment = eButtonTextAlignment.Left;
                        //toolStripMenuItem_CancelRepairRoom2.TextAlignment = eButtonTextAlignment.Right;
                        //toolStripMenuItem_RepairRoom2.TextAlignment = eButtonTextAlignment.Left;
                        //toolStripMenuItem_CancelClear2.TextAlignment = eButtonTextAlignment.Right;
                        //toolStripMenuItem_ClearRoom2.TextAlignment = eButtonTextAlignment.Left;
                        //toolStripMenuItem_Exchange2.TextAlignment = eButtonTextAlignment.Right;
                        //toolStripMenuItem_Catch2.TextAlignment = eButtonTextAlignment.Left;
                        //toolStripMenuItem_CancelReservations2.TextAlignment = eButtonTextAlignment.Right;
                        //toolStripMenuItem_reservationRoom2.TextAlignment = eButtonTextAlignment.Left;
                        //ToolStripMenuItem_GuestData2.TextAlignment = eButtonTextAlignment.Left;
                        //toolStripMenuItem_UseReservations2.TextAlignment = eButtonTextAlignment.Left;
                        //btnHide.TextAlignment = eButtonTextAlignment.Right;
                    }
                    catch (Exception error7)
                    {
                        VarGeneral.DebLog.writeLog("e4:", error7, enable: true);
                    }
                }
                try
                {
                    FillRommChart(LangVal);
                }
                catch (Exception error7)
                {
                    VarGeneral.DebLog.writeLog("LangChange_FillRomChart:", error7, enable: true);
                }
                if (!string.IsNullOrEmpty(VarGeneral._ActivaionNo) && !VarGeneral.vDemo && !string.IsNullOrEmpty(VarGeneral._SerialNo))
                {
                    ReadOrderFromWebsit();
                }
                if (VarGeneral.SSSLev == "G")
                {
                    if (VarGeneral.SSSTyp == 2)
                    {
                        labelItem_Level.Text = ((LangArEn == 0) ? "النسخة الذهبيــــــة" : "Gold Virsion");
                    }
                    else if (VarGeneral.SSSTyp == 1)
                    {
                        labelItem_Level.Text = ((LangArEn == 0) ? "تطبيق المحاسبــة " : "Account App");
                    }
                    else
                    {
                        labelItem_Level.Text = ((LangArEn == 0) ? " تطبيق المخــرون" : "Inventory App");
                    }
                    labelItem_Level.ForeColor = Color.Navy;
                    labelItem_Level.BackColor = Color.Gold;
                }
                if (VarGeneral.SSSLev == "M")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "تطبيق المستودعات" : "Warehouses Virsion");
                    labelItem_Level.ForeColor = Color.Navy;
                    labelItem_Level.BackColor = Color.Orange;
                }
                if (VarGeneral.SSSLev == "S")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "النسخة الفضيــــــــة" : "Silver Virsion");
                    labelItem_Level.ForeColor = Color.Navy;
                    labelItem_Level.BackColor = Color.Silver;
                }
                if (VarGeneral.SSSLev == "B")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "النسخة البرونزيــــة" : "Boranze Virsion");
                    labelItem_Level.ForeColor = Color.White;
                    labelItem_Level.BackColor = Color.Peru;
                    if (VarGeneral.Bronz_ActivOption.Contains("vCsh = 1 vNW = 1"))
                    {
                        labelItem_Level.Text = ((LangArEn == 0) ? "النسخة البرونزي بلــس" : "Boranze Plus Virsion");
                        labelItem_Level.ForeColor = Color.White;
                        labelItem_Level.BackColor = Color.Peru;
                    }
                }
                if (VarGeneral.SSSLev == "F")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "النسخة الميني برونزي" : "Boranze Mini Virsion");
                    labelItem_Level.ForeColor = Color.White;
                    labelItem_Level.BackColor = Color.Peru;
                }
                if (VarGeneral.SSSLev == "D")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "النسخة المآسيـــة" : "Diamond Virsion");
                    labelItem_Level.ForeColor = Color.Black;
                    labelItem_Level.BackColor = Color.White;
                }
                if (VarGeneral.SSSLev == "E")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "تطبيق شؤون الموظفين" : "Employee App");
                    labelItem_Level.ForeColor = Color.Black;
                    labelItem_Level.BackColor = Color.DarkSeaGreen;
                }
                if (VarGeneral.SSSLev == "R")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "تطبيق المطاعم الذهبي" : "Restaurant App");
                    labelItem_Level.ForeColor = Color.Navy;
                    labelItem_Level.BackColor = Color.Gold;
                }
                if (VarGeneral.SSSLev == "C")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "تطبيق المطاعم البرونزي" : "Restaurant App");
                    labelItem_Level.ForeColor = Color.White;
                    labelItem_Level.BackColor = Color.Peru;
                }
                if (VarGeneral.SSSLev == "H")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "تطبيق الفنادق الذهبي" : "Hotel App");
                    labelItem_Level.ForeColor = Color.Navy;
                    labelItem_Level.BackColor = Color.Gold;
                }
                if (VarGeneral.SSSLev == "X")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "تطبيق الفنادق البرونزي" : "Hotel App");
                    labelItem_Level.ForeColor = Color.White;
                    labelItem_Level.BackColor = Color.Peru;
                }
                if (VarGeneral.SSSLev == "K")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? " تطبيق المخرون البرونزي" : "Inventory App");
                    labelItem_Level.ForeColor = Color.White;
                    labelItem_Level.BackColor = Color.Peru;
                }
                if (VarGeneral.SSSLev == "Z")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? " تطبيق المحاسبة البرونزي" : "Account App");
                    labelItem_Level.ForeColor = Color.White;
                    labelItem_Level.BackColor = Color.Peru;
                }
                if (VarGeneral.SSSLev == "Q")
                {
                    labelItem_Level.Text = ((LangArEn == 0) ? "العقاري والمحاسبة الذهبي" : "Real Estate");
                    labelItem_Level.ForeColor = Color.Navy;
                    labelItem_Level.BackColor = Color.Gold;
                }
                try
                {
                    VarGeneral.ProdectNam = labelItem_Level.Text;
                }
                catch
                {
                }
                //bubbleBar_Items_LocationChanged(null, null);
                metroToolbar_main.RightToLeft = RightToLeft.No;
            }
            catch
            {
            }
            if (File.Exists(Application.StartupPath + "\\Script\\Secriptjustlight.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim() + "\\Secriptjustlight.dll")))
            {
                buttonItem_SalesInv.Text = ((LangArEn == 0) ? "فاتورة حجز وتأجير" : "Renting and Booking");
                buttonItem_MoveSalse.Text = ((LangArEn == 0) ? "فاتورة حجز وتأجير" : "Renting and Booking");
                buttonItem_SalesReturn.Text = ((LangArEn == 0) ? "إلغاء حجز وتأجير" : "Renting and Booking Cancel");
                buttonItem_MoveSalesReturn.Text = ((LangArEn == 0) ? "إلغاء حجز وتأجير" : "Renting and Booking Cancel");
                buttonItem_PaymentOrder.Visible = false;
                buttonItem_PaymentOReturn.Visible = false;
                buttonItem_MovePaymentOrder.Visible = false;
                buttonItem_MovePaymentOReturn.Visible = false;
                bubbleButton_UserPoint.Visible = false;
                bubbleButton_UserPointReturn.Visible = false;
                buttonItem_StoreCust.Visible = false;
                buttonItem_StoreSupp.Visible = false;
                // buttonItem_RepMnd.Visible = false;
            }
        }
        private void SSSBackup(string vPaths, string vServerNm)
        {
            try
            {
                if (_SysSetting == null) _SysSetting = db.SystemSettingStock();
                List<T_Branch> vBranchCount = dbc.FillBranch_2("").ToList();
                for (int i = 0; i < vBranchCount.Count; i++)
                {
                    try
                    {
                        string CmdText = " BACKUP DATABASE " + VarGeneral.DBNo.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + " TO DISK='{0}' WITH NOFORMAT, NOINIT, NAME = N'MyDB-FullBackup, SKIP, NOREWIND, NOUNLOAD, STATS = 10'";
                        CmdText = string.Format(CmdText, vPaths);
                        try
                        {
                            GC.Collect();
                            GC.WaitForPendingFinalizers();
                            File.Delete(Application.StartupPath + "\\" + vServerNm + "\\DB\\" + Environment.UserName + "\\BackupLocDB.sql");
                        }
                        catch
                        {
                        }
                        TextWriter tw = File.CreateText(Application.StartupPath + "\\" + vServerNm + "\\DB\\" + Environment.UserName + "\\BackupLocDB.sql");
                        tw.WriteLine(CmdText);
                        tw.Close();
                        string sqlConnectionString = VarGeneral.BranchCS;
                        FileInfo fileDB = new FileInfo(Application.StartupPath + "\\" + vServerNm + "\\DB\\" + Environment.UserName + "\\BackupLocDB.sql");
                        FileStream fsToRead = fileDB.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                        StreamReader sr = new StreamReader(fsToRead);
                        string script = sr.ReadToEnd();
                        sr.Close();
                        SqlConnection conn = new SqlConnection(sqlConnectionString);
                        Server server = new Server(new ServerConnection(conn));
                        server.ConnectionContext.ExecuteNonQuery(script);
                    }
                    catch
                    {
                    }
                }
                dbInstance = null;
                _SysSetting.AutoBackupDate = n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd");
                db.Log = VarGeneral.DebugLog;
                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                try
                {
                    VarGeneral.Settings_Sys = db.SystemSettingStock();
                }
                catch
                {
                    Application.Exit();
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("ButBackUp_Click:", error, enable: true);
                ////label_AlarmBackup.Text = ((LangArEn == 0) ? "يرحى التأكد من المسار\n لم تتم عملية النسخ الاحتياطي بنجاح..  " : "Is not the backup process successfully .. Check Path");
                ////label_AlarmBackup.Visible = true;
                ////button_AlarmBackupClose.Visible = true;
                ////label_AlarmBackup.BringToFront();
                ////button_AlarmBackupClose.BringToFront();
            }
        }

        string cd = @"ALTER DATABASE [<<new database name>>] MODIFY FILE ( NAME = <<OldDBName>>, NEWNAME = <<new database name>> );
ALTER DATABASE[<<new database name>>] MODIFY FILE(NAME = <<OldDBName>> _Log, NEWNAME = <<new database name>>_Log );

            ";
        private bool CheckDB(string DBNm)
        {
            try
            {
                
                string _pth = dbc.ExecuteQuery<string>("SELECT physical_name FROM sys.master_files where physical_name Like '%" + DBNm + ".mdf'", new object[0]).FirstOrDefault();
                if (!File.Exists(_pth))
                {
                    return false;
                }
                List<T_Branch> vBranchCount = dbc.FillBranch_2("").ToList();


                for (int i = 0; i < vBranchCount.Count; i++)
                {
                    string dbname = DBNm.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no;
                    string dbnameold = DBNm.Replace("DBPROSOFT", "APPSOFT") + "_" + vBranchCount[i].Branch_no;
                    string sc = cd.Replace("<<new database name>>", dbname);
                    sc = cd.Replace("<<OldDBName>>", dbnameold);


                    _pth = dbc.ExecuteQuery<string>("SELECT physical_name FROM sys.master_files where physical_name Like '%" + DBNm.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + ".mdf'", new object[0]).FirstOrDefault();

                    if (!File.Exists(_pth))
                    {


                        try
                        {
                            dbc.ExecuteCommand(sc);
                        }
                        catch
                        {

                        }
                        _pth = dbc.ExecuteQuery<string>("SELECT physical_name FROM sys.master_files where physical_name Like '%" + DBNm.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + ".mdf'", new object[0]).FirstOrDefault();


                        if (!File.Exists(_pth))
                            return false;
                        else
                            return true;
                    }
                }
                return true;
            }
            catch
            {
                return false;
            }
        }
        BackupAlarm f;
        int autbackupstatus = 0;
#pragma warning disable CS0169 // The field 'Frm_Main.t' is never used
        FrmMn t;
#pragma warning restore CS0169 // The field 'Frm_Main.t' is never used
        // DropBoxSyncronization d = new DropBoxSyncronization();
        private void DBBackup(bool vMsg)
        {
            int b = 0;
            autbackupstatus = 1;
            string ServiceNm = "";
            try
            {
                if (VarGeneral.vEndYears)
                {
                    return;
                }
                 if (VarGeneral.vDemo && VarGeneral.UserID != 1)
                {
                    MessageBox.Show((LangArEn == 0) ? "يرجى تفعيل نسختك التجريبة للإستفادة من هذه الخدمة\n لم تتم عملية النسخ الاحتياطي بنجاح..  " : "Please activate your free trial to take advantage of this service \n backup process has not been successfully ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
                try
                {
                    if (VarGeneral.gUserName == "runsetting" && !vMsg && !string.IsNullOrEmpty(VarGeneral._SysDirPath) && Directory.Exists(VarGeneral._SysDirPath))
                    {
                        return;
                    }
                }
                catch (Exception error2)
                {
                    VarGeneral.DebLog.writeLog("Menual Backup:  " + (vMsg ? "1" : "0") + " || ", error2, enable: true);
                }
                if (VarGeneral.gUserName == "runsetting")
                {
                    ServiceNm = VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim();
                }
                else
                {
                    for (b = 0; b < VarGeneral.gServerName.Length && !(VarGeneral.gServerName.Substring(b, 1) == "\\"); b++)
                    {
                    }
                    try
                    {
                        ServiceNm = VarGeneral.gServerName.Substring(b + 1);
                    }
                    catch
                    {
                        ServiceNm = "";
                    }
                }
                if (string.IsNullOrEmpty(ServiceNm))
                {
                    ServiceNm = VarGeneral.DBNo.Replace("DBPROSOFT_", null);
                }
                try
                {
                    if (!Directory.Exists(Application.StartupPath + "\\" + ServiceNm))
                    {
                        Directory.CreateDirectory(Application.StartupPath + "\\" + ServiceNm);
                    }
                }
                catch
                {
                }
                try
                {
                    if (!Directory.Exists(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName))
                    {
                        Directory.CreateDirectory(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName);
                    }
                }
                catch
                {
                }
                string BackupPath = "";
                if (string.IsNullOrEmpty(VarGeneral._BackPath))
                {
                    try
                    {
                        IDatabase Accdb = Framework.Data.Database.GetDatabase(VarGeneral.BranchCS);
                        DataTable q = Accdb.ExecuteMyDataSet(storedProcedure: false, "EXEC master.dbo.xp_instance_regread  N'HKEY_LOCAL_MACHINE', N'Software\\Microsoft\\MSSQLServer\\MSSQLServer',N'BackupDirectory'").Tables[0];
                        if (q.Rows.Count > 0)
                        {
                            BackupPath = q.Rows[0][1].ToString();
                        }
                    }
                    catch
                    {
                        BackupPath = "";
                    }
                }
                else
                {
                    BackupPath = VarGeneral._BackPath;
                }
                try
                {
                    List<string> FileBackup = new List<string>();
                    string filepath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                    DirectoryInfo d = new DirectoryInfo(BackupPath);
                    FileInfo[] files = d.GetFiles("*.bak");
                    foreach (FileInfo file in files)
                    {
                        if (file.Name.StartsWith(VarGeneral.DBNo))
                        {
                            FileBackup.Add(file.FullName);
                        }
                    }
                    FileBackup.Sort();
                    if (!CheckDB(VarGeneral.DBNo))
                    {
                        //label_AlarmBackup.Text = ((LangArEn == 0) ? "يرحى التأكد من المسار\n لم تتم عملية النسخ الاحتياطي بنجاح..  " : "Is not the backup process successfully .. Check Path");
                        //label_AlarmBackup.Visible = true;
                        //button_AlarmBackupClose.Visible = true;
                        //label_AlarmBackup.BringToFront();
                        //button_AlarmBackupClose.BringToFront();
                        //return;
                    }
                    for (int i = 0; i < FileBackup.Count; i++)
                    {
                        if (FileBackup.Count <= ((!(VarGeneral.gUserName == "runsetting")) ? 4 : 0))
                        {
                            break;
                        }
                        if (File.Exists(FileBackup[i]))
                        {
                            GC.Collect();
                            GC.WaitForPendingFinalizers();
                            File.Delete(FileBackup[i]);
                            FileBackup.RemoveAt(i);
                            i = 0;
                        }
                    }
                }
                catch
                {
                }
                int? calendr = VarGeneral.Settings_Sys.Calendr;
                if (calendr.Value == 0 && calendr.HasValue)
                {
                    object obj6 = BackupPath;
                    BackupPath = string.Concat(obj6, "\\", VarGeneral.DBNo, "_", VarGeneral.Gdate.Substring(0, 4), "_", VarGeneral.Gdate.Substring(5, 2), "_", VarGeneral.Gdate.Substring(8, 2), "_", DateTime.Now.Hour, "_", DateTime.Now.Minute, "_", DateTime.Now.Second, ".bak");
                }
                else
          
                {
                    object obj6 = BackupPath;
                    BackupPath = string.Concat(obj6, "\\", VarGeneral.DBNo, "_", VarGeneral.Hdate.Substring(0, 4), "_", VarGeneral.Hdate.Substring(5, 2), "_", VarGeneral.Hdate.Substring(8, 2), "_", DateTime.Now.Hour, "_", DateTime.Now.Minute, "_", DateTime.Now.Second, ".bak");
                }
                string CmdText = " BACKUP DATABASE " + VarGeneral.DBNo + " TO DISK='{0}' WITH NOFORMAT, NOINIT, NAME = N'MyDB-FullBackup, SKIP, NOREWIND, NOUNLOAD, STATS = 10'";
                CmdText = string.Format(CmdText, BackupPath);
                try
                {
                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    File.Delete(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName + "\\BackupLocDB.sql");
                }
                catch
                {
                }
                TextWriter tw = File.CreateText(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName + "\\BackupLocDB.sql");
                tw.WriteLine(CmdText);
                tw.Close();
                string sqlConnectionString = VarGeneral.BranchCS;
                FileInfo fileDB = new FileInfo(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName + "\\BackupLocDB.sql");
                FileStream fsToRead = fileDB.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                StreamReader sr = new StreamReader(fsToRead);
                string script = sr.ReadToEnd();
                sr.Close();
                SqlConnection conn = new SqlConnection(sqlConnectionString);
                Server server = new Server(new ServerConnection(conn));
                server.ConnectionContext.ExecuteNonQuery(script);
                SSSBackup(BackupPath, ServiceNm);
                if (vMsg)
                {
                    MessageBox.Show((LangArEn == 0) ? "تم عملية النسخ الأحتياطي بنجاح " : "Backup is Will be Done", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                }
            }
            catch (Exception error2)
            {
                VarGeneral.DebLog.writeLog("ButBackUp_Click:", error2, enable: true);
            //    MessageBox.Show(error2.Message);
               
                MessageBox.Show ((LangArEn == 0) ? "يرحى التأكد من المسار من تهيئة النظام\n لم تتم عملية النسخ الاحتياطي بنجاح..  " : "Is not the backup process successfully .. Check Path");
                //    label_AlarmBackup.Visible = true;
                //    button_AlarmBackupClose.Visible = true;
                //    label_AlarmBackup.BringToFront();
                //    button_AlarmBackupClose.BringToFront();
            }
            try
            {
                if (!string.IsNullOrEmpty(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName) && Directory.Exists(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName))
                {
                    try
                    {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                    catch
                    {
                    }
                    Directory.Delete(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName, recursive: true);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void RemoveDataBase()
        {
            try
            {
                List<string> vRec2 = db.ExecuteQuery<string>("SELECT name FROM sys.databases WHERE name Like 'PROSOFT_default%'", new object[0]).ToList();
                for (int i = 0; i < vRec2.Count; i++)
                {
                    try
                    {
                        T_Branch newData = dbc.RateBranch(vRec2[i].ToString().Remove(0, 16));
                        if (newData == null || newData.Branch_ID == 0)
                        {
                            dbc.ExecuteCommand("ALTER DATABASE PROSOFT_default_" + vRec2[i].ToString().Remove(0, 16) + " SET SINGLE_USER WITH ROLLBACK IMMEDIATE;\r\n                                                     DROP DATABASE [PROSOFT_default_" + vRec2[i].ToString().Remove(0, 16) + "]");
                        }
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
        }
        private void EmpDocAlarm2()
        {
            if (dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp.Value == 1 || VarGeneral.SSSTyp == 0 || VarGeneral.SSSTyp == 1 || !VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 23))
            {
                return;
            }
            List<T_AccDef> vEmp = db.ExecuteQuery<T_AccDef>("Select * From T_AccDef Where T_AccDef.AccCat = 6 AND T_AccDef.Lev = 4 AND DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEmployee.Value + ", CONVERT(DATE, ID_DateEnd)) <= CASE WHEN substring(ID_DateEnd,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
            if (vEmp.Count > 0)
            {
                FrmAutoAlarmEmployee frm = new FrmAutoAlarmEmployee();
                frm.Tag = LangArEn;
                VarGeneral.vTabAutoAlarm = 0;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
                return;
            }
            vEmp = db.ExecuteQuery<T_AccDef>("Select * From T_AccDef Where T_AccDef.AccCat = 6 AND T_AccDef.Lev = 4 AND DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEmployee.Value + ", CONVERT(DATE, Passport_DateEnd)) <= CASE WHEN substring(Passport_DateEnd,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
            if (vEmp.Count > 0)
            {
                FrmAutoAlarmEmployee frm = new FrmAutoAlarmEmployee();
                frm.Tag = LangArEn;
                VarGeneral.vTabAutoAlarm = 0;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
                return;
            }
            vEmp = db.ExecuteQuery<T_AccDef>("Select * From T_AccDef Where T_AccDef.AccCat = 6 AND T_AccDef.Lev = 4 AND DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEmployee.Value + ", CONVERT(DATE, Insurance_DateEnd)) <= CASE WHEN substring(Insurance_DateEnd,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
            if (vEmp.Count > 0)
            {
                FrmAutoAlarmEmployee frm = new FrmAutoAlarmEmployee();
                frm.Tag = LangArEn;
                VarGeneral.vTabAutoAlarm = 0;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void EmpsLoadMani()
        {
            VarGeneral.Day_No = n.GetDayNo("") + 1;
            string ggDate = "";
            int? calendr = VarGeneral.Settings_Sys.Calendr;
            ggDate = ((calendr.Value == 0 && calendr.HasValue) ? VarGeneral.Gdate : VarGeneral.Hdate);
            if (VarGeneral.CheckDate(ggDate))
            {
                ggDate = ((int.Parse(Convert.ToDateTime(ggDate).ToString("yyyy/MM/dd").Substring(5, 2)) == 12) ? (int.Parse(Convert.ToDateTime(ggDate).ToString("yyyy/MM/dd").Substring(0, 4)) - 1 + "/01") : ((int.Parse(Convert.ToDateTime(ggDate).ToString("yyyy/MM/dd").Substring(5, 2)) != 1) ? (Convert.ToDateTime(ggDate).ToString("yyyy/MM/dd").Substring(0, 4) + "/" + (int.Parse(Convert.ToDateTime(ggDate).ToString("yyyy/MM/dd").Substring(5, 2)) - 1)) : (int.Parse(Convert.ToDateTime(ggDate).ToString("yyyy/MM/dd").Substring(0, 4)) - 1 + "/12")));
            }
            db.OpTest(Convert.ToDateTime(ggDate).ToString("yyyy/MM"), vValue: true);
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AttendOperat] Set [Time1] = '' Where [Time1] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AttendOperat] Set [Time2] = '' Where [Time2] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AttendOperat] Set [LeaveTime] = '' Where [LeaveTime] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AttendOperat] Set [LeaveTime2] = '' Where [LeaveTime2] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AttendOperat] Set [ComeTime] = '' Where [ComeTime] is null ");
            }
            catch
            {
            }
            EmpDocAlarm();
        }
        private void EmpDocAlarm()
        {
            if (VarGeneral.vDemo)
            {
                return;
            }
            if (VarGeneral.TString.ChkStatShow(permission.Emp_GenStr, 12))
            {
                buttonItem_RepVaccNeedProv_Click(null, null);
                //buttonItem_RepVacNeedProv_Click(null, null);
            }
            if (VarGeneral.Settings_Sys.IsAlarmEmpDoc.Value)
            {
                List<T_Emp> vEmp = db.ExecuteQuery<T_Emp>("Select * From T_Emp Where T_Emp.EmpState = 1 AND DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEmpDocBefore.Value + ", CONVERT(DATE, ID_DateEnd)) <= CASE WHEN substring(ID_DateEnd,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vEmp.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 0;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
                vEmp = db.ExecuteQuery<T_Emp>("Select * From T_Emp Where T_Emp.EmpState = 1 AND DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEmpDocBefore.Value + ", CONVERT(DATE, Passport_DateEnd)) <= CASE WHEN substring(Passport_DateEnd,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vEmp.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 0;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
                vEmp = db.ExecuteQuery<T_Emp>("Select * From T_Emp Where T_Emp.EmpState = 1 AND DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEmpDocBefore.Value + ", CONVERT(DATE, License_DateEnd)) <= CASE WHEN substring(License_DateEnd,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vEmp.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 0;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
                vEmp = db.ExecuteQuery<T_Emp>("Select * From T_Emp Where T_Emp.EmpState = 1 AND DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEmpDocBefore.Value + ", CONVERT(DATE, Insurance_DateEnd)) <= CASE WHEN substring(Insurance_DateEnd,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vEmp.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 0;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
            }
            if (VarGeneral.Settings_Sys.IsAlarmEmpContract.Value)
            {
                List<T_Emp> vEmp = db.ExecuteQuery<T_Emp>("Select * From T_Emp Where T_Emp.EmpState = 1 AND DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEmpContractBefore.Value + ", CONVERT(DATE, EndContr)) <= CASE WHEN substring(EndContr,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vEmp.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 1;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
            }
            if (VarGeneral.Settings_Sys.IsAlarmFamilyPassport.Value)
            {
                List<T_Family> vFamily = db.ExecuteQuery<T_Family>("Select * From T_Family Where DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmFamilyPassportBefore.Value + ", CONVERT(DATE, PassEnd)) <= CASE WHEN substring(PassEnd,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vFamily.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 2;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
            }
            if (VarGeneral.Settings_Sys.IsAlarmEndVaction.Value)
            {
                List<T_Vacation> vEmpVac = db.ExecuteQuery<T_Vacation>("Select * From T_Vacation Where IFState = 0 AND  DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmEndVactionBefore.Value + ", CONVERT(DATE, EndDate)) <= CASE WHEN substring(EndDate,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vEmpVac.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 3;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
            }
            if (VarGeneral.Settings_Sys.IsAlarmGuarantorDoc.Value)
            {
                List<T_Guarantor> vBoss = db.ExecuteQuery<T_Guarantor>("Select * From T_Guarantor Where DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmGuarantorDocBefore.Value + ", CONVERT(DATE, MdniEndDate)) <= CASE WHEN substring(MdniEndDate,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vBoss.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 4;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
            }
            if (VarGeneral.Settings_Sys.IsAlarmCarDoc.Value)
            {
                List<T_Car> vCars = db.ExecuteQuery<T_Car>("Select * From T_Cars Where DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmCarDocBefore.Value + ", CONVERT(DATE, FormEndDate)) <= CASE WHEN substring(FormEndDate,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vCars.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 6;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
                vCars = db.ExecuteQuery<T_Car>("Select * From T_Cars Where DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmCarDocBefore.Value + ", CONVERT(DATE, AllownceEndDate)) <= CASE WHEN substring(AllownceEndDate,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vCars.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 6;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
            }
            if (VarGeneral.Settings_Sys.IsAlarmSecretariatsDoc.Value)
            {
                List<T_Secretariat> vSecretariats = db.ExecuteQuery<T_Secretariat>("Select * From T_Secretariats Where T_Secretariats.IFState = 0 and DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmSecretariatsBefore.Value + ", CONVERT(DATE, T_Secretariats.EndDate)) <= CASE WHEN substring(T_Secretariats.EndDate,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vSecretariats.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 7;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
            }
            if (VarGeneral.Settings_Sys.IsAlarmVisaGoBack.Value)
            {
                List<T_VisaGoBack> vVisaGoBack = db.ExecuteQuery<T_VisaGoBack>("Select * From T_VisaGoBack Where DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmVisaGoBack.Value + ", CONVERT(DATE, T_VisaGoBack.VisaEndDate)) <= CASE WHEN substring(T_VisaGoBack.VisaEndDate,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
                if (vVisaGoBack.Count > 0)
                {
                    FrmAutoAlarm frm = new FrmAutoAlarm();
                    frm.Tag = LangArEn;
                    VarGeneral.vTabAutoAlarm = 8;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    return;
                }
            }
            if (!VarGeneral.Settings_Sys.IsAlarmDepts.Value)
            {
                return;
            }
            List<T_Dept> vDepts = db.ExecuteQuery<T_Dept>("Select * From T_Dept Where DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmDeptsBefore.Value + ", CONVERT(DATE, AllownceEndDate)) <= CASE WHEN substring(AllownceEndDate,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
            if (vDepts.Count > 0)
            {
                FrmAutoAlarm frm = new FrmAutoAlarm();
                frm.Tag = LangArEn;
                VarGeneral.vTabAutoAlarm = 9;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
                return;
            }
            List<T_Dept> vDeptsZakaa = db.ExecuteQuery<T_Dept>("Select * From T_Dept Where DATEADD(DAY, -" + VarGeneral.Settings_Sys.AlarmDeptsBefore.Value + ", CONVERT(DATE, ZakaaEndDate1)) <= CASE WHEN substring(ZakaaEndDate1,1,4) < 1800 THEN CONVERT(DATE, '" + VarGeneral.Hdate + "') ELSE '" + VarGeneral.Gdate + "' END", new object[0]).ToList();
            if (vDeptsZakaa.Count > 0)
            {
                FrmAutoAlarm frm = new FrmAutoAlarm();
                frm.Tag = LangArEn;
                VarGeneral.vTabAutoAlarm = 9;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void WaterPackages()
        {
            buttonItem_Mndob.Text = ((LangArEn == 0) ? "العمــلاء" : "Customers");
            //buttonItem_RepMnd.Text = ((LangArEn == 0) ? "العمــلاء" : "Teachers");
            buttonItem_InvoiceMnd.Text = ((LangArEn == 0) ? "تقرير فواتير العمــلاء" : "Teachers Invoices");
            //  buttonItem_RepMnd.Visible = false;
            buttonItem_StoreMnd.Visible = false;
            buttonItem_CenterCost.Text = ((LangArEn == 0) ? "السيارات" : "Cars");
            buttonItem_Vender.Text = ((LangArEn == 0) ? "السائقــين" : "Drivers");
            //   buttonItem_VendorRep.Text = ((LangArEn == 0) ? "السائقــين" : "Drivers");
            buttonItem_ClientBalance.Text = ((LangArEn == 0) ? "أرصدة السائقين" : "Drivers Blances");
            buttonItem_ClientAge.Text = ((LangArEn == 0) ? "ذمم السائقين" : "Drivers Accounts");
            buttonItem_ClientSleep.Text = ((LangArEn == 0) ? "السائقين الراكدون" : "Inactive Drivers");
            buttonItem_CustQutation.Text = ((LangArEn == 0) ? "عرض سعر السائقين" : "Quote");
            buttonItem_MoveCustQutation.Text = ((LangArEn == 0) ? "عرض سعر السائقين" : "Quote");
            buttonItem_MovePaymentOrder.Visible = false;
            buttonItem_MovePaymentOReturn.Visible = false;
            buttonItem_PaymentOrder.Visible = false;
            buttonItem_PaymentOReturn.Visible = false;
            buttonItem_StoreCust.Visible = false;
            buttonItem_StoreSupp.Visible = false;
            buttonItem_Offer.Visible = false;
            buttonItem_CustSndDiscount.Visible = false;
            buttonItem_SuppSndDiscount.Visible = false;
            bubbleButton_RepPoints.Visible = false;
        }
        bool sIsNumeric(string s)
        {
            return Microsoft.VisualBasic.Information.IsNumeric(s);
        }
        private Stock_DataDataContext dbInstance;
        private Rate_DataDataContext dbInstanceRate;
        private bool _CheckRemotly = true;
#pragma warning disable CS0414 // The field 'Frm_Main._SyncNm' is assigned but its value is never used
        private string _SyncNm = "";
#pragma warning restore CS0414 // The field 'Frm_Main._SyncNm' is assigned but its value is never used
        private bool RunSyncSts = true;
#pragma warning disable CS0169 // The field 'Frm_Main.Stat' is never used
        private int Stat;
#pragma warning restore CS0169 // The field 'Frm_Main.Stat' is never used
#pragma warning disable CS0169 // The field 'Frm_Main.stat2' is never used
        private int stat2;
#pragma warning restore CS0169 // The field 'Frm_Main.stat2' is never used
#pragma warning disable CS0169 // The field 'Frm_Main.Rr' is never used
        private int Rr;
#pragma warning restore CS0169 // The field 'Frm_Main.Rr' is never used
#pragma warning disable CS0169 // The field 'Frm_Main.Cc' is never used
        private int Cc;
#pragma warning restore CS0169 // The field 'Frm_Main.Cc' is never used
#pragma warning disable CS0169 // The field 'Frm_Main.SS' is never used
        private int SS;
#pragma warning restore CS0169 // The field 'Frm_Main.SS' is never used
#pragma warning disable CS0169 // The field 'Frm_Main.SlctVal' is never used
        private int SlctVal;
#pragma warning restore CS0169 // The field 'Frm_Main.SlctVal' is never used
#pragma warning disable CS0169 // The field 'Frm_Main.RoomOp' is never used
        private T_Rom RoomOp;
#pragma warning restore CS0169 // The field 'Frm_Main.RoomOp' is never used
        private T_User permission;
#pragma warning disable CS0169 // The field 'Frm_Main.listSysSetting' is never used
        private List<T_SYSSETTING> listSysSetting;
#pragma warning restore CS0169 // The field 'Frm_Main.listSysSetting' is never used
        private T_SYSSETTING _SysSetting;
        private AlertCustom m_AlertOnLoad = null;
        private int _AlertWin = 100;
        private string pthMailDB = "";
#pragma warning disable CS0414 // The field 'Frm_Main.ReservToday' is assigned but its value is never used
        private bool ReservToday = false;
#pragma warning restore CS0414 // The field 'Frm_Main.ReservToday' is assigned but its value is never used
        int ks = 1;
        void worit()
        {
            File.WriteAllText(Application.StartupPath + "\\testsz.txt", ks.ToString() + Environment.NewLine);
            // File.WriteAllText(Application.StartupPath + "\\testsz.txt", );
            ks++;
        }
        public static void setinitaliaiztion()
        {if (Environment.MachineName != "EC2AMAZ-SI4ASSC")
                VarGeneral.RepServerConn = ".";
            else VarGeneral.RepServerConn = "EC2AMAZ-SI4ASSC";

            Stock_DataDataContext db = new Stock_DataDataContext(VarGeneral.BranchCS);
            try
            {
                T_SYSSETTING ts = db.SystemSettingStock();
                VarGeneral.Settings_Sys = ts;
                if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49))
                {
                    int ihjj = (ts.AfterDotNum == null ? 3 : (int)ts.AfterDotNum);
                    VarGeneral.setDecimalPointSettings(ihjj);
                }
                else
                    VarGeneral.setDecimalPointSettings(2);
            }
            catch
            {
                SqlConnection cons = new SqlConnection(VarGeneral.BranchCS);
                SqlCommand cmd = new SqlCommand(DbUpdates.Uptate3, cons);
                cons.Open();
                cmd.ExecuteNonQuery();
                cons.Close();
                T_SYSSETTING ts = db.SystemSettingStock();
                VarGeneral.Settings_Sys = ts;
                if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49))
                {
                    int ihjj = (ts.AfterDotNum == null ? 3 : (int)ts.AfterDotNum);
                    VarGeneral.setDecimalPointSettings(ihjj);
                }
                else

                    VarGeneral.setDecimalPointSettings(2);
            }
            try
            {
                RegistryKey _hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft\\Register", writable: true);
                if (_hKey != null)
                {
                    VarGeneral._ActivaionNo = _hKey.GetValue("SSSActivationNo").ToString();
                    VarGeneral._SerialNo = _hKey.GetValue("vSr").ToString();
                }
            }
            catch
            {
                VarGeneral._ActivaionNo = "";
                VarGeneral._SerialNo = "";
            }
            VarGeneral.Settings_Sys = db.SystemSettingStock();
            VarGeneral._SysDirPath = VarGeneral.Settings_Sys.SysDir;
            VarGeneral._BackPath = VarGeneral.Settings_Sys.BackPath;
        }
     
        private void flfinshed(object sender, EventArgs e)
        {
            MsQuee.Clear();
        }

        MarqueeLabel flwowmessag = null; //MarqueeLabel flwowmessag = null;
        List<string> MsQuee = new List<string>();
        private void newmmessage(object sender, EventArgs e)
        {
            if (!IsHandleCreated)
                this.CreateControl();
            if (this.IsHandleCreated)
            {
                this.Invoke(new Action(() =>
                {


                    if (!MsQuee.Contains(sender.ToString()))
                    {


                        flwowmessag.BackColor = Utilites.mcolor;
                        if (flwowmessag.Visible == false)
                        {
                            flwowmessag.Visible = true;
                            flwowmessag.UIThread(() => flwowmessag.Text = sender.ToString());


                        }
                        else
                        {


                            flwowmessag.Text += "@@ PROERP @@" + sender.ToString();

                            //  flowmessag.Invoke(new Action(() => flowmessag.Text += "@@ PROERP @@" + sender.ToString()));
                            //  

                        }
                        MsQuee.Add(sender.ToString());

                    }
                }));


            }
            else
            {

            }
        }

        private static void PreJitControls()
        {
            System.Threading.ThreadPool.QueueUserWorkItem((t) =>
            {
                Thread.Sleep(1000); // Or whatever reasonable amount of time  
                try
                {
                    foreach (var type in Assembly.GetExecutingAssembly().GetTypes())
                    {
                        foreach (var method in type.GetMethods(BindingFlags.DeclaredOnly |
                                            BindingFlags.NonPublic |
                                            BindingFlags.Public | BindingFlags.Instance |
                                            BindingFlags.Static))
                        {
                            System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(method.MethodHandle);
                            Console.WriteLine(method.Name);
                        }
                    }
                }
                catch (Exception) { }
            });
        }

        public Frm_Main()
        {

            try
            {
                CheckForIllegalCrossThreadCalls = false;
                InitializeComponent();//
                int kk = VarGeneral.DeleteOption;
                ribbonCheckBox2.Visible = false;
                if (VarGeneral.UserID==1)
                {
                    ribbonCheckBox2.Visible = true;

                }
                if (kk==1)
                {
                    ribbonCheckBox2.Checked = true; ;
                }
                txtCount.ValueChanged += setcount;
                this.FormClosing += dsafas;
                if (Program.isdevelopermachine()) ;
                PreJitControls();
                loadLayOut();
                flwowmessag = new MarqueeLabel();
                flwowmessag.BackColor = (Color.Orange);
                flwowmessag.VisibleChanged += flfinshed;
                flwowmessag.Disposed += flfinshed;
                flwowmessag.Dock = DockStyle.Top;
                flwowmessag.BringToFront();
                flwowmessag.Visible = false;
                flwowmessag.Width = this.Width;
                this.Controls.Add(flwowmessag);

                _CheckRemotly = true;
                LangArEn = VarGeneral.UserLang;
                if (VarGeneral.vDemo)
                {
                    labelItem_Reg.Visible = true;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " INIT FMAIN");
            }
        }

        private void setcount(object sender, EventArgs e)
        {
            VarGeneral.txtcountvalue = txtCount.Value;
        }

        private void dsafas(object sender, FormClosingEventArgs e)
        {
          
        }

        void LoadVersionLoaut()
        {

            try
            {
                RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRF ANd Setting\\WinSystemOperation", writable: true);
                RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\PROFHRDW\\ItIntel", writable: true);
                try
                {
                    object q = hKey.GetValue("vSM");
                    if (string.IsNullOrEmpty(q.ToString()))
                    {
                        hKey.CreateSubKey("vSM");
                        hKey.SetValue("vSM", "0");
                    }
                }
                catch
                {
                    hKey.CreateSubKey("vSM");
                    hKey.SetValue("vSM", "0");
                }
                try
                {
                    object q = hKey.GetValue("vSM_Electa");
                    if (string.IsNullOrEmpty(q.ToString()))
                    {
                        hKey.CreateSubKey("vSM_Electa");
                        hKey.SetValue("vSM_Electa", "0");
                    }
                }
                catch
                {
                    hKey.CreateSubKey("vSM_Electa");
                    hKey.SetValue("vSM_Electa", "0");
                }
                try
                {
                    object q = hKeyNew.GetValue("vSM_New");
                    if (string.IsNullOrEmpty(q.ToString()))
                    {
                        hKeyNew.CreateSubKey("vSM_New");
                        hKeyNew.SetValue("vSM_New", "0");
                    }
                }
                catch
                {
                    hKeyNew.CreateSubKey("vSM_New");
                    hKeyNew.SetValue("vSM_New", "0");
                }
                try
                {
                    long regval_Sms = long.Parse(hKey.GetValue("vSM").ToString());
                    long regval_Electa_Sms = long.Parse(hKey.GetValue("vSM_Electa").ToString());
                    long regval_New_Sms = long.Parse(hKeyNew.GetValue("vSM_New").ToString());
                    RIbbon_Resturnat.Visible = false;
                    sideBarPanelItem_Emps.Visible = false;
                    sideBarPanelItem_Eqar.Visible = false;
                    //  sideBarPanelItem_Hotel.Visible = false;
                    if (regval_Sms == 1 && regval_Sms == regval_Electa_Sms && regval_Sms == regval_New_Sms)
                    {
                        sideBarPanelItem_Invioces.Visible = false;
                        buttonItem_RepAccDirctory.Visible = false;
                        sideBarPanelItem_RepStocks.Visible = false;
                        sideBarPanelItem_RepAcc.Visible = false;
                        sideBarPanelItem_Emps.Visible = false;
                        //sideBarPanelItem_Hotel.Visible = false;
                        sideBarPanelItem_Eqar.Visible = false;
                        buttonItem_itmeCat.Visible = false;
                        buttonItem_items.Visible = false;
                        buttonItem_unit.Visible = false;
                        buttonItem_Curncy.Visible = false;
                        buttonItem_Mndob.Visible = false;
                        buttonItem_Store.Visible = false;
                        buttonItem_CenterCost.Visible = false;
                        buttonItem_Waiter.Visible = false;
                        buttonItem_Driver.Visible = false;
                        buttonItem_SpicialAddition.Visible = false;
                        buttonItem_Table.Visible = false;
                        buttonItem_GaidCommUsr.Visible = false;
                        buttonItem_InvCommUsr.Visible = false;
                        bubbleButton_RepPoints.Visible = false;
                        bubbleButfton_RelayInvPoint.Visible = false;
                        bubbleButton_RepairSales.Visible = false;
                        bubbleButton_RepairPurshas.Visible = false;
                        bubbleButton_SetYearAcc.Visible = false;

                        bubbleButton_TransData.Visible = false;
                        //  radialMenu_Setting.Visible = false;
                    }
                }
                catch
                {
                }
            }
            catch
            {
            }

            if (Program.iscarversion())
            {
                CarMarkah.Visible = true;
                CarModel.Visible = true;
                Color_Button.Visible = true;
            }
            else
            {
                CarMarkah.Visible = false;
                CarModel.Visible = false;
                Color_Button.Visible = false;
            }
            if (VarGeneral.SSSLev == "B" || VarGeneral.SSSLev == "F" || VarGeneral.SSSLev == "C")
            {
                if (VarGeneral.SSSLev == "F")
                {
                    // buttonItem_Emps.Visible = false;
                    buttonItem_Mndob.Visible = false;
                    buttonItem_TransferIn.Visible = false;
                    buttonItem_TransferOut.Visible = false;
                    buttonItem_PaymentOrder.Visible = false;
                    buttonItem_PaymentOReturn.Visible = false;
                    buttonItem_Offer.Visible = false;
                    buttonItem_SndGaid.Visible = false;
                    bubbleButton_RepPoints.Visible = false;
                    buttonItem_InvCommUsr.Visible = false;
                    buttonItem_GaidCommUsr.Visible = false;
                    buttonItem_TransferIn.Visible = false;
                    buttonItem_TransferOut.Visible = false;
                    buttonItem_PaymentOrder.Visible = false;
                    buttonItem_PaymentOReturn.Visible = false;
                    //buttonItem_RepMnd.Visible = false;
                    buttonItem_StoreCust.Visible = false;
                    buttonItem_StoreSupp.Visible = false;
                }
                RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRF ANd Setting\\WinSystemOperation", writable: true);
                RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\PROFHRDW\\ItIntel", writable: true);
                if (hKey != null)
                {
                    try
                    {
                        object q = hKey.GetValue("vSt");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vSt");
                            hKey.SetValue("vSt", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vSt");
                        hKey.SetValue("vSt", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vSt_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vSt_Electa");
                            hKey.SetValue("vSt_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vSt_Electa");
                        hKey.SetValue("vSt_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vSt_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vSt_New");
                            hKeyNew.SetValue("vSt_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vSt_New");
                        hKeyNew.SetValue("vSt_New", "0");
                    }
                    long regval = long.Parse(hKey.GetValue("vSt").ToString());
                    long regval_Electa = long.Parse(hKey.GetValue("vSt_Electa").ToString());
                    long regval_New = long.Parse(hKeyNew.GetValue("vSt_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        buttonItem_Store.Visible = true;
                        buttonItem_TransferIn.Visible = true;
                        buttonItem_TransferOut.Visible = true;
                    }
                    else
                    {
                        buttonItem_Store.Visible = false;
                        buttonItem_TransferIn.Visible = false;
                        buttonItem_TransferOut.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vSt = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vCoCe");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCoCe");
                            hKey.SetValue("vCoCe", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCoCe");
                        hKey.SetValue("vCoCe", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vCoCe_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCoCe_Electa");
                            hKey.SetValue("vCoCe_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCoCe_Electa");
                        hKey.SetValue("vCoCe_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vCoCe_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vCoCe_New");
                            hKeyNew.SetValue("vCoCe_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vCoCe_New");
                        hKeyNew.SetValue("vCoCe_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vCoCe").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vCoCe_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vCoCe_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        buttonItem_CenterCost.Visible = true;
                    }
                    else
                    {
                        buttonItem_CenterCost.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vCoCe = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vBr");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vBr");
                            hKey.SetValue("vBr", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vBr");
                        hKey.SetValue("vBr", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vBr_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vBr_Electa");
                            hKey.SetValue("vBr_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vBr_Electa");
                        hKey.SetValue("vBr_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vBr_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vBr_New");
                            hKeyNew.SetValue("vBr_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vBr_New");
                        hKeyNew.SetValue("vBr_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vBr").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vBr_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vBr_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        buttonItem_Branch.Visible = true;
                        bubbleButton_TransData.Visible = true;
                    }
                    else
                    {
                        buttonItem_Branch.Visible = false;
                        bubbleButton_TransData.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vBr = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vDB");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vDB");
                            hKey.SetValue("vDB", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vDB");
                        hKey.SetValue("vDB", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vDB_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vDB_Electa");
                            hKey.SetValue("vDB_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vDB_Electa");
                        hKey.SetValue("vDB_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vDB_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vDB_New");
                            hKeyNew.SetValue("vDB_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vDB_New");
                        hKeyNew.SetValue("vDB_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vDB").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vDB_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vDB_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        radialMenuItem_NewDataBase.Visible = true;
                        radialMenuItem_ChangeDataBase.Visible = true;
                        radialMenuItem_DeleteDataBase.Visible = true;
                    }
                    else
                    {
                        radialMenuItem_NewDataBase.Visible = false;
                        radialMenuItem_ChangeDataBase.Visible = false;
                        radialMenuItem_DeleteDataBase.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vDB = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vBkPeap");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vBkPeap");
                            hKey.SetValue("vBkPeap", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vBkPeap");
                        hKey.SetValue("vBkPeap", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vBkPeap_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vBkPeap_Electa");
                            hKey.SetValue("vBkPeap_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vBkPeap_Electa");
                        hKey.SetValue("vBkPeap_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vBkPeap_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vBkPeap_New");
                            hKeyNew.SetValue("vBkPeap_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vBkPeap_New");
                        hKeyNew.SetValue("vBkPeap_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vBkPeap").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vBkPeap_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vBkPeap_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        buttonItem_CatchAndPay.Visible = true;
                        buttonItem_GetAndSetMoney.Visible = true;
                        buttonItem_RepBankPea.Visible = true;
                        buttonItem_BankOp.Visible = true;
                        //    radialMenuItem_AlArmBankPeaper.Visible = true;
                    }
                    else
                    {
                        buttonItem_CatchAndPay.Visible = false;
                        buttonItem_GetAndSetMoney.Visible = false;
                        buttonItem_RepBankPea.Visible = false;
                        buttonItem_BankOp.Visible = false;
                        //  radialMenuItem_AlArmBankPeaper.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vBkPeap = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vCsh");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCsh");
                            hKey.SetValue("vCsh", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCsh");
                        hKey.SetValue("vCsh", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vCsh_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCsh_Electa");
                            hKey.SetValue("vCsh_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCsh_Electa");
                        hKey.SetValue("vCsh_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vCsh_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vCsh_New");
                            hKeyNew.SetValue("vCsh_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vCsh_New");
                        hKeyNew.SetValue("vCsh_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vCsh").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vCsh_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vCsh_New").ToString());
                    if ((regval == 1 && regval == regval_Electa && regval == regval_New) || VarGeneral.SSSLev == "C")
                    {
                        bubbleButton_UserPoint.Visible = true;
                        bubbleButton_UserPointReturn.Visible = true;
                        bubbleButfton_RelayInvPoint.Visible = true;
                    }
                    else
                    {
                        bubbleButton_UserPoint.Visible = false;
                        bubbleButton_UserPointReturn.Visible = false;
                        bubbleButfton_RelayInvPoint.Visible = false;
                        try
                        {
                            dbc.ExecuteCommand("UPDATE [T_Users] SET [CreateGaid] = 0,[UserPointTyp] = 0 ,[CashAccNo_D] = '',[CashAccNo_C] = '' ,[NetworkAccNo_D] = '' ,[NetworkAccNo_C] = '' WHERE Usr_ID <> 1");
                        }
                        catch
                        {
                        }
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vCsh = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        if (!VarGeneral.gServerName.StartsWith(".\\") && hKey != null)
                        {
                            try
                            {
                                object q = hKey.GetValue("vNW");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKey.CreateSubKey("vNW");
                                    hKey.SetValue("vNW", "0");
                                }
                            }
                            catch
                            {
                                hKey.CreateSubKey("vNW");
                                hKey.SetValue("vNW", "0");
                            }
                            try
                            {
                                object q = hKey.GetValue("vNW_Electa");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKey.CreateSubKey("vNW_Electa");
                                    hKey.SetValue("vNW_Electa", "0");
                                }
                            }
                            catch
                            {
                                hKey.CreateSubKey("vNW_Electa");
                                hKey.SetValue("vNW_Electa", "0");
                            }
                            try
                            {
                                object q = hKeyNew.GetValue("vNW_New");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKeyNew.CreateSubKey("vNW_New");
                                    hKeyNew.SetValue("vNW_New", "0");
                                }
                            }
                            catch
                            {
                                hKeyNew.CreateSubKey("vNW_New");
                                hKeyNew.SetValue("vNW_New", "0");
                            }
                            regval = long.Parse(hKey.GetValue("vNW").ToString());
                            regval_Electa = long.Parse(hKey.GetValue("vNW_Electa").ToString());
                            regval_New = long.Parse(hKeyNew.GetValue("vNW_New").ToString());
                            if (regval != 1 || regval_Electa != 1 || regval_New != 1)
                            {
                                MessageBox.Show((LangArEn == 0) ? "عميلنا العزيز .. انت تسخدم نسخة لا تدعم عملية ربط شبكة ..\n يرجى مراجعة الإدارة" : "Dear .. You are using a version does not support network ..\n Please review the administration", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                                Environment.Exit(0);
                            }
                        }
                    }
                    catch
                    {
                        MessageBox.Show((LangArEn == 0) ? "عميلنا العزيز .. انت تسخدم نسخة لا تدعم عملية ربط شبكة ..\n يرجى مراجعة الإدارة" : "Dear .. You are using a version does not support network ..\n Please review the administration", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        Environment.Exit(0);
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vNW = " + regval;
                    }
                    catch
                    {
                    }
                }
                if (VarGeneral.SSSLev == "C")
                {
                    buttonItem_Driver.Visible = true;
                    buttonItem_Waiter.Visible = true;
                    //bubbleButton_TablesInfo.Visible = true;
                    buttonItem_Table.Visible = true;
                    // bubbleButton_InvSettingGroup.Visible = true;
                }
            }
            else if (VarGeneral.SSSLev == "S")
            {
                buttonItem_Store.Visible = true;
                buttonItem_CenterCost.Visible = false;
                buttonItem_TransferIn.Visible = true;
                buttonItem_TransferOut.Visible = true;

                buttonItem_Branch.Visible = true;
                radialMenuItem_NewDataBase.Visible = false;
                radialMenuItem_ChangeDataBase.Visible = false;
                radialMenuItem_DeleteDataBase.Visible = false;
            }
            else
            {
                buttonItem_Store.Visible = true;
                buttonItem_CenterCost.Visible = true;
                buttonItem_TransferIn.Visible = true;
                buttonItem_TransferOut.Visible = true;
                //bubbleButton_BarcodSetting.Visible = true;
                buttonItem_Branch.Visible = true;
                radialMenuItem_NewDataBase.Visible = true;
                radialMenuItem_ChangeDataBase.Visible = true;
                radialMenuItem_DeleteDataBase.Visible = true;
                if (VarGeneral.SSSLev == "R" || VarGeneral.SSSLev == "H")
                {
                    RIbbon_Resturnat.Visible = true;
                    buttonItem_Driver.Visible = true;
                    buttonItem_Waiter.Visible = true;
                    //bubbleButton_TablesInfo.Visible = true;
                    buttonItem_Table.Visible = true;
                    //bubbleButton_InvSettingGroup.Visible = true;
                }
                if (VarGeneral.SSSLev == "D" || VarGeneral.SSSLev == "E")
                {
                    sideBarPanelItem_Emps.Visible = true;
                    //radialMenuItem_AlArmEmpDoc.Visible = true;
                    //buttonItem_Emps.Visible = false;
                    if (VarGeneral.SSSLev == "E")
                    {
                        bubbleButton_UserPoint.Visible = false;
                        bubbleButton_UserPointReturn.Visible = false;
                        bubbleButfton_RelayInvPoint.Visible = false;
                        buttonItem_SpicialAddition.Visible = false;
                    }
                }
                if (VarGeneral.SSSLev == "X")
                {
                    bubbleButton_UserPoint.Visible = false;
                    bubbleButton_UserPointReturn.Visible = false;
                    bubbleButfton_RelayInvPoint.Visible = false;
                    buttonItem_SpicialAddition.Visible = false;
                }
            }
            if (VarGeneral.SSSLev != "H" && VarGeneral.SSSLev != "X")
            {
                //metroTilePanel.Visible = false;
                //sideBarPanelItem_Hotel.Visible = false;
            }
            if (VarGeneral.SSSLev == "Q")
            {
                sideBarPanelItem_Eqar.Visible = true;
            }
            if (VarGeneral.SSSTyp == 0)
            {
                if (VarGeneral.SSSLev == "M")
                {
                    buttonItem_RepAccDirctory.Visible = false;
                    buttonItem_Vender.Visible = false;
                    buttonItem_Supp.Visible = false;

                    bubbleButton_UserPoint.Visible = false;
                    bubbleButton_UserPointReturn.Visible = false;
                    bubbleButfton_RelayInvPoint.Visible = false;
                }
                buttonItem_AccCat.Visible = false;
                buttonItem_AccTree.Visible = false;
                buttonItem_SndGaid.Visible = false;
                buttonItem_Boxes.Visible = false;
                buttonItem_Banks.Visible = false;
                // buttonItem_TMT.Visible = false;
                buttonItem_OpenAcc.Visible = false;
                buttonItem_PartnerAcc.Visible = false;
                buttonItem_CustSndDiscount.Visible = false;
                buttonItem_SuppSndDiscount.Visible = false;
                sideBarPanelItem_RepAcc.Visible = false;
                buttonItem_CenterCost.Visible = false;
                //radialMenuItem_AlArmBankPeaper.Visible = false;
                //  buttonItem_RepAccRecordsStock.Visible = true;
                //buttonItem_RepTradingAcc2.Visible = true;
                //buttonItem_RepProfitAndLossAcc2.Visible = true;
                //buttonItem_RepBalanceSheet2.Visible = true;
                //buttonItem_Emps.Visible = false;
                buttonItem_GaidCommUsr.Visible = false;
                buttonItem_GaidComm.Visible = false;
            }
            else if (VarGeneral.SSSTyp == 1)
            {
                buttonItem_itmeCat.Visible = false;
                buttonItem_items.Visible = false;
                buttonItem_unit.Visible = false;
                buttonItem_Store.Visible = false;
                sideBarPanelItem_Invioces.Visible = false;
                sideBarPanelItem_RepStocks.Visible = false;

                // radialMenuItem_AlarmDateExp.Visible = false;
                //radialMenuItem_AlarmRequest.Visible = false;
                radialMenuItem_AlArmDueoInvoic.Visible = false;
                //buttonItem_Curncy.BeginGroup = true;
                //buttonItem_Mndob.Checked = true;
                //buttonItem_Emps.Visible = false;
                bubbleButton_UserPoint.Visible = false;
                bubbleButton_UserPointReturn.Visible = false;
                bubbleButfton_RelayInvPoint.Visible = false;
                buttonItem_InvCommUsr.Visible = false;
                //buttonItem_GaidCommAcc.Visible = true;
                bubbleButton_RepairPurshas.Visible = false;
                bubbleButton_RepairSales.Visible = false;
                //buttonItem_SpicialAddition.Visible = false;
                bubbleButton_RepPoints.Visible = false;
            }
            if (VarGeneral.SSSLev == "K")
            {
                buttonItem_Store.Visible = false;
                buttonItem_TransferIn.Visible = false;
                buttonItem_TransferOut.Visible = false;
                buttonItem_Branch.Visible = false;
                bubbleButton_TransData.Visible = false;
                radialMenuItem_NewDataBase.Visible = false;
                radialMenuItem_ChangeDataBase.Visible = false;
                radialMenuItem_DeleteDataBase.Visible = false;
            }
            else if (VarGeneral.SSSLev == "Z")
            {
                buttonItem_CenterCost.Visible = false;
                buttonItem_Branch.Visible = false;
                bubbleButton_TransData.Visible = false;
                radialMenuItem_NewDataBase.Visible = false;
                radialMenuItem_ChangeDataBase.Visible = false;
                radialMenuItem_DeleteDataBase.Visible = false;
                buttonItem_SpicialAddition.Visible = false;
            }
            try
            {
                if (VarGeneral.gUserName != "runsetting")
                {
                    try
                    {
                        RegistryKey hKeyElecSecurity = Registry.CurrentUser.OpenSubKey("Software\\PRF ANd Setting\\WinSystemOperation", writable: true);
                        RegistryKey hKeyNewSecurity = Registry.CurrentUser.OpenSubKey("Software\\PROFHRDW\\ItIntel", writable: true);
                        long regvalElectSecurity = 0L;
                        long regvalNewSecurity = 0L;
                        try
                        {
                            try
                            {
                                object q = hKeyElecSecurity.GetValue("vRemotly_Electa");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKeyElecSecurity.CreateSubKey("vRemotly_Electa");
                                    hKeyElecSecurity.SetValue("vRemotly_Electa", "0");
                                }
                            }
                            catch
                            {
                                hKeyElecSecurity.CreateSubKey("vRemotly_Electa");
                                hKeyElecSecurity.SetValue("vRemotly_Electa", "0");
                            }
                            regvalElectSecurity = long.Parse(hKeyElecSecurity.GetValue("vRemotly_Electa").ToString());
                        }
                        catch
                        {
                            regvalElectSecurity = 0L;
                        }
                        try
                        {
                            try
                            {
                                object q = hKeyNewSecurity.GetValue("vRemotly_New");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKeyNewSecurity.CreateSubKey("vRemotly_New");
                                    hKeyNewSecurity.SetValue("vRemotly_New", "0");
                                }
                            }
                            catch
                            {
                                hKeyNewSecurity.CreateSubKey("vRemotly_New");
                                hKeyNewSecurity.SetValue("vRemotly_New", "0");
                            }
                            regvalNewSecurity = long.Parse(hKeyNewSecurity.GetValue("vRemotly_New").ToString());
                        }
                        catch
                        {
                            regvalNewSecurity = 0L;
                        }
                        if (regvalElectSecurity == 1 && regvalNewSecurity == 1 && !File.Exists(Application.StartupPath + "\\flxgridD.txt"))
                        {
                            string regval_NewDT = " ";
                            try
                            {
                                regval_NewDT = n.FormatGreg(hKeyNewSecurity.GetValue("vBackup_New").ToString(), "yyyy/MM/dd");
                            }
                            catch
                            {
                                regval_NewDT = " ";
                            }
                            try
                            {
                                try
                                {
                                    GC.Collect();
                                    GC.WaitForPendingFinalizers();
                                    File.Delete(Application.StartupPath + "\\flxgridD.txt");
                                }
                                catch
                                {
                                }
                                TextWriter tw = File.CreateText(Application.StartupPath + "\\flxgridD.txt");
                                tw.WriteLine(VarGeneral.Encrypt(regval_NewDT.Trim()));
                                tw.Close();
                            }
                            catch
                            {
                            }
                        }
                        if (regvalElectSecurity == 1 && regvalNewSecurity == 1 && File.Exists(Application.StartupPath + "\\flxgridD.txt"))
                        {
                            TTVirsionSafe.Visible = true;
                            radialMenuItem_NewDataBase.Visible = false;
                            radialMenuItem_ChangeDataBase.Visible = false;
                            radialMenuItem_DeleteDataBase.Visible = false;
                        }
                    }
                    catch (Exception error2)
                    {
                        VarGeneral.DebLog.writeLog("Check Support Dt:", error2, enable: true);
                    }
                    try
                    {
                        RegistryKey _hKey = Registry.CurrentUser.OpenSubKey("Software\\PRF ANd Setting\\WinSystemOperation", writable: true);
                        try
                        {
                            object q = _hKey.GetValue("vPOS");
                            if (string.IsNullOrEmpty(q.ToString()))
                            {
                                _hKey.CreateSubKey("vPOS");
                                _hKey.SetValue("vPOS", "0");
                            }
                        }
                        catch
                        {
                            _hKey.CreateSubKey("vPOS");
                            _hKey.SetValue("vPOS", "0");
                        }
                        long _regval = long.Parse(_hKey.GetValue("vPOS").ToString());
                        try
                        {
                            VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vPOS = " + _regval;
                        }
                        catch
                        {
                        }
                        try
                        {
                            object q = _hKey.GetValue("vBa");
                            if (string.IsNullOrEmpty(q.ToString()))
                            {
                                _hKey.CreateSubKey("vBa");
                                _hKey.SetValue("vBa", "0");
                            }
                        }
                        catch
                        {
                            _hKey.CreateSubKey("vBa");
                            _hKey.SetValue("vBa", "0");
                        }
                        _regval = long.Parse(_hKey.GetValue("vBa").ToString());
                        try
                        {
                            VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vBa = " + _regval;
                        }
                        catch
                        {
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        RegistryKey _hKey2 = Registry.CurrentUser.OpenSubKey("Software\\PRF ANd Setting\\MrdSoft\\Register", writable: true);
                        object q = _hKey2.GetValue("DTBackup");
                        if (!string.IsNullOrEmpty(q.ToString()))
                        {
                            VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + "  || vSupp = " + _hKey2.GetValue("DTBackup").ToString();
                        }
                        else
                        {
                            VarGeneral.Bronz_ActivOption += "  || vSupp = غير محدد";
                        }
                    }
                    catch
                    {
                        VarGeneral.Bronz_ActivOption += "  || vSupp = غير محدد";
                    }
                    try
                    {
                        RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRF ANd Setting\\WinSystemOperation", writable: true);
                        if (hKey != null)
                        {
                            try
                            {
                                object q = hKey.GetValue("vPaid");
                                if (!string.IsNullOrEmpty(q.ToString()))
                                {
                                    VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + "  || vPaid = " + q.ToString();
                                }
                                else
                                {
                                    VarGeneral.Bronz_ActivOption += "  || vPaid = مدفوع ";
                                }
                            }
                            catch
                            {
                                VarGeneral.Bronz_ActivOption += "  || vPaid = مدفوع ";
                            }
                        }
                    }
                    catch
                    {
                        VarGeneral.Bronz_ActivOption += "  || vPaid = مدفوع ";
                    }
                }
            }
            catch
            {
            }
            try
            {
                if (VarGeneral.gUserName == "runsetting")
                {
                    try
                    {
                        if (!Environment.UserName.Contains("admin") && !Environment.UserName.Contains("administrator") && !Environment.UserName.Contains("mohamed"))
                        {
                            RegistryKey keyHide = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced");
                            if (keyHide != null && keyHide.GetValue("Hidden").ToString() == "1")
                            {
                                keyHide.SetValue("Hidden", 2);
                                Guid CLSID_ShellApplication = new Guid("13709620-C279-11CE-A49E-444553540000");
                                Type shellApplicationType = Type.GetTypeFromCLSID(CLSID_ShellApplication, throwOnError: true);
                                object shellApplication = Activator.CreateInstance(shellApplicationType);
                                object windows = shellApplicationType.InvokeMember("Windows", BindingFlags.InvokeMethod, null, shellApplication, new object[0]);
                                Type windowsType = windows.GetType();
                                object count = windowsType.InvokeMember("Count", BindingFlags.GetProperty, null, windows, null);
                                for (int i = 0; i < (int)count; i++)
                                {
                                    object item = windowsType.InvokeMember("Item", BindingFlags.InvokeMethod, null, windows, new object[1]
                                    {
                                        i
                                    });
                                    Type itemType = item.GetType();
                                    string itemName = (string)itemType.InvokeMember("Name", BindingFlags.GetProperty, null, item, null);
                                    if (itemName == "Windows Explorer")
                                    {
                                        itemType.InvokeMember("Refresh", BindingFlags.InvokeMethod, null, item, null);
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                    }
                    base.ControlBox = false;
                    base.FormBorderStyle = FormBorderStyle.Fixed3D;
                }
            }
            catch
            {
            }
            try
            {
                if (!VarGeneral.vEndYears)
                {
                    buttonItem_RepairQty_Click(null, null);
                }
            }
            catch
            {
            }
        }

        void loadLayOut()
        {


            labelItem_Reg.Visible = VarGeneral.labelItem_RegVisible;
            n = VarGeneral.n;
            _CheckRemotly = true;
            LangArEn = VarGeneral.UserLang;


            try
            {
                RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
                try
                {
                    object q = hKey.GetValue("vSM");
                    if (string.IsNullOrEmpty(q.ToString()))
                    {
                        hKey.CreateSubKey("vSM");
                        hKey.SetValue("vSM", "0");
                    }
                }
                catch
                {
                    hKey.CreateSubKey("vSM");
                    hKey.SetValue("vSM", "0");
                }
                try
                {
                    object q = hKey.GetValue("vSM_Electa");
                    if (string.IsNullOrEmpty(q.ToString()))
                    {
                        hKey.CreateSubKey("vSM_Electa");
                        hKey.SetValue("vSM_Electa", "0");
                    }
                }
                catch
                {
                    hKey.CreateSubKey("vSM_Electa");
                    hKey.SetValue("vSM_Electa", "0");
                }
                try
                {
                    object q = hKeyNew.GetValue("vSM_New");
                    if (string.IsNullOrEmpty(q.ToString()))
                    {
                        hKeyNew.CreateSubKey("vSM_New");
                        hKeyNew.SetValue("vSM_New", "0");
                    }
                }
                catch
                {
                    hKeyNew.CreateSubKey("vSM_New");
                    hKeyNew.SetValue("vSM_New", "0");
                }
                try
                {
                    long regval_Sms = long.Parse(hKey.GetValue("vSM").ToString());
                    long regval_Electa_Sms = long.Parse(hKey.GetValue("vSM_Electa").ToString());
                    long regval_New_Sms = long.Parse(hKeyNew.GetValue("vSM_New").ToString());
                    RIbbon_Resturnat.Visible = false;
                    sideBarPanelItem_Emps.Visible = false;
                    sideBarPanelItem_Eqar.Visible = false;
                    sideBarPanelItem_Hotel.Visible = false;
                    if (regval_Sms == 1 && regval_Sms == regval_Electa_Sms && regval_Sms == regval_New_Sms)
                    {
                        sideBarPanelItem_Invioces.Visible = false;
                        sideBarPanelItem_Acc.Visible = false;
                        sideBarPanelItem_RepStocks.Visible = false;
                        sideBarPanelItem_RepAcc.Visible = false;
                        sideBarPanelItem_Emps.Visible = false;
                        sideBarPanelItem_Hotel.Visible = false;
                        sideBarPanelItem_Eqar.Visible = false;
                        buttonItem_itmeCat.Visible = false;
                        buttonItem_items.Visible = false;
                        buttonItem_unit.Visible = false;
                        buttonItem_Curncy.Visible = false;
                        buttonItem_Mndob.Visible = false;
                        buttonItem_Store.Visible = false;
                        buttonItem_CenterCost.Visible = false;
                        buttonItem_Waiter.Visible = false;
                        buttonItem_Driver.Visible = false;
                        buttonItem_SpicialAddition.Visible = false;
                        buttonItem_Table.Visible = false;
                        buttonItem_GaidCommUsr.Visible = false;
                        buttonItem_InvCommUsr.Visible = false;
                        bubbleButton_RepPoints.Visible = false;
                        bubbleButfton_RelayInvPoint.Visible = false;
                        bubbleButton_RepairSales.Visible = false;
                        bubbleButton_RepairPurshas.Visible = false;
                        bubbleButton_SetYearAcc.Visible = false;
                        bubbleButton_BarcodSetting.Visible = false;
                        bubbleButton_GaidSetting.Visible = false;
                        bubbleButton_InvSetting.Visible = false;
                        bubbleButton_TransData.Visible = false;
                        //   radialMenu_Setting.Visible = false;
                    }
                }
                catch
                {
                }
            }
            catch
            {
            }
            if (Program.iscarversion())
            {
                CarMarkah.Visible = true;
                CarModel.Visible = true;
            }
            else
            {
                CarMarkah.Visible = false;
                CarModel.Visible = false;
                Color_Button.Visible = false;
            }
            if (VarGeneral.SSSLev == "B" || VarGeneral.SSSLev == "F" || VarGeneral.SSSLev == "C")
            {
                if (VarGeneral.SSSLev == "F")
                {
                    // buttonItem_Emps.Visible = false;
                    buttonItem_Mndob.Visible = false;
                    buttonItem_TransferIn.Visible = false;
                    buttonItem_TransferOut.Visible = false;
                    buttonItem_PaymentOrder.Visible = false;
                    buttonItem_PaymentOReturn.Visible = false;
                    buttonItem_Offer.Visible = false;
                    buttonItem_SndGaid.Visible = false;
                    bubbleButton_RepPoints.Visible = false;
                    buttonItem_InvCommUsr.Visible = false;
                    buttonItem_GaidCommUsr.Visible = false;
                    buttonItem_MoveTransferIn.Visible = false;
                    buttonItem_MoveTransferOut.Visible = false;
                    buttonItem_MovePaymentOrder.Visible = false;
                    buttonItem_MovePaymentOReturn.Visible = false;
                    //buttonItem_RepMnd.Visible = false;
                    buttonItem_StoreCust.Visible = false;
                    buttonItem_StoreSupp.Visible = false;
                }
                RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
                if (hKey != null)
                {
                    try
                    {
                        object q = hKey.GetValue("vSt");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vSt");
                            hKey.SetValue("vSt", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vSt");
                        hKey.SetValue("vSt", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vSt_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vSt_Electa");
                            hKey.SetValue("vSt_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vSt_Electa");
                        hKey.SetValue("vSt_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vSt_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vSt_New");
                            hKeyNew.SetValue("vSt_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vSt_New");
                        hKeyNew.SetValue("vSt_New", "0");
                    }
                    long regval = long.Parse(hKey.GetValue("vSt").ToString());
                    long regval_Electa = long.Parse(hKey.GetValue("vSt_Electa").ToString());
                    long regval_New = long.Parse(hKeyNew.GetValue("vSt_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        buttonItem_Store.Visible = true;
                        buttonItem_TransferIn.Visible = true;
                        buttonItem_TransferOut.Visible = true;
                    }
                    else
                    {
                        buttonItem_Store.Visible = false;
                        buttonItem_TransferIn.Visible = false;
                        buttonItem_TransferOut.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vSt = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vCoCe");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCoCe");
                            hKey.SetValue("vCoCe", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCoCe");
                        hKey.SetValue("vCoCe", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vCoCe_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCoCe_Electa");
                            hKey.SetValue("vCoCe_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCoCe_Electa");
                        hKey.SetValue("vCoCe_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vCoCe_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vCoCe_New");
                            hKeyNew.SetValue("vCoCe_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vCoCe_New");
                        hKeyNew.SetValue("vCoCe_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vCoCe").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vCoCe_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vCoCe_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        buttonItem_CenterCost.Visible = true;
                    }
                    else
                    {
                        buttonItem_CenterCost.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vCoCe = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vBr");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vBr");
                            hKey.SetValue("vBr", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vBr");
                        hKey.SetValue("vBr", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vBr_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vBr_Electa");
                            hKey.SetValue("vBr_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vBr_Electa");
                        hKey.SetValue("vBr_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vBr_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vBr_New");
                            hKeyNew.SetValue("vBr_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vBr_New");
                        hKeyNew.SetValue("vBr_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vBr").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vBr_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vBr_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        bubbleButton_SelectBranch.Visible = true;
                        bubbleButton_TransData.Visible = true;
                    }
                    else
                    {
                        bubbleButton_SelectBranch.Visible = false;
                        bubbleButton_TransData.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vBr = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vDB");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vDB");
                            hKey.SetValue("vDB", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vDB");
                        hKey.SetValue("vDB", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vDB_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vDB_Electa");
                            hKey.SetValue("vDB_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vDB_Electa");
                        hKey.SetValue("vDB_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vDB_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vDB_New");
                            hKeyNew.SetValue("vDB_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vDB_New");
                        hKeyNew.SetValue("vDB_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vDB").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vDB_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vDB_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        radialMenuItem_NewDataBase.Visible = true;
                        radialMenuItem_ChangeDataBase.Visible = true;
                        radialMenuItem_DeleteDataBase.Visible = true;
                    }
                    else
                    {
                        radialMenuItem_NewDataBase.Visible = false;
                        radialMenuItem_ChangeDataBase.Visible = false;
                        radialMenuItem_DeleteDataBase.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vDB = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vBkPeap");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vBkPeap");
                            hKey.SetValue("vBkPeap", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vBkPeap");
                        hKey.SetValue("vBkPeap", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vBkPeap_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vBkPeap_Electa");
                            hKey.SetValue("vBkPeap_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vBkPeap_Electa");
                        hKey.SetValue("vBkPeap_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vBkPeap_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vBkPeap_New");
                            hKeyNew.SetValue("vBkPeap_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vBkPeap_New");
                        hKeyNew.SetValue("vBkPeap_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vBkPeap").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vBkPeap_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vBkPeap_New").ToString());
                    if (regval == 1 && regval == regval_Electa && regval == regval_New)
                    {
                        buttonItem_CatchAndPay.Visible = true;
                        buttonItem_GetAndSetMoney.Visible = true;
                        buttonItem_RepBankPea.Visible = true;
                        buttonItem_BankOp.Visible = true;
                        //    radialMenuItem_AlArmBankPeaper.Visible = true;
                    }
                    else
                    {
                        buttonItem_CatchAndPay.Visible = false;
                        buttonItem_GetAndSetMoney.Visible = false;
                        buttonItem_RepBankPea.Visible = false;
                        buttonItem_BankOp.Visible = false;
                        //  radialMenuItem_AlArmBankPeaper.Visible = false;
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vBkPeap = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        object q = hKey.GetValue("vCsh");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCsh");
                            hKey.SetValue("vCsh", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCsh");
                        hKey.SetValue("vCsh", "0");
                    }
                    try
                    {
                        object q = hKey.GetValue("vCsh_Electa");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCsh_Electa");
                            hKey.SetValue("vCsh_Electa", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCsh_Electa");
                        hKey.SetValue("vCsh_Electa", "0");
                    }
                    try
                    {
                        object q = hKeyNew.GetValue("vCsh_New");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKeyNew.CreateSubKey("vCsh_New");
                            hKeyNew.SetValue("vCsh_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vCsh_New");
                        hKeyNew.SetValue("vCsh_New", "0");
                    }
                    regval = long.Parse(hKey.GetValue("vCsh").ToString());
                    regval_Electa = long.Parse(hKey.GetValue("vCsh_Electa").ToString());
                    regval_New = long.Parse(hKeyNew.GetValue("vCsh_New").ToString());
                    if ((regval == 1 && regval == regval_Electa && regval == regval_New) || VarGeneral.SSSLev == "C")
                    {
                        bubbleButton_UserPoint.Visible = true;
                        bubbleButton_UserPointReturn.Visible = true;
                        bubbleButfton_RelayInvPoint.Visible = true;
                    }
                    else
                    {
                        bubbleButton_UserPoint.Visible = false;
                        bubbleButton_UserPointReturn.Visible = false;
                        bubbleButfton_RelayInvPoint.Visible = false;
                        try
                        {
                            dbc.ExecuteCommand("UPDATE [T_Users] SET [CreateGaid] = 0,[UserPointTyp] = 0 ,[CashAccNo_D] = '',[CashAccNo_C] = '' ,[NetworkAccNo_D] = '' ,[NetworkAccNo_C] = '' WHERE Usr_ID <> 1");
                        }
                        catch
                        {
                        }
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vCsh = " + regval;
                    }
                    catch
                    {
                    }
                    try
                    {
                        if (!VarGeneral.gServerName.StartsWith(".\\") && hKey != null)
                        {
                            try
                            {
                                object q = hKey.GetValue("vNW");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKey.CreateSubKey("vNW");
                                    hKey.SetValue("vNW", "0");
                                }
                            }
                            catch
                            {
                                hKey.CreateSubKey("vNW");
                                hKey.SetValue("vNW", "0");
                            }
                            try
                            {
                                object q = hKey.GetValue("vNW_Electa");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKey.CreateSubKey("vNW_Electa");
                                    hKey.SetValue("vNW_Electa", "0");
                                }
                            }
                            catch
                            {
                                hKey.CreateSubKey("vNW_Electa");
                                hKey.SetValue("vNW_Electa", "0");
                            }
                            try
                            {
                                object q = hKeyNew.GetValue("vNW_New");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKeyNew.CreateSubKey("vNW_New");
                                    hKeyNew.SetValue("vNW_New", "0");
                                }
                            }
                            catch
                            {
                                hKeyNew.CreateSubKey("vNW_New");
                                hKeyNew.SetValue("vNW_New", "0");
                            }
                            regval = long.Parse(hKey.GetValue("vNW").ToString());
                            regval_Electa = long.Parse(hKey.GetValue("vNW_Electa").ToString());
                            regval_New = long.Parse(hKeyNew.GetValue("vNW_New").ToString());
                            if (regval != 1 || regval_Electa != 1 || regval_New != 1)
                            {
                                MessageBox.Show((LangArEn == 0) ? "عميلنا العزيز .. انت تسخدم نسخة لا تدعم عملية ربط شبكة ..\n يرجى مراجعة الإدارة" : "Dear .. You are using a version does not support network ..\n Please review the administration", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                                Environment.Exit(0);
                            }
                        }
                    }
                    catch
                    {
                        MessageBox.Show((LangArEn == 0) ? "عميلنا العزيز .. انت تسخدم نسخة لا تدعم عملية ربط شبكة ..\n يرجى مراجعة الإدارة" : "Dear .. You are using a version does not support network ..\n Please review the administration", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        Environment.Exit(0);
                    }
                    try
                    {
                        VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vNW = " + regval;
                    }
                    catch
                    {
                    }
                }
                if (VarGeneral.SSSLev == "C")
                {
                    buttonItem_Driver.Visible = true;
                    buttonItem_Waiter.Visible = true;
                    //bubbleButton_TablesInfo.Visible = true;
                    buttonItem_Table.Visible = true;
                    // bubbleButton_InvSettingGroup.Visible = true;
                }
            }
            else if (VarGeneral.SSSLev == "S")
            {
                buttonItem_Store.Visible = true;
                buttonItem_CenterCost.Visible = false;
                buttonItem_TransferIn.Visible = true;
                buttonItem_TransferOut.Visible = true;
                bubbleButton_BarcodSetting.Visible = true;
                bubbleButton_SelectBranch.Visible = true;
                radialMenuItem_NewDataBase.Visible = false;
                radialMenuItem_ChangeDataBase.Visible = false;
                radialMenuItem_DeleteDataBase.Visible = false;
            }
            else
            {
                buttonItem_Store.Visible = true;
                buttonItem_CenterCost.Visible = true;
                buttonItem_TransferIn.Visible = true;
                buttonItem_TransferOut.Visible = true;
                bubbleButton_BarcodSetting.Visible = true;
                bubbleButton_SelectBranch.Visible = true;
                radialMenuItem_NewDataBase.Visible = true;
                radialMenuItem_ChangeDataBase.Visible = true;
                radialMenuItem_DeleteDataBase.Visible = true;
                if (VarGeneral.SSSLev == "R" || VarGeneral.SSSLev == "H")
                {
                    RIbbon_Resturnat.Visible = true;
                    buttonItem_Driver.Visible = true;
                    buttonItem_Waiter.Visible = true;
                    //bubbleButton_TablesInfo.Visible = true;
                    buttonItem_Table.Visible = true;
                    //bubbleButton_InvSettingGroup.Visible = true;
                }
                if (VarGeneral.SSSLev == "D" || VarGeneral.SSSLev == "E")
                {
                    sideBarPanelItem_Emps.Visible = true;
                    //radialMenuItem_AlArmEmpDoc.Visible = true;
                    //buttonItem_Emps.Visible = false;
                    if (VarGeneral.SSSLev == "E")
                    {
                        bubbleButton_UserPoint.Visible = false;
                        bubbleButton_UserPointReturn.Visible = false;
                        bubbleButfton_RelayInvPoint.Visible = false;
                        buttonItem_SpicialAddition.Visible = false;
                    }
                }
                if (VarGeneral.SSSLev == "X")
                {
                    bubbleButton_UserPoint.Visible = false;
                    bubbleButton_UserPointReturn.Visible = false;
                    bubbleButfton_RelayInvPoint.Visible = false;
                    buttonItem_SpicialAddition.Visible = false;
                }
            }
            if (VarGeneral.SSSLev != "H" && VarGeneral.SSSLev != "X")
            {
                //metroTilePanel.Visible = false;
                sideBarPanelItem_Hotel.Visible = false;
            }
            if (VarGeneral.SSSLev == "Q")
            {
                sideBarPanelItem_Eqar.Visible = true;
            }
            if (VarGeneral.SSSTyp == 0)
            {
                if (VarGeneral.SSSLev == "M")
                {
                    sideBarPanelItem_Acc.Visible = false;
                    buttonItem_Vender.Visible = false;
                    buttonItem_Supp.Visible = false;
                    bubbleButton_GaidSetting.Visible = false;
                    bubbleButton_UserPoint.Visible = false;
                    bubbleButton_UserPointReturn.Visible = false;
                    bubbleButfton_RelayInvPoint.Visible = false;
                }
                buttonItem_AccCat.Visible = false;
                buttonItem_AccTree.Visible = false;
                buttonItem_SndGaid.Visible = false;
                buttonItem_Boxes.Visible = false;
                buttonItem_Banks.Visible = false;
                // buttonItem_TMT.Visible = false;
                buttonItem_OpenAcc.Visible = false;
                buttonItem_PartnerAcc.Visible = false;
                buttonItem_CustSndDiscount.Visible = false;
                buttonItem_SuppSndDiscount.Visible = false;
                sideBarPanelItem_RepAcc.Visible = false;
                buttonItem_CenterCost.Visible = false;
                //radialMenuItem_AlArmBankPeaper.Visible = false;
                //buttonItem_RepAccRecordsStock.Visible = true;
                //buttonItem_RepTradingAcc2.Visible = true;
                //buttonItem_RepProfitAndLossAcc2.Visible = true;
                //buttonItem_RepBalanceSheet2.Visible = true;
                //buttonItem_Emps.Visible = false;
                buttonItem_GaidCommUsr.Visible = false;
                buttonItem_GaidComm.Visible = false;
            }
            else if (VarGeneral.SSSTyp == 1)
            {
                buttonItem_itmeCat.Visible = false;
                buttonItem_items.Visible = false;
                buttonItem_unit.Visible = false;
                buttonItem_Store.Visible = false;
                sideBarPanelItem_Invioces.Visible = false;
                sideBarPanelItem_RepStocks.Visible = false;
                bubbleButton_InvSetting.Visible = false;
                bubbleButton_BarcodSetting.Visible = false;
                // radialMenuItem_AlarmDateExp.Visible = false;
                //radialMenuItem_AlarmRequest.Visible = false;
                radialMenuItem_AlArmDueoInvoic.Visible = false;
                //buttonItem_Curncy.BeginGroup = true;
                //buttonItem_Mndob.Checked = true;
                //buttonItem_Emps.Visible = false;
                bubbleButton_UserPoint.Visible = false;
                bubbleButton_UserPointReturn.Visible = false;
                bubbleButfton_RelayInvPoint.Visible = false;
                buttonItem_InvCommUsr.Visible = false;
                //buttonItem_GaidCommAcc.Visible = true;
                bubbleButton_RepairPurshas.Visible = false;
                bubbleButton_RepairSales.Visible = false;
                //buttonItem_SpicialAddition.Visible = false;
                bubbleButton_RepPoints.Visible = false;
            }
            if (VarGeneral.SSSLev == "K")
            {
                buttonItem_Store.Visible = false;
                buttonItem_TransferIn.Visible = false;
                buttonItem_TransferOut.Visible = false;
                bubbleButton_SelectBranch.Visible = false;
                bubbleButton_TransData.Visible = false;
                radialMenuItem_NewDataBase.Visible = false;
                radialMenuItem_ChangeDataBase.Visible = false;
                radialMenuItem_DeleteDataBase.Visible = false;
            }
            else if (VarGeneral.SSSLev == "Z")
            {
                buttonItem_CenterCost.Visible = false;
                bubbleButton_SelectBranch.Visible = false;
                bubbleButton_TransData.Visible = false;
                radialMenuItem_NewDataBase.Visible = false;
                radialMenuItem_ChangeDataBase.Visible = false;
                radialMenuItem_DeleteDataBase.Visible = false;
                buttonItem_SpicialAddition.Visible = false;
            }
            try
            {
                if (VarGeneral.gUserName != "runsetting")
                {
                    try
                    {
                        RegistryKey hKeyElecSecurity = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                        RegistryKey hKeyNewSecurity = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
                        long regvalElectSecurity = 0L;
                        long regvalNewSecurity = 0L;
                        try
                        {
                            try
                            {
                                object q = hKeyElecSecurity.GetValue("vRemotly_Electa");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKeyElecSecurity.CreateSubKey("vRemotly_Electa");
                                    hKeyElecSecurity.SetValue("vRemotly_Electa", "0");
                                }
                            }
                            catch
                            {
                                hKeyElecSecurity.CreateSubKey("vRemotly_Electa");
                                hKeyElecSecurity.SetValue("vRemotly_Electa", "0");
                            }
                            regvalElectSecurity = long.Parse(hKeyElecSecurity.GetValue("vRemotly_Electa").ToString());
                        }
                        catch
                        {
                            regvalElectSecurity = 0L;
                        }
                        try
                        {
                            try
                            {
                                object q = hKeyNewSecurity.GetValue("vRemotly_New");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKeyNewSecurity.CreateSubKey("vRemotly_New");
                                    hKeyNewSecurity.SetValue("vRemotly_New", "0");
                                }
                            }
                            catch
                            {
                                hKeyNewSecurity.CreateSubKey("vRemotly_New");
                                hKeyNewSecurity.SetValue("vRemotly_New", "0");
                            }
                            regvalNewSecurity = long.Parse(hKeyNewSecurity.GetValue("vRemotly_New").ToString());
                        }
                        catch
                        {
                            regvalNewSecurity = 0L;
                        }
                        if (regvalElectSecurity == 1 && regvalNewSecurity == 1 && !File.Exists(Application.StartupPath + "\\flxgridD.txt"))
                        {
                            string regval_NewDT = " ";
                            try
                            {
                                regval_NewDT = n.FormatGreg(hKeyNewSecurity.GetValue("vBackup_New").ToString(), "yyyy/MM/dd");
                            }
                            catch
                            {
                                regval_NewDT = " ";
                            }
                            try
                            {
                                try
                                {
                                    GC.Collect();
                                    GC.WaitForPendingFinalizers();
                                    File.Delete(Application.StartupPath + "\\flxgridD.txt");
                                }
                                catch
                                {
                                }
                                TextWriter tw = File.CreateText(Application.StartupPath + "\\flxgridD.txt");
                                tw.WriteLine(VarGeneral.Encrypt(regval_NewDT.Trim()));
                                tw.Close();
                            }
                            catch
                            {
                            }
                        }
                        if (regvalElectSecurity == 1 && regvalNewSecurity == 1 && File.Exists(Application.StartupPath + "\\flxgridD.txt"))
                        {
                            TTVirsionSafe.Visible = true;
                            radialMenuItem_NewDataBase.Visible = false;
                            radialMenuItem_ChangeDataBase.Visible = false;
                            radialMenuItem_DeleteDataBase.Visible = false;
                        }
                    }
                    catch (Exception error2)
                    {
                        VarGeneral.DebLog.writeLog("Check Support Dt:", error2, enable: true);
                    }
                    try
                    {
                        RegistryKey _hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                        try
                        {
                            object q = _hKey.GetValue("vPOS");
                            if (string.IsNullOrEmpty(q.ToString()))
                            {
                                _hKey.CreateSubKey("vPOS");
                                _hKey.SetValue("vPOS", "0");
                            }
                        }
                        catch
                        {
                            _hKey.CreateSubKey("vPOS");
                            _hKey.SetValue("vPOS", "0");
                        }
                        long _regval = long.Parse(_hKey.GetValue("vPOS").ToString());
                        try
                        {
                            VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vPOS = " + _regval;
                        }
                        catch
                        {
                        }
                        try
                        {
                            object q = _hKey.GetValue("vBa");
                            if (string.IsNullOrEmpty(q.ToString()))
                            {
                                _hKey.CreateSubKey("vBa");
                                _hKey.SetValue("vBa", "0");
                            }
                        }
                        catch
                        {
                            _hKey.CreateSubKey("vBa");
                            _hKey.SetValue("vBa", "0");
                        }
                        _regval = long.Parse(_hKey.GetValue("vBa").ToString());
                        try
                        {
                            VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + " vBa = " + _regval;
                        }
                        catch
                        {
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        RegistryKey _hKey2 = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft\\Register", writable: true);
                        object q = _hKey2.GetValue("DTBackup");
                        if (!string.IsNullOrEmpty(q.ToString()))
                        {
                            VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + "  || vSupp = " + _hKey2.GetValue("DTBackup").ToString();
                        }
                        else
                        {
                            VarGeneral.Bronz_ActivOption += "  || vSupp = غير محدد";
                        }
                    }
                    catch
                    {
                        VarGeneral.Bronz_ActivOption += "  || vSupp = غير محدد";
                    }
                    try
                    {
                        RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                        if (hKey != null)
                        {
                            try
                            {
                                object q = hKey.GetValue("vPaid");
                                if (!string.IsNullOrEmpty(q.ToString()))
                                {
                                    VarGeneral.Bronz_ActivOption = VarGeneral.Bronz_ActivOption + "  || vPaid = " + q.ToString();
                                }
                                else
                                {
                                    VarGeneral.Bronz_ActivOption += "  || vPaid = مدفوع ";
                                }
                            }
                            catch
                            {
                                VarGeneral.Bronz_ActivOption += "  || vPaid = مدفوع ";
                            }
                        }
                    }
                    catch
                    {
                        VarGeneral.Bronz_ActivOption += "  || vPaid = مدفوع ";
                    }
                }
            }
            catch
            {
            }
            try
            {
                if (VarGeneral.gUserName == "runsetting")
                {
                    try
                    {
                        if (!Environment.UserName.Contains("admin") && !Environment.UserName.Contains("administrator") && !Environment.UserName.Contains("mohamed"))
                        {
                            RegistryKey keyHide = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced");
                            if (keyHide != null && keyHide.GetValue("Hidden").ToString() == "1")
                            {
                                keyHide.SetValue("Hidden", 2);
                                Guid CLSID_ShellApplication = new Guid("13709620-C279-11CE-A49E-444553540000");
                                Type shellApplicationType = Type.GetTypeFromCLSID(CLSID_ShellApplication, throwOnError: true);
                                object shellApplication = Activator.CreateInstance(shellApplicationType);
                                object windows = shellApplicationType.InvokeMember("Windows", BindingFlags.InvokeMethod, null, shellApplication, new object[0]);
                                Type windowsType = windows.GetType();
                                object count = windowsType.InvokeMember("Count", BindingFlags.GetProperty, null, windows, null);
                                for (int i = 0; i < (int)count; i++)
                                {
                                    object item = windowsType.InvokeMember("Item", BindingFlags.InvokeMethod, null, windows, new object[1]
                                    {
                                        i
                                    });
                                    Type itemType = item.GetType();
                                    string itemName = (string)itemType.InvokeMember("Name", BindingFlags.GetProperty, null, item, null);
                                    if (itemName == "Windows Explorer")
                                    {
                                        itemType.InvokeMember("Refresh", BindingFlags.InvokeMethod, null, item, null);
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                    }
                    base.ControlBox = false;
                    base.FormBorderStyle = FormBorderStyle.Fixed3D;
                }
            }
            catch
            {
            }
            try
            {
                if (!VarGeneral.vEndYears)
                {
                    buttonItem_RepairQty_Click(null, null);
                }
            }
            catch
            {
            }
            Refresh();
        }
        private void ribbonGroup1_DialogLauncherClick(object sender, EventArgs e)
        {
        }
        public static string bnotest()
        {
            RegistryKey hKeyNeew1 = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
            string bno = "";
            try
            {
                object q = hKeyNeew1.GetValue("vBranchNo");
                bno = q.ToString();
            }
            catch
            {
                return "NA";
            }
            return bno;
        }
       
        string BranchFlag;
        // This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.
        private void Frm_Main_Load(object sender, EventArgs e)
        // This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.
        {
            n = VarGeneral.n;
            VarGeneral.loginoccures = 1;
            LangArEn = 0;
            //Program.min();
            loc = new Point(35, c1Ribbon1.Height + 15);
            buttonItem34.SubItems.Add(mdiWindowListItem1);
            ribbonCheckBox1.Checked =
                    File.Exists(Application.StartupPath + "\\Script\\fastdll.dll");

            if (VarGeneral.UserID == 1)
            {
                ribbonCheckBox1.Visible = true;

            }
            else ribbonCheckBox1.Visible = false;

            //  RoomOp = new T_Rom();
            //listSysSetting = new List<T_SYSSETTING>();
            permission = new T_User();
            //  metroToolbar_main.RightToLeft = RightToLeft.Yes;
          
            onlineworning2.Visible = false;
            onlineworning2.Location = new Point(381, 251);
            f = new BackupAlarm(this);
            c1FlexGrid2.SelectionMode = SelectionModeEnum.Row;
            BranchFlag = bnotest();
            if (BranchFlag == "1")
            {
                if (sync.getnumberofbranches() >= 1)
                {
                    string pa = DropBoxSyncronization.getdropbox();
                    if (pa != "NA")
                        fileSystemWatcher1.Path = pa;
                    bubbleButton_ReportOnline.Enabled = true;
                    c1FlexGrid2.Visible = true;
                 //   sync.setcaller(this);
                    label6.Visible = true;
                 //   syninfo();
                }
            }
            else
            {
            }
            try
            {
                _CheckRemotly = true;
                try
                {
                    if (!Directory.Exists(Application.StartupPath + "\\Script"))
                    {
                        Directory.CreateDirectory(Application.StartupPath + "\\Script");
                    }
                }
                catch
                {
                }
                try
                {
                    if (!Directory.Exists(Application.StartupPath + "\\POS_IMG"))
                    {
                        Directory.CreateDirectory(Application.StartupPath + "\\POS_IMG");
                    }
                }
                catch
                {
                }
                try
                {
                    if (!Directory.Exists(Application.StartupPath + "\\ContractRent"))
                    {
                        Directory.CreateDirectory(Application.StartupPath + "\\ContractRent");
                    }
                }
                catch
                {
                }
                if (VarGeneral.UserID == 1)
                {
                    System.Windows.Forms.Timer MyTimer = new System.Windows.Forms.Timer();
                    MyTimer.Interval = VarGeneral.SupportTim * 60 * 1000;
                    MyTimer.Tick += timer2_Tick;
                    MyTimer.Start();
                }
                //Frame1.Visible = false;
                VarGeneral.ReadConnectionSettings();
                if (VarGeneral.UserID == 1)
                {
                    bubbleButton_invSett.Visible = true;
                    bubbleButton_SndSett.Visible = true;
                    bubbleButton_BarSett.Visible = true;
                    buttonItem_TSHFEER.Visible = true;
                    buttonItem_ImportExcels.Visible = true;
                    buttonItem_InvDataSetting.Visible = true;
                    buttonItem_SndDataSetting.Visible = true;
                    buttonItem_BarcodDataSetting.Visible = true;
                    buttonItem_BarcodInvSetting.Visible = true;
                    buttonItem_invSetting.Visible = true;
                    buttonItem_ExportInvSetting.Visible = true;
                    buttonItem_RepairGaidNo.Visible = true;
                    buttonItem_RepairInvGaid.Visible = true;
                    buttonItem_ItemError.Visible = true;
                    buttonItem_SyncGmail.Visible = true;
                    buttonItem_RepairQty.Visible = true;
                    buttonItem_DeleteItemWithStore.Visible = true;
                    // buttonItem_EqarEinTyp.Visible = true;
                    //buttonItem_EqarEinNature.Visible = true;
                }
                else
                {
                    bubbleButton_invSett.Visible = false;
                    bubbleButton_SndSett.Visible = false;
                    bubbleButton_BarSett.Visible = false;
                    buttonItem_TSHFEER.Visible = false;
                    buttonItem_ImportExcels.Visible = false;
                    buttonItem_InvDataSetting.Visible = false;
                    buttonItem_SndDataSetting.Visible = false;
                    buttonItem_BarcodDataSetting.Visible = false;
                    buttonItem_BarcodInvSetting.Visible = false;
                    buttonItem_invSetting.Visible = false;
                    buttonItem_ExportInvSetting.Visible = false;
                    buttonItem_RepairGaidNo.Visible = false;
                    buttonItem_RepairInvGaid.Visible = false;
                    buttonItem_ItemError.Visible = false;
                    buttonItem_SyncGmail.Visible = false;
                    buttonItem_RepairQty.Visible = false;
                    buttonItem_DeleteItemWithStore.Visible = false;
                    //     buttonItem_EqarEinTyp.Visible = false;
                    //   buttonItem_EqarEinNature.Visible = false;
                }
            }
            catch
            {
                bubbleButton_invSett.Visible = false;
                bubbleButton_SndSett.Visible = false;
                bubbleButton_BarSett.Visible = false;
                buttonItem_TSHFEER.Visible = false;
                buttonItem_ImportExcels.Visible = false;
                buttonItem_InvDataSetting.Visible = false;
                buttonItem_SndDataSetting.Visible = false;
                buttonItem_BarcodDataSetting.Visible = false;
                buttonItem_BarcodInvSetting.Visible = false;
                buttonItem_ItemError.Visible = false;
                buttonItem_SyncGmail.Visible = false;
                buttonItem_RepairQty.Visible = false;
                buttonItem_DeleteItemWithStore.Visible = false;
                //buttonItem_EqarEinTyp.Visible = false;
                // buttonItem_EqarEinNature.Visible = false;
            }
            try
            {
                if (!VarGeneral.UsrTyp)
                {
                    Application.ExitThread();
                }
                Permmission = dbc.Get_PermissionID(VarGeneral.UserID);
                VarGeneral.Settings_Sys = db.SystemSettingStock();
                VarGeneral._SysDirPath = VarGeneral.Settings_Sys.SysDir;
                VarGeneral._BackPath = VarGeneral.Settings_Sys.BackPath;
                try
                {
                    VarGeneral._AutoSync = VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 41);
                }
                catch
                {
                    VarGeneral._AutoSync = false;
                }
                try
                {
                    VarGeneral._AutoBackup = VarGeneral.Settings_Sys.AutoBackup.Value;
                }
                catch
                {
                    VarGeneral._AutoBackup = 0;
                }
                if (VarGeneral.Settings_Sys.Calendr.HasValue)
                    if (VarGeneral.Settings_Sys.Calendr.Value == 0)
                    {
                        CultureInfo ssa = new CultureInfo("en-US", useUserOverride: false);
                        ssa.DateTimeFormat.Calendar = new GregorianCalendar();
                        Thread.CurrentThread.CurrentCulture = ssa;
                    }
                    else
                    {
                        CultureInfo ssa = new CultureInfo("ar-SA", useUserOverride: false);
                        ssa.DateTimeFormat.Calendar = new HijriCalendar();
                        Thread.CurrentThread.CurrentCulture = ssa;
                        Thread.CurrentThread.CurrentUICulture = ssa;
                    }
                db.getdate = "";
                LangChange(VarGeneral.UserLang);
                if (VarGeneral.vEndYears)
                {
                    //radialMenu_Setting.Enabled = false;
                    //buttonItem_OpenDataEnding.Visible = true;
                    //buttonItem_DefaultSts.Visible = true;
                }
                else
                {
                    //radialMenu_Setting.Enabled = true;
                    //buttonItem_OpenDataEnding.Visible = false;
                    //buttonItem_DefaultSts.Visible = false;
                    try
                    {
                        FrmRepairInvGaid frm5 = new FrmRepairInvGaid(_typ: true);
                    }
                    catch
                    {
                    }
                }
                try
                {
                    if (!VarGeneral.Settings_Sys.IsNotBackground.Value && !VarGeneral.TString.ChkStatShow(permission.PassQty, 19))
                    {
                        if (VarGeneral.Settings_Sys.BackgroundPic != null)
                        {
                            byte[] arr = VarGeneral.Settings_Sys.BackgroundPic.ToArray();
                            MemoryStream stream = new MemoryStream(arr);
                            BackgroundImage = Image.FromStream(stream);
                        }
                        else
                        {
                            BackgroundImage = Resources.sssBackground;
                        }
                    }
                    else
                    {
                        BackgroundImage = null;
                    }
                }
                catch
                {
                    BackgroundImage = Resources.sssBackground;
                }
                BackgroundImageLayout = ImageLayout.Stretch;
                if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 75))
                {
                    bubbleButton_RepPoints.Visible = false;
                }
                try
                {
                    txtCount.Value = CalculateSupport();
                }
                catch
                {
                }
                if (!string.IsNullOrEmpty(VarGeneral._SysDirPath) && txtCount.Value > 0 && Directory.Exists(VarGeneral._SysDirPath))
                {
                    CheckBackupFile();
                }
                if (VarGeneral.SSSTyp != 1)
                {
                    try
                    {
                        if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 1))
                        {
                            ItemDataImport();
                        }
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("FrmMain_ItemDataImport:", error, enable: true);
                        MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                    try
                    {
                        if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 2))
                        {
                            AlarmDataExpitem();
                        }
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("FrmMain_AlarmDataExpitem:", error, enable: true);
                        MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                    try
                    {
                        if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 74))
                        {
                            InvoiceByDuoe();
                        }
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("InvoiceByDuoe:", error, enable: true);
                    }
                }
                else if (VarGeneral.SSSTyp != 0)
                {
                    try
                    {
                        AlarmPeaperBanksDate();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("AlarmPeaperBanksDate:", error, enable: true);
                        MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                }
                try
                {
                    RegistryKey SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp\\ActivFile", writable: true);
                    if (SSS == null)
                    {
                        SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile", writable: true);
                        if (SSS != null)
                        {
                            SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp", writable: true);
                            if (SSS == null)
                            {
                                SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile", writable: true);
                                SSS.CreateSubKey("FilesEmp");
                                SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp", writable: true);
                                SSS.CreateSubKey("ActivFile");
                                SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp\\ActivFile", writable: true);
                                SSS.SetValue("sEmp", "0");
                                SSS.Close();
                            }
                            else
                            {
                                SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp\\ActivFile", writable: true);
                                if (SSS == null)
                                {
                                    SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp", writable: true);
                                    SSS.CreateSubKey("ActivFile");
                                    SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp\\ActivFile", writable: true);
                                    SSS.SetValue("sEmp", "0");
                                    SSS.Close();
                                }
                            }
                        }
                        else
                        {
                            SSS = Registry.CurrentUser.OpenSubKey("Software", writable: true);
                            if (SSS != null)
                            {
                                SSS.CreateSubKey("SystemSupportedFile");
                                SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile", writable: true);
                                SSS.CreateSubKey("FilesEmp");
                                SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp", writable: true);
                                SSS.CreateSubKey("ActivFile");
                                SSS = Registry.CurrentUser.OpenSubKey("Software\\SystemSupportedFile\\FilesEmp\\ActivFile", writable: true);
                                SSS.SetValue("sEmp", "0");
                                SSS.Close();
                            }
                        }
                    }
                }
                catch
                {
                }
                if (VarGeneral.SSSLev == "D" || VarGeneral.SSSLev == "E")
                {
                    EmpsLoadMani();
                }
                else
                {
                    EmpDocAlarm2();
                }
                if (VarGeneral.SSSTyp == 0)
                {
                    try
                    {
                        db.ExecuteCommand("update T_SYSSETTING set Seting = '" + VarGeneral.Settings_Sys.Seting.Substring(0, 4) + "000" + VarGeneral.Settings_Sys.Seting.Substring(7) + "'");
                    }
                    catch
                    {
                    }
                    try
                    {
                        db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [autoTaxGaid] = 0");
                        db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [autoDisGaid] = 0");
                        db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [autoCommGaid] = 0");
                    }
                    catch
                    {
                    }
                }
                if (VarGeneral.SSSLev == "H" || VarGeneral.SSSLev == "X")
                {
                    sideBarPanelItem_Hotel.Visible = true;
                    //    foreach (Control ctrl in base.Controls)
                    //    {
                    //        ctrl.MouseClick += mouseClick;
                    //    }
                    //    sideBar_itemMain.ExpandedPanel = sideBarPanelItem_Hotel;
                    //    if (VarGeneral.vDemo && VarGeneral.UserID != 1)
                    //    {
                    //        buttonItem_PhonePrices.Visible = false;
                    //        buttonItem_RepGrouping.Visible = false;
                    //    }
                    //    else
                    //    {
                    //        buttonItem_ReservationToday_Click(sender, e);
                    //    }
                    //}
                    if (VarGeneral.SSSLev == "Q")
                    {
                        sideBarPanelItem_Eqar.Visible = true;
                        //   sideBar_itemMain.ExpandedPanel = sideBarPanelItem_Eqar;
                    }
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("FrmMain_Load:", error, enable: true);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
            try
            {
                List<T_INVHED> q3 = (from t in db.T_INVHEDs
                                     where t.InvTyp == (int?)21
                                     where t.RoomNo <= (int?)1 || !t.T_Room.waiterNo.HasValue
                                     orderby t.InvNo
                                     select t).ToList();
                IDatabase db_ = Framework.Data.Database.GetDatabase(VarGeneral.BranchCS);
                try
                {
                    for (int c = 0; c < q3.Count; c++)
                    {
                        T_INVHED WiterOrder = q3[c];
                        for (int i = 0; i < WiterOrder.T_INVDETs.Count; i++)
                        {
                            if (WiterOrder.T_INVDETs[i].ItmTyp.Value == 2)
                            {
                                for (int iicnt = 0; iicnt < WiterOrder.T_INVDETs[i].T_SINVDETs.Count; iicnt++)
                                {
                                    db_.ClearParameters();
                                    db_.AddParameter("SInvDet_ID", DbType.Int32, WiterOrder.T_INVDETs[i].T_SINVDETs[iicnt].SInvDet_ID);
                                    db_.ExecuteNonQuery(storedProcedure: true, "S_T_SINVDET_DELETE");
                                }
                            }
                            db_.ClearParameters();
                            db_.AddParameter("InvDet_ID", DbType.Int32, WiterOrder.T_INVDETs[i].InvDet_ID);
                            db_.ExecuteNonQuery(storedProcedure: true, "S_T_INVDET_DELETE");
                        }
                        try
                        {
                            db.ExecuteCommand("DELETE FROM [T_INVHED] WHERE InvHed_ID=" + WiterOrder.InvHed_ID);
                        }
                        catch
                        {
                        }
                    }
                }
                catch (SqlException)
                {
                }
                catch (Exception)
                {
                }
            }
            catch
            {
            }
            VarGeneral.UserLang = (int)dbc.Get_PermissionID(VarGeneral.UserID).ProLng;
           ProShared. GeneralM.VarGeneral.currentintlanguage = (int)dbc.Get_PermissionID(VarGeneral.UserID).ProLng;
            try
            {
                //buttonItem5_Click(sender, e);
            }
            catch
            {
            }
            try
            {
                List<T_Room> q2 = db.T_Rooms.Where((T_Room t) => t.RomeStatus.Value).ToList();
                int c2 = 0;
                while (true)
                {
                    if (c2 < q2.Count)
                    {
                        List<T_INVHED> Qu = db.T_INVHEDs.Where((T_INVHED t) => t.RoomNo == (int?)q2[c2].ID).ToList();
                        if (Qu.Count <= 0)
                        {
                            db.ExecuteCommand("UPDATE [T_Rooms] SET [RomeStatus] = 0, [waiterNo] = NULL Where [RomeStatus] = 1 and ID =" + q2[c2].ID);
                        }
                        c2++;
                        continue;
                    }
                    break;
                }
            }
            catch
            {
            }
            if (!VarGeneral.vDemo)
            {
                if (txtCount.Value <= 30 && VarGeneral.gUserName != "runsetting")
                {
                    panelWarning.Visible = true;
                    panelWarning.BringToFront();
                }
                else
                {
                    panelWarning.Visible = false;
                }
            }
            else
            {
                panelWarning.Visible = false;
            }
            try
            {
                VarGeneral.UserLang = (int)dbc.Get_PermissionID(VarGeneral.UserID).ProLng;
                bool car = Program.iscarversion();
                bool exuser = false;
                VarGeneral.UserLang = permission.ProLng.Value;
                if (VarGeneral.UserID != 1 && VarGeneral.UserID != 2)
                    exuser = VarGeneral.TString.ChkStatShow(dbc.Get_PermissionID(VarGeneral.UserID).FilStr, 56);
                if (exuser && car)
                {
                    FrmUNderDone frm = new FrmUNderDone();
                    frm.TopMost = true;
                    frm.ShowDialog();
                    bubbleButton_Enter_Click(null, null);
                }
                else
                if (dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp.Value == 1)
                {
                    if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 22))
                    {
                        VarGeneral.InvTyp = 1;
                        VarGeneral._IsPOS = true;

                        if (Program.iscarversion())
                        {

                            FrmInvSaleCar frm4 = new FrmInvSaleCar();
                            frm4.Tag = LangArEn;
                            frm4.TopMost = true;
                            frm4.WindowState = FormWindowState.Maximized;
                            //frm4.MdiParent = this;
                            //childmin();
                            frm4.ShowDialog();
                        }
                        else
                        {
                            FrmInvSale frm4 = new FrmInvSale();
                            frm4.Tag = LangArEn;
                            frm4.TopMost = true;
                            //frm4.MdiParent = this;
                            //childmin();
                            frm4.ShowDialog();
                        }
                        VarGeneral._IsPOS = false;
                        bubbleButton_Enter_Click(null, null);
                    }
                    else
                    {
                        if (Program.iscarversion())
                        {
                            VarGeneral.InvTyp = 7;
                            VarGeneral._IsPOS = true;
                            FrmCarPOSLog frm3 = new FrmCarPOSLog();
                            frm3.Tag = LangArEn;
                            frm3.TopMost = true;
                            frm3.WindowState = FormWindowState.Maximized;
                            frm3.ShowDialog();
                            VarGeneral._IsPOS = false;
                            bubbleButton_Enter_Click(null, null);
                        }
                        else
                        {
                            VarGeneral.InvTyp = 1;
                            VarGeneral._IsPOS = true;
                            FrmPOSREP frm3 = new FrmPOSREP();
                            frm3.Tag = LangArEn;
                            frm3.TopMost = true;
                            frm3.ShowDialog();
                            VarGeneral._IsPOS = false;
                            bubbleButton_Enter_Click(null, null);
                        }
                    }
                }
            }
            catch
            {
                VarGeneral._IsPOS = false;
            }
            try
            {
                if (VarGeneral._IsWaiter)
                {
                    VarGeneral.InvTyp = 21;
                    FrmWaiterMenue frm2 = new FrmWaiterMenue();
                    try
                    {
                        frm2.Tag = db.StockWaiterID(VarGeneral._WaiterID).ProLng.Value;
                    }
                    catch
                    {
                        frm2.Tag = LangArEn;
                    }
                    frm2.TopMost = true;
                    //frm2.MdiParent = this;
                    //childmin();
                    frm2.ShowDialog();
                    VarGeneral._IsWaiter = false;
                    bubbleButton_Enter_Click(null, null);
                }
            }
            catch
            {
                VarGeneral._IsWaiter = false;
            }
            // FrmMn_SizeChanged(sender, e);
            if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 53) && !DateSync)
            {
                FrmTransDateSync frm = new FrmTransDateSync();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                frm.ShowDialog();
            }
            DateSync = true;
            try
            {
                if (!VarGeneral.vDemo && VarGeneral.gUserName != "runsetting")
                {
                    RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
                    RegistryKey _hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                    try
                    {
                        object t2 = _hKey.GetValue("vRemotly");
                        if (string.IsNullOrEmpty(t2.ToString()))
                        {
                            _hKey.CreateSubKey("vRemotly");
                            _hKey.SetValue("vRemotly", "0");
                        }
                    }
                    catch
                    {
                        _hKey.CreateSubKey("vRemotly");
                        _hKey.SetValue("vRemotly", "0");
                    }
                    try
                    {
                        object t2 = hKeyNew.GetValue("vRemotly_New");
                        if (string.IsNullOrEmpty(t2.ToString()))
                        {
                            hKeyNew.CreateSubKey("vRemotly_New");
                            hKeyNew.SetValue("vRemotly_New", "0");
                        }
                    }
                    catch
                    {
                        hKeyNew.CreateSubKey("vRemotly_New");
                        hKeyNew.SetValue("vRemotly_New", "0");
                    }
                    long _regvalRemot = long.Parse(_hKey.GetValue("vRemotly").ToString());
                    long _regvalRemotNew = long.Parse(hKeyNew.GetValue("vRemotly_New").ToString());
                    if (_regvalRemot == 1 && _regvalRemot != _regvalRemotNew)
                    {
                        Environment.Exit(0);
                    }
                    object q = _hKey.GetValue("vPaid");
                    if (!string.IsNullOrEmpty(q.ToString()))
                    {
                        if (VarGeneral.CheckDate(q.ToString()))
                        {
                            int c = 0;
                            try
                            {
                                c = int.Parse(dbc.Get_PermissionID(1).CashAccNo_D);
                            }
                            catch
                            {
                                c = 0;
                            }
                            if (Convert.ToDateTime(q.ToString()) <= Convert.ToDateTime(VarGeneral.Gdate) || c > 40 || c == 0)
                            {
                                MessageBox.Show((LangArEn == 0) ? " يرجى التواصل مع الإدارة \n  يجب سداد المبلغ المتبقي عليك لضمان عدم فقدان بياناتك..  " : "If the problem persists with you, please communicate with the administration \n is not sure of the status activated version ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                                //bubbleButton_Enter_Click(null, null);
                            }
                            else
                            {
                                dbc.ExecuteCommand("UPDATE [DBPROSOFT_default].[dbo].[T_Users] SET [CashAccNo_D] = '" + (c + 1) + "' WHERE Usr_ID =1");
                            }
                        }
                        else
                        {
                            MessageBox.Show((LangArEn == 0) ? " يرجى التواصل مع الإدارة \n  يجب سداد المبلغ المتبقي عليك لضمان عدم فقدان بياناتك..  " : "If the problem persists with you, please communicate with the administration \n is not sure of the status activated version ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                            Environment.Exit(0);
                            //bubbleButton_Enter_Click(null, null);
                        }
                    }
                }
            }
            catch
            {
            }
            if (VarGeneral.gUserName == "runsetting")
            {
                if (Environment.UserName.Contains("admin") || Environment.UserName.Contains("user"))
                {
                    //bubbleButton_SendMail.Visible = true;
                }
                if (File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim() + "\\khalijwatania.dll"))
                {
                    //buttonItem_SalesInv.Text = ((LangArEn == 0) ? "فاتورة خدمة" : "Service Invoice");
                    //buttonItem_MoveSalse.Text = ((LangArEn == 0) ? "فاتورة خدمة" : "Service Invoice");
                    //buttonItem_InvComm.Text = ((LangArEn == 0) ? "كشف بعمولات فواتير الخدمة" : "Services commissions");
                    //buttonItem_InvCommUsr.Text = ((LangArEn == 0) ? "عمولات المستخدمين لفواتير الخدمة" : "Services commissions - Usrs");
                }
                try
                {
                    int b = 0;
                    string ServiceNm = "";
                    for (b = 0; b < VarGeneral.gServerName.Length && !(VarGeneral.gServerName.Substring(b, 1) == "\\"); b++)
                    {
                    }
                    try
                    {
                        ServiceNm = VarGeneral.gServerName.Substring(b + 1);
                    }
                    catch
                    {
                        ServiceNm = "";
                    }
                    if (string.IsNullOrEmpty(ServiceNm))
                    {
                        ServiceNm = VarGeneral.DBNo.Replace("DBPROSOFT_", null);
                    }
                    try
                    {
                        if (!Directory.Exists(Application.StartupPath + "\\" + ServiceNm))
                        {
                            Directory.CreateDirectory(Application.StartupPath + "\\" + ServiceNm);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        if (File.Exists(Application.StartupPath + "\\" + ServiceNm + "\\warning.txt"))
                        {
                            onlineworning2.Visible = true;
                            //OnlineWarning.Visible = true;
                            //OnlineWarning.BringToFront();
                            //try
                            //{
                            //    StreamReader sr = new StreamReader(Application.StartupPath + "\\" + ServiceNm + "\\warning.txt", Encoding.Default, detectEncodingFromByteOrderMarks: true);
                            //    string[] lines = sr.ReadToEnd().Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                            //    if (!string.IsNullOrEmpty(lines[0]))
                            //    {
                            //        OnlineWarning.Text = "";
                            //        for (int i = 0; i < lines.ToList().Count; i++)
                            //        {
                            //            WarningBox onlineWarning = OnlineWarning;
                            //            onlineWarning.Text = onlineWarning.Text + "\n" + lines[i];
                            //        }
                            //    }
                            //}
                            //catch
                            //{
                            //}
                            //if (File.Exists(Application.StartupPath + "\\" + ServiceNm + "\\stop.txt") && VarGeneral.UserID != 1)
                            //{
                            //    //sideBar_itemMain.Enabled = false;
                            //   //Frame1.Enabled = false;
                            //    //bubbleBar_Items.Enabled = false;
                            //    //radialMenu_Setting.Visible = false;
                            //    //radialMenu_Lang.Visible = false;
                            //}
                        }
                    }
                    catch
                    {
                        OnlineWarning.Visible = false;
                    }
                }
                catch
                {
                }
            }
            else
            {
                //if (VarGeneral.UserID == 1)
                //{
                //    bubbleButton_SendMail.Visible = true;
                //}
                //else
                //{
                //    bubbleButton_SendMail.Visible = false;
                //}
                //if (File.Exists(Application.StartupPath + "\\Script\\SecriptInvitationCards.dll"))
                //{
                //    Script_InvitationCards();
                //}
                //if (File.Exists(Application.StartupPath + "\\Script\\SecriptSchool.dll"))
                //{
                //    Script_School();
                //}
                //if (File.Exists(Application.StartupPath + "\\Script\\SecriptStons.dll"))
                //{
                //    buttonItem_SuppQutation.Text = ((LangArEn == 0) ? "أمر تحميل" : "Order");
                //    buttonItem_MoveSuppQutation.Text = ((LangArEn == 0) ? "أمر تحميل" : "Order");
                //}
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptMaintenanceCars.dll"))
                {
                    //    MaintenanceCars();
                }
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptBus.dll"))
                {
                    // Bus();
                }
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptTegnicalCollage.dll"))
                {
                    //TegnicalCollage();
                }
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptWaterPackages.dll"))
                {
                    WaterPackages();
                }
                try
                {
                    if (RunSyncSts)
                    {
                        RunSyncSts = false;
                        bool userPlus = false;
                        try
                        {
                            if (VarGeneral.UsersActivated.Count > 0 && !string.IsNullOrEmpty(VarGeneral.UsersActivated.Find((string x) => x.ToUpper() == Environment.UserName.ToUpper())))
                            {
                                userPlus = true;
                            }
                        }
                        catch
                        {
                            userPlus = false;
                        }
                        if (VarGeneral.gUserName != "runsetting" && !userPlus)
                        {
                            try
                            {
                                if (!string.IsNullOrEmpty(VarGeneral.Settings_Sys.SyncPath))
                                {
                                    Process[] processes = Process.GetProcesses();
                                    foreach (Process Proc in processes)
                                    {
                                        try
                                        {
                                            if (Proc.ProcessName.Equals("sync-taskbar") || Proc.ProcessName.Equals("sync-worker"))
                                            {
                                                Proc.Kill();
                                            }
                                        }
                                        catch
                                        {
                                        }
                                    }
                                }
                            }
                            catch
                            {
                            }
                            try
                            {
                                if (!string.IsNullOrEmpty(VarGeneral.Settings_Sys.SyncPath))
                                {
                                    Process.Start(VarGeneral.Settings_Sys.SyncPath);
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                catch
                {
                }
                CheckInvReapir();
                if (expandablePanel3.Visible == true)
                {
                    init();
                }
                else
                {
                    termination();
                }
            }
            if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 73))
            {
                FillItemPRice();
            }
            if (!expandablePanel3.Visible && VarGeneral.SSSLev != "H" && VarGeneral.TString.ChkStatShow(permission.PassQty, 19))
            {
                kkk = true;
                expandablePanel3.Visible = true;
                expandablePanel3.BringToFront();
                // expandablePanel3.Height = metroTilePanel.Height;
                circularProgressItem1.IsRunning = true;
                dataGridView_TopInvoice.DrawMode = DrawModeEnum.OwnerDraw;
                //dataGridView_TopInvoice.OwnerDrawCell += _ownerDraw;
                dataGridView_TopInvoicePurchaes.DrawMode = DrawModeEnum.OwnerDraw;
                //dataGridView_TopInvoicePurchaes.OwnerDrawCell += _ownerDraw;
                c1FlexGrid1.DrawMode = DrawModeEnum.OwnerDraw;
                //c1FlexGrid1.OwnerDrawCell += _ownerDraw;
                dataGridView_TopItems.DrawMode = DrawModeEnum.OwnerDraw;
                //dataGridView_TopItems.OwnerDrawCell += _ownerDraw;
                //buttonItem_SrchMonth_Click(sender, e);
            }
            else
            {
                expandablePanel3.Visible = false;
            }
            if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 81) || VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 82))
            {
                FrmAutoAlarmEqar frmEqarAlarm = new FrmAutoAlarmEqar();
                frmEqarAlarm.Tag = LangArEn;
                VarGeneral.vTabAutoAlarm = 0;
                frmEqarAlarm.TopMost = true;
                //frmEqarAlarm.MdiParent = this;
                //childmin();
                showChild(frmEqarAlarm);
            }
        }
#pragma warning disable CS0414 // The field 'Frm_Main.syncflag' is assigned but its value is never used
        int syncflag = 0; bool kkk = false;
#pragma warning restore CS0414 // The field 'Frm_Main.syncflag' is assigned but its value is never used
        public bool IsFormOpen(Form formType)
        {
            try
            {
                foreach (Form form in Application.OpenForms)
                {
                    if (formType.GetType() == form.GetType())
                    {
                        return true;
                    }
                }
                return false;
            }
            catch
            {
                return false;
            }
        }
        private int LangArEn = 0;
        private void buttonItem_itmeCat_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmItmGroup()))
            {
                FrmItmGroup frm = new FrmItmGroup();
                frm.Tag = LangArEn;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_items_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmItems()))
            {
                FrmItems frm = new FrmItems();
                frm.Tag = LangArEn;
                showChild(frm);
            }
        }
        private void buttonItem_unit_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmUnit()))
            {
                FrmUnit frm = new FrmUnit();
                frm.Tag = LangArEn;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Curncy_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCurrncy()))
            {
                FrmCurrncy frm = new FrmCurrncy();
                frm.Tag = LangArEn;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Mndob_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmMndob()))
            {
                FrmMndob frm = new FrmMndob();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Vender_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCustomer()))
            {
                FrmCustomer frm = new FrmCustomer();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
            }
        }
        private void buttonItem_Supp_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmSuppliers()))
            {
                FrmSuppliers frm = new FrmSuppliers();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_CenterCost_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCostCenter()))
            {
                FrmCostCenter frm = new FrmCostCenter();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Store_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmStore()))
            {
                FrmStore frm = new FrmStore();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Branch_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmBranch()))
            {
                FrmBranch frm = new FrmBranch();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_SpicialAddition_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmInvDetNote()))
            {
                FrmInvDetNote frm = new FrmInvDetNote();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_SpicialAddition.Text;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Employee_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmEmployees()))
            {
                FrmEmployees frm = new FrmEmployees();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_CalcSalary_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCalacSalary()))
            {
                VarGeneral.InvTyp = 11;
                FrmCalacSalary frm = new FrmCalacSalary();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_RelaySalary_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRelaySalaries()))
            {
                VarGeneral.InvTyp = 13;
                FrmRelaySalaries frm = new FrmRelaySalaries();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_UnRealy_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmOpenRelaySalaries()))
            {
                FrmOpenRelaySalaries frm = new FrmOpenRelaySalaries();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        //    private T_User permission = new T_User();
        private void buttonItem_EmployeeSalaryRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmPrintTrajectorySal(0)))
            {
                FrmPrintTrajectorySal frm = new FrmPrintTrajectorySal(0);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Waiter_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new Frmwaiter()))
            {
                Frmwaiter frm = new Frmwaiter();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Driver_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmDriv()))
            {
                FrmDriv frm = new FrmDriv();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Table_Click(object sender, EventArgs e)
        {
            FrmTableManage frm = new FrmTableManage();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem_ReportEmployee_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepEmployees(0)))
            {
                FrmRepEmployees frm = new FrmRepEmployees(0);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_EmployeeDocRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepEmployees(1)))
            {
                FrmRepEmployees frm = new FrmRepEmployees(1);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_PrintSalIssus_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmPrintTrajectorySal(1)))
            {
                FrmPrintTrajectorySal frm = new FrmPrintTrajectorySal(1);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_PrintSalRelay_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmPrintTrajectorySal(2)))
            {
                FrmPrintTrajectorySal frm = new FrmPrintTrajectorySal(2);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_AlarmDoc_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmAutoAlarmEmployee()))
            {
                FrmAutoAlarmEmployee frm = new FrmAutoAlarmEmployee();
                frm.Tag = LangArEn;
                VarGeneral.vTabAutoAlarm = 0;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private string RetScrt1(string pNo)
        {
            string RetScrt = "";
            try
            {
                if (pNo == "" || !sIsNumeric(pNo))
                {
                    return RetScrt;
                }
                int ii = 0;
                int jj = 0;
                int lnNo = 0;
                string retNo = "";
                string TretNo = "";
                lnNo = pNo.Length + 1; List<int> ff = new List<int>();
                for (ii = 1; ii <= lnNo; ii++)
                {
                    TretNo = "";
                    jj = 0;
                    while (TretNo.Length <= lnNo)
                    {
                        jj++;
                        if (sIsNumeric(pNo.Substring(jj, 1)))
                        {
                            TretNo += (double)(int.Parse(pNo.Substring(jj, 1)) * ii) * 0.1651;
                        }
                    }
                    ff.Add(TretNo.Length);
                    retNo = ((!(TretNo.Substring(ii, 1) == ".")) ? (retNo + TretNo.Substring(ii, 1)) : (retNo + (ii * 45).ToString().Substring(2)));
                }
                RetScrt = retNo.Substring(0, lnNo - 1).ToString();
                return RetScrt;
            }
            catch
            {
                return RetScrt;
            }
        }

        private void radialMenu_Setting_ItemClick(object sender, EventArgs e)
        {
            try
            {
                RadialMenuItem item = sender as RadialMenuItem;
                if (item.Name == "radialMenuItem_Setting")
                {
                    NewFrmSystemSetting frm4 = new NewFrmSystemSetting();
                    frm4.Tag = LangArEn;
                    frm4.TopMost = true;
                    //                    // frm4.MdiParent = this;
                    frm4.ShowDialog();
                    try
                    {
                        if (!VarGeneral.Settings_Sys.IsNotBackground.Value && !VarGeneral.TString.ChkStatShow(permission.PassQty, 19))
                        {
                            if (VarGeneral.Settings_Sys.BackgroundPic != null)
                            {
                                byte[] arr = VarGeneral.Settings_Sys.BackgroundPic.ToArray();
                                MemoryStream stream = new MemoryStream(arr);
                                BackgroundImage = Image.FromStream(stream);
                            }
                            else
                            {
                                BackgroundImage = Resources.sssBackground;
                            }
                        }
                        else
                        {
                            BackgroundImage = null;
                        }
                    }
                    catch
                    {
                        BackgroundImage = Resources.sssBackground;
                    }
                    BackgroundImageLayout = ImageLayout.Stretch;
                    FillRommChart(LangArEn);
                    Refresh();
                }
                else if (item.Name == "radialMenuItem_Permisson")
                {
                    FrmUsr frm5 = new FrmUsr();
                    frm5.Tag = LangArEn;
                    frm5.TopMost = true;
                    frm5.ShowDialog();
                }
                else if (item.Name == "radialMenuItem_AlarmRequest")
                {
                    ItemDataImport();
                }
                else if (item.Name == "radialMenuItem_AlarmDateExp")
                {
                    AlarmDataExpitem();
                }
                else if (item.Name == "radialMenuItem_AlArmBankPeaper")
                {
                    AlarmPeaperBanksDate();
                }
                else if (item.Name == "radialMenuItem_AlArmEmpDoc")
                {
                    if (VarGeneral.vDemo)
                    {
                        MessageBox.Show((LangArEn == 0) ? "يرجى تفعيل نسختك التجريبة للإستفادة من هذه الخدمة\n لايمكن عرض وثائق الموظفين الآن ..  " : "Please activate your free trial to take advantage of this service \n can't show Employee Documents Now ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                    else
                    {
                        EmpDocAlarm();
                    }
                }
                else if (item.Name == "radialMenuItem_AlArmDueoInvoic")
                {
                    InvoiceByDuoe();
                }
                else if (item.Name == "radialMenuItem_CloseTheYear")
                {
                    if (VarGeneral.vDemo && VarGeneral.UserID != 1)
                    {
                        MessageBox.Show((LangArEn == 0) ? "يرجى تفعيل نسختك التجريبة للإستفادة من هذه الخدمة" : "Please activate your free trial to take advantage of this service..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        return;
                    }
                    FrmEndYear frm6 = new FrmEndYear();
                    frm6.Tag = LangArEn;
                    frm6.TopMost = true;
                    //frm6.MdiParent = this;
                    //childmin();
                    showChild(frm6);
                }
                else if (item.Name == "radialMenuItem_Backup")
                {
                    DBBackup(vMsg: true);
                }
                else if (item.Name == "radialMenuItem_Restore")
                {
                    if (VarGeneral.vDemo && VarGeneral.UserID != 1)
                    {
                        MessageBox.Show((LangArEn == 0) ? "يرجى تفعيل نسختك التجريبة للإستفادة من هذه الخدمة\n لم تتم عملية الإسترجاع بنجاح..  " : "Please activate your free trial to take advantage of this service \n Restore process has not been successfully ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        return;
                    }
                    int vID = 0;
                    string vMDF_File = "";
                    string vLDB_File = "";
                    string vLogicalName = "";
                    string vLogicalNameLog = "";
                    string filename = "";
               System.Windows.Forms. OpenFileDialog  openFileDialog = new System.Windows.Forms. OpenFileDialog (); 
                    openFileDialog.Filter = "Data|*.bak";
                    try
                    {
                        if (VarGeneral.gUserName == "runsetting")
                        {
                            openFileDialog.InitialDirectory = "::{20D04FE0-3AEA-1069-A2D8-08002B30309D}";
                        }
                    }
                    catch
                    {
                    }
                    openFileDialog.ShowDialog();
                    filename = openFileDialog.FileName;
                    if (string.IsNullOrEmpty(filename) || !File.Exists(filename))
                    {
                        return;
                    }
                    try
                    {
                        List<int> vRec1 = new List<int>();
                        int _LoopMain = 0;
                        while (true)
                        {
                            try
                            {
                                if (_LoopMain <= 5)
                                {
                                    dbInstance = null;
                                    dbInstanceRate = null;
                                    vRec1 = db.ExecuteQuery<int>("SELECT database_id FROM sys.databases WHERE name='" + VarGeneral.DBNo + "'", new object[0]).ToList();
                                }
                            }
                            catch
                            {
                                _LoopMain++;
                                continue;
                            }
                            break;
                        }
                        if (vRec1.Count > 0)
                        {
                            vID = vRec1.First();
                            if (vID > 0)
                            {
                                List<string> vRecPath = db.ExecuteQuery<string>("SELECT physical_name FROM sys.master_files WHERE type = 0 and database_id=" + vID, new object[0]).ToList();
                                if (vRecPath.Count > 0)
                                {
                                    vMDF_File = vRecPath.First().ToString();
                                }
                                vRecPath = db.ExecuteQuery<string>("SELECT physical_name FROM sys.master_files WHERE type = 1 and database_id=" + vID, new object[0]).ToList();
                                if (vRecPath.Count > 0)
                                {
                                    vLDB_File = vRecPath.First().ToString();
                                }
                            }
                            DialogResult dr = DialogResult.None;
                            dr = MessageBox.Show((LangArEn == 0) ? " سيتم إستبدال قاعدة البيانات بالنسخة الإحتياطية \n  هل حقا\u064b تريد المتابعة ؟" : " Will be Replace data base \n  do you really want to continue? ", "تثبيت قاعدة البيانات", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                            if (dr == DialogResult.No)
                            {
                                return;
                            }
                            string vFile1 = filename;
                            List<string> vRecPath2 = db.ExecuteQuery<string>("RESTORE FILELISTONLY FROM DISK = '" + vFile1 + "'", new object[0]).ToList();
                            if (vRecPath2.Count > 0)
                            {
                                vLogicalName = vRecPath2[0];
                                vLogicalNameLog = vRecPath2[1];
                            }
                            string vWITH = "";
                            vWITH = " Move '" + vLogicalName + "' TO '" + vMDF_File + "',Move '" + vLogicalNameLog + "' TO '" + vLDB_File + "'";
                            vWITH += ",REPLACE";
                            using (Stock_DataDataContext dbx = new Stock_DataDataContext(VarGeneral.BranchCS + ";Connect Timeout=120"))
                            {
                                int _LoopDBc = 0;
                                while (true)
                                {
                                    try
                                    {
                                        if (_LoopDBc <= 5)
                                        {
                                            dbx.ExecuteCommand("USE [master] ALTER DATABASE [" + VarGeneral.DBNo + "] SET SINGLE_USER WITH Rollback IMMEDIATE ");
                                            Thread.Sleep(5000);
                                            dbx.ExecuteCommand("USE [master] RESTORE DATABASE [" + VarGeneral.DBNo + "] FROM DISK = '" + vFile1 + "' WITH FILE = 1 , " + vWITH);
                                            Thread.Sleep(5000);
                                            dbx.ExecuteCommand("USE [master] ALTER DATABASE [" + VarGeneral.DBNo + "] SET MULTI_USER");
                                        }
                                    }
                                    catch
                                    {

                                        _LoopDBc++;
                                        continue;
                                    }
                                    break;
                                }
                            }
                            RemoveDataBase();
                            int _Loop = 0;
                            List<T_Branch> vBranchCount = new List<T_Branch>();
                            while (true)
                            {
                                try
                                {
                                    if (_Loop <= 5)
                                    {
                                        vBranchCount = this.dbc.FillBranch_2("").ToList();
                                    }
                                }
                                catch
                                {
                                    _Loop++;
                                    continue;
                                }
                                break;
                            }
                            int _UpdateLoopProccess = 0;
                            int b = 0;
                            string ServiceNm = "";
                            if (VarGeneral.gUserName == "runsetting")
                            {
                                ServiceNm = VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim();
                            }
                            else
                            {
                                for (b = 0; b < VarGeneral.gServerName.Length && !(VarGeneral.gServerName.Substring(b, 1) == "\\"); b++)
                                {
                                }
                                try
                                {
                                    ServiceNm = VarGeneral.gServerName.Substring(b + 1);
                                }
                                catch
                                {
                                    ServiceNm = "";
                                }
                            }
                            if (string.IsNullOrEmpty(ServiceNm))
                            {
                                ServiceNm = VarGeneral.DBNo.Replace("DBPROSOFT_", null);
                            }
                            try
                            {
                                if (!Directory.Exists(Application.StartupPath + "\\" + ServiceNm))
                                {
                                    Directory.CreateDirectory(Application.StartupPath + "\\" + ServiceNm);
                                }
                            }
                            catch
                            {
                            }
                            try
                            {
                                if (!Directory.Exists(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName))
                                {
                                    Directory.CreateDirectory(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName);
                                }
                            }
                            catch
                            {
                            }
                            for (int i = 0; i < vBranchCount.Count; i++)
                            {
                                _UpdateLoopProccess = 0;
                                dbInstance = null;
                                dbInstanceRate = null;
                                try
                                {
                                    while (true)
                                    {
                                        try
                                        {
                                            if (_UpdateLoopProccess > 5)
                                            {
                                                break;
                                            }
                                            List<int> vRec2 = db.ExecuteQuery<int>("SELECT database_id FROM sys.databases WHERE name='" + VarGeneral.DBNo.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + "'", new object[0]).ToList();
                                            if (vRec2.Count > 0)
                                            {
                                                vID = vRec2.First();
                                                if (vID > 0)
                                                {
                                                    List<string> vRecPath = db.ExecuteQuery<string>("SELECT physical_name FROM sys.master_files WHERE type = 0 and database_id=" + vID, new object[0]).ToList();
                                                    if (vRecPath.Count > 0)
                                                    {
                                                        vMDF_File = vRecPath.First().ToString();
                                                    }
                                                    vRecPath = db.ExecuteQuery<string>("SELECT physical_name FROM sys.master_files WHERE type = 1 and database_id=" + vID, new object[0]).ToList();
                                                    if (vRecPath.Count > 0)
                                                    {
                                                        vLDB_File = vRecPath.First().ToString();
                                                    }
                                                }
                                                dr = DialogResult.None;
                                                dr = MessageBox.Show((LangArEn == 0) ? (" سيتم إستبدال بيانات الفرع [ " + vBranchCount[i].Branch_Name + " ] ببيانات النسخة الإحتياطية \n  هل حقا\u064b تريد المتابعة ؟") : (" Will be Replace data base the branch [ " + vBranchCount[i].Branch_NameE + " ] \n  do you really want to continue? "), "تثبيت قاعدة البيانات", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                                                if (dr == DialogResult.No)
                                                {
                                                    break;
                                                }
                                                vFile1 = filename;
                                                vRecPath2 = db.ExecuteQuery<string>("RESTORE FILELISTONLY FROM DISK = '" + vFile1 + "'", new object[0]).ToList();
                                                if (vRecPath2.Count > 0)
                                                {
                                                    vLogicalName = vRecPath2[0].Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no;
                                                    vLogicalNameLog = vRecPath2[1].Replace("_log", "").Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + "_log";
                                                }
                                                //if (vRecPath2[0].Contains("APPSOFT"))
                                                //{
                                                //    vLogicalName = vRecPath2[0].Replace("DBAPPSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no;
                                                //    vLogicalNameLog = vRecPath2[1].Replace("_log", "").Replace("DBAPPSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + "_log";
                                                //}
                                                vWITH = "";
                                                vWITH = " Move N'" + vLogicalName + "' TO '" + vMDF_File + "',Move N'" + vLogicalNameLog + "' TO '" + vLDB_File + "'";
                                                vWITH += ",NOUNLOAD,REPLACE,  STATS = 5";
                                                using (Stock_DataDataContext _dbx = new Stock_DataDataContext(VarGeneral.BranchCS + ""))
                                                {
                                                    int _LoopDB = 0;
                                                    while (true)
                                                    {
                                                        try
                                                        {
                                                            if (_LoopDB <= 5)
                                                            {
                                                                _dbx.ExecuteCommand("USE [master] ALTER DATABASE [" + VarGeneral.DBNo.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + "] SET SINGLE_USER WITH Rollback IMMEDIATE ");
                                                                Thread.Sleep(7000);
                                                                _dbx.ExecuteCommand("USE [master] RESTORE DATABASE [" + VarGeneral.DBNo.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + "] FROM DISK = '" + vFile1 + "' WITH FILE = " + (i + 2) + "," + vWITH);
                                                                Thread.Sleep(10000);
                                                                _dbx.ExecuteCommand("USE [master] ALTER DATABASE [" + VarGeneral.DBNo.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + "] SET MULTI_USER");
                                                            }
                                                        }
                                                        catch(Exception ex)
                                                        {
                                                            try
                                                            {
                                                                _dbx.ExecuteCommand("USE [master] ALTER DATABASE [" + VarGeneral.DBNo.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + "] SET MULTI_USER");

                                                            }
                                                            catch
                                                            { }
                                                            _LoopDB++;
                                                            continue;
                                                        }
                                                        break;
                                                    }
                                                }
                                                break;
                                            }
                                            MessageBox.Show((LangArEn == 0) ? "لم يتم استرجاع قاعدة البيانات بنجاح .. تأكد من صحة بيانات النسخة الإحتياطية" : "Error ! Not Restore the database successfully .. make sure the backup path", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                                            try
                                            {
                                                using (Stock_DataDataContext _dbx = new Stock_DataDataContext(VarGeneral.BranchCS + ";Connect Timeout=120"))
                                                {
                                                    try
                                                    {
                                                        _dbx.ExecuteCommand("USE [master] ALTER DATABASE [DBPROSOFT_default] SET MULTI_USER");
                                                    }
                                                    catch
                                                    { }
                                                    try
                                                    {
                                                        _dbx.ExecuteCommand("USE [master] ALTER DATABASE [PROSOFT_default_1] SET MULTI_USER");
                                                    }
                                                    catch { }


                                                }
                                            }
                                            catch { }

                                            return;
                                        }
                                        catch
                                        {
                                            _UpdateLoopProccess++;
                                            continue;
                                        }
                                    }
                                }
                                catch
                                {
                                }
                            }
                            MessageBox.Show((LangArEn == 0) ? " تم إسترجاع قاعدة البيانات بنجاح.. سيتم إعادة تشغيل النظام الان " : "Restore Data Base Path is successfully .. will be Restart the system now ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                            string arguments = string.Empty;
                            string[] args = Environment.GetCommandLineArgs();
                            for (int i = 1; i < args.Length; i++)
                            {
                                arguments = arguments + args[i] + " ";
                            }
                            Application.ExitThread();
                            Process.Start(Application.ExecutablePath, arguments);
                            return;
                        }
                        MessageBox.Show((LangArEn == 0) ? "لم يتم استرجاع قاعدة البيانات بنجاح .. تأكد من صحة بيانات النسخة الإحتياطية" : "Error ! Not Restore the database successfully .. make sure the backup path", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                    catch (Exception error2)
                    {
                        MessageBox.Show((LangArEn == 0) ? ("لم يتم استرجاع قاعدة البيانات بنجاح .. تأكد من مسار و صحة النسخة الإحتياطية \n " + error2.Message) : ("Error ! Not Restore the database successfully .. make sure the backup path \n" + error2.Message), VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        VarGeneral.DebLog.writeLog("buttonItem_Restore_Click:", error2, enable: true);
                    }
                }
                else if (item.Name == "radialMenuItem_Attachment")
                {
                    string filename = "";
               System.Windows.Forms. OpenFileDialog  openFileDialog = new System.Windows.Forms. OpenFileDialog (); 
                    openFileDialog.Filter = "DataBase|*.mdf";
                    try
                    {
                        if (VarGeneral.gUserName == "runsetting")
                        {
                            openFileDialog.InitialDirectory = "::{20D04FE0-3AEA-1069-A2D8-08002B30309D}";
                        }
                    }
                    catch
                    {
                    }
                    openFileDialog.ShowDialog();
                    filename = openFileDialog.FileName;
                    if (string.IsNullOrEmpty(filename) || !Path.GetFileName(openFileDialog.FileName).StartsWith("DBPROSOFT_") || !Path.GetFileName(openFileDialog.FileName).StartsWith("PROSOFT_"))
                    {
                        MessageBox.Show((LangArEn == 0) ? "خطأ .. لم يتم الاتصال بقاعدة البيانات المحددة بنجاح .. تأكد من مسار قاعدة البيانات" : "Error ! Not connect to the database successfully .. Make sure the specified path of the database", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                    else
                    {
                        if (!File.Exists(filename))
                        {
                            return;
                        }
                        try
                        {
                            List<int> vRec1 = db.ExecuteQuery<int>("SELECT name FROM sys.databases WHERE name='" + Path.GetFileName(openFileDialog.FileName) + "'", new object[0]).ToList();
                            if (vRec1.Count > 0)
                            {
                                MessageBox.Show((LangArEn == 0) ? "خطأ .. لايمكن الاتصال بقاعدة البيانات المحددة ! لان السيرفر الحالي يحتوي على قاعدة بيانات بنفس الاسم " : "Error .. can not connect to the database specified! Because the current server contains a database with the same name", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                                return;
                            }
                            using (Stock_DataDataContext dbc = new Stock_DataDataContext("Server=" + VarGeneral.gServerName + ";Database=;UID=" + VarGeneral.UsrName + ";PWD=" + VarGeneral.Qut+ VarGeneral.UsrPass+ VarGeneral.Qut))
                            {
                                dbc.ExecuteCommand("EXEC sp_attach_db @dbname = N'" + Path.GetFileName(openFileDialog.FileName).Replace(".mdf", "") + "', \r\n                                                                                          @filename1 = \r\n                                                                                      N'" + filename + "', \r\n                                                                                          @filename2 = \r\n                                                                                      N'" + filename.Replace(".mdf", "_log.ldf") + "';");
                            }
                            MessageBox.Show((LangArEn == 0) ? "تم إضافة قاعدة البيانات المحددة الى السيرفر الحالي بنجاح .. " : "Added database specific to the current server ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                            dbInstance = null;
                        }
                        catch (Exception error2)
                        {
                            MessageBox.Show((LangArEn == 0) ? "حدث خطأ .. أثناء محاولة الاتصال بقاعدة البيانات الجديدة .. يرجى التأكد من اسم قاعدة البيانات ثم المحاولة مرة اخرى" : "An error occurred while trying to connect .. the new database .. Please make sure the name of the database and then try again", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                            VarGeneral.DebLog.writeLog("Button_Sav_Click:", error2, enable: true);
                            MessageBox.Show(error2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        }
                        return;
                    }
                }
                else if (item.Name == "radialMenuItem_Reg")
                {
                    bool vS = false;
                    RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft\\Register", writable: true);
                    if (hKey == null)
                    {
                        hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings", writable: true);
                        if (hKey != null)
                        {
                            hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft", writable: true);
                            if (hKey == null)
                            {
                                hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings", writable: true);
                                hKey.CreateSubKey("MrdSoft");
                                hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft", writable: true);
                                hKey.CreateSubKey("Register");
                                hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft\\Register", writable: true);
                                hKey.SetValue("DT", n.GDateNow("yyyy/MM/dd"));
                                hKey.SetValue("SSSActivationNo", "1");
                                hKey.Close();
                            }
                            else
                            {
                                hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft\\Register", writable: true);
                                if (hKey == null)
                                {
                                    hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft", writable: true);
                                    hKey.CreateSubKey("Register");
                                    hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft\\Register", writable: true);
                                    hKey.SetValue("DT", n.GDateNow("yyyy/MM/dd"));
                                    hKey.SetValue("SSSActivationNo", "1");
                                    hKey.Close();
                                }
                            }
                        }
                        else
                        {
                            hKey = Registry.CurrentUser.OpenSubKey("Software", writable: true);
                            if (hKey != null)
                            {
                                hKey.CreateSubKey("PRS AND PR Settings");
                                hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings", writable: true);
                                hKey.CreateSubKey("MrdSoft");
                                hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft", writable: true);
                                hKey.CreateSubKey("Register");
                                hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft\\Register", writable: true);
                                hKey.SetValue("DT", n.GDateNow("yyyy/MM/dd"));
                                hKey.SetValue("SSSActivationNo", "1");
                                hKey.Close();
                            }
                        }
                        FrmReg form2 = new FrmReg(); form2.TopMost = true;
                        vS = true;
                        if (VarGeneral.UserID != 1)//click
                            form2.disableactivation();
                        form2.ShowDialog();
                    }
                    else
                    {
                        long regval = long.Parse(hKey.GetValue("SSSActivationNo").ToString());
                        string SerHrd = "";
                        try
                        {
                            ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_LogicalDisk");
                            foreach (ManagementObject wmi_HD in searcher.Get())
                            {
                                if (string.Concat(wmi_HD["Caption"]) == "C:")
                                {
                                    SerHrd = Math.Abs(Convert.ToInt32(wmi_HD["VolumeSerialNumber"].ToString().Trim(), 16)).ToString();
                                    break;
                                }
                            }
                        }
                        catch
                        {
                        }
                        if (regval.ToString() != long.Parse(RetScrt1(SerHrd)).ToString())
                        {
                            hKey.SetValue("SSSActivationNo", regval + 1);
                            FrmReg form2 = new FrmReg(); form2.TopMost = true;
                            vS = true;
                            //  form2.disable();
                            form2.ShowDialog();
                        }
                    }
                    if (!vS)
                    {
                        FrmReg form3 = new FrmReg(); form3.TopMost = true;
                        if (VarGeneral.UserID != 1)
                            form3.disableactivation();
                        form3.ShowDialog();
                    }
                }
                else if (item.Name == "radialMenuItem_NewDataBase")
                {
                    if (VarGeneral.vDemo && VarGeneral.UserID != 1)
                    {
                        MessageBox.Show((LangArEn == 0) ? "هذه النسخة غير مفعلة لذلك لا يمكنك الإضافة والتحكم في قواعد البيانات .. " : "This version is disabled so you can not add and control the databases ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        return;
                    }
                    try
                    {
                        RegistryKey _hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                        object v = _hKey.GetValue("vPaid");
                        if (!string.IsNullOrEmpty(v.ToString()))
                        {
                            MessageBox.Show((LangArEn == 0) ? "هذه النسخة غير مفعلة لذلك لا يمكنك الإضافة والتحكم في قواعد البيانات .. " : "This version is disabled so you can not add and control the databases ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                            return;
                        }
                    }
                    catch
                    {
                    }
                    FrmNewDB frm3 = new FrmNewDB();
                    frm3.Tag = LangArEn;
                    frm3.TopMost = true;
                    //frm3.MdiParent = this;
                    //childmin();
                    showChild(frm3);
                }
                else if (item.Name == "radialMenuItem_DeleteDataBase")
                {
                    if (VarGeneral.vDemo && VarGeneral.UserID != 1)
                    {
                        MessageBox.Show((LangArEn == 0) ? "هذه النسخة غير مفعلة لذلك لا يمكنك الإضافة والتحكم في قواعد البيانات .. " : "This version is disabled so you can not add and control the databases ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        return;
                    }
                    try
                    {
                        RegistryKey _hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                        object v = _hKey.GetValue("vPaid");
                        if (!string.IsNullOrEmpty(v.ToString()))
                        {
                            MessageBox.Show((LangArEn == 0) ? "هذه النسخة غير مفعلة لذلك لا يمكنك الإضافة والتحكم في قواعد البيانات .. " : "This version is disabled so you can not add and control the databases ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                            return;
                        }
                    }
                    catch
                    {
                    }
                    List<string> q2 = this.dbc.ExecuteQuery<string>("select name From master..sysdatabases Where name like 'DBPROSOFT_%' and name not like '%_Endsyr_%' and name <> '" + VarGeneral.DBNo + "' order by name ", new object[0]).ToList();
                    FrmDeleteDataBase frm2 = new FrmDeleteDataBase(q2);
                    frm2.Tag = LangArEn;
                    frm2.TopMost = true;
                    //frm2.MdiParent = this;
                    //childmin();
                    showChild(frm2);
                }
                else if (item.Name == "radialMenuItem_ChangeDataBase")
                {
                    if (VarGeneral.vDemo && VarGeneral.UserID != 1)
                    {
                        MessageBox.Show((LangArEn == 0) ? "هذه النسخة غير مفعلة لذلك لا يمكنك الإضافة والتحكم في قواعد البيانات .. " : "This version is disabled so you can not add and control the databases ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        return;
                    }
                    string arguments = string.Empty;
                    string[] args = Environment.GetCommandLineArgs();
                    for (int i = 1; i < args.Length; i++)
                    {
                        arguments = arguments + args[i] + " ";
                    }
                    Application.ExitThread();
                    Process.Start(Application.ExecutablePath, arguments);
                }
                else if (item.Name == "radialMenuItem_PathSetting")
                {
                    FrmPathSetting frm = new FrmPathSetting();
                    frm.Tag = LangArEn;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                }
                else
                {
                    if (!(item.Name == "radialMenuItem_OpenCloseTheYear"))
                    {
                        return;
                    }
                    string q = VarGeneral.brNm;
                    FrmEndYearsFiles frm7 = new FrmEndYearsFiles();
                    frm7.Tag = LangArEn;
                    //frm7.MdiParent = this;
                    //childmin();
                    showChild(frm7);
                    try
                    {
                        string a = "";
                        int i = VarGeneral.brNm.Length - 1;
                        while (i < 10000 && !(VarGeneral.brNm.Substring(i, 1) == "."))
                        {
                            a += VarGeneral.brNm.Substring(i, 1);
                            i--;
                        }
                        if (!string.IsNullOrEmpty(a) && a.Length > 4)
                        {
                            VarGeneral.BranchNumber = a.Replace("_kcl", null).Trim();
                            bubbleButton_SelectBranch.Enabled = false;
                        }
                    }
                    catch
                    {
                    }
                    _OpenData(VarGeneral.brNm);
                    VarGeneral.brNm = q;
                    return;
                }
            }
            catch
            {
            }
        }
        private HijriGreg.HijriGregDates n = new HijriGreg.HijriGregDates();
        private void ribbonButton362_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_Setting";
            radialMenu_Setting_ItemClick(item, e);
        }
        void DropBack()
        {
            //string s = DropBoxSyncronization.bnotest();
            //ShamelSynch.DropBoxSyncronization Drp = new ShamelSynch.DropBoxSyncronization("DBPROSOFT_default", VarGeneral.gServerName, "sa", "Prosoft@prosoft&ma89", "SQL", "MSSQL10_50.PROSOFT");
            //if (s != "NA" && s != "1")
            //    Drp.backup();
        }
        private void ribbonApplicationMenu1_DoubleClick(object sender, EventArgs e)
        {
            AboutBox1 cc = new
              AboutBox1();
            cc.Show();
            //Alert fa = new Alert("ok nice sync will be done as soon as posssible");
            //if (syncflag == 1)
            //{
            //    string s = DropBoxSyncronization.bnotest();
            //    DropBoxSyncronization f = new DropBoxSyncronization("DBPROSOFT_default", ".\\PROSOFT", "sa", "Prosoft@prosoft&ma89", "SQL", "MSSQL10_50.PROSOFT");
            //    if (s == "1")
            //        f.sync();
            //}
            //fa.Show();
        }
        private void buttonItem_SalesInv_Click(object sender, EventArgs e)
        {
            VarGeneral.InvTyp = 1;
            if ((VarGeneral.SSSLev == "R" || VarGeneral.SSSLev == "C" || VarGeneral.SSSLev == "H" || VarGeneral.SSSLev == "B" || VarGeneral.SSSLev == "G" || VarGeneral.SSSLev == "S") && VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 26))
            {
                if (Program.iscarversion())
                {
                    VarGeneral.InvTyp = 7;
                    VarGeneral._IsPOS = true;
                    FrmCarPOSLog frm3 = new FrmCarPOSLog();
                    frm3.Tag = LangArEn;
                    frm3.TopMost = true;
                    frm3.WindowState = FormWindowState.Maximized;
                    frm3.ShowDialog();
                    VarGeneral._IsPOS = false;
                }
                else
                {
                    VarGeneral._IsPOS = true;
                    FrmPOSREP frm2 = new FrmPOSREP();
                    frm2.Tag = LangArEn;
                    frm2.setreturn();
                    //   frm2.DateSync = true;
                    frm2.TopMost = true;
                    frm2.ShowDialog();
                    VarGeneral._IsPOS = false;
                }
                bubbleButton_Enter_Click(null, null);
            }
            else
            {
                if (Program.iscarversion())
                {
                    VarGeneral.InvTyp = 1;
                    FrmInvSaleCar frm3 = new FrmInvSaleCar();
                    frm3.Tag = LangArEn;
                    frm3.TopMost = true;
                    frm3.WindowState = FormWindowState.Maximized;
                    frm3.ShowDialog();
                    VarGeneral._IsPOS = false;
                }
                else
                {
                    FrmInvSale frm = new FrmInvSale();
                   //if(!IsFormOpen(frm))
                    {

                        frm.Tag = LangArEn;
                        frm.Text = buttonItem_SalesInv.Text.Replace("      Ctrl+F1", "");
                        //frm.MdiParent = this;
                        //childmin();
                        showChild(frm);
                    }
                   
                }
            }
        }
        private void buttonItem_SalesReturn_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmInvSalesReturn()))
            {
                VarGeneral.InvTyp = 3;
                FrmInvSalesReturn frm = new FrmInvSalesReturn();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_SalesReturn.Text.Replace("     Ctrl+F2", "");
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                try
                {
                    showChild(frm);
                }
                catch(Exception ex)
                {

                }
            }
        }
        public static Point loc = new Point();
        private void buttonItem_PurchaseInv_Click(object sender, EventArgs e)
        {
         // if(  InvAcc.Properties.Settings.Default.ServiceBill)
            //if(!IsFormOpen(new FrmInvPuchaes()))
            {
                
                {
                    VarGeneral.InvTyp = 2;
                    FrmInvPuchaes frm = new FrmInvPuchaes();
                    frm.Tag = LangArEn;
                    frm.Text = buttonItem_PurchaseInv.Text.Replace("  Ctrl+F3", "");
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    CheckInvReapir();
                }
            }
        
        }
        private void buttonItem_PurchaseReturn_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmInvPuchaesReturn()))
            {
                VarGeneral.InvTyp = 4;
                FrmInvPuchaesReturn frm = new FrmInvPuchaesReturn();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_PurchaseReturn.Text.Replace("  Ctrl+F4", "");
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_CustQutation_Click(object sender, EventArgs e)
        {
            if (Program.iscarversion())
            {
               //if(!IsFormOpen(new FrmCarFixingOrder()))
                {
                    VarGeneral.InvTyp = 7;
                    FrmCarFixingOrder frm = new FrmCarFixingOrder();
                    frm.Tag = LangArEn;
                    frm.Text = buttonItem_CustQutation.Text;
                    frm.TopMost = true;
                    frm.WindowState = FormWindowState.Maximized;
                    frm.ShowDialog();
                }
            }
            else
            {
               //if(!IsFormOpen(new FrmCustQutation()))
                {
                    VarGeneral.InvTyp = 7;
                    FrmCustQutation frm = new FrmCustQutation();
                    frm.Tag = LangArEn;
                    frm.Text = buttonItem_CustQutation.Text;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                }
            }
        }
        private void buttonItem_SuppQutation_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmSuppQutation()))
            {
                VarGeneral.InvTyp = 8;
                FrmSuppQutation frm = new FrmSuppQutation();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_SuppQutation.Text;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_PurchaseOrder_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FMPurchaseOrder()))
            {
                VarGeneral.InvTyp = 9;
                FMPurchaseOrder frm = new FMPurchaseOrder();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_PurchaseOrder.Text.Replace("          Ctrl+F5", "");
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_OpenQuantities_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FMOpenQuantities()))
            {
                VarGeneral.InvTyp = 14;
                FMOpenQuantities frm = new FMOpenQuantities();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_OpenQuantities.Text;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
                CheckInvReapir();
            }
        }
        private void buttonItem_TransferIn_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmTransferIn()))
            {
                VarGeneral.InvTyp = 5;
                FrmTransferIn frm = new FrmTransferIn();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_TransferIn.Text;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_TransferOut_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmTransferOut()))
            {
                VarGeneral.InvTyp = 6;
                FrmTransferOut frm = new FrmTransferOut();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_TransferOut.Text;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_PaymentOReturn_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FMPaymentOReturn()))
            {
                VarGeneral.InvTyp = 20;
                FMPaymentOReturn frm = new FMPaymentOReturn();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_PaymentOReturn.Text;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Factory_Click(object sender, EventArgs e)
        {
            VarGeneral.InvTyp = 16;
            FrmInvFact frm = new FrmInvFact();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem_StockAdjustment_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FMStockAdjustment()))
            {
                VarGeneral.InvTyp = 10;
                FMStockAdjustment frm = new FMStockAdjustment();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_StockAdjustment.Text;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Offer_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmInvOffer()))
            {
                FrmInvOffer frm = new FrmInvOffer();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                VarGeneral.InvTyp = 0;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Banks_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmBankBranches()))
            {
                FrmBankBranches frm = new FrmBankBranches();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_BankBranch_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmBankBranches()))
            {
                FrmBankBranches frm = new FrmBankBranches();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Boxes_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmBoxes()))
            {
                FrmBoxes frm = new FrmBoxes();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_CatchAndPay_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCheck()))
            {
                VarGeneral.InvTyp = 23;
                FrmCheck frm = new FrmCheck();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_GetAndSetMoney_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmGetSetMoney()))
            {
                VarGeneral.InvTyp = 25;
                FrmGetSetMoney frm = new FrmGetSetMoney();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_BankOp_Click(object sender, EventArgs e)
        {
            if (dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp.Value == 1)
            {
                return;
            }
            try
            {
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = "T_BankPeaper LEFT OUTER JOIN T_AccDef ON T_BankPeaper.CustAcc = T_AccDef.AccDef_No AND T_BankPeaper.BankAcc = T_AccDef.AccDef_No AND T_BankPeaper.BranchAcc = T_AccDef.AccDef_No LEFT OUTER JOIN T_SYSSETTING ON T_BankPeaper.CompanyID = T_SYSSETTING.SYSSETTING_ID LEFT OUTER JOIN T_INVSETTING ON T_BankPeaper.gdTyp = T_INVSETTING.InvID   ";
                string Fields = "";
                Fields = ((LangArEn != 0) ? " T_BankPeaper.PageNo, T_BankPeaper.PageDatePay, T_BankPeaper.Amount, T_BankPeaper.PageDate, T_BankPeaper.PayState,(select Eng_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.CustAcc ) as CusVenNm,(select Eng_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.BankAcc ) as AccDefNmBank,(select Eng_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.BranchAcc ) as AccDefNmBr, T_SYSSETTING.LogImg,T_INVSETTING.InvNamE as InvNm ,case when vTyp = 1 then 'Peaper' else 'Draft' end as vTyp,T_INVSETTING.InvID,gdID,ID, PayState" : " T_BankPeaper.PageNo, T_BankPeaper.PageDatePay, T_BankPeaper.Amount, T_BankPeaper.PageDate, T_BankPeaper.PayState,(select Arb_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.CustAcc ) as CusVenNm,(select Arb_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.BankAcc ) as AccDefNmBank,(select Arb_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.BranchAcc ) as AccDefNmBr, T_SYSSETTING.LogImg,T_INVSETTING.InvNamA as InvNm ,case when vTyp = 1 then 'إيصال' else 'كمبيالة' end as vTyp,T_INVSETTING.InvID,gdID,ID, PayState");
                _RepShow.Rule = " where gdTyp = 25 or gdTyp = 26 ";
                if (!string.IsNullOrEmpty(Fields))
                {
                    _RepShow.Fields = Fields;
                    try
                    {
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData = _RepShow.RepData;
                    }
                    catch (Exception ex2)
                    {
                        MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
                {
                    MessageBox.Show((LangArEn == 0) ? "عفوا .. لا يوجد بيانات لعرضها في التقرير " : "Sorry .. there is no data to display in the report ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
                try
                {
                    FrmReportsViewer frm = new FrmReportsViewer();
                    frm.Tag = LangArEn;
                    VarGeneral.InvTyp = 25;
                    frm.Repvalue = "RepBankPeaperList";
                    VarGeneral.vTitle = buttonItem_BankOp.Text;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    frm.ShowDialog();
                }
                catch (Exception error)
                {
                    VarGeneral.DebLog.writeLog("button_ShowRep_Click:", error, enable: true);
                    MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                }
            }
            catch (Exception ex2)
            {
                MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_SuppSndDiscount_Click(object sender, EventArgs e)
        {
            try
            {
               //if(!IsFormOpen(new FMReceiptVoucherCustSupp()))
                {
                    VarGeneral.InvTyp = 11;
                    FMReceiptVoucherCustSupp frm = new FMReceiptVoucherCustSupp();
                    if (VarGeneral.SSSTyp == 0)
                    {
                        VarGeneral.StockOnly = true;
                    }
                    VarGeneral.AccTyp = 5;
                    frm.Tag = LangArEn;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    VarGeneral.StockOnly = false;
                }
            }
            catch
            {
                VarGeneral.StockOnly = false;
            }
        }
        private void buttonItem_SupplierBalance_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRSuppBalance()))
            {
                VarGeneral.InvType = 1;
                FRSuppBalance from1 = new FRSuppBalance();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_SupplierAge_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRSuppBalance()))
            {
                VarGeneral.InvType = 4;
                FRSuppBalance from1 = new FRSuppBalance();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_SupplierSleep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRSuppBalance()))
            {
                VarGeneral.InvType = 2;
                FRSuppBalance from1 = new FRSuppBalance();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_CustSndDiscount_Click(object sender, EventArgs e)
        {
            try
            {
               //if(!IsFormOpen(new FMReceiptVoucherCustSupp()))
                {
                    VarGeneral.InvTyp = 11;
                    FMReceiptVoucherCustSupp frm = new FMReceiptVoucherCustSupp();
                    if (VarGeneral.SSSTyp == 0)
                    {
                        VarGeneral.StockOnly = true;
                    }
                    VarGeneral.AccTyp = 4;
                    frm.Tag = LangArEn;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    VarGeneral.StockOnly = false;
                }
            }
            catch
            {
                VarGeneral.StockOnly = false;
            }
        }
        private void buttonItem_ClientBalance_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRCustBalance()))
            {
                VarGeneral.InvType = 1;
                FRCustBalance from1 = new FRCustBalance();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_ClientAge_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRCustBalance()))
            {
                VarGeneral.InvType = 4;
                FRCustBalance from1 = new FRCustBalance();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_ClientSleep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRCustBalance()))
            {
                VarGeneral.InvType = 2;
                FRCustBalance from1 = new FRCustBalance();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_AccCat_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmAccCat()))
            {
                FrmAccCat frm = new FrmAccCat();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_AccTree_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmAccDef_()))
            {
                FrmAccDef_ frm = new FrmAccDef_();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_SndGaid_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FMJournalVoucher()))
            {
                VarGeneral.InvTyp = 11;
                FMJournalVoucher frm = new FMJournalVoucher();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_SndCatch_Click(object sender, EventArgs e)
        {
            try
            {
               //if(!IsFormOpen(new FMReceiptVoucher()))
                {
                    VarGeneral.InvTyp = 12;
                    FMReceiptVoucher frm = new FMReceiptVoucher();
                    if (VarGeneral.SSSTyp == 0)
                    {
                        VarGeneral.StockOnly = true;
                    }
                    frm.Tag = LangArEn;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                    VarGeneral.StockOnly = false;
                }
            }
            catch
            {
                VarGeneral.StockOnly = false;
            }
        }
        private void buttonItem_SndExchange_Click(object sender, EventArgs e)
        {
            try
            {
               //if(!IsFormOpen(new FMPaymentVoucher()))
                {
                    VarGeneral.InvTyp = 13;
                    FMPaymentVoucher frm = new FMPaymentVoucher();
                    if (VarGeneral.SSSTyp == 0)
                    {
                        VarGeneral.StockOnly = true;
                    }
                    frm.Tag = LangArEn;
                    frm.TopMost = true;
                    //frm.MdiParent = this;
                    //childmin();
                    showChild(frm);
                }
            }
            catch
            {
                VarGeneral.StockOnly = false;
            }
        }
        private void buttonItem_OpenAcc_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmOpenAcc()))
            {
                VarGeneral.InvTyp = 11;
                FrmOpenAcc frm = new FrmOpenAcc();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_ItemDataMain_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsData()))
            {
                VarGeneral.InvType = 1;
                FRItemsData form1 = new FRItemsData();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_ItemDataQty_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsData()))
            {
                VarGeneral.InvType = 2;
                FRItemsData form1 = new FRItemsData();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_ItemDataCost_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsData()))
            {
                VarGeneral.InvType = 3;
                FRItemsData form1 = new FRItemsData();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                showChild(form1);
            }
        }
        private void buttonItem_ItemDataMove_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsMovement()))
            {
                FRItemsMovement form1 = new FRItemsMovement();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
            //    form1.ShowDialog();
               showChild(form1);
            }
        }
        private void buttonItem_FilesItemsWithDateExp_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsDataExpir()))
            {
                VarGeneral.InvType = 999;
                FRItemsDataExpir form1 = new FRItemsDataExpir();
                form1.Tag = LangArEn;
                //   form1.StartPosition = FormStartPosition.CenterScreen;
                VarGeneral.vTitle = ((LangArEn == 0) ? "الأصناف بتاريخ الصلاحية" : "Items expiration date");
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MovementItemsWithDateExp_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransfDatExpir()))
            {
                VarGeneral.InvType = 1;
                FRItemsTransfDatExpir form1 = new FRItemsTransfDatExpir();
                form1.Tag = LangArEn;
                //   form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_ItemDataImport_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsData()))
            {
                VarGeneral.InvType = 4;
                FRItemsData form1 = new FRItemsData();
                form1.Tag = LangArEn;
                //form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_ItemDataSleep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsData()))
            {
                VarGeneral.InvType = 5;
                FRItemsData form1 = new FRItemsData();
                form1.Tag = LangArEn;
                //form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_ItemDataMoreSale_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsDataMoreSale()))
            {
                FRItemsDataMoreSale form1 = new FRItemsDataMoreSale();
                form1.Tag = LangArEn;
                //form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_ItemDataPrintMove_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsMovementPrint("", "")))
            {
                FRItemsMovementPrint from1 = new FRItemsMovementPrint("", "");
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_RepAccDirctory_Click(object sender, EventArgs e)
        {
            try
            {
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_AccDef left join T_SYSSETTING on T_SYSSETTING.SYSSETTING_ID = T_AccDef.CompanyID ";
                string Fields = "";
                Fields = "  Str(T_AccDef.AccDef_ID) , T_AccDef.AccDef_No as No , T_AccDef.Arb_Des as NmA, T_AccDef.Eng_Des as NmE,T_SYSSETTING.LogImg";
                _RepShow.Rule = " Order by T_AccDef.AccDef_No ";
                if (!string.IsNullOrEmpty(Fields))
                {
                    _RepShow.Fields = Fields;
                    try
                    {
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData = _RepShow.RepData;
                    }
                    catch (Exception ex2)
                    {
                        MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                    if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
                    {
                        MessageBox.Show((LangArEn == 0) ? "عفوا .. لا يوجد بيانات لعرضها في التقرير " : "Sorry .. there is no data to display in the report ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        return;
                    }
                    try
                    {
                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Tag = LangArEn;
                        frm.Repvalue = "RepGeneral";
                        VarGeneral.vTitle = ((LangArEn == 0) ? "كرت الحسابات" : "Chart of Accounts");
                        frm.TopMost = true;
                        //frm.MdiParent = this;
                        //childmin();
                        frm.ShowDialog();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("button_ShowRep_Click:", error, enable: true);
                        MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                }
                else
                {
                    MessageBox.Show((LangArEn == 0) ? " يجب تحديد حقل واحد على الأقل للطباعة" : "You must select one field or more", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                }
            }
            catch (Exception ex2)
            {
                MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_RepAccRecords_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccount()))
            {
                VarGeneral.InvType = 1;
                FRAccount from1 = new FRAccount();
                from1.Tag = LangArEn;
                //from1.MdiParent = this;
                from1.StartPosition = FormStartPosition.CenterParent;
                //childmin();
                showChild(from1);
                from1.WindowState = FormWindowState.Maximized;
            }
        }
        private void buttonItem_RepPrintAccRecords_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRStatementOfAccount("", "")))
            {
                FRStatementOfAccount form1 = new FRStatementOfAccount("", "");
                //                form1.Tag = LangArEn; form1.MdiParent = this;
                form1.StartPosition = FormStartPosition.CenterParent;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_RepGeneralLed_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountTranc()))
            {
                VarGeneral.InvType = 1;
                FRAccountTranc from1 = new FRAccountTranc();
                from1.label10.Visible = sideBarPanelItem_Invioces.Visible;
                from1.txtInvNo.Visible = sideBarPanelItem_Invioces.Visible;
                from1.button_SrchInvNo.Visible = sideBarPanelItem_Invioces.Visible;
                from1.CmbInvType.Visible = sideBarPanelItem_Invioces.Visible;
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_RepGeneralDaily_Click(object sender, EventArgs e)
        {


        }
        private void buttonItem_RepReviewBalanceOfMovement_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountTrans()))
            {
                VarGeneral.InvType = 1;
                FRAccountTrans from1 = new FRAccountTrans();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_RepReviewBalance_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountTrans()))
            {
                VarGeneral.InvType = 2;
                FRAccountTrans from1 = new FRAccountTrans();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_RepReviewTotaly_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountTrans()))
            {
                VarGeneral.InvType = 3;
                FRAccountTrans from1 = new FRAccountTrans();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_RepReviewBalanceOfTotaly_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountTrans()))
            {
                VarGeneral.InvType = 4;
                FRAccountTrans from1 = new FRAccountTrans();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_RepOutlay_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountExpense()))
            {
                FRAccountExpense from1 = new FRAccountExpense();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void CloseFrmChilde()
        {
            try
            {
                 
                foreach (Form ChildForm in Application.OpenForms)
                {
                    if (ChildForm.GetType() != typeof(FrmLog))
                        ChildForm.Close();
                }
            }
            catch
            {
            }
        }
        private void buttonItem28_Click(object sender, EventArgs e)
        {
            buttonItem_SrchBtwDate_Click(sender, e);
            buttonItem_SrchRefresh_Click(sender, e);
        }
        private void buttonItem29_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start(Application.StartupPath + "\\help.pdf");
            }
            catch
            {
            }
        }
        DropBoxSyncronization drop;
        void dropboxsyn()
        {
            //if (drop == null)
            //    drop = new DropBoxSyncronization("DBPROSOFT_default", VarGeneral.gServerName, "sa", "Prosoft@prosoft&ma89", "SQL", "MSSQL10_50.PROSOFT");
            //Alert fa = new Alert("ok nice sync will be done as soon as posssible");
            ////fa.MdiParent = this;
            //childmin();
            //showChild(fa);
            //string s = DropBoxSyncronization.bnotest();
            //if (s == "1")
            //    drop.sync();
        }
        private void buttonItem30_Click(object sender, EventArgs e)
        {
           // sync.syncAll();
        }
        private void buttonItem32_Click(object sender, EventArgs e)
        {
            try
            {
                FrmCustomerPointData frm = new FrmCustomerPointData(Rep: true, IsEdit: false, 0, 0.0);
                frm.Tag = LangArEn;
                frm.txtCustNo.Text = "";
                frm.txtCustName.Text = "";
                frm.txtDueAmountLoc.Value = 0.0;
                frm.txtDiscoundPointsValue.Value = 0.0;
                frm.TopMost = true;
                //                frm.MdiParent = this;
                frm.Show();
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("bubbleButton_RepPoints_Click:", error, enable: true);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem46_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start("C:\\Windows\\System32\\calc.exe");
            }
            catch
            {
            }
        }
        private void buttonItem42_Click(object sender, EventArgs e)
        {
            FrmRepairSales frm = new FrmRepairSales();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem45_Click(object sender, EventArgs e)
        {
            try
            {
                VarGeneral.ChangBr_ = false;
                FMBranchSelect from1 = new FMBranchSelect();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
                if (VarGeneral.ChangBr_)
                {
                    using (Stock_DataDataContext dbt = new Stock_DataDataContext(VarGeneral.BranchCS))
                    {
                        VarGeneral.Settings_Sys = dbt.SystemSettingStock();
                    }
                    VarGeneral._SysDirPath = VarGeneral.Settings_Sys.SysDir;
                    VarGeneral._BackPath = VarGeneral.Settings_Sys.BackPath;
                    try
                    {
                        VarGeneral._AutoSync = VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 41);
                    }
                    catch
                    {
                        VarGeneral._AutoSync = false;
                    }
                    try
                    {
                        VarGeneral._AutoBackup = VarGeneral.Settings_Sys.AutoBackup.Value;
                    }
                    catch
                    {
                        VarGeneral._AutoBackup = 0;
                    }
                    try
                    {
                        if (VarGeneral.Settings_Sys.Calendr.Value == 0)
                        {
                            CultureInfo sa = new CultureInfo("en-US", useUserOverride: false);
                            sa.DateTimeFormat.Calendar = new GregorianCalendar();
                            Thread.CurrentThread.CurrentCulture = sa;
                        }
                        else
                        {
                            CultureInfo sa = new CultureInfo("ar-SA", useUserOverride: false);
                            sa.DateTimeFormat.Calendar = new HijriCalendar();
                            Thread.CurrentThread.CurrentCulture = sa;
                            Thread.CurrentThread.CurrentUICulture = sa;
                        }
                    }
                    catch
                    {
                    }
                    dbInstance = null;
                    dbInstanceRate = null;
                    LangChange(VarGeneral.UserLang);
                    try
                    {
                        if (!VarGeneral.vEndYears)
                        {
                            //buttonItem_RepairQty_Click(sender, e);
                        }
                    }
                    catch
                    {
                    }
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("bubbleButton_SelectBranch_Click:", error, enable: true);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
            VarGeneral.ChangBr_ = false;
        }
        private void buttonItem_InvCommUsr_Click(object sender, EventArgs e)
        {
            FrmInvCommMnd frm = new FrmInvCommMnd(1);
            frm.Tag = LangArEn;
            frm.Text = buttonItem_InvCommUsr.Text;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem_GaidCommUsr_Click(object sender, EventArgs e)
        {
            FrmGEDCommMnd frm = new FrmGEDCommMnd(1);
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_Support_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start(Application.StartupPath + "\\AeroAdmin.exe");
            }
            catch
            {
            }
        }
        private void bubbleButton_SMS_Click(object sender, EventArgs e)
        {
            FrmSMS frm = new FrmSMS("");
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_UserPointReturn_Click(object sender, EventArgs e)
        {
            FrmUserPointReturn frm = new FrmUserPointReturn();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_UserPoint_Click(object sender, EventArgs e)
        {
            FrmUserPoint frm = new FrmUserPoint();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_RepairPurshas_Click(object sender, EventArgs e)
        {
            FrmRepairPurchaes frm = new FrmRepairPurchaes();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
            CheckInvReapir();
        }
        private void bubbleButton_SetYearAcc_Click(object sender, EventArgs e)
        {
            FrmSetYearAcc frm = new FrmSetYearAcc();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_ConvertDate_Click(object sender, EventArgs e)
        {
            FrmTransDate frm = new FrmTransDate();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem38_Click(object sender, EventArgs e)
        {
            FMBarCodePrintSetup frm = new FMBarCodePrintSetup();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_GaidSetting_Click(object sender, EventArgs e)
        {
            FMSndPrintSetup frm = new FMSndPrintSetup();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_InvSetting_Click(object sender, EventArgs e)
        {
            FMInvPrintSetup frm = new FMInvPrintSetup(0);
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_TransData_Click(object sender, EventArgs e)
        {
            List<T_Branch> qTo = dbc.T_Branches.Where((T_Branch t) => t.Branch_no != VarGeneral.BranchNumber).ToList();
            if (qTo.Count > 0)
            {
                FrmTransItmAcc frm = new FrmTransItmAcc();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
            else
            {
                MessageBox.Show((LangArEn == 0) ? "لا يمكنك نقل بيانات الفرع الحالي الى فرع آخر,لأن النظام لا يملك سوى فرع واحد فقط" : "You can not branch data transfer, because your system does not have only one branch only", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_InvoiceReport_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRInvoice(0, LangArEn)))
            {
                VarGeneral.InvType = 1;
                FRInvoice form1 = new FRInvoice(0, LangArEn);
                form1.Tag = LangArEn.ToString();
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_StoreCust_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsDataExtrnalMdn(1)))
            {
                FRItemsDataExtrnalMdn frm = new FRItemsDataExtrnalMdn(1);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_StoreSupp_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsDataExtrnalMdn(2)))
            {
                FRItemsDataExtrnalMdn frm = new FRItemsDataExtrnalMdn(2);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_MoveSalse_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 1;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MoveSalesReturn_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 3;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MovePurchaseInv_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 2;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MovePurchaseReturn_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 4;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MoveCustQutation_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 7;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MoveSuppQutation_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 8;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MovePurchaseOrder_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 9;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MoveOpenQuantities_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 14;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MoveTransferIn_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 5;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MoveTransferOut_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 6;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MovePaymentOrder_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 17;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MovePaymentOReturn_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 20;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_MoveStockAdjustment_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsTransf()))
            {
                VarGeneral.InvType = 10;
                FRItemsTransf form1 = new FRItemsTransf();
                form1.Tag = LangArEn;
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void button_InvComm_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmInvCommMnd(0)))
            {
                FrmInvCommMnd frm = new FrmInvCommMnd(0);
                frm.Tag = LangArEn;
                frm.Text = buttonItem_InvComm.Text;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void button_GaidComm_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmGEDCommMnd(0)))
            {
                FrmGEDCommMnd frm = new FrmGEDCommMnd(0);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_StoreMnd_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRItemsDataExtrnalMdn(0)))
            {
                FRItemsDataExtrnalMdn frm = new FRItemsDataExtrnalMdn(0);
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_InvoiceMnd_Click(object sender, EventArgs e)
        {
            VarGeneral.InvType = 1;
            FRInvoiceMnd form1 = new FRInvoiceMnd(0, LangArEn);
            form1.Tag = LangArEn.ToString();
            form1.TopMost = true;
            //form1.MdiParent = this;
            //childmin();
            showChild(form1);
        }
        private void buttonItem_RepSalesGaid_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRInvoiceGaid(1, LangArEn)))
            {
                FRInvoiceGaid form1 = new FRInvoiceGaid(1, LangArEn);
                form1.Tag = LangArEn.ToString();
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_RepPurchaseGaid_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRInvoiceGaid(2, LangArEn)))
            {
                FRInvoiceGaid form1 = new FRInvoiceGaid(2, LangArEn);
                form1.Tag = LangArEn.ToString();
                form1.TopMost = true;
                //form1.MdiParent = this;
                //childmin();
                showChild(form1);
            }
        }
        private void buttonItem_RepTradingAcc_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountTrans()))
            {
                VarGeneral.InvType = 5;
                FRAccountTrans from1 = new FRAccountTrans();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_RepProfitAndLossAcc_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountTrans()))
            {
                VarGeneral.InvType = 6;
                FRAccountTrans from1 = new FRAccountTrans();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_RepBalanceSheet_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FRAccountTrans()))
            {
                VarGeneral.InvType = 7;
                FRAccountTrans from1 = new FRAccountTrans();
                from1.Tag = LangArEn;
                from1.TopMost = true;
                //from1.MdiParent = this;
                //childmin();
                showChild(from1);
            }
        }
        private void buttonItem_SNDReport_Click(object sender, EventArgs e)
        {
            VarGeneral.InvType = 1;
            FRAccountReport from1 = new FRAccountReport(0);
            from1.Tag = LangArEn;
            from1.TopMost = true;
            //from1.MdiParent = this;
            //childmin();
            showChild(from1);
        }
        private void buttonItem_GaidSerfGabth_Click(object sender, EventArgs e)
        {
            VarGeneral.InvType = 1;
            FRAccountReportGabthSerf from1 = new FRAccountReportGabthSerf();
            from1.Tag = LangArEn;
            from1.TopMost = true;
            //from1.MdiParent = this;
            //childmin();
            showChild(from1);
        }
        private void buttonItem_RepAccBank_Click(object sender, EventArgs e)
        {
            try
            {
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_AccDef left join T_SYSSETTING on T_SYSSETTING.SYSSETTING_ID = T_AccDef.CompanyID ";
                string Fields = "";
                Fields = "  Str(T_AccDef.AccDef_ID) , T_AccDef.AccDef_No as No , T_AccDef.Arb_Des as NmA, T_AccDef.Eng_Des as NmE,T_SYSSETTING.LogImg";
                _RepShow.Rule = " Where T_AccDef.AccCat = 3 and T_AccDef.Lev = 4 Order by T_AccDef.AccDef_No ";
                if (!string.IsNullOrEmpty(Fields))
                {
                    _RepShow.Fields = Fields;
                    try
                    {
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData = _RepShow.RepData;
                    }
                    catch (Exception ex2)
                    {
                        MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                    if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
                    {
                        MessageBox.Show((LangArEn == 0) ? "عفوا .. لا يوجد بيانات لعرضها في التقرير " : "Sorry .. there is no data to display in the report ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        return;
                    }
                    try
                    {
                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Tag = LangArEn;
                        frm.Repvalue = "RepGeneral";
                        VarGeneral.vTitle = ((LangArEn == 0) ? "كرت أرقام حسابات البنوك" : "Card a Banks Accounts No ");
                        frm.TopMost = true;
                        //frm.MdiParent = this;
                        //childmin();
                        frm.ShowDialog();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("button_ShowRep_Click:", error, enable: true);
                        MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                }
                else
                {
                    MessageBox.Show((LangArEn == 0) ? " يجب تحديد حقل واحد على الأقل للطباعة" : "You must select one field or more", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                }
            }
            catch (Exception ex2)
            {
                MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_RepAccBranches_Click(object sender, EventArgs e)
        {
            try
            {
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_AccDef as t left join T_SYSSETTING on T_SYSSETTING.SYSSETTING_ID = t.CompanyID ";
                string Fields = "";
                Fields = "  Str(t.AccDef_ID) , t.AccDef_No as No , t.Arb_Des as NmA, t.Eng_Des as NmE,T_SYSSETTING.LogImg,(select AccDef_No from T_AccDef as x  where x.AccDef_No = t.ParAcc and x.Lev = 3) as MainNo,(select Arb_Des from T_AccDef as x  where x.AccDef_No = t.ParAcc and x.Lev = 3) as MainNmA,(select Eng_Des from T_AccDef as x  where x.AccDef_No = t.ParAcc and x.Lev = 3) as MainNmE";
                _RepShow.Rule = " Where t.AccCat = 3 and t.Lev = 4 Order by t.AccDef_No ";
                if (!string.IsNullOrEmpty(Fields))
                {
                    _RepShow.Fields = Fields;
                    try
                    {
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData = _RepShow.RepData;
                    }
                    catch (Exception ex2)
                    {
                        MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                    if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
                    {
                        MessageBox.Show((LangArEn == 0) ? "عفوا .. لا يوجد بيانات لعرضها في التقرير " : "Sorry .. there is no data to display in the report ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        return;
                    }
                    try
                    {
                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Tag = LangArEn;
                        frm.Repvalue = "RepGeneral2";
                        VarGeneral.vTitle = buttonItem_RepAccBranches.Text;
                        frm.TopMost = true;
                        //frm.MdiParent = this;
                        //childmin();
                        frm.ShowDialog();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("button_ShowRep_Click:", error, enable: true);
                        MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                }
                else
                {
                    MessageBox.Show((LangArEn == 0) ? " يجب تحديد حقل واحد على الأقل للطباعة" : "You must select one field or more", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                }
            }
            catch (Exception ex2)
            {
                MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_AccountTax_Click(object sender, EventArgs e)
        {
            FRAccountTax from1 = new FRAccountTax();
            from1.Tag = LangArEn;
            from1.TopMost = true;
            //from1.MdiParent = this;
            //childmin();
            showChild(from1);
        }
        private void buttonItem_PartnerAcc_Click(object sender, EventArgs e)
        {
            FrmInvCommAcc frm = new FrmInvCommAcc();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private bool EmailVerify(string email)
        {
            try
            {
                MailAddress mail = new MailAddress(email);
                return true;
            }
            catch
            {
                return false;
            }
        }
        private void SendToGmail()
        {
            string SendMailPath = "";
            _To = "";
            _Ps = "";
            _To2 = "";
            _Ps2 = "";
            try
            {
                IDatabase Accdb = Framework.Data.Database.GetDatabase(VarGeneral.BranchCS);
                DataTable q = Accdb.ExecuteMyDataSet(storedProcedure: false, "EXEC master.dbo.xp_instance_regread  N'HKEY_LOCAL_MACHINE', N'Software\\Microsoft\\MSSQLServer\\MSSQLServer',N'BackupDirectory'").Tables[0];
                if (q.Rows.Count > 0)
                {
                    SendMailPath = q.Rows[0][1].ToString();
                }
            }
            catch
            {
                SendMailPath = "";
            }
            if (string.IsNullOrEmpty(SendMailPath))
            {
                return;
            }
            try
            {
                SendMailPath += "\\send_mail";
                if (!Directory.Exists(SendMailPath))
                {
                    Directory.CreateDirectory(SendMailPath);
                }
                else
                {
                    try
                    {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                    catch
                    {
                    }
                    Directory.Delete(SendMailPath, recursive: true);
                    Directory.CreateDirectory(SendMailPath);
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("timerBackupElctornic_Tick SendMail: ", error, enable: true);
            }
            try
            {
                StreamReader sr = new StreamReader(SendMailPath.Replace("\\send_mail", "\\") + "mail.txt");
                string[] lines = sr.ReadToEnd().Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                _To = lines[0];
                _Ps = lines[1];
                try
                {
                    _To2 = lines[2];
                    _Ps2 = lines[3];
                }
                catch
                {
                    _To2 = "";
                    _Ps2 = "";
                }
            }
            catch
            {
                _To = "";
                _Ps = "";
                _To2 = "";
                _Ps2 = "";
            }
            if (!string.IsNullOrEmpty(_To) && !string.IsNullOrEmpty(_Ps) && EmailVerify(_To) && _To.Contains("gmail.com"))
            {
                DBBackupElectronic(vMsg: false, 1);
                DirectoryInfo d = new DirectoryInfo(SendMailPath);
                FileInfo[] Files = d.GetFiles("*.bak");
                for (int i = 0; i < Files.ToList().Count; i++)
                {
                    try
                    {
                        FileStream sourceFile = File.OpenRead(Files.ToList()[i].FullName);
                        FileStream destinationFile = File.Create(Files.ToList()[i].FullName + ".gz");
                        byte[] buffer = new byte[sourceFile.Length];
                        sourceFile.Read(buffer, 0, buffer.Length);
                        using (GZipStream output = new GZipStream(destinationFile, CompressionMode.Compress))
                        {
                            Console.WriteLine("Compressing {0} to {1}.", sourceFile.Name, destinationFile.Name, false);
                            output.Write(buffer, 0, buffer.Length);
                        }
                        sourceFile.Close();
                        destinationFile.Close();
                    }
                    catch
                    {
                    }
                }
                SendEmail(SendMailPath);
            }
            if (!string.IsNullOrEmpty(_To2) && !string.IsNullOrEmpty(_Ps2) && EmailVerify(_To2) && _To2.Contains("gmail.com"))
            {
                SendEmail2(SendMailPath);
            }
            try
            {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                Directory.Delete(SendMailPath, recursive: true);
            }
            catch
            {
            }
        }
        private bool SendEmail(string _pthGmail)
        {
            try
            {
                string _From = _To;
                MailMessage msg = new MailMessage();
                SmtpClient client = new SmtpClient();
                client.Host = "smtp.gmail.com";
                client.Port = 587;
                client.Timeout = 600000000;
                msg.From = new MailAddress(_From);
                msg.To.Add(_To);
                msg.Subject = "Pro.Soft-Mail :  نسخة من بيانات العمل ";
                msg.Body = "باك اب الإلكتروني لبيانات عمل هذا اليوم  \\n وذلك بتاريخ  " + VarGeneral.Hdate + "  الموافق  " + VarGeneral.Gdate + " تمام الساعة " + DateTime.Now.ToString("hh:mm:ss tt");
                DirectoryInfo d = new DirectoryInfo(_pthGmail);
                FileInfo[] Files = d.GetFiles("*.gz");
                for (int i = 0; i < Files.ToList().Count; i++)
                {
                    try
                    {
                        Attachment at = new Attachment(Files.ToList()[i].FullName);
                        msg.Attachments.Add(at);
                    }
                    catch
                    {
                    }
                }
                client.UseDefaultCredentials = false;
                client.EnableSsl = true;
                client.Credentials = new NetworkCredential(_From, _Ps);
                try
                {
                    client.Send(msg);
                    foreach (Attachment a in msg.Attachments)
                    {
                        a.Dispose();
                    }
                    msg.Dispose();
                    return true;
                }
                catch (SmtpFailedRecipientsException ex2)
                {
                    for (int i = 0; i < ex2.InnerExceptions.Length; i++)
                    {
                        SmtpStatusCode status = ex2.InnerExceptions[i].StatusCode;
                        if (status != SmtpStatusCode.MailboxBusy && status != SmtpStatusCode.MailboxUnavailable)
                        {
                            continue;
                        }
                        Thread.Sleep(5000);
                        client.Send(msg);
                        foreach (Attachment a in msg.Attachments)
                        {
                            a.Dispose();
                        }
                        msg.Dispose();
                        return true;
                    }
                    foreach (Attachment a in msg.Attachments)
                    {
                        a.Dispose();
                    }
                    msg.Dispose();
                    MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return false;
                }
            }
            catch (Exception ex)
            {
                VarGeneral.DebLog.writeLog("FrmMain_SendEmail:", ex, enable: true);
                return false;
            }
        }
        private bool SendEmail2(string _pthGmail)
        {
            try
            {
                string _From = _To2;
                MailMessage msg = new MailMessage();
                SmtpClient client = new SmtpClient();
                client.Host = "smtp.gmail.com";
                client.Port = 587;
                client.Timeout = 600000000;
                msg.From = new MailAddress(_From);
                msg.To.Add(_To2);
                msg.Subject = "Pro.Soft-Mail :  نسخة من بيانات العمل ";
                msg.Body = "باك اب الإلكتروني لبيانات عمل هذا اليوم  \\n وذلك بتاريخ  " + VarGeneral.Hdate + "  الموافق  " + VarGeneral.Gdate + " تمام الساعة " + DateTime.Now.ToString("hh:mm:ss tt");
                DirectoryInfo d = new DirectoryInfo(_pthGmail);
                FileInfo[] Files = d.GetFiles("*.gz");
                for (int i = 0; i < Files.ToList().Count; i++)
                {
                    try
                    {
                        Attachment at = new Attachment(Files.ToList()[i].FullName);
                        msg.Attachments.Add(at);
                    }
                    catch
                    {
                    }
                }
                client.UseDefaultCredentials = false;
                client.EnableSsl = true;
                client.Credentials = new NetworkCredential(_From, _Ps2);
                try
                {
                    client.Send(msg);
                    foreach (Attachment a in msg.Attachments)
                    {
                        a.Dispose();
                    }
                    msg.Dispose();
                    return true;
                }
                catch (SmtpFailedRecipientsException ex2)
                {
                    for (int i = 0; i < ex2.InnerExceptions.Length; i++)
                    {
                        SmtpStatusCode status = ex2.InnerExceptions[i].StatusCode;
                        if (status != SmtpStatusCode.MailboxBusy && status != SmtpStatusCode.MailboxUnavailable)
                        {
                            continue;
                        }
                        Thread.Sleep(5000);
                        client.Send(msg);
                        foreach (Attachment a in msg.Attachments)
                        {
                            a.Dispose();
                        }
                        msg.Dispose();
                        return true;
                    }
                    foreach (Attachment a in msg.Attachments)
                    {
                        a.Dispose();
                    }
                    msg.Dispose();
                    MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return false;
                }
            }
            catch (Exception ex)
            {
                VarGeneral.DebLog.writeLog("FrmMain_SendEmail:", ex, enable: true);
                return false;
            }
        }
        private void buttonItem_SyncGmail_Click(object sender, EventArgs e)
        {
            if (VarGeneral.gUserName == "runsetting")
            {
                try
                {
                    SendToGmail();
                }
                catch (Exception ex)
                {
                    VarGeneral.DebLog.writeLog("buttonItem_SyncGmail_Click:", ex, enable: true);
                }
            }
        }
        private void buttonItem_DeleteItemWithStore_Click(object sender, EventArgs e)
        {
            try
            {
                if (VarGeneral.UserID != 1)
                {
                    return;
                }
                Stock_DataDataContext DBx = new Stock_DataDataContext(VarGeneral.BranchCS);
                string vNewNo = InputDialog.mostrar("أدخل رقم المستودع : ", "الدعم الفني");
                if (string.IsNullOrEmpty(vNewNo))
                {
                    return;
                }
                int strNo = int.Parse(vNewNo);
                T_Store q = db.StockStore(strNo);
                if (q == null || q.Stor_ID == 0)
                {
                    return;
                }
                using (Stock_DataDataContext gE = new Stock_DataDataContext(VarGeneral.BranchCS))
                {
                    try
                    {
                        RepShow _RepShow2 = new RepShow();
                        _RepShow2.Tables = " T_STKSQTY ";
                        string Fields2 = "";
                        Fields2 = "T_STKSQTY.itmNo as No,T_STKSQTY.storeNo as NmE,(select Arb_Des from T_Items where T_Items.Itm_No = T_STKSQTY.itmNo ) as NmA";
                        _RepShow2.Rule = "where stkQty = 0 and stkInt = 0 and T_STKSQTY.itmNo not in (select T_INVDET.ItmNo from T_INVDET where T_INVDET.ItmNo = T_STKSQTY.itmNo and T_INVDET.StoreNo = T_STKSQTY.storeNo)";
                        _RepShow2.Fields = Fields2;
                        try
                        {
                            _RepShow2 = _RepShow2.Save();
                            MyDataSet t2 = _RepShow2.RepData;
                            if (t2.Tables[0].Rows.Count > 0)
                            {
                                gE.ExecuteCommand("DELETE FROM [dbo].[T_STKSQTY] where T_STKSQTY.stkQty = 0 and T_STKSQTY.stkInt = 0 and T_STKSQTY.itmNo not in (select T_INVDET.ItmNo from T_INVDET where T_INVDET.ItmNo = T_STKSQTY.itmNo and T_INVDET.StoreNo = T_STKSQTY.storeNo) ");
                                gE.ExecuteCommand("DELETE FROM [dbo].[T_QTYEXP] where T_QTYEXP.stkQty = 0 and T_QTYEXP.itmNo not in (select T_INVDET.ItmNo from T_INVDET where T_INVDET.ItmNo = T_QTYEXP.itmNo and T_INVDET.StoreNo = T_QTYEXP.storeNo) ");
                            }
                        }
                        catch (Exception ex3)
                        {
                            MessageBox.Show(ex3.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                        }
                    }
                    catch (Exception ex3)
                    {
                        MessageBox.Show(ex3.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    }
                }
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_Items LEFT OUTER JOIN  T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID  LEFT OUTER JOIN T_STKSQTY On T_Items.Itm_No = T_STKSQTY.itmNo Left Join T_SYSSETTING ON T_Items.CompanyID = T_SYSSETTING.SYSSETTING_ID  ";
                string Fields = " T_Items.Itm_No ";
                _RepShow.Rule = " Where T_STKSQTY.storeNo  = " + strNo;
                _RepShow.Fields = Fields;
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex3)
                {
                    MessageBox.Show(ex3.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
                {
                    MessageBox.Show((LangArEn == 0) ? "عفوا .. لا يوجد بيانات لعرضها في التقرير " : "Sorry .. there is no data to display in the report ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
                T_INVDET returnedStore = DBx.SelectStoreNoByReturnNo(strNo);
                if (returnedStore != null && !string.IsNullOrEmpty(returnedStore.StoreNo.Value.ToString()))
                {
                    MessageBox.Show((LangArEn == 0) ? "لايمكن حذف المستودع .. لانه مرتبط باحد الفواتير" : "You can not delete the warehouse .. because it is tied to a billing", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
                List<T_ItemDet> vStorNo = DBx.T_ItemDets.Where((T_ItemDet t) => t.StoreNo == (int?)strNo).ToList();
                if (vStorNo.Count > 0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لايمكن حذف المستودع .. لانه مرتبط باحد الأ\u064bصناف التجميعية" : "You can not delete the warehouse .. because it is tied to Item", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
                List<T_StoreMnd> vStorMnd = DBx.T_StoreMnds.Where((T_StoreMnd t) => t.storeNo == (int?)strNo).ToList();
                if (vStorMnd.Count > 0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لايمكن حذف المستودع .. لانه مرتبط باحد فواتير صرف البضاعة" : "You can not delete the warehouse .. because it is tied to Item", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
                List<T_User> vStoreByUser = dbc.T_Users.Where((T_User t) => t.DefStores.Value == strNo).ToList();
                if (vStoreByUser.Count > 0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لايمكن حذف المستودع .. لانه مرتبط باحد المستخدمين" : "You can not delete the warehouse .. because it is tied to Users", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
                T_Store data_this = DBx.StockStore(strNo);
                try
                {
                    if (VarGeneral.UserID == 1 && MessageBox.Show("هل أنت متاكد من حذف جميع اصناف المستودع [" + strNo + "]؟ \n Are you sure that you want to delete the record [" + strNo + "]?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) == DialogResult.Yes)
                    {
                        DBx.ExecuteCommand("DELETE FROM [dbo].[T_STKSQTY] WHERE storeNo = " + data_this.Stor_ID);
                        DBx.ExecuteCommand("DELETE FROM [dbo].[T_QTYEXP] WHERE storeNo = " + data_this.Stor_ID);
                        DBx.ExecuteCommand("DELETE FROM [dbo].[T_StoreMnd] WHERE storeNo = " + data_this.Stor_ID);
                    }
                    DBx.T_Stores.DeleteOnSubmit(data_this);
                    DBx.SubmitChanges();
                }
                catch (SqlException)
                {
                    data_this = DBx.StockStore(strNo);
                    return;
                }
                catch (Exception)
                {
                    data_this = DBx.StockStore(strNo);
                    return;
                }
                try
                {
                    Stock_DataDataContext DBj = new Stock_DataDataContext(VarGeneral.BranchCS);
                    int i;
                    T_Item newData;
                    for (i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                    {
                        try
                        {
                            if (DBj.StockCheckInvDet(VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString()))
                            {
                                MessageBox.Show((LangArEn == 0) ? "لايمكن حذف الصنف .. لانه مرتبط باحد الفواتير" : "You can not delete Item .. because it is tied to a Bills", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                                continue;
                            }
                            vStorMnd = DBj.T_StoreMnds.Where((T_StoreMnd t) => t.itmNo == VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString()).ToList();
                            if (vStorMnd.Count > 0)
                            {
                                MessageBox.Show((LangArEn == 0) ? "لايمكن حذف المستودع .. لانه مرتبط باحد فواتير صرف البضاعة" : "You can not delete the warehouse .. because it is tied to Item", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                                continue;
                            }
                            newData = DBj.StockItem(VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString());
                            if (newData.ItmTyp == 2)
                            {
                                using (Stock_DataDataContext vt = new Stock_DataDataContext(VarGeneral.BranchCS))
                                {
                                    List<T_ItemDet> LData_This = vt.T_ItemDets.Where((T_ItemDet t) => t.ItmNo == newData.Itm_No).ToList();
                                    for (int ii = 0; ii < LData_This.Count; ii++)
                                    {
                                        if (vt.StockCheckInvDet(LData_This[ii].GItmNo))
                                        {
                                            MessageBox.Show((LangArEn == 0) ? "لايمكن حذف الصنف .. لانه يحوي\u064b صنف عليه حركة" : "You can not delete Item .. because it Contains item is tied to a Bills", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                                            continue;
                                        }
                                        vt.T_ItemDets.DeleteOnSubmit(LData_This[ii]);
                                        vt.SubmitChanges();
                                    }
                                }
                                goto IL_0afd;
                            }
                            if (!DBj.StockItemDet(VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString()))
                            {
                                goto IL_0afd;
                            }
                            MessageBox.Show((LangArEn == 0) ? "لايمكن حذف الصنف .. لانه مرتبط بصنف تجميعي " : "You can not delete Item .. because it is tied to a Bills", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                            goto end_IL_0698;
                        IL_0afd:
                            try
                            {
                                try
                                {
                                    DBj.T_EditItemPrices.DeleteAllOnSubmit(newData.T_EditItemPrices);
                                    DBj.SubmitChanges();
                                }
                                catch
                                {
                                }
                                try
                                {
                                    DBj.T_ItemSerials.DeleteAllOnSubmit(newData.T_ItemSerials);
                                    DBj.SubmitChanges();
                                }
                                catch
                                {
                                }
                                List<T_STKSQTY> StkQty_ = (from t in DBj.T_STKSQTies
                                                           where t.itmNo == newData.Itm_No
                                                           where Math.Abs(t.stkQty.Value) > 0.0
                                                           select t).ToList();
                                if (StkQty_.Count > 0)
                                {
                                    continue;
                                }
                                DBj.ExecuteCommand("DELETE FROM [dbo].[T_STKSQTY] WHERE itmNo = '" + newData.Itm_No + "' and stkQty = 0");
                                List<T_QTYEXP> QtyExp = (from t in DBj.T_QTYEXPs
                                                         where t.itmNo == newData.Itm_No
                                                         where Math.Abs(t.stkQty.Value) > 0.0
                                                         select t).ToList();
                                if (QtyExp.Count <= 0)
                                {
                                    DBj.ExecuteCommand("DELETE FROM [dbo].[T_QTYEXP] WHERE itmNo = '" + newData.Itm_No + "' and stkQty = 0");
                                    List<T_StoreMnd> StorMnd_ = (from t in DBj.T_StoreMnds
                                                                 where t.itmNo == newData.Itm_No
                                                                 where Math.Abs(t.stkQty.Value) > 0.0
                                                                 select t).ToList();
                                    if (StorMnd_.Count <= 0)
                                    {
                                        DBj.ExecuteCommand("DELETE FROM [dbo].[T_StoreMnd] WHERE itmNo = '" + newData.Itm_No + "' and stkQty = 0");
                                        DBj.T_Items.DeleteOnSubmit(newData);
                                        DBj.SubmitChanges();
                                    }
                                }
                            }
                            catch (SqlException)
                            {
                                newData = DBj.StockItem(VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString());
                            }
                            catch (Exception)
                            {
                                newData = DBj.StockItem(VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString());
                            }
                        end_IL_0698:;
                        }
                        catch
                        {
                        }
                    }
                }
                catch
                {
                }
            }
            catch
            {
            }
        }
        private void buttonItem_RepairQty_Click(object sender, EventArgs e)
        {
            try
            {
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_INVDET LEFT OUTER JOIN T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Items ON T_INVDET.ItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                string Fields = " MAX(T_Items.Itm_No ) as Itm_No , MAX(T_Items.Arb_Des ) as itemNm   , MAX( T_Category.Arb_Des ) as [CategoyNm] ,  SUM (CASE WHEN T_InvDet.RealQty > 0 THEN T_InvDet.RealQty Else 0 END ) AS [Credit] ,  SUM (CASE WHEN T_InvDet.RealQty < 0 THEN ABS(T_InvDet.RealQty)  Else 0 END ) AS [Debit],MAX (T_SYSSETTING.LogImg) as LogImg  ,(SUM (CASE WHEN T_InvDet.RealQty > 0 THEN T_InvDet.RealQty Else 0 END ) - SUM (CASE WHEN T_InvDet.RealQty < 0 THEN ABS(T_InvDet.RealQty)  Else 0 END )) as BalancesOLD,((SUM (CASE WHEN T_InvDet.RealQty > 0 THEN T_InvDet.RealQty Else 0 END ) + ( case when (select SUM (CASE WHEN T_SINVDET.SRealQty > 0 THEN T_SINVDET.SRealQty  Else 0 END ) from T_SINVDET LEFT OUTER JOIN T_INVHED ON T_SINVDET.SInvIdHEAD = T_INVHED.InvHed_ID LEFT OUTER JOIN T_Items x on T_SINVDET.SItmNo = x.Itm_No   where T_SINVDET.SStoreNo = T_INVDET.StoreNo and T_SINVDET.SItmNo = T_Items.Itm_No and T_INVHED.InvTyp != 21 and T_INVHED.InvTyp != 7 and T_INVHED.InvTyp != 8 and T_INVHED.InvTyp != 9 and  T_INVHED.IfDel != 1 and x.ItmTyp != 2 and x.ItmTyp != 3 and (T_INVHED.PaymentOrderTyp = 0 or ( T_INVHED.InvTyp = 17 or T_INVHED.InvTyp = 20)) ) > 0 then  (select SUM (CASE WHEN T_SINVDET.SRealQty > 0 THEN T_SINVDET.SRealQty  Else 0 END ) from T_SINVDET LEFT OUTER JOIN T_INVHED ON T_SINVDET.SInvIdHEAD = T_INVHED.InvHed_ID LEFT OUTER JOIN T_Items x on T_SINVDET.SItmNo = x.Itm_No   where T_SINVDET.SStoreNo = T_INVDET.StoreNo and T_SINVDET.SItmNo = T_Items.Itm_No and T_INVHED.InvTyp != 21 and T_INVHED.InvTyp != 7 and T_INVHED.InvTyp != 8 and T_INVHED.InvTyp != 9 and  T_INVHED.IfDel != 1 and x.ItmTyp != 2 and x.ItmTyp != 3 and (T_INVHED.PaymentOrderTyp = 0 or ( T_INVHED.InvTyp = 17 or T_INVHED.InvTyp = 20)) ) else 0 end)) - (SUM (CASE WHEN T_InvDet.RealQty < 0 THEN ABS(T_InvDet.RealQty)  Else 0 END ) + (select case when (select SUM (CASE WHEN T_SINVDET.SRealQty < 0 THEN ABS(T_SINVDET.SRealQty)  Else 0 END ) from T_SINVDET LEFT OUTER JOIN T_INVHED ON T_SINVDET.SInvIdHEAD = T_INVHED.InvHed_ID LEFT OUTER JOIN T_Items x on T_SINVDET.SItmNo = x.Itm_No   where T_SINVDET.SStoreNo = T_INVDET.StoreNo and T_SINVDET.SItmNo = T_Items.Itm_No and T_INVHED.InvTyp != 21 and T_INVHED.InvTyp != 7 and T_INVHED.InvTyp != 8 and T_INVHED.InvTyp != 9 and  T_INVHED.IfDel != 1 and x.ItmTyp != 2 and x.ItmTyp != 3 and (T_INVHED.PaymentOrderTyp = 0 or ( T_INVHED.InvTyp = 17 or T_INVHED.InvTyp = 20)) ) > 0 then  (select SUM (CASE WHEN T_SINVDET.SRealQty < 0 THEN ABS(T_SINVDET.SRealQty)  Else 0 END ) from T_SINVDET LEFT OUTER JOIN T_INVHED ON T_SINVDET.SInvIdHEAD = T_INVHED.InvHed_ID LEFT OUTER JOIN T_Items x on T_SINVDET.SItmNo = x.Itm_No   where T_SINVDET.SStoreNo = T_INVDET.StoreNo and T_SINVDET.SItmNo = T_Items.Itm_No and T_INVHED.InvTyp != 21 and T_INVHED.InvTyp != 7 and T_INVHED.InvTyp != 8 and T_INVHED.InvTyp != 9 and  T_INVHED.IfDel != 1 and x.ItmTyp != 2 and x.ItmTyp != 3 and (T_INVHED.PaymentOrderTyp = 0 or ( T_INVHED.InvTyp = 17 or T_INVHED.InvTyp = 20)) ) else 0 end))) as Balances,(select T_STKSQTY.stkQty from T_STKSQTY where T_STKSQTY.itmNo = T_Items.Itm_No and T_STKSQTY.storeNo = T_INVDET.StoreNo) as STQNow,T_INVDET.StoreNo";
                _RepShow.Rule = " Where T_INVHED.InvTyp != 21 and T_INVHED.InvTyp != 7 and T_INVHED.InvTyp != 8 and T_INVHED.InvTyp != 9 and  T_INVHED.IfDel != 1 and T_Items.ItmTyp != 2 and T_Items.ItmTyp != 3 and (T_INVHED.PaymentOrderTyp = 0 or ( T_INVHED.InvTyp = 17 or T_INVHED.InvTyp = 20))  group by T_Items.Itm_No,T_INVDET.StoreNo Order by Itm_No ";
                _RepShow.Fields = Fields;
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex2)
                {
                    VarGeneral.DebLog.writeLog("buttonItem_RepairQty_Click:", ex2, enable: true);
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
                {
                    return;
                }
                try
                {
                    for (int i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                    {
                        double t2 = 0.0;
                        double t3 = 0.0;
                        try
                        {
                            t2 = double.Parse(VarGeneral.TString.TEmpty(VarGeneral.RepData.Tables[0].Rows[i]["Balances"].ToString()));
                        }
                        catch
                        {
                            t2 = 0.0;
                        }
                        try
                        {
                            t3 = double.Parse(VarGeneral.TString.TEmpty(VarGeneral.RepData.Tables[0].Rows[i]["STQNow"].ToString()));
                        }
                        catch
                        {
                            t3 = 0.0;
                        }
                        if (t2 == t3)
                        {
                            continue;
                        }
                        try
                        {
                            if (string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString()))
                            {
                                continue;
                            }
                            Stock_DataDataContext DBx = new Stock_DataDataContext(VarGeneral.BranchCS);
                            try
                            {
                                DBx.ExecuteCommand(string.Concat("  UPDATE T_STKSQTY SET T_STKSQTY.stkQty = ", t2, " From T_STKSQTY where T_STKSQTY.storeNo = ", VarGeneral.RepData.Tables[0].Rows[i]["StoreNo"], " and  T_STKSQTY.itmNo ='", VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString(), "'"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                Stock_DataDataContext dba = new Stock_DataDataContext(VarGeneral.BranchCS);
                                _RepShow = new RepShow();
                                _RepShow.Tables = " T_INVDET LEFT OUTER JOIN T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Items ON T_INVDET.ItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                                Fields = " MAX(T_Items.Itm_No ) as Itm_No , MAX(T_Items.Arb_Des ) as itemNm   , MAX( T_Category.Arb_Des ) as [CategoyNm] ,  SUM (CASE WHEN T_InvDet.RealQty > 0 THEN T_InvDet.RealQty Else 0 END ) AS [Credit] ,  SUM (CASE WHEN T_InvDet.RealQty < 0 THEN ABS(T_InvDet.RealQty)  Else 0 END ) AS [Debit],MAX (T_SYSSETTING.LogImg) as LogImg  ,(SUM (CASE WHEN T_InvDet.RealQty > 0 THEN T_InvDet.RealQty Else 0 END ) - SUM (CASE WHEN T_InvDet.RealQty < 0 THEN ABS(T_InvDet.RealQty)  Else 0 END )) as Balances,(select SUM(T_STKSQTY.stkQty) from T_STKSQTY where T_STKSQTY.itmNo = T_Items.Itm_No) as STQNow";
                                _RepShow.Rule = " Where T_INVHED.InvTyp != 21 and T_INVHED.InvTyp != 7 and T_INVHED.InvTyp != 8 and T_INVHED.InvTyp != 9 and  T_INVHED.IfDel != 1 and T_Items.ItmTyp != 2 and T_Items.ItmTyp != 3 and (T_INVHED.PaymentOrderTyp = 0 or ( T_INVHED.InvTyp = 17 or T_INVHED.InvTyp = 20)) and T_Items.Itm_No ='" + VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"].ToString() + "'  group by T_Items.Itm_No Order by Itm_No ";
                                _RepShow.Fields = Fields;
                                _RepShow = _RepShow.Save();
                                MyDataSet t = _RepShow.RepData;
                                if (t.Tables[0].Rows.Count > 0)
                                {
                                    dba.ExecuteCommand(string.Concat("  UPDATE T_Items SET T_Items.OpenQty = ", t.Tables[0].Rows[0]["STQNow"], " From T_Items where T_Items.Itm_No ='", t.Tables[0].Rows[0]["Itm_No"].ToString(), "'"));
                                }
                            }
                            catch
                            {
                            }
                        }
                        catch
                        {
                        }
                    }
                }
                catch (Exception error)
                {
                    VarGeneral.DebLog.writeLog("buttonItem_RepairQty_Click:", error, enable: true);
                }
            }
            catch (Exception ex2)
            {
                VarGeneral.DebLog.writeLog("buttonItem_RepairQty_Click:", ex2, enable: true);
            }
        }
        private void buttonItem_ItemError_Click(object sender, EventArgs e)
        {
            FrmCheckStQty frm = new FrmCheckStQty();
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem_ImporItems_Click(object sender, EventArgs e)
        {
            FrmFingerPrintOp frm = new FrmFingerPrintOp();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;

            //childmin();
            showChild(frm);
        }
        private void buttonItem2_Click(object sender, EventArgs e)
        {
            FrmCustSuppImport frm = new FrmCustSuppImport();
            frm.Tag = LangArEn;
            VarGeneral.ImportDataType = 4;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem1_Click(object sender, EventArgs e)
        {
            FrmCustSuppImport frm = new FrmCustSuppImport();
            frm.Tag = LangArEn;
            VarGeneral.ImportDataType = 5;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem3_Click(object sender, EventArgs e)
        {
            try
            {
                db.ExecuteCommand("sp_rename T_CATERY, T_CATEGORY");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Create function [dbo].[get_date]()\r\n                                    returns VARCHAR(10)\r\n                                    as\r\n                                    begin\r\n                                    DECLARE @GETDATE AS DATETIME = GETDATE()\r\n                                    return  CONVERT(VARCHAR(4),DATEPART(YEAR, @GETDATE)) \r\n                                    + '/'+ CONVERT(VARCHAR(2),DATEPART(MONTH, @GETDATE)) \r\n                                    + '/' + CONVERT(VARCHAR(2),DATEPART(DAY, @GETDATE)) end");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("    SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[TmpTbl](\r\n\t                                        [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [AccNo] [varchar](50) NULL,\r\n\t                                        [AccNm] [varchar](100) NULL,\r\n\t                                        [Num1] [float] NULL,\r\n\t                                        [Num2] [float] NULL,\r\n\t                                        [Num3] [float] NULL,\r\n\t                                        [Num4] [float] NULL,\r\n\t                                        [Num5] [float] NULL,\r\n\t                                        [Num6] [float] NULL,\r\n\t                                        [Num7] [float] NULL,\r\n\t                                        [Num8] [float] NULL,\r\n\t                                        [Num9] [float] NULL,\r\n\t                                        [Num10] [float] NULL,\r\n\t                                        [Num11] [float] NULL,\r\n\t                                        [Num12] [float] NULL,\r\n\t                                        [Num13] [float] NULL,\r\n\t                                        [Num14] [float] NULL,\r\n\t                                        [Str1] [varchar](50) NULL,\r\n\t                                        [Str2] [varchar](50) NULL,\r\n\t                                        [str3] [varchar](100) NULL,\r\n\t                                        [str4] [varchar](50) NULL,\r\n\t                                        [str5] [varchar](50) NULL,\r\n\t                                        [str6] [varchar](100) NULL,\r\n                                         CONSTRAINT [PK_TmpTbl] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_EditItemPrice](\r\n\t                                        [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [ItmNo] [varchar](50) NOT NULL,\r\n\t                                        [SelPriceNow1] [float] NULL,\r\n\t                                        [SelPriceNew1] [float] NULL,\r\n\t                                        [SelCostNow] [float] NULL,\r\n\t                                        [SelCostNew] [float] NULL,\r\n\t                                        [Legates] [float] NULL,\r\n\t                                        [LegatesNew] [float] NULL,\r\n\t                                        [Distributors] [float] NULL,\r\n\t                                        [DistributorsNew] [float] NULL,\r\n\t                                        [Sentence] [float] NULL,\r\n\t                                        [SentenceNew] [float] NULL,\r\n\t                                        [Sectorial] [float] NULL,\r\n\t                                        [SectorialNew] [float] NULL,\r\n\t                                        [VIP] [float] NULL,\r\n\t                                        [VIPNew] [float] NULL,\r\n\t                                        [SelPriceNow2] [float] NULL,\r\n\t                                        [SelPriceNew2] [float] NULL,\r\n\t                                        [SelPriceNow3] [float] NULL,\r\n\t                                        [SelPriceNew3] [float] NULL,\r\n\t                                        [SelPriceNow4] [float] NULL,\r\n\t                                        [SelPriceNew4] [float] NULL,\r\n\t                                        [SelPriceNow5] [float] NULL,\r\n\t                                        [SelPriceNew5] [float] NULL,\r\n\t                                        [LTim] [varchar](10) NULL,\r\n\t                                        [HDate] [varchar](10) NULL,\r\n\t                                        [GDate] [varchar](10) NULL,\r\n\t                                        [UsrNm] [varchar](50) NULL,\r\n                                         CONSTRAINT [PK_T_EditItemPrice] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_EditItemPrice]  WITH CHECK ADD  CONSTRAINT [FK_T_EditItemPrice_T_Items] FOREIGN KEY([ItmNo])\r\n                                        REFERENCES [dbo].[T_Items] ([Itm_No])\r\n                                        ALTER TABLE [dbo].[T_EditItemPrice] CHECK CONSTRAINT [FK_T_EditItemPrice_T_Items]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_SINVDET]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_SINVDET](\r\n\t                                [SInvDet_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                [SInvNo] [varchar](10) NULL,\r\n\t                                [SInvId] [int] NULL,\r\n\t                                [SInvSer] [int] NULL,\r\n\t                                [SItmNo] [varchar](50) NULL,\r\n\t                                [SCost] [float] NULL,\r\n\t                                [SQty] [float] NULL,\r\n\t                                [SItmDes] [varchar](100) NULL,\r\n\t                                [SItmUnt] [varchar](15) NULL,\r\n\t                                [SItmDesE] [varchar](100) NULL,\r\n\t                                [SItmUntE] [varchar](15) NULL,\r\n\t                                [SItmUntPak] [float] NULL,\r\n\t                                [SStoreNo] [int] NULL,\r\n\t                                [SPrice] [float] NULL,\r\n\t                                [SAmount] [float] NULL,\r\n\t                                [SRealQty] [float] NULL,\r\n\t                                [SitmInvDsc] [float] NULL,\r\n\t                                [SDatExper] [varchar](11) NULL,\r\n\t                                [SItmDis] [float] NULL,\r\n\t                                [SItmTyp] [int] NULL,\r\n\t                                [SItmIndex] [int] NULL,\r\n\t                                [SItmWight] [float] NULL,\r\n\t                                [SItmWight_T] [float] NULL,\r\n                                    [SQtyDef] [float] NULL,\r\n                                    [SPriceDef] [float] NULL,\r\n                                    [SInvIdHEAD] [int] NULL,\r\n                                     CONSTRAINT [PK_T_SINVDET] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [SInvDet_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    SET ANSI_PADDING OFF ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SINVDET_T_INVDET]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SINVDET]'))\r\n                                    ALTER TABLE [dbo].[T_SINVDET]  WITH CHECK ADD  CONSTRAINT [FK_T_SINVDET_T_INVDET] FOREIGN KEY([SInvId])\r\n                                    REFERENCES [dbo].[T_INVDET] ([InvDet_ID])\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SINVDET_T_INVDET]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SINVDET]'))\r\n                                    ALTER TABLE [dbo].[T_SINVDET] CHECK CONSTRAINT [FK_T_SINVDET_T_INVDET]\r\n                                    /****** Object:  ForeignKey [FK_T_SINVDET_T_INVHED]    Script Date: 10/03/2015 03:35:08 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SINVDET_T_INVHED]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SINVDET]'))\r\n                                    ALTER TABLE [dbo].[T_SINVDET]  WITH CHECK ADD  CONSTRAINT [FK_T_SINVDET_T_INVHED] FOREIGN KEY([SInvIdHEAD])\r\n                                    REFERENCES [dbo].[T_INVHED] ([InvHed_ID])\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SINVDET_T_INVHED]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SINVDET]'))\r\n                                    ALTER TABLE [dbo].[T_SINVDET] CHECK CONSTRAINT [FK_T_SINVDET_T_INVHED]\r\n                                    /****** Object:  ForeignKey [FK_T_SINVDET_T_Items]    Script Date: 10/03/2015 03:35:08 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SINVDET_T_Items]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SINVDET]'))\r\n                                    ALTER TABLE [dbo].[T_SINVDET]  WITH CHECK ADD  CONSTRAINT [FK_T_SINVDET_T_Items] FOREIGN KEY([SItmNo])\r\n                                    REFERENCES [dbo].[T_Items] ([Itm_No])\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SINVDET_T_Items]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SINVDET]'))\r\n                                    ALTER TABLE [dbo].[T_SINVDET] CHECK CONSTRAINT [FK_T_SINVDET_T_Items]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_BankPeaper](\r\n\t                                    [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [PageNo] [varchar](20) NULL,\r\n\t                                    [CustAcc] [varchar](30) NULL,\r\n\t                                    [BankAcc] [varchar](30) NULL,\r\n\t                                    [BranchAcc] [varchar](30) NULL,\r\n\t                                    [PageDate] [varchar](50) NULL,\r\n\t                                    [PageDatePay] [varchar](50) NULL,\r\n\t                                    [Amount] [float] NULL,\r\n\t                                    [PageType] [bit] NULL,\r\n\t                                    [vTyp] [bit] NULL,\r\n\t                                    [PayState] [int] NULL,\r\n\t                                    [gdID] [int] NULL,\r\n\t                                    [IfDel] [int] NULL,\r\n\t                                    [gdTyp] [int] NULL,\r\n\t                                    [gdUser] [varchar](3) NULL,\r\n\t                                    [CompanyID] [int] NULL,\r\n                                     CONSTRAINT [PK_T_BankPeaper] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_BankPeaper]  WITH CHECK ADD  CONSTRAINT [FK_T_BankPeaper_T_AccDef] FOREIGN KEY([CustAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_BankPeaper] CHECK CONSTRAINT [FK_T_BankPeaper_T_AccDef]\r\n                                    ALTER TABLE [dbo].[T_BankPeaper]  WITH CHECK ADD  CONSTRAINT [FK_T_BankPeaper_T_AccDef1] FOREIGN KEY([BankAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_BankPeaper] CHECK CONSTRAINT [FK_T_BankPeaper_T_AccDef1]\r\n                                    ALTER TABLE [dbo].[T_BankPeaper]  WITH CHECK ADD  CONSTRAINT [FK_T_BankPeaper_T_AccDef2] FOREIGN KEY([BranchAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_BankPeaper] CHECK CONSTRAINT [FK_T_BankPeaper_T_AccDef2]\r\n                                    ALTER TABLE [dbo].[T_BankPeaper]  WITH CHECK ADD  CONSTRAINT [FK_T_BankPeaper_T_GDHEAD] FOREIGN KEY([gdID])\r\n                                    REFERENCES [dbo].[T_GDHEAD] ([gdhead_ID])\r\n                                    ALTER TABLE [dbo].[T_BankPeaper] CHECK CONSTRAINT [FK_T_BankPeaper_T_GDHEAD]\r\n                                    ALTER TABLE [dbo].[T_BankPeaper]  WITH CHECK ADD  CONSTRAINT [FK_T_BankPeaper_T_INVSETTING] FOREIGN KEY([gdTyp])\r\n                                    REFERENCES [dbo].[T_INVSETTING] ([InvID])\r\n                                    ALTER TABLE [dbo].[T_BankPeaper] CHECK CONSTRAINT [FK_T_BankPeaper_T_INVSETTING]\r\n                                    ALTER TABLE [dbo].[T_BankPeaper]  WITH CHECK ADD  CONSTRAINT [FK_T_BankPeaper_T_SYSSETTING] FOREIGN KEY([CompanyID])\r\n                                    REFERENCES [dbo].[T_SYSSETTING] ([SYSSETTING_ID])\r\n                                    ALTER TABLE [dbo].[T_BankPeaper] CHECK CONSTRAINT [FK_T_BankPeaper_T_SYSSETTING]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [FirstCost] [float] NULL");
                db.ExecuteCommand("ALTER TABLE [dbo].[T_Items] ADD  CONSTRAINT [DF_T_Items_FirstCost]  DEFAULT ((0)) FOR [FirstCost]");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [FirstCost] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_GDHEAD] Set [salMonth] = '' Where [salMonth] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsBackground] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsBackground] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsNotBackground] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsNotBackground] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BackgroundPic] [varbinary] (max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [defSizePaper_Setting] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [defSizePaper_Setting] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [Orientation_Setting] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Orientation_Setting] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [defSizePaper] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [defSizePaper] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD [Orientation] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [Orientation] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsBackground] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsBackground] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsNotBackground] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsNotBackground] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BackgroundPic] [varbinary] (max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [Sponer] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Sponer] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmVisaGoBack] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmVisaGoBack] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmVisaIntro] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmVisaIntro] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmVisaGoBack] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmVisaGoBack] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmVisaIntro] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmVisaIntro] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmDepts] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmDepts] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmDeptsBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmDeptsBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AutoChangSalStatus] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AutoChangSalStatus] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AccUsrNo] [int] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BackPath] [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [DocumentPath] [varchar](max) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [DocumentPath] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ImportFilePath] [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ImportIp] [varchar](20) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ImportEmpNo] [varchar](5) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ImportDate] [varchar](5) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ImportTime1] [varchar](5) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ImportTimeLeave1] [varchar](5) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ImportStart] [varchar](5) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ImportEnd] [varchar](5) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AccPath] [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ServerNm] [varchar](50) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [DataBaseNm] [varchar](50) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [Sa_Pass] [varchar](30) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [Path_Kind] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Path_Kind] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmDoc] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmDoc] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmDocBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmDocBefore] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AutoLeave] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AutoLeave] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [EmpLeaveAfter] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [EmpLeaveAfter] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AttendanceManually] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AttendanceManually] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [VacationManually] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [VacationManually] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [CalculateNo] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [CalculateNo] = 2 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [CalculatliquidNo] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [CalculatliquidNo] = 2 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [Allowances] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Allowances] = 12 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AllowancesTime] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AllowancesTime] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ShowBanner] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ShowBanner] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ShowPageNo] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ShowPageNo] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ShowDateH] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ShowDateH] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ShowDateG] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ShowDateG] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [SalDate] [varchar](10) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [SalDate] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [DisVacationType] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [DisVacationType] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmEmpDoc] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmEmpDoc] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmEmpContract] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmEmpContract] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmFamilyPassport] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmFamilyPassport] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmGuarantorDoc] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmGuarantorDoc] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmEndVaction] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmEndVaction] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmBranchDoc] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmBranchDoc] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmCarDoc] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmCarDoc] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAlarmSecretariatsDoc] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAlarmSecretariatsDoc] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmEmpDocBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmEmpDocBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmEmpContractBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmEmpContractBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmFamilyPassportBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmFamilyPassportBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmGuarantorDocBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmGuarantorDocBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmEndVactionBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmEndVactionBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmBranchDocBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmBranchDocBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmCarDocBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmCarDocBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmSecretariatsBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmSecretariatsBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [IsAutoBackup] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsAutoBackup] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AutoBackup] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AutoBackup] = 2 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AutoBackupDate] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AutoBackupDate] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [Hdat] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Hdat] = 1 ");
            }
            catch
            {
            }
            try
            {
                List<T_Emp> iiEmps = db.T_Emps.Select((T_Emp t) => t).ToList();
            }
            catch
            {
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_Dept]    Script Date: 08/15/2014 07:50:28 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Dept]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Dept](\r\n\t                                    [Dept_ID] [varchar](40) NOT NULL,\r\n\t                                    [Dept_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](50) NULL,\r\n\t                                    [NameE] [varchar](50) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_Dept] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Dept_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_DaysOfMonth]    Script Date: 08/15/2014 07:50:28 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_DaysOfMonth]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_DaysOfMonth](\r\n\t                                    [ID] [varchar](40) NOT NULL,\r\n\t                                    [DaysOfMonth] [int] NULL,\r\n\t                                    [Year] [int] NULL,\r\n\t                                    [Month] [int] NULL,\r\n                                     CONSTRAINT [PK_T_DaysOfMonth] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_DayOfWeek]    Script Date: 08/15/2014 07:50:28 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_DayOfWeek]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_DayOfWeek](\r\n\t                                    [Day_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](10) NULL,\r\n\t                                    [NameE] [varchar](10) NULL,\r\n                                     CONSTRAINT [PK_T_DayOfWeek] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Day_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_DayOfWeek] ([Day_No], [NameA], [NameE]) VALUES (1, N'السبت     ', N'Sat       ')\r\n                                    INSERT [dbo].[T_DayOfWeek] ([Day_No], [NameA], [NameE]) VALUES (2, N'الأحد     ', N'Sun       ')\r\n                                    INSERT [dbo].[T_DayOfWeek] ([Day_No], [NameA], [NameE]) VALUES (3, N'الأثنين   ', N'Mon       ')\r\n                                    INSERT [dbo].[T_DayOfWeek] ([Day_No], [NameA], [NameE]) VALUES (4, N'الثلاثاء  ', N'Tues      ')\r\n                                    INSERT [dbo].[T_DayOfWeek] ([Day_No], [NameA], [NameE]) VALUES (5, N'الأربعاء  ', N'Wednes    ')\r\n                                    INSERT [dbo].[T_DayOfWeek] ([Day_No], [NameA], [NameE]) VALUES (6, N'الخميس    ', N'Thurs     ')\r\n                                    INSERT [dbo].[T_DayOfWeek] ([Day_No], [NameA], [NameE]) VALUES (7, N'الجمعة    ', N'Fri       ')\r\n                                    /****** Object:  Table [dbo].[T_Contract]    Script Date: 08/15/2014 07:50:28 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Contract]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Contract](\r\n\t                                    [Contract_ID] [varchar](40) NOT NULL,\r\n\t                                    [Contract_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_Contract] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Contract_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_Contract] ([Contract_ID], [Contract_No], [NameA], [NameE], [Note]) VALUES (N'd75681e4-ecb5-416e-b2ce-64be0417911b', 1, N'رئيسي', N'Main', N'----------')\r\n                                    INSERT [dbo].[T_Contract] ([Contract_ID], [Contract_No], [NameA], [NameE], [Note]) VALUES (N'192c7bf7-4976-4a06-80d5-44a8a39132e1', 2, N'مؤقت', N'Temporary', N'-----------')\r\n                                    /****** Object:  Table [dbo].[T_City]    Script Date: 08/15/2014 07:50:28 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_City]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_City](\r\n\t                                    [City_ID] [varchar](40) NOT NULL,\r\n\t                                    [City_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_City] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [City_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'7781ea2d-d8b2-4c72-8ddd-b67985e94fe2', 1, N'جدة', N'Jeddah', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'823914d8-3203-4fec-a6ac-abda3efc7607', 2, N'الرياض', N'Riyadh', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'ff3af6cd-0e00-4cd2-ac88-f0d4c939a577', 3, N'القاهرة', N'Cairo', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'14b9aef8-7704-4a1e-9a44-7592fa9f4f82', 4, N'صنعاء', N'San''a', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'cb2a73a6-c68b-42b4-ad14-8e12f64930fc', 5, N'ابها', N'Abhaa', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'1166d7ba-34de-4871-b9d6-8544164adf1e', 6, N'بيروت', N'Birute', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'9e94d17b-0f4b-4c46-aa69-091a302db846', 7, N'تونس', N'Tunisia', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'768c4d11-a4ff-49c6-bc32-12667b53adad', 8, N'المنامة', N'Manaama', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'9b58b074-4be0-4fc0-9cdc-7e9b19d0745e', 9, N'الاسكندرية', N'Iskendriaa', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'15ab5c93-3023-4a91-a128-abf48a4a09ed', 10, N'بيشة', N'Bishaa', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'6c719c20-51d6-42b7-94bc-d02272102d32', 11, N'دمشق', N'Demasq', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'41bf61a2-d6ae-497d-a59f-460df25972a9', 12, N'بلجرشي', N'Blgoraashi', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'bce7c960-e279-4ef9-8d59-e8858ca8e666', 13, N'عريش', N'Aarish', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'31ee5d45-94de-47f3-840a-30c1eb6b41cf', 14, N'الدمام', N'Dammam', N'')\r\n                                    INSERT [dbo].[T_City] ([City_ID], [City_No], [NameA], [NameE], [Note]) VALUES (N'42ef8d1e-162d-4868-b45c-208791d6391f', 15, N'الخرطوم', N'Khartoom', N'')\r\n                                    /****** Object:  Table [dbo].[T_BloodTyp]    Script Date: 08/15/2014 07:50:28 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_BloodTyp]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_BloodTyp](\r\n\t                                    [BloodTyp_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](10) NULL,\r\n\t                                    [NameE] [varchar](10) NULL,\r\n                                     CONSTRAINT [PK_T_BloodTyp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [BloodTyp_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_BloodTyp] ([BloodTyp_No], [NameA], [NameE]) VALUES (1, N'A+   ', N'A+   ')\r\n                                    INSERT [dbo].[T_BloodTyp] ([BloodTyp_No], [NameA], [NameE]) VALUES (2, N'A-   ', N'A-   ')\r\n                                    INSERT [dbo].[T_BloodTyp] ([BloodTyp_No], [NameA], [NameE]) VALUES (3, N'B+   ', N'B+   ')\r\n                                    INSERT [dbo].[T_BloodTyp] ([BloodTyp_No], [NameA], [NameE]) VALUES (4, N'B-   ', N'B-   ')\r\n                                    INSERT [dbo].[T_BloodTyp] ([BloodTyp_No], [NameA], [NameE]) VALUES (5, N'O    ', N'O    ')\r\n                                    /****** Object:  Table [dbo].[T_BirthPlace]    Script Date: 08/15/2014 07:50:28 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_BirthPlace]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_BirthPlace](\r\n\t                                    [BirthPlaceNo] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](20) NULL,\r\n\t                                    [NameE] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_BirthPlace] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [BirthPlaceNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (1, N'أبها', N'Abha')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (2, N'أبو عريش', N'Abo Aresh')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (3, N'الباحة', N'Baha')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (4, N'بريدة', N'Bridaa')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (5, N'البكيرية', N'alBakeria')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (6, N'بلجرشي', N'BoLjorashi')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (7, N'بيشة', N'Bisha')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (8, N'تبوك', N'Tabook')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (9, N'تنومة', N'Tnomaa')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (10, N'جدة', N'Jeddah')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (11, N'جيزان', N'Jezaan')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (12, N'الرياض', N'Riyadh')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (13, N'الدمام', N'Damaam')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (14, N'حائل', N'Haiel')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (15, N'خميس مشيط', N'Khmiss Meshiat')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (16, N'حفر الباطن          ', N'Haafr Albaten')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (17, N'عرعر                ', N'Aar Aar ')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (18, N'القطيف              ', N'Gatif')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (20, N'القصيم              ', N'Qussim')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (21, N'القاهرة             ', N'Cairo')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (22, N'الاسكندرية          ', N'Iskendrya')\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (23, N'صنعاء               ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (24, N'عدن                 ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (25, N'دمشق                ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (26, N'حمص                 ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (27, N'عمان                ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (28, N'الدوحة              ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (29, N'المنامة             ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (30, N'دبي                 ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (31, N'مومباي              ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (32, N'الفلبين             ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (33, N'لاس فيغاس           ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (34, N'شيكاغو              ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (35, N'كوالامبور           ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (36, N'فيتنام              ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (37, N'بغداد               ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (38, N'الكويت              ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (39, N'تونس                ', NULL)\r\n                                    INSERT [dbo].[T_BirthPlace] ([BirthPlaceNo], [NameA], [NameE]) VALUES (40, N'بيروت               ', NULL)\r\n                                    /****** Object:  Table [dbo].[T_Bank]    Script Date: 08/15/2014 07:50:28 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Bank]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Bank](\r\n\t                                    [Bank_ID] [varchar](40) NOT NULL,\r\n\t                                    [Bank_No] [int] NOT NULL,\r\n\t                                    [Cod] [varchar](50) NULL,\r\n\t                                    [NameA] [varchar](50) NULL,\r\n\t                                    [NameE] [varchar](50) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_Bank] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Bank_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_Bank] ([Bank_ID], [Bank_No], [Cod], [NameA], [NameE], [Note]) VALUES (N'2fc43218-2c8e-4ce0-8139-411ac61bbeb5', 1, N'', N'البنك الأهلي', N'', N'')\r\n                                    INSERT [dbo].[T_Bank] ([Bank_ID], [Bank_No], [Cod], [NameA], [NameE], [Note]) VALUES (N'1c6add1c-ba68-4251-a46f-b8983185ebd3', 2, N'', N'الراحجي', N'', N'----------')\r\n                                    INSERT [dbo].[T_Bank] ([Bank_ID], [Bank_No], [Cod], [NameA], [NameE], [Note]) VALUES (N'7ea6b450-0d15-49d3-becb-4c7b55978a6e', 3, N'', N'السعودي الهولندي', N'', N'----------')\r\n                                    INSERT [dbo].[T_Bank] ([Bank_ID], [Bank_No], [Cod], [NameA], [NameE], [Note]) VALUES (N'c30b857d-a2cd-4fc3-9526-bd12d68deeef', 4, N'', N'الجزيرة', N'', N'----------')\r\n                                    INSERT [dbo].[T_Bank] ([Bank_ID], [Bank_No], [Cod], [NameA], [NameE], [Note]) VALUES (N'e04fd042-28ee-4342-be95-c8d1ab60aefb', 5, N'', N'العربي', N'', N'----------')\r\n                                    /****** Object:  UserDefinedFunction [dbo].[get_date]    Script Date: 08/15/2014 07:50:29 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[get_date]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))\r\n                                    BEGIN\r\n                                    execute dbo.sp_executesql @statement = N'\r\n                                    create function [dbo].[get_date]()\r\n                                    returns DateTime\r\n                                    as\r\n                                    begin\r\n                                          return(Select Convert(DateTime,Getdate()))\r\n                                    end\r\n\r\n                                    ' \r\n                                    END\r\n                                    GO\r\n                                    /****** Object:  UserDefinedFunction [dbo].[fnCalAgeVaction]    Script Date: 08/15/2014 07:50:29 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnCalAgeVaction]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))\r\n                                    BEGIN\r\n                                    execute dbo.sp_executesql @statement = N'\r\n                                    CREATE FUNCTION [dbo].[fnCalAgeVaction] (\r\n                                        @DOB nvarchar(10),\r\n                                        @vacCount int\r\n                                        ) \r\n                                    RETURNS INT\r\n                                    BEGIN\r\n                                    DECLARE @now date = getdate()\r\n                                        DECLARE @years int, @months int;\r\n                                        IF @DOB &gt; @now RETURN 0;\r\n                                        SET @years = DATEDIFF(year, @DOB, @now);\r\n                                        IF MONTH(@DOB) * 100 + DAY(@DOB) &gt; MONTH(@now) * 100 + DAY(@now)\r\n                                            SET @years = @years - 1;\r\n                                        SET @months = DATEDIFF(month, DATEADD(year, @years, @DOB), @now);\r\n                                        IF DAY(@DOB) &gt; DAY(@now)\r\n                                            SET @months = @months - 1;\r\n                                        RETURN CASE\r\n                                            WHEN @years = 0 THEN  @months \r\n                                            ELSE  @years * @vacCount\r\n                                        END;\r\n                                    END\r\n                                    ' \r\n                                    END\r\n                                    GO\r\n                                    /****** Object:  UserDefinedFunction [dbo].[fnCalAge]    Script Date: 08/15/2014 07:50:29 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnCalAge]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))\r\n                                    BEGIN\r\n                                    execute dbo.sp_executesql @statement = N'\r\n                                    CREATE FUNCTION [dbo].[fnCalAge] (@DOB nvarchar(10),@TicketCount int) \r\n                                    RETURNS INT\r\n                                    BEGIN\r\n                                    DECLARE @now date = getdate()\r\n                                        DECLARE @years int, @months int;\r\n                                        IF @DOB &gt; @now RETURN 0;\r\n                                        SET @years = DATEDIFF(year, @DOB, @now);\r\n                                        IF MONTH(@DOB) * 100 + DAY(@DOB) &gt; MONTH(@now) * 100 + DAY(@now)\r\n                                            SET @years = @years - 1;\r\n                                        SET @months = DATEDIFF(month, DATEADD(year, @years, @DOB), @now);\r\n                                        IF DAY(@DOB) &gt; DAY(@now)\r\n                                            SET @months = @months - 1;\r\n                                        RETURN CASE\r\n                                            WHEN @years = 0 THEN  @months \r\n                                            ELSE  @years * @TicketCount\r\n                                        END;\r\n                                    END\r\n                                    ' \r\n                                    END\r\n                                    GO\r\n                                    /****** Object:  StoredProcedure [dbo].[S_T_Report]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[S_T_Report]') AND type in (N'P', N'PC'))\r\n                                    BEGIN\r\n                                    EXEC dbo.sp_executesql @statement = N'\r\n\r\n\r\n                                    create PROCEDURE [dbo].[S_T_Report](\r\n                                                        \r\n                                                       @Tables VARCHAR(Max),\r\n                                                       @Fields VARCHAR(Max)=''*'',\r\n\t\t\t\t                                       @Rule VARCHAR(Max)= NULL     \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n                                          DECLARE @sql AS NVARCHAR(MAX);\r\n\r\n                                          SET @sql = N''SELECT '' + @Fields\r\n                                          \r\n                                          + N'' FROM '' +@Tables + '' ''\r\n\r\n\t                                      + CASE WHEN @Rule IS NOT NULL THEN\r\n                                          + @Rule + '';'' ELSE N'''' END\r\n                                          \r\n                                          EXEC sp_executesql\r\n                                          @sql,\r\n                                          N''\r\n                                          @P_Tables VARCHAR(Max),\r\n                                          @P_Fields VARCHAR(Max),\r\n\t                                      @P_Rule VARCHAR(Max)''\r\n                                          \r\n                                          ,@P_Tables = @Tables\r\n                                          ,@P_Fields = @Fields\r\n\t                                      ,@P_Rule = @Rule;\r\n                                          \r\n                                          RETURN\r\n                                          END\r\n\r\n\r\n\r\n                                    ' \r\n                                    END\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Guarantor]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Guarantor]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Guarantor](\r\n\t                                    [Guarantor_ID] [varchar](40) NOT NULL,\r\n\t                                    [Guarantor_No] [int] NOT NULL,\r\n\t                                    [CodPc] [varchar](15) NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Address] [varchar](30) NULL,\r\n\t                                    [Tel] [varchar](15) NULL,\r\n\t                                    [Fax] [varchar](15) NULL,\r\n\t                                    [Mobil] [varchar](15) NULL,\r\n                                     CONSTRAINT [PK_T_Guarantor] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Guarantor_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Religion]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Religion]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Religion](\r\n\t                                    [Religion_ID] [varchar](40) NOT NULL,\r\n\t                                    [Religion_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](30) NULL,\r\n                                     CONSTRAINT [PK_T_Religion] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Religion_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_Religion] ([Religion_ID], [Religion_No], [NameA], [NameE], [Note]) VALUES (N'2ab2a6f3-e237-4e94-a10f-04fe1d4a73b4', 1, N'مسلم', N'Muslim', N'----------')\r\n                                    INSERT [dbo].[T_Religion] ([Religion_ID], [Religion_No], [NameA], [NameE], [Note]) VALUES (N'8ee8b3d4-0fed-4ceb-92ef-acb97699a319', 2, N'مسيحي', N'Christian', N'-------------')\r\n                                    /****** Object:  Table [dbo].[T_AddTyp]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_AddTyp]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_AddTyp](\r\n\t                                    [AddTyp_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](20) NULL,\r\n\t                                    [NameE] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_AddTyp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [AddTyp_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_AddTyp] ([AddTyp_No], [NameA], [NameE]) VALUES (1, N'إضافي يوم           ', N'For Day’s        ')\r\n                                    INSERT [dbo].[T_AddTyp] ([AddTyp_No], [NameA], [NameE]) VALUES (2, N'إضافي ساعة          ', N'For Hour’s         ')\r\n                                    INSERT [dbo].[T_AddTyp] ([AddTyp_No], [NameA], [NameE]) VALUES (3, N'إنتداب سفر              ', N'Delegate            ')\r\n                                    /****** Object:  Table [dbo].[T_TicetTyp]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_TicetTyp]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_TicetTyp](\r\n\t                                    [TicetT_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](20) NULL,\r\n\t                                    [NameE] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_TicetTyp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [TicetT_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_TicetTyp] ([TicetT_No], [NameA], [NameE]) VALUES (1, N'أعمال         ', N'Busniss       ')\r\n                                    INSERT [dbo].[T_TicetTyp] ([TicetT_No], [NameA], [NameE]) VALUES (2, N'أولى           ', N'First         ')\r\n                                    INSERT [dbo].[T_TicetTyp] ([TicetT_No], [NameA], [NameE]) VALUES (3, N'سياحي          ', N'Touring       ')\r\n                                    INSERT [dbo].[T_TicetTyp] ([TicetT_No], [NameA], [NameE]) VALUES (4, N'الضيافة        ', N'Hospitality ')\r\n                                    INSERT [dbo].[T_TicetTyp] ([TicetT_No], [NameA], [NameE]) VALUES (5, N'آخر                ', N'Other               ')\r\n                                    /****** Object:  Table [dbo].[T_SubTyp]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_SubTyp]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_SubTyp](\r\n\t                                    [SubNo] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](20) NULL,\r\n\t                                    [NameE] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_SubTyp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [SubNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_SubTyp] ([SubNo], [NameA], [NameE]) VALUES (1, N'غياب يوم', N'Day’s Absent        ')\r\n                                    INSERT [dbo].[T_SubTyp] ([SubNo], [NameA], [NameE]) VALUES (2, N'تأخير ساعة', N'Hour’s late         ')\r\n                                    INSERT [dbo].[T_SubTyp] ([SubNo], [NameA], [NameE]) VALUES (3, N'خصم جزئي', N'Penalty Deduction   ')\r\n                                    INSERT [dbo].[T_SubTyp] ([SubNo], [NameA], [NameE]) VALUES (4, N'خصومات أخرى', N'Other Deduction     ')\r\n                                    /****** Object:  Table [dbo].[T_Sex]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Sex]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Sex](\r\n\t                                    [SexNo] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](20) NULL,\r\n\t                                    [NameE] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_Sex] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [SexNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_Sex] ([SexNo], [NameA], [NameE]) VALUES (1, N'ذكر', N'Male')\r\n                                    INSERT [dbo].[T_Sex] ([SexNo], [NameA], [NameE]) VALUES (2, N'انثى', N'Female')\r\n                                    /****** Object:  Table [dbo].[T_Section]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Section]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Section](\r\n\t                                    [Section_ID] [varchar](40) NOT NULL,\r\n\t                                    [Section_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_Section] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Section_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_SalStatus]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_SalStatus]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_SalStatus](\r\n\t                                    [SalStatusNo] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](20) NULL,\r\n\t                                    [NameE] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_SalStatus] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [SalStatusNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_SalStatus] ([SalStatusNo], [NameA], [NameE]) VALUES (1, N'ساري', N'Valid')\r\n                                    INSERT [dbo].[T_SalStatus] ([SalStatusNo], [NameA], [NameE]) VALUES (2, N'موقوف', N'Stopped')\r\n                                    /****** Object:  Table [dbo].[T_OpMethod]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_OpMethod]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_OpMethod](\r\n\t                                    [Method_No] [int] NOT NULL,\r\n\t                                    [Name] [varchar](50) NULL,\r\n\t                                    [NameE] [varchar](50) NULL,\r\n                                     CONSTRAINT [PK_T_OpMethod] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Method_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (1, N'الإضافي المحدد في شاشة بيانات الموظف', N'As specified in employee data')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (2, N'الراتب الأساسي', N'Main Salary')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (3, N'الراتب الاساسي + القسط الشهري من بدل السكن', N'Main salary+Monthly installment of housing')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (4, N'الراتب الأساسي + جميع البدلات', N'Main Salary+All Allowance')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (5, N'الراتب الأساسي + بدل المواصلات + بدل السكن', N'Main salary+Installment of housing+Transport')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (6, N'الراتب الأساسي + بدل الإعاشة', N'Main salary+Food allowance')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (7, N'الراتب الأساسي + بدل المواصلات', N'Main salary+Transport')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (8, N'مبلغ مقطوع', N'Fixed Sum')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (9, N'بدل السكن السنوي', N'Anuall housing')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (10, N'بدل المواصلات', N'Transportation')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (11, N'بدل الإعاشة', N'Food allowance')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (12, N'بدل طبيعة عمل', N'Job allowance')\r\n                                    INSERT [dbo].[T_OpMethod] ([Method_No], [Name], [NameE]) VALUES (13, N'بدلات أخرى', N'Other allowance')\r\n                                    /****** Object:  Table [dbo].[T_Nationalities]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Nationalities]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Nationalities](\r\n\t                                    [Nation_ID] [varchar](40) NOT NULL,\r\n\t                                    [Nation_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](50) NULL,\r\n\t                                    [SalSubtract] [float] NULL,\r\n\t                                    [CompPaying] [float] NULL,\r\n                                     CONSTRAINT [PK_T_Nationalities] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Nation_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'0ddda9a3-32fc-46aa-a28b-1b93503e9037', 1, N'سعودي', N'Saudi', N'----------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'6750a26a-e616-4f1a-9b61-5c1b28dbaac5', 2, N'يمني', N'yemeni', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'e4ec98ab-5865-4e44-9707-8fc2a0eec675', 3, N'مصري', N'Egypt', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'7f1207b9-7a7f-48ba-9aa7-917a1d7f62a3', 4, N'سوري', N'syria', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'43d390f1-e6d5-456a-a97b-396b90140e85', 5, N'لبناني', N'lebanon', N'', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'75f01556-2850-4c11-86ef-6d0fffbbe8e8', 6, N'هندي', N'india', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'18203d93-9ffc-4314-a104-60f90740fd59', 7, N'إندونيسي', N'indonisia', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'92ee3102-3a9e-43a3-b6c2-17d3610c9ade', 8, N'عراقي', N'iraq', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'66799e62-0b56-4974-8122-d2bd04deccd5', 9, N'كويتي', N'kuwait', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'aec0e758-75fa-4d62-9fc1-c63e6029f782', 10, N'امريكي', N'USA', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'918a3f7a-e57a-4587-90fa-2da3d452c87e', 11, N'سوداني', N'Sudan', N'--------', 0, 0)\r\n                                    INSERT [dbo].[T_Nationalities] ([Nation_ID], [Nation_No], [NameA], [NameE], [Note], [SalSubtract], [CompPaying]) VALUES (N'63c13cc3-597e-4aba-bebb-7b6538478927', 12, N'كندي', N'canada', N'--------', 0, 0)\r\n                                    /****** Object:  Table [dbo].[T_MStatus]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_MStatus]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_MStatus](\r\n\t                                    [MStatusNo] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](20) NULL,\r\n\t                                    [NameE] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_MStatus] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [MStatusNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_MStatus] ([MStatusNo], [NameA], [NameE]) VALUES (1, N'أعزب', N'Single')\r\n                                    INSERT [dbo].[T_MStatus] ([MStatusNo], [NameA], [NameE]) VALUES (2, N'متزوج', N'Married')\r\n                                    INSERT [dbo].[T_MStatus] ([MStatusNo], [NameA], [NameE]) VALUES (3, N'مطلق', N'Separate')\r\n                                    INSERT [dbo].[T_MStatus] ([MStatusNo], [NameA], [NameE]) VALUES (4, N'أرمل', N'Widower')\r\n                                    /****** Object:  Table [dbo].[T_LiquidationTyp]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_LiquidationTyp]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_LiquidationTyp](\r\n\t                                    [LiquidationT_ID] [varchar](40) NULL,\r\n\t                                    [LiquidationT_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](20) NULL,\r\n\t                                    [NameE] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_LiquidationT] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [LiquidationT_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_LiquidationTyp] ([LiquidationT_ID], [LiquidationT_No], [NameA], [NameE]) VALUES (N'71a645e1-6d96-49ac-99ff-19b97ac2a912', 1, N'تصفية', N'Settlement')\r\n                                    INSERT [dbo].[T_LiquidationTyp] ([LiquidationT_ID], [LiquidationT_No], [NameA], [NameE]) VALUES (N'a5191621-1a86-482f-8007-a2ffe27f5b81', 2, N'استقالة', N'Resign')\r\n                                    INSERT [dbo].[T_LiquidationTyp] ([LiquidationT_ID], [LiquidationT_No], [NameA], [NameE]) VALUES (N'898392e4-3512-440e-aa02-7a386874f210', 3, N'استغناء', N'Layoff')\r\n                                    INSERT [dbo].[T_LiquidationTyp] ([LiquidationT_ID], [LiquidationT_No], [NameA], [NameE]) VALUES (N'ae625aef-55a9-49ae-ba14-907736cbdec5', 4, N'فصل', N'Dismiss')\r\n                                    /****** Object:  Table [dbo].[T_Job]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Job]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Job](\r\n\t                                    [Job_ID] [varchar](40) NOT NULL,\r\n\t                                    [Job_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_Job] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Job_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_Job] ([Job_ID], [Job_No], [NameA], [NameE], [Note]) VALUES (N'608d3d80-b898-450f-bb06-bcb5d1512a84', 1, N'طبيب', N'Doctor', N'-------')\r\n                                    INSERT [dbo].[T_Job] ([Job_ID], [Job_No], [NameA], [NameE], [Note]) VALUES (N'5358dff2-2054-45a6-a833-75e6cdc04b34', 2, N'مهندس', N'Eng', N'-------')\r\n                                    INSERT [dbo].[T_Job] ([Job_ID], [Job_No], [NameA], [NameE], [Note]) VALUES (N'3bbe6c85-a1d5-449a-a984-5a0698976d5b', 3, N'بائع', N'salesman', N'---------')\r\n                                    INSERT [dbo].[T_Job] ([Job_ID], [Job_No], [NameA], [NameE], [Note]) VALUES (N'75ae2b9e-991e-41c6-8c4f-1708c043cb51', 4, N'مبرمج', N'Programming', N'--------')\r\n                                    INSERT [dbo].[T_Job] ([Job_ID], [Job_No], [NameA], [NameE], [Note]) VALUES (N'b5a8ead1-dc09-4a38-bf27-22647a40268e', 5, N'سائق', N'Driver', N'----------')\r\n                                    /****** Object:  Table [dbo].[T_VacTyp]    Script Date: 08/15/2014 07:50:30 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_VacTyp]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_VacTyp](\r\n\t                                    [VacT_ID] [varchar](40) NOT NULL,\r\n\t                                    [VacT_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Dis_VacT] [bit] NULL,\r\n\t                                    [Dis_Sal] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_HolidayTyp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [VacT_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    INSERT [dbo].[T_VacTyp] ([VacT_ID], [VacT_No], [NameA], [NameE], [Dis_VacT], [Dis_Sal]) VALUES (N'23b1e997-be89-422b-8db3-0bab0cd9c789', 1, N'الأعياد', N'Eid', 0, 0)\r\n                                    INSERT [dbo].[T_VacTyp] ([VacT_ID], [VacT_No], [NameA], [NameE], [Dis_VacT], [Dis_Sal]) VALUES (N'a848fcdd-1f12-429b-a24e-b2037cd20e12', 2, N'مرض', N'disease', 0, 0)\r\n                                    INSERT [dbo].[T_VacTyp] ([VacT_ID], [VacT_No], [NameA], [NameE], [Dis_VacT], [Dis_Sal]) VALUES (N'd0c15470-637d-404f-a45c-557702794691', 3, N'اعتيادي', N'Normal', 0, 0)\r\n                                    INSERT [dbo].[T_VacTyp] ([VacT_ID], [VacT_No], [NameA], [NameE], [Dis_VacT], [Dis_Sal]) VALUES (N'b76e8627-cd73-4744-b560-b5ec8c4e310b', 4, N'مولود', N'Baby', 0, 0)\r\n                                    /****** Object:  Table [dbo].[T_Info]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Info]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Info](\r\n\t                                    [Company_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [CompName] [varchar](50) NOT NULL,\r\n\t                                    [Address] [varchar](30) NULL,\r\n\t                                    [Tel1] [varchar](15) NULL,\r\n\t                                    [Mobile] [varchar](15) NULL,\r\n\t                                    [Fax] [varchar](15) NULL,\r\n\t                                    [PBox] [varchar](15) NULL,\r\n\t                                    [MailCode] [varchar](15) NULL,\r\n\t                                    [NaturalJob] [varchar](20) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [BannarCompNameA] [varchar](100) NULL,\r\n\t                                    [BannarCompAddressA] [varchar](50) NULL,\r\n\t                                    [BannarTelA] [varchar](15) NULL,\r\n\t                                    [BannarFaxA] [varchar](15) NULL,\r\n\t                                    [CurrA1] [varchar](10) NULL,\r\n\t                                    [CurrA2] [varchar](10) NULL,\r\n\t                                    [CurrE1] [varchar](10) NULL,\r\n\t                                    [CurrE2] [varchar](10) NULL,\r\n\t                                    [AlarmDoc] [bit] NULL,\r\n\t                                    [AlarmDocBefore] [int] NULL,\r\n\t                                    [AutoLeave] [bit] NULL,\r\n\t                                    [EmpLeaveAfter] [int] NULL,\r\n\t                                    [AttendanceManually] [bit] NULL,\r\n\t                                    [VacationManually] [bit] NULL,\r\n\t                                    [CalculateNo] [int] NULL,\r\n\t                                    [CalculatliquidNo] [int] NULL,\r\n\t                                    [Allowances] [int] NULL,\r\n\t                                    [AllowancesTime] [int] NULL,\r\n\t                                    [CleanderType] [int] NULL,\r\n\t                                    [ShowBanner] [bit] NULL,\r\n\t                                    [ShowPageNo] [bit] NULL,\r\n\t                                    [ShowDateH] [bit] NULL,\r\n\t                                    [ShowDateG] [bit] NULL,\r\n\t                                    [LogoPic] [varbinary](max) NULL,\r\n\t                                    [SalDate] [varchar](10) NULL,\r\n\t                                    [BackPath] [varchar](max) NULL,\r\n                                     CONSTRAINT [PK_T_Info] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Company_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    SET IDENTITY_INSERT [dbo].[T_Info] ON\r\n                                    INSERT [dbo].[T_Info] ([Company_ID], [CompName], [Address], [Tel1], [Mobile], [Fax], [PBox], [MailCode], [NaturalJob], [Note], [BannarCompNameA], [BannarCompAddressA], [BannarTelA], [BannarFaxA], [CurrA1], [CurrA2], [CurrE1], [CurrE2], [AlarmDoc], [AlarmDocBefore], [AutoLeave], [EmpLeaveAfter], [AttendanceManually], [VacationManually], [CalculateNo], [CalculatliquidNo], [Allowances], [AllowancesTime], [CleanderType], [ShowBanner], [ShowPageNo], [ShowDateH], [ShowDateG], [LogoPic], [SalDate], [BackPath]) VALUES (1, N'أســــــاس الحاسب للبرامج', N'جدة', N'012-6578843', N'0530805881', N'012-6530771', N'2724', N'11461', N'برامج تجارية', N'----------------------', N'أســــــاس الحاسب للبرامج', N'المملكة العربية السعودية ', N'012-6578843', N'012-6530771', N'ريال', N'هللة', N'Riyal     ', N'Halal     ', 1, 1, 1, 0, 0, 1, 2, 2, 12, 1, 0, 1, 0, 0, 0, 0xr\n                                    SET IDENTITY_INSERT [dbo].[T_Info] OFF\r\n                                    /****** Object:  Table [dbo].[T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Emp]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Emp](\r\n\t                                    [Emp_ID] [varchar](40) NOT NULL,\r\n\t                                    [Emp_No] [varchar](6) NOT NULL,\r\n\t                                    [Pass] [varchar](50) NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [DateAppointment] [varchar](10) NOT NULL,\r\n\t                                    [StartContr] [varchar](10) NULL,\r\n\t                                    [EndContr] [varchar](10) NULL,\r\n\t                                    [LastFilter] [varchar](10) NULL,\r\n\t                                    [ID_Date] [varchar](10) NULL,\r\n\t                                    [ID_DateEnd] [varchar](10) NULL,\r\n\t                                    [Passport_Date] [varchar](10) NULL,\r\n\t                                    [Passport_DateEnd] [varchar](10) NULL,\r\n\t                                    [License_Date] [varchar](10) NULL,\r\n\t                                    [License_DateEnd] [varchar](10) NULL,\r\n\t                                    [Form_Date] [varchar](10) NULL,\r\n\t                                    [Form_DateEnd] [varchar](10) NULL,\r\n\t                                    [Insurance_Date] [varchar](10) NULL,\r\n\t                                    [Insurance_DateEnd] [varchar](10) NULL,\r\n\t                                    [BirthDate] [varchar](10) NULL,\r\n\t                                    [AutoReturnContr] [bit] NULL,\r\n\t                                    [WorkHours] [float] NULL,\r\n\t                                    [DayOfMonth] [int] NULL,\r\n\t                                    [VacationCount] [int] NULL,\r\n\t                                    [VacationBalance] [float] NULL,\r\n\t                                    [TicketsCount] [float] NULL,\r\n\t                                    [TicketsPrice] [float] NULL,\r\n\t                                    [TicketsBalance] [float] NULL,\r\n\t                                    [IsDesSocialInsurance] [bit] NULL,\r\n\t                                    [SocialInsuranceNo] [varchar](15) NULL,\r\n\t                                    [MainSal] [float] NULL,\r\n\t                                    [HousingAllowance] [float] NULL,\r\n\t                                    [TransferAllowance] [float] NULL,\r\n\t                                    [SubsistenceAllowance] [float] NULL,\r\n\t                                    [NaturalWorkAllowance] [float] NULL,\r\n\t                                    [OtherAllowance] [float] NULL,\r\n\t                                    [DisOneDay] [float] NULL,\r\n\t                                    [LateHours] [float] NULL,\r\n\t                                    [SocialInsuranceComp] [float] NULL,\r\n\t                                    [SocialInsurance] [float] NULL,\r\n\t                                    [InsuranceMedicalCom] [float] NULL,\r\n\t                                    [InsuranceMedical] [float] NULL,\r\n\t                                    [AddDay] [float] NULL,\r\n\t                                    [AddHours] [float] NULL,\r\n\t                                    [MandateDay] [float] NULL,\r\n\t                                    [BankBR] [varchar](30) NULL,\r\n\t                                    [AccountID] [varchar](30) NULL,\r\n\t                                    [ID_No] [varchar](15) NULL,\r\n\t                                    [Passport_No] [varchar](15) NULL,\r\n\t                                    [License_No] [varchar](15) NULL,\r\n\t                                    [Form_No] [varchar](15) NULL,\r\n\t                                    [Insurance_No] [varchar](15) NULL,\r\n\t                                    [AddressA] [varchar](30) NULL,\r\n\t                                    [AddressE] [varchar](30) NULL,\r\n\t                                    [PO_Box] [varchar](10) NULL,\r\n\t                                    [ZipCode] [varchar](15) NULL,\r\n\t                                    [Tel] [varchar](30) NULL,\r\n\t                                    [Email] [varchar](30) NULL,\r\n\t                                    [QualificationA] [varchar](30) NULL,\r\n\t                                    [QualificatioE] [varchar](30) NULL,\r\n\t                                    [ExperiencesA] [varchar](100) NULL,\r\n\t                                    [ExperiencesE] [varchar](100) NULL,\r\n\t                                    [Note] [varchar](30) NULL,\r\n\t                                    [EmpState] [bit] NULL,\r\n\t                                    [EmpPic] [varbinary](max) NULL,\r\n\t                                    [Job] [int] NULL,\r\n\t                                    [Dept] [int] NULL,\r\n\t                                    [Section] [int] NULL,\r\n\t                                    [Guarantor] [int] NULL,\r\n\t                                    [ContrTyp] [int] NULL,\r\n\t                                    [DirBoss] [int] NULL,\r\n\t                                    [StatusSal] [int] NULL,\r\n\t                                    [Bank] [int] NULL,\r\n\t                                    [ID_From] [int] NULL,\r\n\t                                    [Passport_From] [int] NULL,\r\n\t                                    [License_From] [int] NULL,\r\n\t                                    [Form_From] [int] NULL,\r\n\t                                    [Insurance_From] [int] NULL,\r\n\t                                    [Religion] [int] NULL,\r\n\t                                    [Sex] [int] NULL,\r\n\t                                    [Nationalty] [int] NULL,\r\n\t                                    [BloodTyp] [int] NULL,\r\n\t                                    [MaritalStatus] [int] NULL,\r\n\t                                    [BirthPlace] [int] NULL,\r\n\t                                    [CityNo] [int] NULL,\r\n\t                                    [CalculateNo] [int] NULL,\r\n\t                                    [FatherA] [varchar](30) NULL,\r\n\t                                    [GrandFA] [varchar](30) NULL,\r\n\t                                    [FamilyA] [varchar](30) NULL,\r\n\t                                    [FatherE] [varchar](30) NULL,\r\n\t                                    [GrandFE] [varchar](30) NULL,\r\n\t                                    [FamilyE] [varchar](30) NULL,\r\n\t                                    [FirstNameA] [varchar](30) NULL,\r\n\t                                    [FirstNameE] [varchar](30) NULL,\r\n\t                                    [CompanyID] [int] NULL,\r\n                                     CONSTRAINT [PK_T_Emp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Emp_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Vacation]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Vacation]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Vacation](\r\n\t                                    [vacation_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [VacCountDay] [int] NULL,\r\n\t                                    [VacTyp] [int] NULL,\r\n\t                                    [StartDate] [varchar](10) NOT NULL,\r\n\t                                    [EndDate] [varchar](10) NOT NULL,\r\n\t                                    [StopSalFrom] [varchar](10) NULL,\r\n\t                                    [VacAllowance] [bit] NULL,\r\n\t                                    [CalculateNo] [int] NULL,\r\n\t                                    [WithDateSal] [varchar](10) NULL,\r\n\t                                    [Amount] [float] NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_Vacation_1] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Authorization]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Authorization]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Authorization](\r\n\t                                    [Authorization_ID] [varchar](40) NOT NULL,\r\n\t                                    [Authorization_No] [int] NOT NULL,\r\n\t                                    [Date] [varchar](10) NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [ExitTime] [varchar](20) NULL,\r\n\t                                    [BackTime] [varchar](20) NULL,\r\n\t                                    [reason] [varchar](250) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [RTime] [varchar](10) NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_Authorization] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Authorization_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_AttendOperat]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_AttendOperat]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_AttendOperat](\r\n\t                                    [AttendOperat_ID] [varchar](40) NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [Day] [int] NULL,\r\n\t                                    [Date] [varchar](10) NULL,\r\n\t                                    [ComeTime] [varchar](20) NULL,\r\n\t                                    [LateTime] [float] NULL,\r\n\t                                    [Time1] [varchar](20) NULL,\r\n\t                                    [Time2] [varchar](20) NULL,\r\n\t                                    [LeaveTime] [varchar](20) NULL,\r\n\t                                    [LeaveTime2] [varchar](20) NULL,\r\n\t                                    [Note] [varchar](50) NULL,\r\n\t                                    [Operation] [varchar](10) NULL,\r\n                                     CONSTRAINT [PK_T_AttendOperat] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [AttendOperat_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Attend]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Attend]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Attend](\r\n\t                                    [Attend_ID] [varchar](40) NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [Day_No] [int] NULL,\r\n\t                                    [Periods] [int] NULL,\r\n\t                                    [Time1] [varchar](10) NULL,\r\n\t                                    [TimeAllow1] [varchar](10) NULL,\r\n\t                                    [LeaveTime1] [varchar](10) NULL,\r\n\t                                    [Time2] [varchar](10) NULL,\r\n\t                                    [TimeAlow2] [varchar](10) NULL,\r\n\t                                    [LeaveTime2] [varchar](10) NULL,\r\n                                     CONSTRAINT [PK_T_Attend] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Attend_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Advances]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Advances]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Advances](\r\n\t                                    [Advances_ID] [varchar](40) NOT NULL,\r\n\t                                    [Advances_No] [int] NOT NULL,\r\n\t                                    [ResolutionNo] [varchar](10) NULL,\r\n\t                                    [ResolutionDate] [varchar](10) NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [Salary] [float] NULL,\r\n\t                                    [SalDate] [varchar](10) NULL,\r\n\t                                    [ValueAdvances] [float] NULL,\r\n\t                                    [Remaining] [float] NULL,\r\n\t                                    [TotalPremiums] [int] NULL,\r\n\t                                    [ValuePremium] [float] NULL,\r\n\t                                    [ValuePremiumEdit] [float] NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_Advances_1] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Advances_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Family]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Family]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Family](\r\n\t                                    [Family_ID] [varchar](40) NOT NULL,\r\n\t                                    [Person_No] [int] NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NOT NULL,\r\n\t                                    [Name] [varchar](20) NULL,\r\n\t                                    [BirthDay] [varchar](10) NULL,\r\n\t                                    [Link] [varchar](20) NULL,\r\n\t                                    [PassNo] [varchar](15) NULL,\r\n\t                                    [PassEnd] [varchar](10) NULL,\r\n                                     CONSTRAINT [PK_T_Family] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Person_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_EndService]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_EndService]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_EndService](\r\n\t                                    [EndService_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NOT NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [CauseLiquidation] [int] NULL,\r\n\t                                    [DateAppointment] [varchar](10) NULL,\r\n\t                                    [LastFilter] [varchar](10) NULL,\r\n\t                                    [Salary] [float] NULL,\r\n\t                                    [DateFilter] [varchar](10) NULL,\r\n\t                                    [Years] [int] NULL,\r\n\t                                    [Months] [int] NULL,\r\n\t                                    [Days] [int] NULL,\r\n\t                                    [ServLess] [int] NULL,\r\n\t                                    [LessWorth] [int] NULL,\r\n\t                                    [ServMore] [int] NULL,\r\n\t                                    [AndLess] [int] NULL,\r\n\t                                    [LessMoreWorth] [int] NULL,\r\n\t                                    [ServMoreOnly] [int] NULL,\r\n\t                                    [MoreWorth] [int] NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n\t                                    [GenTotal] [float] NULL,\r\n\t                                    [ISCalculatTicketVal] [bit] NULL,\r\n\t                                    [ValueAdvances] [float] NULL,\r\n\t                                    [Paid] [float] NULL,\r\n\t                                    [Remaining] [float] NULL,\r\n\t                                    [WagesDetails] [varchar](max) NULL,\r\n\t                                    [Note] [varchar](50) NULL,\r\n\t                                    [EAdvancesRemainning] [float] NULL,\r\n\t                                    [EWagesValue] [float] NULL,\r\n\t                                    [eEndServisValue] [float] NULL,\r\n\t                                    [TicketCount] [float] NULL,\r\n\t                                    [Tickets] [float] NULL,\r\n\t                                    [TicketUsed] [float] NULL,\r\n\t                                    [TicketBalance] [float] NULL,\r\n\t                                    [TicketValue] [float] NULL,\r\n\t                                    [TicketTotal] [float] NULL,\r\n\t                                    [VacDayCount] [int] NULL,\r\n\t                                    [VacUsed] [float] NULL,\r\n\t                                    [VacAcout] [float] NULL,\r\n\t                                    [VacBalance] [float] NULL,\r\n\t                                    [VacTotal] [float] NULL,\r\n                                     CONSTRAINT [PK_T_EndService_1] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_SalDiscount]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_SalDiscount]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_SalDiscount](\r\n\t                                    [Discont_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [SubTyp] [int] NULL,\r\n\t                                    [SalDate] [varchar](10) NULL,\r\n\t                                    [CalculateNo] [int] NULL,\r\n\t                                    [DayOfMonth] [int] NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [ACount] [float] NULL,\r\n\t                                    [SubValue] [float] NULL,\r\n\t                                    [SubTotaly] [float] NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_SalDiscount_1] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Salary]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Salary]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Salary](\r\n\t                                    [SalaryID] [varchar](40) NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NOT NULL,\r\n\t                                    [SalMonth] [int] NULL,\r\n\t                                    [SalYear] [int] NULL,\r\n\t                                    [DirBoss] [int] NULL,\r\n\t                                    [DeptNo] [int] NULL,\r\n\t                                    [Job] [int] NULL,\r\n\t                                    [Salary] [float] NULL,\r\n\t                                    [HousingAllowance] [float] NULL,\r\n\t                                    [TransferAllowance] [float] NULL,\r\n\t                                    [OtherAllowance] [float] NULL,\r\n\t                                    [SubDay] [float] NULL,\r\n\t                                    [LateHours] [float] NULL,\r\n\t                                    [SubJaza] [float] NULL,\r\n\t                                    [SubOther] [float] NULL,\r\n\t                                    [MandateDay] [float] NULL,\r\n\t                                    [SocialInsuranceComp] [float] NULL,\r\n\t                                    [SocialInsurance] [float] NULL,\r\n\t                                    [InsuranceMedicalCom] [float] NULL,\r\n\t                                    [InsuranceMedical] [float] NULL,\r\n\t                                    [Advance] [float] NULL,\r\n\t                                    [Rewards] [float] NULL,\r\n\t                                    [Bank] [int] NULL,\r\n\t                                    [AccountNo] [varchar](30) NULL,\r\n\t                                    [SalaryStatus] [bit] NULL,\r\n\t                                    [IsPrint] [bit] NULL,\r\n\t                                    [SalSpell] [varchar](max) NULL,\r\n\t                                    [AddDay] [float] NULL,\r\n\t                                    [AddHour] [float] NULL,\r\n\t                                    [SectionNo] [int] NULL,\r\n                                     CONSTRAINT [PK_T_Salary] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [SalaryID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Rewards]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Rewards]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Rewards](\r\n\t                                    [Reward_ID] [varchar](40) NOT NULL,\r\n\t                                    [Reward_No] [int] NOT NULL,\r\n\t                                    [RewardDate] [varchar](10) NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [SalDate] [varchar](10) NULL,\r\n\t                                    [RewardValue] [float] NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_Rewards] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Reward_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Tickets]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Tickets]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Tickets](\r\n\t                                    [Ticket_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [GoLine] [varchar](50) NULL,\r\n\t                                    [TickTyp] [int] NULL,\r\n\t                                    [TicketValue] [float] NULL,\r\n\t                                    [TicketCount] [float] NULL,\r\n\t                                    [AllTicketValue] [float] NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_Tickets_1] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Add]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Add]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Add](\r\n\t                                    [Add_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [SalDate] [varchar](10) NULL,\r\n\t                                    [CalculateNo] [int] NULL,\r\n\t                                    [AddTyp] [int] NULL,\r\n\t                                    [DayOfMonth] [int] NULL,\r\n\t                                    [CountDay] [float] NULL,\r\n\t                                    [AddValue] [float] NULL,\r\n\t                                    [AddTotaly] [float] NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_Add_1] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  Table [dbo].[T_Premiums]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    SET ANSI_PADDING ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Premiums]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_Premiums](\r\n\t                                    [Premiums_ID] [varchar](40) NOT NULL,\r\n\t                                    [Premiums_No] [int] NOT NULL,\r\n\t                                    [Advances_No] [int] NULL,\r\n\t                                    [PremiumsDate] [varchar](10) NULL,\r\n\t                                    [ValuePremiums] [float] NULL,\r\n\t                                    [Paying] [float] NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_Premiums] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Premiums_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    GO\r\n                                    SET ANSI_PADDING OFF\r\n                                    GO\r\n                                    /****** Object:  UserDefinedFunction [dbo].[GetVacUsed]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetVacUsed]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))\r\n                                    BEGIN\r\n                                    execute dbo.sp_executesql @statement = N'\r\n                                    CREATE FUNCTION [dbo].[GetVacUsed](@EmpID varchar(40))\r\n                                    RETURNS INT\r\n                                    WITH EXECUTE AS CALLER\r\n                                    AS\r\n                                    begin\r\n\t                                    DECLARE @valueIn int;\r\n\t                                    DECLARE @value int;\r\n\t\t                                    set @valueIn = ISNull((SELECT sum(VacCountDay) from T_Vacation join T_VacTyp on T_Vacation.VacTyp = T_VacTyp.VacT_No Where T_Vacation.EmpID=@EmpID AND T_VacTyp.Dis_VacT = 1),''0'')\r\n\r\n\t                                    set @value = @valueIn ;\r\n\t                                    return (@value);\r\n                                    end\r\n\r\n                                    ' \r\n                                    END\r\n                                    GO\r\n                                    /****** Object:  UserDefinedFunction [dbo].[GetTickeUsed]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    GO\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    GO\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetTickeUsed]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))\r\n                                    BEGIN\r\n                                    execute dbo.sp_executesql @statement = N'\r\n                                    CREATE FUNCTION [dbo].[GetTickeUsed] (@EmpID varchar(40))\r\n                                    RETURNS Float\r\n                                    WITH EXECUTE AS CALLER\r\n                                    AS\r\n                                    begin\r\n\t                                    DECLARE @valueIn int;\r\n\t                                    DECLARE @value int;\r\n\t\t                                    set @valueIn = ISNull((SELECT sum(TicketCount) from T_Tickets Where EmpID=@EmpID),''0'')\r\n\r\n\t                                    set @value = @valueIn ;\r\n\t                                    return (@value);\r\n                                    end\r\n\r\n                                    ' \r\n                                    END\r\n                                    GO\r\n                                    /****** Object:  Default [DF_T_Salary_SalaryStatus]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_T_Salary_SalaryStatus]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    Begin\r\n                                    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_T_Salary_SalaryStatus]') AND type = 'D')\r\n                                    BEGIN\r\n                                    ALTER TABLE [dbo].[T_Salary] ADD  CONSTRAINT [DF_T_Salary_SalaryStatus]  DEFAULT ((0)) FOR [SalaryStatus]\r\n                                    END\r\n\r\n\r\n                                    End\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Info_T_OpMethod]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Info_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Info]'))\r\n                                    ALTER TABLE [dbo].[T_Info]  WITH CHECK ADD  CONSTRAINT [FK_T_Info_T_OpMethod] FOREIGN KEY([CalculateNo])\r\n                                    REFERENCES [dbo].[T_OpMethod] ([Method_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Info_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Info]'))\r\n                                    ALTER TABLE [dbo].[T_Info] CHECK CONSTRAINT [FK_T_Info_T_OpMethod]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Info_T_OpMethod1]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Info_T_OpMethod1]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Info]'))\r\n                                    ALTER TABLE [dbo].[T_Info]  WITH CHECK ADD  CONSTRAINT [FK_T_Info_T_OpMethod1] FOREIGN KEY([CalculatliquidNo])\r\n                                    REFERENCES [dbo].[T_OpMethod] ([Method_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Info_T_OpMethod1]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Info]'))\r\n                                    ALTER TABLE [dbo].[T_Info] CHECK CONSTRAINT [FK_T_Info_T_OpMethod1]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Bank]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Bank]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Bank] FOREIGN KEY([Bank])\r\n                                    REFERENCES [dbo].[T_Bank] ([Bank_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Bank]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Bank]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_BloodTyp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_BloodTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_BloodTyp] FOREIGN KEY([BloodTyp])\r\n                                    REFERENCES [dbo].[T_BloodTyp] ([BloodTyp_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_BloodTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_BloodTyp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_City]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_City] FOREIGN KEY([CityNo])\r\n                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_City]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_City1]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City1]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_City1] FOREIGN KEY([ID_From])\r\n                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City1]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_City1]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_City2]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City2]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_City2] FOREIGN KEY([Passport_From])\r\n                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City2]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_City2]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_City3]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City3]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_City3] FOREIGN KEY([License_From])\r\n                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City3]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_City3]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_City4]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City4]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_City4] FOREIGN KEY([Form_From])\r\n                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City4]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_City4]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_City5]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City5]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_City5] FOREIGN KEY([Insurance_From])\r\n                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City5]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_City5]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_City6]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City6]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_City6] FOREIGN KEY([BirthPlace])\r\n                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_City6]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_City6]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Contract]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Contract]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Contract] FOREIGN KEY([ContrTyp])\r\n                                    REFERENCES [dbo].[T_Contract] ([Contract_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Contract]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Contract]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Dept]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Dept]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Dept] FOREIGN KEY([Dept])\r\n                                    REFERENCES [dbo].[T_Dept] ([Dept_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Dept]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Dept]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Guarantor]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Guarantor]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Guarantor] FOREIGN KEY([Guarantor])\r\n                                    REFERENCES [dbo].[T_Guarantor] ([Guarantor_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Guarantor]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Guarantor]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Info]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Info]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Info] FOREIGN KEY([CompanyID])\r\n                                    REFERENCES [dbo].[T_Info] ([Company_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Info]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Info]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Job]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Job]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Job] FOREIGN KEY([Job])\r\n                                    REFERENCES [dbo].[T_Job] ([Job_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Job]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Job]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_MStatus]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_MStatus]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_MStatus] FOREIGN KEY([MaritalStatus])\r\n                                    REFERENCES [dbo].[T_MStatus] ([MStatusNo])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_MStatus]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_MStatus]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Nationalities]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Nationalities]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Nationalities] FOREIGN KEY([Nationalty])\r\n                                    REFERENCES [dbo].[T_Nationalities] ([Nation_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Nationalities]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Nationalities]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_OpMethod]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_OpMethod] FOREIGN KEY([CalculateNo])\r\n                                    REFERENCES [dbo].[T_OpMethod] ([Method_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_OpMethod]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Religion]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Religion]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Religion] FOREIGN KEY([Religion])\r\n                                    REFERENCES [dbo].[T_Religion] ([Religion_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Religion]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Religion]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_SalStatus]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_SalStatus]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_SalStatus] FOREIGN KEY([StatusSal])\r\n                                    REFERENCES [dbo].[T_SalStatus] ([SalStatusNo])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_SalStatus]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_SalStatus]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Section]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Section]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Section] FOREIGN KEY([Section])\r\n                                    REFERENCES [dbo].[T_Section] ([Section_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Section]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Section]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Emp_T_Sex]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Sex]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Sex] FOREIGN KEY([Sex])\r\n                                    REFERENCES [dbo].[T_Sex] ([SexNo])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Emp_T_Sex]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Emp]'))\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Sex]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Vacation_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Vacation_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Vacation]'))\r\n                                    ALTER TABLE [dbo].[T_Vacation]  WITH CHECK ADD  CONSTRAINT [FK_T_Vacation_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Vacation_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Vacation]'))\r\n                                    ALTER TABLE [dbo].[T_Vacation] CHECK CONSTRAINT [FK_T_Vacation_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Vacation_T_OpMethod]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Vacation_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Vacation]'))\r\n                                    ALTER TABLE [dbo].[T_Vacation]  WITH CHECK ADD  CONSTRAINT [FK_T_Vacation_T_OpMethod] FOREIGN KEY([CalculateNo])\r\n                                    REFERENCES [dbo].[T_OpMethod] ([Method_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Vacation_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Vacation]'))\r\n                                    ALTER TABLE [dbo].[T_Vacation] CHECK CONSTRAINT [FK_T_Vacation_T_OpMethod]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Vacation_T_VacTyp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Vacation_T_VacTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Vacation]'))\r\n                                    ALTER TABLE [dbo].[T_Vacation]  WITH CHECK ADD  CONSTRAINT [FK_T_Vacation_T_VacTyp] FOREIGN KEY([VacTyp])\r\n                                    REFERENCES [dbo].[T_VacTyp] ([VacT_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Vacation_T_VacTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Vacation]'))\r\n                                    ALTER TABLE [dbo].[T_Vacation] CHECK CONSTRAINT [FK_T_Vacation_T_VacTyp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Authorization_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Authorization_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Authorization]'))\r\n                                    ALTER TABLE [dbo].[T_Authorization]  WITH CHECK ADD  CONSTRAINT [FK_T_Authorization_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Authorization_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Authorization]'))\r\n                                    ALTER TABLE [dbo].[T_Authorization] CHECK CONSTRAINT [FK_T_Authorization_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_AttendOperat_T_DayOfWeek]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_AttendOperat_T_DayOfWeek]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_AttendOperat]'))\r\n                                    ALTER TABLE [dbo].[T_AttendOperat]  WITH CHECK ADD  CONSTRAINT [FK_T_AttendOperat_T_DayOfWeek] FOREIGN KEY([Day])\r\n                                    REFERENCES [dbo].[T_DayOfWeek] ([Day_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_AttendOperat_T_DayOfWeek]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_AttendOperat]'))\r\n                                    ALTER TABLE [dbo].[T_AttendOperat] CHECK CONSTRAINT [FK_T_AttendOperat_T_DayOfWeek]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_AttendOperat_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_AttendOperat_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_AttendOperat]'))\r\n                                    ALTER TABLE [dbo].[T_AttendOperat]  WITH CHECK ADD  CONSTRAINT [FK_T_AttendOperat_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_AttendOperat_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_AttendOperat]'))\r\n                                    ALTER TABLE [dbo].[T_AttendOperat] CHECK CONSTRAINT [FK_T_AttendOperat_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Attend_T_DayOfWeek]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Attend_T_DayOfWeek]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Attend]'))\r\n                                    ALTER TABLE [dbo].[T_Attend]  WITH CHECK ADD  CONSTRAINT [FK_T_Attend_T_DayOfWeek] FOREIGN KEY([Day_No])\r\n                                    REFERENCES [dbo].[T_DayOfWeek] ([Day_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Attend_T_DayOfWeek]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Attend]'))\r\n                                    ALTER TABLE [dbo].[T_Attend] CHECK CONSTRAINT [FK_T_Attend_T_DayOfWeek]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Attend_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Attend_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Attend]'))\r\n                                    ALTER TABLE [dbo].[T_Attend]  WITH CHECK ADD  CONSTRAINT [FK_T_Attend_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Attend_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Attend]'))\r\n                                    ALTER TABLE [dbo].[T_Attend] CHECK CONSTRAINT [FK_T_Attend_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Advances_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Advances_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Advances]'))\r\n                                    ALTER TABLE [dbo].[T_Advances]  WITH CHECK ADD  CONSTRAINT [FK_T_Advances_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Advances_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Advances]'))\r\n                                    ALTER TABLE [dbo].[T_Advances] CHECK CONSTRAINT [FK_T_Advances_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Family_T_Emp1]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Family_T_Emp1]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Family]'))\r\n                                    ALTER TABLE [dbo].[T_Family]  WITH CHECK ADD  CONSTRAINT [FK_T_Family_T_Emp1] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Family_T_Emp1]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Family]'))\r\n                                    ALTER TABLE [dbo].[T_Family] CHECK CONSTRAINT [FK_T_Family_T_Emp1]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_EndService_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_EndService_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_EndService]'))\r\n                                    ALTER TABLE [dbo].[T_EndService]  WITH CHECK ADD  CONSTRAINT [FK_T_EndService_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_EndService_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_EndService]'))\r\n                                    ALTER TABLE [dbo].[T_EndService] CHECK CONSTRAINT [FK_T_EndService_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_EndService_T_LiquidationTyp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_EndService_T_LiquidationTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_EndService]'))\r\n                                    ALTER TABLE [dbo].[T_EndService]  WITH CHECK ADD  CONSTRAINT [FK_T_EndService_T_LiquidationTyp] FOREIGN KEY([CauseLiquidation])\r\n                                    REFERENCES [dbo].[T_LiquidationTyp] ([LiquidationT_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_EndService_T_LiquidationTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_EndService]'))\r\n                                    ALTER TABLE [dbo].[T_EndService] CHECK CONSTRAINT [FK_T_EndService_T_LiquidationTyp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_SalDiscount_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SalDiscount_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SalDiscount]'))\r\n                                    ALTER TABLE [dbo].[T_SalDiscount]  WITH CHECK ADD  CONSTRAINT [FK_T_SalDiscount_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SalDiscount_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SalDiscount]'))\r\n                                    ALTER TABLE [dbo].[T_SalDiscount] CHECK CONSTRAINT [FK_T_SalDiscount_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_SalDiscount_T_OpMethod]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SalDiscount_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SalDiscount]'))\r\n                                    ALTER TABLE [dbo].[T_SalDiscount]  WITH CHECK ADD  CONSTRAINT [FK_T_SalDiscount_T_OpMethod] FOREIGN KEY([CalculateNo])\r\n                                    REFERENCES [dbo].[T_OpMethod] ([Method_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SalDiscount_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SalDiscount]'))\r\n                                    ALTER TABLE [dbo].[T_SalDiscount] CHECK CONSTRAINT [FK_T_SalDiscount_T_OpMethod]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_SalDiscount_T_SubTyp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SalDiscount_T_SubTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SalDiscount]'))\r\n                                    ALTER TABLE [dbo].[T_SalDiscount]  WITH CHECK ADD  CONSTRAINT [FK_T_SalDiscount_T_SubTyp] FOREIGN KEY([SubTyp])\r\n                                    REFERENCES [dbo].[T_SubTyp] ([SubNo])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_SalDiscount_T_SubTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_SalDiscount]'))\r\n                                    ALTER TABLE [dbo].[T_SalDiscount] CHECK CONSTRAINT [FK_T_SalDiscount_T_SubTyp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Salary_T_Bank]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Bank]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_Bank] FOREIGN KEY([Bank])\r\n                                    REFERENCES [dbo].[T_Bank] ([Bank_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Bank]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_Bank]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Salary_T_Dept]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Dept]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_Dept] FOREIGN KEY([DeptNo])\r\n                                    REFERENCES [dbo].[T_Dept] ([Dept_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Dept]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_Dept]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Salary_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Salary_T_Guarantor]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Guarantor]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_Guarantor] FOREIGN KEY([DirBoss])\r\n                                    REFERENCES [dbo].[T_Guarantor] ([Guarantor_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Guarantor]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_Guarantor]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Salary_T_Job]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Job]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_Job] FOREIGN KEY([Job])\r\n                                    REFERENCES [dbo].[T_Job] ([Job_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Job]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_Job]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Salary_T_Section]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Section]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_Section] FOREIGN KEY([SectionNo])\r\n                                    REFERENCES [dbo].[T_Section] ([Section_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Salary_T_Section]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Salary]'))\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_Section]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Rewards_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Rewards_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Rewards]'))\r\n                                    ALTER TABLE [dbo].[T_Rewards]  WITH CHECK ADD  CONSTRAINT [FK_T_Rewards_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Rewards_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Rewards]'))\r\n                                    ALTER TABLE [dbo].[T_Rewards] CHECK CONSTRAINT [FK_T_Rewards_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Rewards_T_Emp1]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Rewards_T_Emp1]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Rewards]'))\r\n                                    ALTER TABLE [dbo].[T_Rewards]  WITH CHECK ADD  CONSTRAINT [FK_T_Rewards_T_Emp1] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Rewards_T_Emp1]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Rewards]'))\r\n                                    ALTER TABLE [dbo].[T_Rewards] CHECK CONSTRAINT [FK_T_Rewards_T_Emp1]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Tickets_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Tickets_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Tickets]'))\r\n                                    ALTER TABLE [dbo].[T_Tickets]  WITH CHECK ADD  CONSTRAINT [FK_T_Tickets_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Tickets_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Tickets]'))\r\n                                    ALTER TABLE [dbo].[T_Tickets] CHECK CONSTRAINT [FK_T_Tickets_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Tickets_T_TicetTyp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Tickets_T_TicetTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Tickets]'))\r\n                                    ALTER TABLE [dbo].[T_Tickets]  WITH CHECK ADD  CONSTRAINT [FK_T_Tickets_T_TicetTyp] FOREIGN KEY([TickTyp])\r\n                                    REFERENCES [dbo].[T_TicetTyp] ([TicetT_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Tickets_T_TicetTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Tickets]'))\r\n                                    ALTER TABLE [dbo].[T_Tickets] CHECK CONSTRAINT [FK_T_Tickets_T_TicetTyp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Add_T_Emp]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Add_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Add]'))\r\n                                    ALTER TABLE [dbo].[T_Add]  WITH CHECK ADD  CONSTRAINT [FK_T_Add_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Add_T_Emp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Add]'))\r\n                                    ALTER TABLE [dbo].[T_Add] CHECK CONSTRAINT [FK_T_Add_T_Emp]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Add_T_OpMethod]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Add_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Add]'))\r\n                                    ALTER TABLE [dbo].[T_Add]  WITH CHECK ADD  CONSTRAINT [FK_T_Add_T_OpMethod] FOREIGN KEY([CalculateNo])\r\n                                    REFERENCES [dbo].[T_OpMethod] ([Method_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Add_T_OpMethod]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Add]'))\r\n                                    ALTER TABLE [dbo].[T_Add] CHECK CONSTRAINT [FK_T_Add_T_OpMethod]\r\n                                    GO\r\n                                    /****** Object:  ForeignKey [FK_T_Premiums_T_Advances]    Script Date: 08/15/2014 07:50:31 ******/\r\n                                    IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Premiums_T_Advances]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Premiums]'))\r\n                                    ALTER TABLE [dbo].[T_Premiums]  WITH CHECK ADD  CONSTRAINT [FK_T_Premiums_T_Advances] FOREIGN KEY([Advances_No])\r\n                                    REFERENCES [dbo].[T_Advances] ([Advances_No])\r\n                                    GO\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Premiums_T_Advances]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Premiums]'))\r\n                                    ALTER TABLE [dbo].[T_Premiums] CHECK CONSTRAINT [FK_T_Premiums_T_Advances]\r\n                                    GO".Replace("GO", ""));
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Emp] drop constraint [FK_T_Emp_T_City6]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_BirthPlace] FOREIGN KEY([BirthPlace])\r\n                                        REFERENCES [dbo].[T_BirthPlace] ([BirthPlaceNo])\r\n                                        ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_BirthPlace]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Info ADD  [ShowEmpNo] [bit] NULL");
                    db.ExecuteCommand("Update [dbo].[T_Info] Set [ShowEmpNo] = 0 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Info ADD  [ShowSigne] [bit] NULL");
                    db.ExecuteCommand("Update [dbo].[T_Info] Set [ShowSigne] = 1 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Info ADD  [CalculateAddDis] [int] NULL");
                    db.ExecuteCommand("Update [dbo].[T_Info] Set [CalculateAddDis] = 0 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Add ADD  [MinuteTyp] [bit] NULL");
                    db.ExecuteCommand("Update [dbo].[T_Add] Set [MinuteTyp] = 0 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SalDiscount ADD  [MinuteTyp] [bit] NULL");
                    db.ExecuteCommand("Update [dbo].[T_SalDiscount] Set [MinuteTyp] = 0 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [GadeId2] [float] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [SalAcc] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [LoanAcc] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [HouseAcc] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [SalAcc] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [SubCallPhone] [float] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [SubCommentary] [float] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [LoanAcc] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [HouseAcc] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [fGUID] [varchar](40) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [Allowances] [int] NULL");
                    db.ExecuteCommand("Update [dbo].[T_Emp] Set [Allowances] = 1 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [AllowancesTime] [int] NULL");
                    db.ExecuteCommand("Update [dbo].[T_Emp] Set [AllowancesTime] = 0 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Advances ADD  [LoanAcc] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Advances ADD  [fGUID] [varchar](40) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [Total] [float] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD  [BossName] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD  [Phone] [varchar](15) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD  [Fax] [varchar](15) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Section ADD  [BossName] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Section ADD  [Phone] [varchar](15) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Section ADD  [Fax] [varchar](15) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD  [MdniNo] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD  [MdniBeginDate] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD  [MdniEndDate] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD  [BusnisNo] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD [BusnisBeginDate] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD [BusnisEndDate] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD [MdniNo] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD [BusnisNo] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD [BusnisFrom] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Guarantor ADD [MdniFrom] [varchar](20) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_CarTyp]    Script Date: 08/16/2014 03:49:23 ******/\r\n                                SET ANSI_NULLS ON\r\n                                SET QUOTED_IDENTIFIER ON\r\n                                SET ANSI_PADDING ON\r\n                                CREATE TABLE [dbo].[T_CarTyp](\r\n\t                                [CarTyp_ID] [varchar](40) NOT NULL,\r\n\t                                [CarTyp_No] [int] NOT NULL,\r\n\t                                [NameA] [varchar](50) NULL,\r\n\t                                [NameE] [varchar](50) NULL,\r\n\t                                [Note] [varchar](250) NULL,\r\n                                 CONSTRAINT [PK_T_CarTyp] PRIMARY KEY CLUSTERED \r\n                                (\r\n\t                                [CarTyp_No] ASC\r\n                                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                ) ON [PRIMARY]\r\n                                SET ANSI_PADDING OFF\r\n                                ");
                    db.ExecuteCommand("INSERT [dbo].[T_CarTyp] ([CarTyp_ID], [CarTyp_No], [NameA],[NameE], [Note]) VALUES (N'916e164e-3f77-4690-a7cb-707764ba8d7c',1,N'شفرليه',N'Ch',N'-----------')");
                    db.ExecuteCommand("INSERT [dbo].[T_CarTyp] ([CarTyp_ID], [CarTyp_No], [NameA],[NameE], [Note]) VALUES (N'64a1b30d-230e-4940-a971-3006662537a3',2,N'جمس',N'GMC',N'-----------')");
                    db.ExecuteCommand("INSERT [dbo].[T_CarTyp] ([CarTyp_ID], [CarTyp_No], [NameA],[NameE], [Note]) VALUES (N'7e7ee1f8-3a55-4ba7-bb34-bcbecd1b3ec0',3,N'هونداي',N'Hyundai',N'-----------')");
                    db.ExecuteCommand("INSERT [dbo].[T_CarTyp] ([CarTyp_ID], [CarTyp_No], [NameA],[NameE], [Note]) VALUES (N'4a0543b5-56f2-4e32-8dad-f79d8ffe8896',4,N'تويوتا',N'Toyota',N'-----------')");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_Cars]    Script Date: 08/16/2014 07:59:09 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Cars](\r\n\t                                    [Car_ID] [varchar](40) NOT NULL,\r\n\t                                    [Car_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](50) NULL,\r\n\t                                    [NameE] [varchar](50) NULL,\r\n\t                                    [Model] [varchar](20) NULL,\r\n\t                                    [PlateNo] [varchar](20) NULL,\r\n\t                                    [Color] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [CarType] [int] NULL,\r\n\t                                    [FormNo] [varchar](20) NULL,\r\n\t                                    [FormBeginDate] [varchar](20) NULL,\r\n\t                                    [FormEndDate] [varchar](20) NULL,\r\n\t                                    [AllownceNo] [varchar](20) NULL,\r\n\t                                    [AllownceBeginDate] [varchar](20) NULL,\r\n\t                                    [AllownceEndDate] [varchar](20) NULL,\r\n\t                                    [AllownceName] [varchar](40) NULL,\r\n\t                                    [PlayCardNo] [varchar](20) NULL,\r\n\t                                    [PlayCardBeginDate] [varchar](20) NULL,\r\n\t                                    [PlayCardEndDate] [varchar](20) NULL,\r\n                                     CONSTRAINT [PK_T_Cars] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Car_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n\r\n                                    SET ANSI_PADDING OFF ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Cars_T_CarTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Cars]'))\r\n                                    ALTER TABLE [dbo].[T_Cars]  WITH CHECK ADD  CONSTRAINT [FK_T_Cars_T_CarTyp] FOREIGN KEY([CarType])\r\n                                    REFERENCES [dbo].[T_CarTyp] ([CarTyp_No])\r\n                                    IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_Cars_T_CarTyp]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_Cars]'))\r\n                                    ALTER TABLE [dbo].[T_Cars] CHECK CONSTRAINT [FK_T_Cars_T_CarTyp]\r\n                                     ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER function [dbo].[get_date]()\r\n                                    returns VARCHAR(10)\r\n                                    as\r\n                                    begin\r\n                                    DECLARE @GETDATE AS DATETIME = GETDATE()\r\n                                    return  CONVERT(VARCHAR(4),DATEPART(YEAR, @GETDATE)) \r\n                                    + '/'+ CONVERT(VARCHAR(2),DATEPART(MONTH, @GETDATE)) \r\n                                    + '/' + CONVERT(VARCHAR(2),DATEPART(DAY, @GETDATE)) end");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_SecretariatsTyp]    Script Date: 08/16/2014 03:49:23 ******/\r\n                                SET ANSI_NULLS ON\r\n                                SET QUOTED_IDENTIFIER ON\r\n                                SET ANSI_PADDING ON\r\n                                CREATE TABLE [dbo].[T_SecretariatsTyp](\r\n\t                                               [SecretariatTyp_ID] [varchar](40) NOT NULL,\r\n\t                                               [SecretariatTyp_No] [int] NOT NULL,\r\n\t                                               [NameA] [varchar](50) NULL,\r\n\t                                               [NameE] [varchar](50) NULL,\r\n\t                                               [Note] [varchar](250) NULL,\r\n                                                 CONSTRAINT [PK_T_SecretariatsTyp] PRIMARY KEY CLUSTERED \r\n                                                (\r\n\t                                                [SecretariatTyp_No] ASC\r\n                                                )   WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                                )   ON [PRIMARY]\r\n                                SET ANSI_PADDING OFF\r\n                                ");
                    db.ExecuteCommand("INSERT [dbo].[T_SecretariatsTyp] ([SecretariatTyp_ID], [SecretariatTyp_No], [NameA],[NameE], [Note]) VALUES (N'4ffa2a1e-2c92-4602-96e8-33913bc94aad',1,N'معدات كهربائية',N'Electrical Equipment',N'مروحة + اسلاك + مسامير + جهاز قياس التيار الكهربائي')");
                    db.ExecuteCommand("INSERT [dbo].[T_SecretariatsTyp] ([SecretariatTyp_ID], [SecretariatTyp_No], [NameA],[NameE], [Note]) VALUES (N'd5de0711-a330-4c76-8a66-56ee2bc547ac',2,N'هاتف محمول',N'Mobile',N'جوال ايفون 5 + شريحة بيانات')");
                    db.ExecuteCommand("INSERT [dbo].[T_SecretariatsTyp] ([SecretariatTyp_ID], [SecretariatTyp_No], [NameA],[NameE], [Note]) VALUES (N'48c1f772-101b-4492-88dd-dd57b4c49ccd',3,N'صندوق العمل',N'Job Box',N'مكينة حلاقة + موس الحلاقة + معجون الحلاقة')");
                    db.ExecuteCommand("INSERT [dbo].[T_SecretariatsTyp] ([SecretariatTyp_ID], [SecretariatTyp_No], [NameA],[NameE], [Note]) VALUES (N'ea779b85-aceb-4a18-afe9-44660661e657',4,N'ادوات تشطيب',N'Finishing Tools',N'فرشة التلوين ( بوية) + دريل + مطرقة + مفك')");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_Secretariats]    Script Date: 08/16/2014 07:59:09 ******/\r\n                                     SET ANSI_NULLS ON\r\n                                     SET QUOTED_IDENTIFIER ON\r\n                                     SET ANSI_PADDING ON\r\n                                     CREATE TABLE [dbo].[T_Secretariats](\r\n\t                                                    [Secretariats_ID] [varchar](40) NOT NULL,\r\n\t                                                    [warnNo] [int] NOT NULL,\r\n\t                                                    [EmpID] [varchar](40) NULL,\r\n\t                                                    [warnDate] [varchar](10) NULL,\r\n\t                                                    [StartDate] [varchar](10) NULL,\r\n\t                                                    [EndDate] [varchar](10) NULL,\r\n\t                                                    [SecretariatsTyp] [int] NULL,\r\n\t                                                    [Note] [varchar](250) NULL,\r\n\t                                                    [IFState] [bit] NULL,\r\n                                                    CONSTRAINT [PK_T_Secretariats] PRIMARY KEY CLUSTERED \r\n                                                    (\r\n\t                                                [warnNo] ASC\r\n                                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                                    ) ON [PRIMARY]\r\n                                                    SET ANSI_PADDING OFF\r\n                                                    ALTER TABLE [dbo].[T_Secretariats]  WITH CHECK ADD  CONSTRAINT [FK_T_Secretariats_T_Emp] FOREIGN KEY([EmpID])\r\n                                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                                    ALTER TABLE [dbo].[T_Secretariats] CHECK CONSTRAINT [FK_T_Secretariats_T_Emp]\r\n                                                    ALTER TABLE [dbo].[T_Secretariats]  WITH CHECK ADD  CONSTRAINT [FK_T_Secretariats_T_SecretariatsTyp] FOREIGN KEY([SecretariatsTyp])\r\n                                                    REFERENCES [dbo].[T_SecretariatsTyp] ([SecretariatTyp_No])\r\n                                                    ALTER TABLE [dbo].[T_Secretariats] CHECK CONSTRAINT [FK_T_Secretariats_T_SecretariatsTyp]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [WorkNo] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [VisaNo] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [VisaEnterNo] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [VisaDate] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [VisaCountry] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [CostCenterEmp] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [CostCenterEmp] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [BankBR] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_VisaGoBack](\r\n\t                                    [Visa_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [VisaNo] [varchar](40) NULL,\r\n\t                                    [VisaPlace] [varchar](40) NULL,\r\n\t                                    [VisaBeginDate] [varchar](20) NULL,\r\n\t                                    [VisaEndDate] [varchar](20) NULL,\r\n\t                                    [DateGo] [varchar](20) NULL,\r\n\t                                    [DateBack] [varchar](20) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_VisaGoBack] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_VisaGoBack]  WITH CHECK ADD  CONSTRAINT [FK_T_VisaGoBack_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    ALTER TABLE [dbo].[T_VisaGoBack] CHECK CONSTRAINT [FK_T_VisaGoBack_T_Emp]\r\n                                ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_VisaIntroduction](\r\n\t                                    [Visa_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [VisaNo] [varchar](40) NULL,\r\n\t                                    [VisaPlace] [varchar](40) NULL,\r\n\t                                    [VisaBeginDate] [varchar](20) NULL,\r\n\t                                    [VisaEndDate] [varchar](20) NULL,\r\n\t                                    [DateGo] [varchar](20) NULL,\r\n\t                                    [DateBack] [varchar](20) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_VisaIntroduction] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_VisaIntroduction]  WITH CHECK ADD  CONSTRAINT [FK_T_VisaIntroduction_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    ALTER TABLE [dbo].[T_VisaIntroduction] CHECK CONSTRAINT [FK_T_VisaIntroduction_T_Emp]\r\n                                ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Cars ADD  [CompanyID] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("Update [dbo].[T_Cars] Set [CompanyID] = 1");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD  [AllownceNo] [varchar](20) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Dept] Set [AllownceNo] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD  [AllownceBeginDate] [varchar](20) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Dept] Set [AllownceBeginDate] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD  [AllownceEndDate] [varchar](20) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Dept] Set [AllownceEndDate] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD  [ZakaaNo] [varchar](20) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Dept] Set [ZakaaNo] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD  [ZakaaBeginDate] [varchar](20) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Dept] Set [ZakaaBeginDate] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Dept ADD [ZakaaEndDate1] [varchar](20) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Dept] Set [ZakaaEndDate1] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_AttendOperat ADD  [Usr_No] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_AttendOperat ADD  [DateEdit] [varchar](10) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Cars ADD  [EmpID] [varchar](40) NULL");
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Cars]  WITH CHECK ADD  CONSTRAINT [FK_T_Cars_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    ALTER TABLE [dbo].[T_Cars] CHECK CONSTRAINT [FK_T_Cars_T_Emp]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object: Table [dbo].[T_Project]    Script Date: 02/13/2016 11:17:26 ******/\r\n                                                    SET ANSI_NULLS ON\r\n                                                    SET QUOTED_IDENTIFIER ON\r\n                                                    SET ANSI_PADDING ON\r\n                                                    CREATE TABLE [dbo].[T_Project](\r\n\t                                                    [Project_ID] [varchar](40) NOT NULL,\r\n\t                                                    [Project_No] [int] NOT NULL,\r\n\t                                                    [NameA] [varchar](30) NULL,\r\n\t                                                    [NameE] [varchar](30) NULL,\r\n\t                                                    [Note] [varchar](250) NULL,\r\n\t                                                    [BossName] [varchar](30) NULL,\r\n\t                                                    [Phone] [varchar](15) NULL,\r\n\t                                                    [Fax] [varchar](15) NULL,\r\n                                                     CONSTRAINT [PK_T_Project] PRIMARY KEY CLUSTERED \r\n                                                    (\r\n\t                                                    [Project_No] ASC\r\n                                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                                    ) ON [PRIMARY]\r\n                                                    SET ANSI_PADDING OFF");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [ProjectNo] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_AttendOperat ADD  [ProjectNo] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_Project] FOREIGN KEY([ProjectNo])\r\n                                    REFERENCES [dbo].[T_Project] ([Project_No])\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Project]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_AttendOperat]  WITH CHECK ADD  CONSTRAINT [FK_T_AttendOperat_T_Project] FOREIGN KEY([ProjectNo])\r\n                                    REFERENCES [dbo].[T_Project] ([Project_No])\r\n                                    ALTER TABLE [dbo].[T_AttendOperat] CHECK CONSTRAINT [FK_T_AttendOperat_T_Project]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_TransEmployee]    Script Date: 02/27/2016 12:35:44 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_TransEmployee](\r\n\t                                    [Trans_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [DateFrom] [varchar](10) NULL,\r\n\t                                    [DateTo] [varchar](10) NULL,\r\n\t                                    [BranchFrom] [int] NULL,\r\n\t                                    [BranchTo] [int] NULL,\r\n\t                                    [Usr_No] [int] NULL,\r\n\t                                    [Usr_NoEdite] [int] NULL,\r\n\t                                    [DateEdit] [varchar](10) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [TransTyp] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_TransEmployee] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_TransEmployee]  WITH CHECK ADD  CONSTRAINT [FK_T_TransEmployee_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    ALTER TABLE [dbo].[T_TransEmployee] CHECK CONSTRAINT [FK_T_TransEmployee_T_Emp]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [Insurance_Name] [varchar](100) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Emp] Set [Insurance_Name] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [InsuranceNo] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_Insurance]    Script Date: 03/15/2016 11:08:53 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Insurance](\r\n\t                                    [Insurance_ID] [varchar](40) NOT NULL,\r\n\t                                    [Insurance_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_Insurance] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Insurance_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF");
                    db.ExecuteCommand("INSERT INTO [T_Insurance]\r\n                                       ([Insurance_ID]\r\n                                       ,[Insurance_No]\r\n                                       ,[NameA]\r\n                                       ,[NameE]\r\n                                       ,[Note])\r\n                                 VALUES\r\n                                       ('5ccc3b97-79e1-406c-8604-89e612e544aa'\r\n                                       ,1\r\n                                       ,'بوبا'\r\n                                       ,'bupa'\r\n                                   ,'------')");
                    db.ExecuteCommand("INSERT INTO [T_Insurance]\r\n                                       ([Insurance_ID]\r\n                                       ,[Insurance_No]\r\n                                       ,[NameA]\r\n                                       ,[NameE]\r\n                                       ,[Note])\r\n                                 VALUES\r\n                                       ('0475b5ea-92ff-4604-88d4-965c16840017'\r\n                                       ,2\r\n                                       ,'التعاونية'\r\n                                       ,'AL-Tawniya'\r\n                                   ,'------')");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [SocialInsuranceDate] [varchar](10) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Emp] Set [SocialInsuranceDate] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [ExclusionDate] [varchar](10) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Emp] Set [ExclusionDate] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_EndService ADD  [ExclusionDt] [varchar](10) NULL");
                    db.ExecuteCommand("Update [dbo].[T_EndService] Set [ExclusionDt] = '' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_VacTyp ADD  [Dis_Sal_Sts] [int] NULL");
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_VacTyp] ADD  CONSTRAINT [DF_T_VacTyp_Dis_Sal_Sts]  DEFAULT ((0)) FOR [Dis_Sal_Sts]");
                    db.ExecuteCommand("Update [dbo].[T_VacTyp] Set [Dis_Sal_Sts] = 0 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Emp ADD  [Boss] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_Boss]    Script Date: 03/18/2016 04:18:48 ******/\r\n                                SET ANSI_NULLS ON\r\n                                SET QUOTED_IDENTIFIER ON\r\n                                SET ANSI_PADDING ON\r\n                                CREATE TABLE [dbo].[T_Boss](\r\n\t                                [Boss_ID] [varchar](40) NOT NULL,\r\n\t                                [Boss_No] [int] NOT NULL,\r\n\t                                [NameA] [varchar](30) NULL,\r\n\t                                [NameE] [varchar](30) NULL,\r\n\t                                [Note] [varchar](250) NULL,\r\n                                 CONSTRAINT [PK_T_Boss] PRIMARY KEY CLUSTERED \r\n                                (\r\n\t                                [Boss_No] ASC\r\n                                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                ) ON [PRIMARY]\r\n                                SET ANSI_PADDING OFF");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_AccDef_AccountID] FOREIGN KEY([AccountID])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_AccDef_AccountID]\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_AccDef_BankBR] FOREIGN KEY([BankBR])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_AccDef_BankBR]\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_AccDef_HousAcc] FOREIGN KEY([HouseAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_AccDef_HousAcc]\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_AccDef_LoanAcc] FOREIGN KEY([LoanAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_AccDef_LoanAcc]\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_AccDef_SalAcc] FOREIGN KEY([SalAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_AccDef_SalAcc]\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_Contract]\r\n                                    ALTER TABLE [dbo].[T_Emp]  WITH CHECK ADD  CONSTRAINT [FK_T_Emp_T_CstTbl] FOREIGN KEY([CostCenterEmp])\r\n                                    REFERENCES [dbo].[T_CstTbl] ([Cst_ID])\r\n                                    ALTER TABLE [dbo].[T_Emp] CHECK CONSTRAINT [FK_T_Emp_T_CstTbl]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_AccDef_AccountNo] FOREIGN KEY([AccountNo])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_AccDef_AccountNo]\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_AccDef_BankBr] FOREIGN KEY([BankBR])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_AccDef_BankBr]\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_AccDef_HousAcc] FOREIGN KEY([HouseAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_AccDef_HousAcc]\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_AccDef_LoanAcc] FOREIGN KEY([LoanAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_AccDef_LoanAcc]\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_AccDef_SalAcc] FOREIGN KEY([SalAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_AccDef_SalAcc]\r\n                                    ALTER TABLE [dbo].[T_Salary]  WITH CHECK ADD  CONSTRAINT [FK_T_Salary_T_CstTbl] FOREIGN KEY([CostCenterEmp])\r\n                                    REFERENCES [dbo].[T_CstTbl] ([Cst_ID])\r\n                                    ALTER TABLE [dbo].[T_Salary] CHECK CONSTRAINT [FK_T_Salary_T_CstTbl]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Advances ADD  [AccountID] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Advances ADD  [BankBR] [varchar](30) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Advances ADD  [CostCenterEmp] [int] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Advances]  WITH CHECK ADD  CONSTRAINT [FK_T_Advances_T_AccDef_AccountID] FOREIGN KEY([AccountID])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Advances] CHECK CONSTRAINT [FK_T_Advances_T_AccDef_AccountID]\r\n                                    ALTER TABLE [dbo].[T_Advances]  WITH CHECK ADD  CONSTRAINT [FK_T_Advances_T_AccDef_BankBR] FOREIGN KEY([BankBR])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Advances] CHECK CONSTRAINT [FK_T_Advances_T_AccDef_BankBR]\r\n                                    ALTER TABLE [dbo].[T_Advances]  WITH CHECK ADD  CONSTRAINT [FK_T_Advances_T_AccDef_LoanAcc] FOREIGN KEY([LoanAcc])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Advances] CHECK CONSTRAINT [FK_T_Advances_T_AccDef_LoanAcc]\r\n                                    ALTER TABLE [dbo].[T_Advances]  WITH CHECK ADD  CONSTRAINT [FK_T_Advances_T_CstTbl] FOREIGN KEY([CostCenterEmp])\r\n                                    REFERENCES [dbo].[T_CstTbl] ([Cst_ID])\r\n                                    ALTER TABLE [dbo].[T_Advances] CHECK CONSTRAINT [FK_T_Advances_T_CstTbl]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_CallPhone]    Script Date: 03/27/2016 15:14:35 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_CallPhone](\r\n\t                                    [Phone_ID] [varchar](40) NOT NULL,\r\n\t                                    [Phone_No] [int] NOT NULL,\r\n\t                                    [PhoneDate] [varchar](10) NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [SalDate] [varchar](10) NULL,\r\n\t                                    [PhoneValue] [float] NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_CallPhone] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Phone_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_CallPhone]  WITH CHECK ADD  CONSTRAINT [FK_T_CallPhone_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    ALTER TABLE [dbo].[T_CallPhone] CHECK CONSTRAINT [FK_T_CallPhone_T_Emp]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_VisaGoBack ADD  [CountDay] [int] NULL");
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_VisaGoBack] ADD  CONSTRAINT [DF_T_VisaGoBack_CountDay]  DEFAULT ((0)) FOR [CountDay]");
                    db.ExecuteCommand("Update [dbo].[T_VisaGoBack] Set [CountDay] = 0 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_VisaGoBack ADD  [PlaceGo] [varchar](150) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_VisaGoBack ADD  [PlaceBack] [varchar](150) NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Advances ADD  [AutoDisFromSalary] [bit] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Advances ADD  [AccID]  [bit] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Advances ADD  [GadeId] [float] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [AccID]  [bit] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Salary ADD  [GadeId] [float] NULL");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_SalaryOp]    Script Date: 04/14/2016 12:25:58 ******/\r\n                                            SET ANSI_NULLS ON\r\n                                            SET QUOTED_IDENTIFIER ON\r\n                                            SET ANSI_PADDING ON\r\n                                            CREATE TABLE [dbo].[T_SalaryOp](\r\n\t                                            [SalaryOp_ID] [varchar](40) NOT NULL,\r\n\t                                            [warnNo] [int] NOT NULL,\r\n\t                                            [EmpID] [varchar](40) NULL,\r\n\t                                            [warnDate] [varchar](10) NULL,\r\n\t                                            [opTyp] [int] NULL,\r\n\t                                            [opMethod] [int] NULL,\r\n\t                                            [AddTo] [int] NULL,\r\n\t                                            [opCalc] [int] NULL,\r\n\t                                            [AddValue] [float] NULL,\r\n\t                                            [Usr_No] [int] NULL,\r\n\t                                            [Usr_NoEdite] [int] NULL,\r\n\t                                            [DateEdit] [varchar](10) NULL,\r\n\t                                            [Note] [varchar](250) NULL,\r\n\t                                            [ValueBefor] [float] NULL,\r\n\t                                            [ValueAfter] [float] NULL,\r\n                                             CONSTRAINT [PK_T_SalaryOp] PRIMARY KEY CLUSTERED \r\n                                            (\r\n\t                                            [warnNo] ASC\r\n                                            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                            ) ON [PRIMARY]\r\n                                            SET ANSI_PADDING OFF\r\n                                            ALTER TABLE [dbo].[T_SalaryOp]  WITH CHECK ADD  CONSTRAINT [FK_T_SalaryOp_T_Emp] FOREIGN KEY([EmpID])\r\n                                            REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                            ALTER TABLE [dbo].[T_SalaryOp] CHECK CONSTRAINT [FK_T_SalaryOp_T_Emp]\r\n                                            ALTER TABLE [dbo].[T_SalaryOp]  WITH CHECK ADD  CONSTRAINT [FK_T_SalaryOp_T_OpMethod] FOREIGN KEY([opCalc])\r\n                                            REFERENCES [dbo].[T_OpMethod] ([Method_No])\r\n                                            ALTER TABLE [dbo].[T_SalaryOp] CHECK CONSTRAINT [FK_T_SalaryOp_T_OpMethod]\r\n                                            ALTER TABLE [dbo].[T_SalaryOp]  WITH CHECK ADD  CONSTRAINT [FK_T_SalaryOp_T_OpMethod1] FOREIGN KEY([AddTo])\r\n                                            REFERENCES [dbo].[T_OpMethod] ([Method_No])\r\n                                            ALTER TABLE [dbo].[T_SalaryOp] CHECK CONSTRAINT [FK_T_SalaryOp_T_OpMethod1]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object: Table [dbo].[T_UpdateDoc]    Script Date: 04/14/2016 08:12:40 ******/\r\n                                                    SET ANSI_NULLS ON\r\n                                                    SET QUOTED_IDENTIFIER ON\r\n                                                    SET ANSI_PADDING ON\r\n                                                    CREATE TABLE [dbo].[T_UpdateDoc](\r\n\t                                                    [UpdateDoc_ID] [varchar](40) NOT NULL,\r\n\t                                                    [warnNo] [int] NOT NULL,\r\n\t                                                    [EmpID] [varchar](40) NULL,\r\n\t                                                    [warnDate] [varchar](10) NULL,\r\n\t                                                    [Usr_No] [int] NULL,\r\n\t                                                    [Usr_NoEdite] [int] NULL,\r\n\t                                                    [DateEdit] [varchar](10) NULL,\r\n\t                                                    [Note] [varchar](250) NULL,\r\n\t                                                    [BeginDateBefor] [varchar](10) NULL,\r\n\t                                                    [BeginDateAfter] [varchar](10) NULL,\r\n\t                                                    [EndDateBefor] [varchar](10) NULL,\r\n\t                                                    [EndDateAfter] [varchar](10) NULL,\r\n\t                                                    [DocNo] [varchar](15) NULL,\r\n\t                                                    [DocFrom] [int] NULL,\r\n\t                                                    [Insurance_NameBefor] [varchar](100) NULL,\r\n\t                                                    [InsuranceNoBefor] [int] NULL,\r\n\t                                                    [Insurance_NameAfter] [varchar](100) NULL,\r\n\t                                                    [InsuranceNoAfter] [int] NULL,\r\n\t                                                    [DocTyp] [int] NULL,\r\n\t                                                    [DocNoAfter] [varchar](15) NULL,\r\n\t                                                    [DocFromAfter] [int] NULL,\r\n                                                     CONSTRAINT [PK_T_UpdateDoc] PRIMARY KEY CLUSTERED \r\n                                                    (\r\n\t                                                    [warnNo] ASC\r\n                                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                                    ) ON [PRIMARY]\r\n                                                    SET ANSI_PADDING OFF\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc]  WITH CHECK ADD  CONSTRAINT [FK_T_UpdateDoc_T_City] FOREIGN KEY([DocFrom])\r\n                                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc] CHECK CONSTRAINT [FK_T_UpdateDoc_T_City]\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc]  WITH CHECK ADD  CONSTRAINT [FK_T_UpdateDoc_T_City_After] FOREIGN KEY([DocFromAfter])\r\n                                                    REFERENCES [dbo].[T_City] ([City_No])\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc] CHECK CONSTRAINT [FK_T_UpdateDoc_T_City_After]\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc]  WITH CHECK ADD  CONSTRAINT [FK_T_UpdateDoc_T_Emp] FOREIGN KEY([EmpID])\r\n                                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc] CHECK CONSTRAINT [FK_T_UpdateDoc_T_Emp]\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc]  WITH CHECK ADD  CONSTRAINT [FK_T_UpdateDoc_T_Insurance_After] FOREIGN KEY([InsuranceNoAfter])\r\n                                                    REFERENCES [dbo].[T_Insurance] ([Insurance_No])\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc] CHECK CONSTRAINT [FK_T_UpdateDoc_T_Insurance_After]\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc]  WITH CHECK ADD  CONSTRAINT [FK_T_UpdateDoc_T_Insurance_Befor] FOREIGN KEY([InsuranceNoBefor])\r\n                                                    REFERENCES [dbo].[T_Insurance] ([Insurance_No])\r\n                                                    ALTER TABLE [dbo].[T_UpdateDoc] CHECK CONSTRAINT [FK_T_UpdateDoc_T_Insurance_Befor]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_treatment]    Script Date: 04/24/2016 06:17:48 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_treatment](\r\n\t                                    [treatment_ID] [varchar](40) NOT NULL,\r\n\t                                    [treatment_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](100) NULL,\r\n\t                                    [NameE] [varchar](100) NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n                                     CONSTRAINT [PK_T_treatment] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [treatment_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'e762c504-f115-4e05-9191-6b82a6f7c569', 1, N'نقل كفالة مؤسسات', N'Ensure the transfer of institu', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'aa2badfa-99ce-448b-9fd3-9a83d0d63446', 2, N'نقل كفالة افراد', N'Ensure the transfer of personn', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'ebdf0a93-703f-4779-8952-be4f6215a796', 3, N'نقل خدمات العمال (الكفالات)', N'Transport workers'' services (g', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'd9e8126b-6529-4bd8-87ce-54c20c60d96e', 4, N'معلومات (إثبات رقم الجواز الجديد بالحاسب)', N'Information (No. prove the new passport to the computer)', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'a7f2ff6e-69ce-4a50-82cd-8a67830516f0', 5, N'فتح محل للمنشأة لدى مكتب العمل', N'Opening of the facility ', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'c9870ff2-c99d-4843-b3fc-22cb7e5de148', 6, N'فتح الملف بنظام الحاسب لآلي الجديد (الرقم الموحد)', N'Open the file new automated computer system (uniform number)', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'8250c48b-8821-4228-a704-a0746e2c8b00', 7, N'طلب تأشيرات الزيارة', N'Request visas', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'ec1c1162-88cc-4fe2-812e-2691fe74bb6e', 8, N'تغير مهنة', N'change occupation', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'137104e5-2d3c-4232-b148-ad8d921e1c21', 9, N'تعليمات عن الشخص المتوفى بالنسبة - للأفراد والمؤسسات ', N'Instructions for the deceased person for - for individuals and institutions.', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'bc84a1a8-a5de-4c08-8c83-743bf3199162', 10, N'تعديل مهنة', N'Amendment profession', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'36f428e0-392f-41c1-909c-0e01af275df0', 11, N'تجديد دفتر الإقامة', N'Book accommodation renewal', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'28d2f42b-6eaa-43a4-b9d4-3937b486b943', 12, N'تأشيرة خروج وعودة', N'Exit and return visa', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'0a4c35dc-711c-4357-a5a3-8754cd483d26', 13, N'إلغاء بلاغ', N'Cancellation author', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'29abadc3-e647-4481-9833-b307ced49b66', 14, N'الحصول على جواز السفر السعودي', N'Get the Saudi passport', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'547dabf2-f2f7-40c4-912c-494313ba4a39', 15, N'التبليغ عن الهروب الداخلي(للمؤسسات والشركات )', N'Report internal flight (for institutions and companies)', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'94ba1ed1-c845-4846-8c1e-9196c91396f8', 16, N'التبليغ عن الهروب الداخلي (للأفراد)', N'Report internal flight (for individuals)', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'51670f93-6f48-4e9b-b93e-2832b05f0601', 17, N'التبليغ عن الهروب الخارجي للمؤسسات - خروج وعودة', N'Report external Escape institutions - out and back', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'86018217-8135-43bb-9e7d-b3c15c382a90', 18, N'التبليغ عن الهروب الخارجي (للأفراد (خروج وعودة ))', N'Report external escape (for individuals (out and back))', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'79d3b7c8-69a5-4b4e-9b81-c7f316f2d6e2', 19, N'الإعارة للعمالة المنزلية (الخادم -السائق-الحارس)', N'Circulation domestic workers (server -alsaiq-Sentinel)', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'e0705ad8-a640-44fb-963b-ba2fda9c7d28', 20, N'استقدام زوجة', N'Recruitment wife', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'2296ada4-b351-4a7f-a18b-e2e1110bb718', 21, N'استقدام', N'Recruitment', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'ae05fc69-22f6-438c-af1e-afa1c9b3ccd3', 22, N'استخراج رخصة عمل', N'Extraction work permit', N'')");
                    db.ExecuteCommand("INSERT [dbo].[T_treatment] ([treatment_ID], [treatment_No], [NameA], [NameE], [Note]) VALUES (N'f64b18a8-484b-464a-86d9-a71595a15e87', 23, N'إستخراج دفتر إقامة جديد', N'The extraction of a new residence Book', N'')");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_Commentary]    Script Date: 04/24/2016 06:19:21 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Commentary](\r\n\t                                    [Commentary_ID] [varchar](40) NOT NULL,\r\n\t                                    [warnNo] [int] NOT NULL,\r\n\t                                    [EmpID] [varchar](40) NULL,\r\n\t                                    [warnDate] [varchar](10) NULL,\r\n\t                                    [SalDate] [varchar](10) NULL,\r\n\t                                    [Value] [float] NULL,\r\n\t                                    [Note] [varchar](250) NULL,\r\n\t                                    [IFState] [bit] NULL,\r\n\t                                    [treatmentNo] [int] NULL,\r\n                                        [CommentaryName] [varchar](40) NULL,\r\n                                     CONSTRAINT [PK_T_Commentary] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [warnNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_Commentary]  WITH CHECK ADD  CONSTRAINT [FK_T_Commentary_T_Emp] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                    ALTER TABLE [dbo].[T_Commentary] CHECK CONSTRAINT [FK_T_Commentary_T_Emp]\r\n                                    ALTER TABLE [dbo].[T_Commentary]  WITH CHECK ADD  CONSTRAINT [FK_T_Commentary_T_treatment] FOREIGN KEY([treatmentNo])\r\n                                    REFERENCES [dbo].[T_treatment] ([treatment_No])\r\n                                    ALTER TABLE [dbo].[T_Commentary] CHECK CONSTRAINT [FK_T_Commentary_T_treatment]");
                }
                catch
                {
                }
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvAddCost] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvAddCost] = 0 where InvAddCost is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvAddCostLoc] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvAddCostLoc] = 0 where InvAddCostLoc is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvAddCostExtrnal] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvAddCostExtrnal] = 0 where InvAddCostExtrnal is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvAddCostExtrnalLoc] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvAddCostExtrnalLoc] = 0 where InvAddCostExtrnalLoc is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsExtrnalGaid] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsExtrnalGaid] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsExtrnalGaid] = 0 where IsExtrnalGaid is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [ExtrnalCostGaidID] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [ExtrnalCostGaidID] = 0 where ExtrnalCostGaidID is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVDET ADD  [ItmAddCost] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVDET] Set [ItmAddCost] = 0 where ItmAddCost is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [Puyaid] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [Puyaid] = 0 where Puyaid is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [Remming] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [Remming] = 0 where Remming is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [smsUserName] [varchar](500) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [smsUserName] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [smsPass] [varchar](500) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [smsPass] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [smsSenderName] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [smsSenderName] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [smsMessage1] [varchar](500) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [smsMessage1] = 'أهلا وسهلا بكم عملائنا الأعزاء' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [smsMessage2] [varchar](500) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [smsMessage2] = 'شكرا لزيارتنا' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [smsMessage3] [varchar](500) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [smsMessage3] = 'نتمنى لكم أوقات سعيدة' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [smsMessage4] [varchar](500) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [smsMessage4] = 'كل عام وانتم بخير' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Mobile] = '' Where Mobile is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("DELETE FROM [dbo].[T_AccDef] WHERE AccDef_ID=23 and AccDef_No='1020002'");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [SerialKey] [varchar](100) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_Items] Set [SerialKey] = '' where SerialKey = '' or SerialKey is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_QTYEXP ADD  [RunCod] [varchar](100) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_QTYEXP] Set [RunCod] = '' where RunCod = '' or RunCod is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVDET ADD  [RunCod] [varchar](100) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVDET] Set [RunCod] = '' where RunCod = '' or RunCod is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_SYSSETTING alter column Seting nchar(100)");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("DELETE FROM T_Info");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set IfPrint = 1  Where IfPrint is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set IfTrans = 0  Where IfTrans is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AccCusDes] = '' WHERE [AccCusDes] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AccSupDes] = '' WHERE [AccSupDes] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_AccDef alter column Mnd [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Mnd] = null WHERE [Mnd] = ''");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_INVHED alter column Remark [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_GDHEAD alter column gdMem [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_GDDET alter column gdDes [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [StopInvTyp] [int] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [DateAppointment] varchar(10) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [DateAppointment] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [ID_Date] varchar(10) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ID_Date] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [ID_DateEnd] varchar(10) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ID_DateEnd] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [Passport_Date] varchar(10) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Passport_DateEnd] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [Insurance_Date] varchar(10) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Insurance_DateEnd] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [Passport_DateEnd] varchar(10) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Passport_DateEnd] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [Insurance_DateEnd] varchar(10) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Insurance_DateEnd] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [ID_No] varchar(15) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ID_No] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [Passport_No] varchar(15) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Passport_No] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [Insurance_No] varchar(15) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Insurance_No] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [ID_From] varchar(50) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ID_From] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [Passport_From] varchar(50) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Passport_From] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [Insurance_From] varchar(50) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Insurance_From] = ''");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD [MainSal] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [MainSal] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [BankComm] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [BankComm] = 0");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [BankComm] = 0.008 where lev=4 and AccCat = 3");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [BankComm] = 0 WHERE [BankComm] is null or [BankComm] = ''");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [TaxNo] [varchar](50) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [TaxNo] = ''");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [TotPoints] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [TotPoints] = 0 WHERE [TotPoints] is null or [TotPoints] = ''");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [MaxDisCust] [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [vColNum1] [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [vColNum2] [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [vColStr1] [varchar](250) NULL");
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [vColStr2] [varchar](250) NULL");
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [vColStr3] [varchar](250) NULL");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [MaxDisCust] = 0");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColNum1] = 0 ");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColNum2] = 0 ");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColStr1] = '' ");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColStr2] = '' ");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColStr3] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE [dbo].[T_AccDef]  WITH CHECK ADD  CONSTRAINT [FK_T_AccDef_T_Mndob] FOREIGN KEY([Mnd])\r\n                                    REFERENCES [dbo].[T_Mndob] ([Mnd_ID])\r\n                                    ALTER TABLE [dbo].[T_AccDef] CHECK CONSTRAINT [FK_T_AccDef_T_Mndob]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Sal](\r\n\t                                    [SalaryID] [varchar](40) NOT NULL,\r\n\t                                    [EmpID] [varchar](30) NOT NULL,\r\n\t                                    [SalMonth] [int] NULL,\r\n\t                                    [SalYear] [int] NULL,\r\n\t                                    [DirBoss] [int] NULL,\r\n\t                                    [DeptNo] [int] NULL,\r\n\t                                    [Job] [int] NULL,\r\n\t                                    [Salary] [float] NULL,\r\n\t                                    [HousingAllowance] [float] NULL,\r\n\t                                    [TransferAllowance] [float] NULL,\r\n\t                                    [OtherAllowance] [float] NULL,\r\n\t                                    [SubDay] [float] NULL,\r\n\t                                    [LateHours] [float] NULL,\r\n\t                                    [SubJaza] [float] NULL,\r\n\t                                    [SubOther] [float] NULL,\r\n\t                                    [MandateDay] [float] NULL,\r\n\t                                    [SocialInsuranceComp] [float] NULL,\r\n\t                                    [SocialInsurance] [float] NULL,\r\n\t                                    [InsuranceMedicalCom] [float] NULL,\r\n\t                                    [InsuranceMedical] [float] NULL,\r\n\t                                    [Advance] [float] NULL,\r\n\t                                    [Rewards] [float] NULL,\r\n\t                                    [Bank] [int] NULL,\r\n\t                                    [AccountNo] [varchar](30) NULL,\r\n\t                                    [SalaryStatus] [bit] NULL,\r\n\t                                    [IsPrint] [bit] NULL,\r\n\t                                    [SalSpell] [varchar](max) NULL,\r\n\t                                    [AddDay] [float] NULL,\r\n\t                                    [AddHour] [float] NULL,\r\n\t                                    [SectionNo] [int] NULL,\r\n\t                                    [SalAcc] [varchar](30) NULL,\r\n\t                                    [SubCallPhone] [float] NULL,\r\n\t                                    [SubCommentary] [float] NULL,\r\n\t                                    [LoanAcc] [varchar](30) NULL,\r\n\t                                    [HouseAcc] [varchar](30) NULL,\r\n\t                                    [fGUID] [varchar](40) NULL,\r\n\t                                    [Total] [float] NULL,\r\n\t                                    [CostCenterEmp] [int] NULL,\r\n\t                                    [BankBR] [varchar](30) NULL,\r\n\t                                    [AccID] [bit] NULL,\r\n\t                                    [GadeId] [float] NULL,\r\n\t                                    [GadeId2] [float] NULL,\r\n                                     CONSTRAINT [PK_T_Sal] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [SalaryID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_Sal]  WITH CHECK ADD  CONSTRAINT [FK_T_Sal_T_AccDef] FOREIGN KEY([EmpID])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_Sal] CHECK CONSTRAINT [FK_T_Sal_T_AccDef]\r\n                                    ALTER TABLE [dbo].[T_Sal] ADD  CONSTRAINT [DF_T_Sal_SalaryStatus]  DEFAULT ((0)) FOR [SalaryStatus]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [AlarmEmployee] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmEmployee] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVDET ADD [LineDetails] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVDET] Set [LineDetails] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVDET] Set [LineDetails] = '' WHERE [LineDetails] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [LineDetailSts] varchar(100) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [LineDetailSts] = '0000000000000000000000000000' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [LineDetailNameA] varchar(30) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [LineDetailNameA] = 'تفاصيل أخرى' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [LineDetailNameE] varchar(30) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [LineDetailNameE] = 'Other Details' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [LineGiftSts] varchar(100) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [LineGiftSts] = '0000000000000000000000000000' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [LineGiftlNameA] varchar(30) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [LineGiftlNameA] = 'مكآفأة' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [LineGiftlNameE] varchar(30) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [LineGiftlNameE] = 'Gift' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Chauffeur](\r\n\t                                    [chauffeur_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [chauffeur_No] [varchar](30) NULL,\r\n\t                                    [Arb_Des] [varchar](100) NULL,\r\n\t                                    [Eng_Des] [varchar](100) NULL,\r\n\t                                    [chauffeurSts] [int] NULL,\r\n\t                                    [CompanyID] [int] NULL,\r\n                                     CONSTRAINT [PK_T_Driv] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [chauffeur_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF");
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_Rooms]    Script Date: 10/03/2016 14:15:43 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    CREATE TABLE [dbo].[T_Rooms](\r\n\t                                [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                [RomeNo] [int] NOT NULL,\r\n\t                                [RomeStatus] [bit] NULL,\r\n\t                                [Type] [int] NULL,\r\n                                 CONSTRAINT [PK_T_Rooms] PRIMARY KEY CLUSTERED \r\n                                (\r\n\t                                [ID] ASC\r\n                                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                ) ON [PRIMARY]");
                db.ExecuteCommand("INSERT [dbo].[T_Rooms] ( [RomeNo], [RomeStatus],[Type]) VALUES ( N'0', '0',0)");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [RoomNo] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [RoomNo] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [OrderTyp] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [OrderTyp] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [RoomSts] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [RoomSts] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [chauffeurNo] [int] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [RoomPerson] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [RoomPerson] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [ServiceValue] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [ServiceValue] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [Sts] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [Sts] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE [dbo].[T_INVHED]  WITH CHECK ADD  CONSTRAINT [FK_T_INVHED_T_Chauffeur] FOREIGN KEY([chauffeurNo])\r\n                                        REFERENCES [dbo].[T_Chauffeur] ([chauffeur_ID])\r\n                                        ALTER TABLE [dbo].[T_INVHED] CHECK CONSTRAINT [FK_T_INVHED_T_Chauffeur]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE [dbo].[T_INVHED]  WITH CHECK ADD  CONSTRAINT [FK_T_INVHED_T_Rooms] FOREIGN KEY([RoomNo])\r\n                                    REFERENCES [dbo].[T_Rooms] ([ID])\r\n                                    ALTER TABLE [dbo].[T_INVHED] CHECK CONSTRAINT [FK_T_INVHED_T_Rooms]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [TableFamily] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [TableFamily] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [TableBoys] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [TableBoys] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [TableExtrnal] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [TableExtrnal] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [TableOther] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [TableOther] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Rooms ADD  [Stop] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_Rooms] Set [Stop] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Rooms ADD  [reserved] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_Rooms] Set [reserved] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Rooms ADD  [chair] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_Rooms] Set [chair] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Rooms ADD  [Note] varchar(150) NULL");
                db.ExecuteCommand("Update [dbo].[T_Rooms] Set [Note] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Rooms ADD  [waiterNo] [int] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_Waiter]    Script Date: 10/30/2016 20:35:39 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Waiter](\r\n\t                                    [waiter_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [waiter_No] [varchar](30) NULL,\r\n\t                                    [Arb_Des] [varchar](100) NULL,\r\n\t                                    [Eng_Des] [varchar](100) NULL,\r\n\t                                    [CompanyID] [int] NULL,\r\n                                     CONSTRAINT [PK_T_Waiter] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [waiter_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n\r\n                                    SET ANSI_PADDING OFF");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE [dbo].[T_Rooms]  WITH CHECK ADD  CONSTRAINT [FK_T_Rooms_T_Waiter] FOREIGN KEY([waiterNo])\r\n                                    REFERENCES [dbo].[T_Waiter] ([waiter_ID])\r\n                                    ALTER TABLE [dbo].[T_Rooms] CHECK CONSTRAINT [FK_T_Rooms_T_Waiter]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set InvTypA4 = '0'  Where InvID = 22 and ( InvTypA4 = '' or InvTypA4 is null)");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [PaymentOrderTyp] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [PaymentOrderTyp] = 0");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [CusVenNo] = '',[CusVenNm] = '',[CusVenAdd] = '',[CusVenTel] = '' Where InvTyp = 17 or InvTyp = 20");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE dbo.T_StoreMnd ADD  [CusVenNo] varchar(30) NULL");
                db.ExecuteCommand("ALTER TABLE [dbo].[T_StoreMnd]  WITH CHECK ADD  CONSTRAINT [FK_T_StoreMnd_T_AccDef] FOREIGN KEY([CusVenNo])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_StoreMnd] CHECK CONSTRAINT [FK_T_StoreMnd_T_AccDef]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [AdminLock] [bit] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_GDHEAD ADD  [AdminLock] [bit] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [AdminLock] = 0 where AdminLock = '' or AdminLock is null");
                db.ExecuteCommand("Update [dbo].[T_GDHEAD] Set [AdminLock] = 0 where AdminLock = '' or AdminLock is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [EstDat] = '' where EstDat = '' or EstDat is null");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvCashPayNm] = '' where InvCashPayNm = '' or InvCashPayNm is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [nTyp_Setting] = '" + db.SystemSettingStock().nTyp_Setting.Trim() + "0' where nTyp_Setting = '0' or nTyp_Setting ='1' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'سند قبض                                           ' where InvID = 12 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'سند صرف                                           ' where InvID = 13 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [DeleteDate] varchar(10) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [DeleteDate] = ''  where DeleteDate is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [DeleteTime] varchar(10) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [DeleteTime] = '' where DeleteTime is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [UserNew] varchar(3) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [UserNew] = SalsManNo where UserNew is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [DepreciationPercent] [float] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [DepreciationPercent] = 0 where DepreciationPercent is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [ProofAcc] varchar(30) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ProofAcc] = ''  where ProofAcc is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_AccDef ADD  [RelayAcc] varchar(30) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [RelayAcc] = '' where RelayAcc is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_GDDET ADD  [gdDesE] [varchar](max) NULL");
                db.ExecuteCommand("Update [dbo].[T_GDDET] Set [gdDesE] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_GDDET] Set [gdDesE] = '' where gdDesE is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [StopedState] = 0 where [StopedState] is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_GDDET ADD  [AccNoDestruction] [varchar](30) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD [CatID] [int] NULL");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD [PrintCat] [bit] NULL");
                db.ExecuteCommand("ALTER TABLE [dbo].[T_INVSETTING] ADD  CONSTRAINT [DF_T_INVSETTING_PrintCat]  DEFAULT ((0)) FOR [PrintCat]");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [PrintCat] = 0 WHERE [PrintCat] is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE [dbo].[T_INVSETTING]  WITH CHECK ADD  CONSTRAINT [FK_T_INVSETTING_T_CATEGORY] FOREIGN KEY([CatID])\r\n                                    REFERENCES [dbo].[T_CATEGORY] ([CAT_ID])\r\n                                    ALTER TABLE [dbo].[T_INVSETTING] CHECK CONSTRAINT [FK_T_INVSETTING_T_CATEGORY]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AutoEmp] = 0 where AutoEmp is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_InvDetNote]    Script Date: 06/04/2016 01:51:40 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_InvDetNote](\r\n\t                                    [InvDetNote_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [InvDetNote_No] [varchar](30) NULL,\r\n\t                                    [Arb_Des] [varchar](200) NULL,\r\n\t                                    [Eng_Des] [varchar](200) NULL,\r\n\t                                    [Price] [float] NULL,\r\n\t                                    [BrNo] [int] NULL,\r\n                                     CONSTRAINT [PK_T_InvDetNote_1] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [InvDetNote_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ServerNm] = '' where ServerNm is null");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Sa_Pass] = '' where Sa_Pass is null");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [DataBaseNm] = '0' where DataBaseNm is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_Company alter column Tel2 [varchar](50) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_mInvPrint ADD  [BarcodeTyp] [int] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_mInvPrint] Set [BarcodeTyp] = 0 where BarcodeTyp is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE dbo.T_GDDET DROP CONSTRAINT FK_T_GDDET_T_AccDef_Destruction");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Mndob ADD  [PriceDoctor] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_Mndob] Set [PriceDoctor] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Mndob ADD  [DoctorJob] varchar(100) NULL");
                db.ExecuteCommand("Update [dbo].[T_Mndob] Set [DoctorJob] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_PatientCout](\r\n\t                                        [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [ItmNo] [varchar](50) NOT NULL,\r\n\t                                        [Mnth] [float] NULL,\r\n\t                                        [Total] [float] NULL,\r\n\t                                        [Filed1] [float] NULL,\r\n\t                                        [Field2] [float] NULL,\r\n\t                                        [Field3] [varchar](50) NULL,\r\n\t                                        [Field4] [varchar](50) NULL,\r\n                                         CONSTRAINT [PK_T_PatientCout] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_PatientCout]  WITH CHECK ADD  CONSTRAINT [FK_T_PatientCout_T_Items] FOREIGN KEY([ItmNo])\r\n                                        REFERENCES [dbo].[T_Items] ([Itm_No])\r\n                                        ALTER TABLE [dbo].[T_PatientCout] CHECK CONSTRAINT [FK_T_PatientCout_T_Items]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_INVDET_Repair]    Script Date: 02/25/2017 00:32:51 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_INVDET_Repair](\r\n\t                                    [InvDet_ID_Repair] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [InvNo_Repair] [varchar](10) NULL,\r\n\t                                    [InvId_Repair] [int] NULL,\r\n\t                                    [InvSer_Repair] [int] NULL,\r\n\t                                    [ItmNo_Repair] [varchar](50) NULL,\r\n\t                                    [Cost_Repair] [float] NULL,\r\n\t                                    [Qty_Repair] [float] NULL,\r\n\t                                    [ItmDes_Repair] [varchar](100) NULL,\r\n\t                                    [ItmUnt_Repair] [varchar](15) NULL,\r\n\t                                    [ItmDesE_Repair] [varchar](100) NULL,\r\n\t                                    [ItmUntE_Repair] [varchar](15) NULL,\r\n\t                                    [ItmUntPak_Repair] [float] NULL,\r\n\t                                    [StoreNo_Repair] [int] NULL,\r\n\t                                    [Price_Repair] [float] NULL,\r\n\t                                    [Amount_Repair] [float] NULL,\r\n\t                                    [RealQty_Repair] [float] NULL,\r\n\t                                    [itmInvDsc_Repair] [float] NULL,\r\n\t                                    [DatExper_Repair] [varchar](11) NULL,\r\n\t                                    [ItmDis_Repair] [float] NULL,\r\n\t                                    [ItmTyp_Repair] [int] NULL,\r\n\t                                    [ItmIndex_Repair] [int] NULL,\r\n\t                                    [ItmWight_Repair] [float] NULL,\r\n\t                                    [ItmWight_T_Repair] [float] NULL,\r\n\t                                    [ItmAddCost_Repair] [float] NULL,\r\n\t                                    [RunCod_Repair] [varchar](100) NULL,\r\n\t                                    [LineDetails_Repair] [varchar](250) NULL,\r\n\t                                    [InvDet_ID] [int] NOT NULL,\r\n\t                                    [TypeRepair] [int] NULL,\r\n                                     CONSTRAINT [PK_T_INVDET_Repair] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [InvDet_ID_Repair] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_SYSSETTING alter column Sa_Pass [varchar](100) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ImportIp] = '1' where ImportIp is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVDET ADD [Serial_Key] varchar(100) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVDET] Set [Serial_Key] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVDET_Repair ADD [Serial_Key_Repair] varchar(100) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVDET_Repair] Set [Serial_Key_Repair] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_ItemSerial]    Script Date: 03/24/2017 10:36:42 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_ItemSerial](\r\n\t                                    [id] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [SerialKey] [varchar](100) NOT NULL,\r\n\t                                    [ItmNo] [varchar](50) NULL,\r\n\t                                    [SerialStatus] [bit] NULL,\r\n                                     CONSTRAINT [PK_T_ItemSerial] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [SerialKey] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_ItemSerial]  WITH CHECK ADD  CONSTRAINT [FK_T_ItemSerial_T_Items] FOREIGN KEY([ItmNo])\r\n                                    REFERENCES [dbo].[T_Items] ([Itm_No])\r\n                                    ALTER TABLE [dbo].[T_ItemSerial] CHECK CONSTRAINT [FK_T_ItemSerial_T_Items]");
                List<T_Item> q2 = db.ExecuteQuery<T_Item>("select * from T_Items where SerialKey <> ''", new object[0]).ToList();
                for (int i = 0; i < q2.Count; i++)
                {
                    db.ExecuteCommand("INSERT INTO [dbo].[T_ItemSerial]\r\n                                           ([SerialKey]\r\n                                           ,[ItmNo]\r\n                                           ,[SerialStatus])\r\n                                     VALUES ('" + q2[i].SerialKey + "','" + q2[i].Itm_No + "',0)");
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_GDDET alter column AccName [varchar](100) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Waiter ADD [Pass] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_Waiter] Set [Pass] = '1' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'الطلبات المحلية',[InvNamE] = 'Local Orders' where InvID = 21 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [MainDirPath] [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [MainDirPath] = '" + Application.StartupPath + "'");
            }
            catch
            {
            }
            try
            {
                List<T_Rom> iiC = db.T_Roms.Select((T_Rom t) => t).ToList();
            }
            catch
            {
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_IDType](\r\n\t                                        [IDType_ID] [int] NOT NULL,\r\n\t                                        [Arb_Des] [varchar](100) NULL,\r\n\t                                        [Eng_Des] [varchar](100) NULL,\r\n\t                                        [Usr] [varchar](3) NULL,\r\n\t                                        [UsrNam] [varchar](50) NULL,\r\n\t                                        [CompanyID] [int] NULL,\r\n                                         CONSTRAINT [PK_T_IDType] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [IDType_ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        INSERT [dbo].[T_IDType] ([IDType_ID], [Arb_Des], [Eng_Des], [Usr], [UsrNam], [CompanyID]) VALUES (1, N'بطاقة أحوال', N'Status Card', NULL, NULL, 1)\r\n                                        INSERT [dbo].[T_IDType] ([IDType_ID], [Arb_Des], [Eng_Des], [Usr], [UsrNam], [CompanyID]) VALUES (2, N'جواز سفر عادي', N'Normal Passport', NULL, NULL, 1)\r\n                                        INSERT [dbo].[T_IDType] ([IDType_ID], [Arb_Des], [Eng_Des], [Usr], [UsrNam], [CompanyID]) VALUES (3, N'جواز سفر دبلوماسي', N'Diplomatic passport', NULL, NULL, 1)\r\n                                        INSERT [dbo].[T_IDType] ([IDType_ID], [Arb_Des], [Eng_Des], [Usr], [UsrNam], [CompanyID]) VALUES (4, N'إقامة', N'ID', NULL, NULL, 1)\r\n                                        INSERT [dbo].[T_IDType] ([IDType_ID], [Arb_Des], [Eng_Des], [Usr], [UsrNam], [CompanyID]) VALUES (5, N'كرت عائلة', N'Family Card', NULL, NULL, 1)\r\n                                        INSERT [dbo].[T_IDType] ([IDType_ID], [Arb_Des], [Eng_Des], [Usr], [UsrNam], [CompanyID]) VALUES (6, N'عقد نكاح', N'Marriage contract', NULL, NULL, 1)");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_StsReas](\r\n\t                                        [ID] [int] NOT NULL,\r\n\t                                        [NameSts] [varchar](250) NULL,\r\n\t                                        [NameStsE] [varchar](250) NULL,\r\n                                         CONSTRAINT [PK_T_StsReas] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        INSERT [dbo].[T_StsReas] ([ID], [NameSts], [NameStsE]) VALUES (1, N'الحجز ساري', N'Reservations are valid')\r\n                                        INSERT [dbo].[T_StsReas] ([ID], [NameSts], [NameStsE]) VALUES (2, N'تم التسكين', N'It was settled')\r\n                                        INSERT [dbo].[T_StsReas] ([ID], [NameSts], [NameStsE]) VALUES (3, N'الغي الحجز', N'Reservation canceled')");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BColor0] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BColor0] = '255,255,255' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BColor1] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BColor1] = '224,224,224' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BColor2] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BColor2] = '255,0,0' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BColor3] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BColor3] = '128,64,0' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BColor4] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BColor4] = '255,128,0' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BColor5] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BColor5] = '64,64,64' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BColor6] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BColor6] = '255,128,128' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [BColor7] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BColor7] = '0,128,0' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [FColor0] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [FColor0] = '0,64,0' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [FColor1] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [FColor1] = '0,64,0'  ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [FColor2] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [FColor2] = '255,255,255' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [FColor3] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [FColor3] = '255,255,255' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [FColor4] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [FColor4] = '0,0,0' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [FColor5] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [FColor5] = '255,255,255' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [FColor6] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [FColor6] = '0,0,0' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [FColor7] [varchar](50) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [FColor7] = '255,255,255' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [Fld_w] [int] NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Fld_w] = 125 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [Fld_H] [int] NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Fld_H] = 100 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [DayOfM] [int] NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [DayOfM] = 30 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [ch] [bit] NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ch] = 0 ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [flore] [int] NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [flore] = 4 ");
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [rom] [int] NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [rom] = 6 ");
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Rom](\r\n\t                                    [romno] [int] NOT NULL,\r\n\t                                    [flore] [int] NULL,\r\n\t                                    [ch] [int] NULL,\r\n\t                                    [state] [int] NULL,\r\n\t                                    [row] [int] NULL,\r\n\t                                    [col] [int] NULL,\r\n\t                                    [wcno] [int] NULL,\r\n\t                                    [wc] [int] NULL,\r\n\t                                    [perno] [int] NULL,\r\n\t                                    [bedno] [int] NULL,\r\n\t                                    [bed] [int] NULL,\r\n\t                                    [tv] [int] NULL,\r\n\t                                    [bl] [int] NULL,\r\n\t                                    [aline] [int] NULL,\r\n\t                                    [typ] [int] NULL,\r\n\t                                    [gropno] [int] NULL,\r\n\t                                    [price] [float] NULL,\r\n\t                                    [hed] [int] NULL,\r\n\t                                    [tax] [int] NULL,\r\n\t                                    [ser] [int] NULL,\r\n\t                                    [dt] [varchar](10) NULL,\r\n\t                                    [tm] [varchar](11) NULL,\r\n\t                                    [pri0] [float] NULL,\r\n\t                                    [pri1] [float] NULL,\r\n\t                                    [pri2] [float] NULL,\r\n\t                                    [pri3] [float] NULL,\r\n\t                                    [priM0] [float] NULL,\r\n\t                                    [priM1] [float] NULL,\r\n\t                                    [ShortDsc] [varchar](50) NULL,\r\n\t                                    [Numcounter] [varchar](50) NULL,\r\n\t                                    [CompanyID] [int] NULL,\r\n\t                                    [perno_Old] [int] NULL,\r\n                                     CONSTRAINT [PK_T_Rom] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [romno] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_Rom] ADD  CONSTRAINT [DF_T_Rom_ch]  DEFAULT ((0)) FOR [ch]\r\n                                    ALTER TABLE [dbo].[T_Rom] ADD  CONSTRAINT [DF_T_Rom_state]  DEFAULT ((0)) FOR [state]");
                    db.ExecuteCommand("SET ANSI_PADDING OFF\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (101, 1, 0, 1, 1, 1, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (102, 1, 0, 1, 1, 3, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (103, 1, 0, 1, 1, 5, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (104, 1, 0, 1, 1, 7, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (105, 1, 0, 1, 1, 9, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (106, 1, 0, 1, 1, 11, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (201, 2, 0, 1, 3, 1, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (202, 2, 0, 1, 3, 3, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (203, 2, 0, 1, 3, 5, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (204, 2, 0, 1, 3, 7, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (205, 2, 0, 1, 3, 9, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (206, 2, 0, 1, 3, 11, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (301, 3, 0, 1, 5, 1, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (302, 3, 0, 1, 5, 3, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (303, 3, 0, 1, 5, 5, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (304, 3, 0, 1, 5, 7, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (305, 3, 0, 1, 5, 9, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (306, 3, 0, 1, 5, 11, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (401, 4, 0, 1, 7, 1, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (402, 4, 0, 1, 7, 3, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (403, 4, 0, 1, 7, 5, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (404, 4, 0, 1, 7, 7, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (405, 4, 0, 1, 7, 9, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)\r\n                                    INSERT [dbo].[T_Rom] ([romno], [flore], [ch], [state], [row], [col], [wcno], [wc], [perno], [bedno], [bed], [tv], [bl], [aline], [typ], [gropno], [price], [hed], [tax], [ser], [dt], [tm], [pri0], [pri1], [pri2], [pri3], [priM0], [priM1], [ShortDsc], [Numcounter], [CompanyID]) VALUES (406, 4, 0, 1, 7, 11, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N' ', N' ', 0, 0, 0, 0, 0, 0, N' ', N' ', 1)");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [vStart] [varchar](10) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vStart] = '05:00:00' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [vEnd] [varchar](10) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vEnd] = '06:00:00' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [vStartTyp] [varchar](5) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vStartTyp] = 'AM' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [vEndTyp] [varchar](5) NULL");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vEndTyp] = 'PM' ");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_per](\r\n\t                                    [perno] [int] NOT NULL,\r\n\t                                    [romno] [int] NULL,\r\n\t                                    [nm] [varchar](100) NULL,\r\n\t                                    [nath] [int] NULL,\r\n\t                                    [day] [varchar](12) NULL,\r\n\t                                    [dt1] [int] NULL,\r\n\t                                    [price] [float] NULL,\r\n\t                                    [pasno] [varchar](15) NULL,\r\n\t                                    [dt2] [varchar](10) NULL,\r\n\t                                    [dt3] [varchar](10) NULL,\r\n\t                                    [ch] [int] NULL,\r\n\t                                    [dis] [float] NULL,\r\n\t                                    [actyp] [int] NULL,\r\n\t                                    [ps1] [varchar](30) NULL,\r\n\t                                    [ps2] [varchar](30) NULL,\r\n\t                                    [cc] [int] NULL,\r\n\t                                    [pastyp] [int] NULL,\r\n\t                                    [tm1] [varchar](11) NULL,\r\n\t                                    [tm2] [varchar](11) NULL,\r\n\t                                    [tax] [float] NULL,\r\n\t                                    [ser] [float] NULL,\r\n\t                                    [DOL] [float] NULL,\r\n\t                                    [vip] [int] NULL,\r\n\t                                    [job] [int] NULL,\r\n\t                                    [curr] [int] NULL,\r\n\t                                    [distyp] [int] NULL,\r\n\t                                    [cust] [int] NULL,\r\n\t                                    [disknd] [int] NULL,\r\n\t                                    [jobpls] [varchar](30) NULL,\r\n\t                                    [bdt] [varchar](10) NULL,\r\n\t                                    [bpls] [varchar](30) NULL,\r\n\t                                    [paspls] [varchar](30) NULL,\r\n\t                                    [passt] [varchar](10) NULL,\r\n\t                                    [pasend] [varchar](10) NULL,\r\n\t                                    [enddt] [varchar](10) NULL,\r\n\t                                    [pict] [varbinary](max) NULL,\r\n\t                                    [fat] [float] NULL,\r\n\t                                    [gropno] [int] NULL,\r\n\t                                    [Cust_no] [varchar](30) NULL,\r\n\t                                    [Totel] [int] NULL,\r\n\t                                    [DayEdit] [int] NULL,\r\n\t                                    [DayImport] [int] NULL,\r\n\t                                    [dt4] [varchar](255) NULL,\r\n\t                                    [KindPer] [int] NULL,\r\n\t                                    [DayOfM] [int] NULL,\r\n                                     CONSTRAINT [PK_T_per] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [perno] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_per]  WITH CHECK ADD  CONSTRAINT [FK_T_per_T_AccDef] FOREIGN KEY([Cust_no])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_per] CHECK CONSTRAINT [FK_T_per_T_AccDef]\r\n                                    ALTER TABLE [dbo].[T_per]  WITH CHECK ADD  CONSTRAINT [FK_T_per_T_Curency] FOREIGN KEY([curr])\r\n                                    REFERENCES [dbo].[T_Curency] ([Curency_ID])\r\n                                    ALTER TABLE [dbo].[T_per] CHECK CONSTRAINT [FK_T_per_T_Curency]\r\n                                    ALTER TABLE [dbo].[T_per]  WITH CHECK ADD  CONSTRAINT [FK_T_per_T_IDType] FOREIGN KEY([pastyp])\r\n                                    REFERENCES [dbo].[T_IDType] ([IDType_ID])\r\n                                    ALTER TABLE [dbo].[T_per] CHECK CONSTRAINT [FK_T_per_T_IDType]\r\n                                    ALTER TABLE [dbo].[T_per]  WITH CHECK ADD  CONSTRAINT [FK_T_per_T_Nationalities] FOREIGN KEY([nath])\r\n                                    REFERENCES [dbo].[T_Nationalities] ([Nation_No])\r\n                                    ALTER TABLE [dbo].[T_per] CHECK CONSTRAINT [FK_T_per_T_Nationalities]\r\n                                    ALTER TABLE [dbo].[T_per]  WITH CHECK ADD  CONSTRAINT [FK_T_per_T_Job] FOREIGN KEY([job])\r\n                                    REFERENCES [dbo].[T_Job] ([Job_No])\r\n                                    ALTER TABLE [dbo].[T_per] CHECK CONSTRAINT [FK_T_per_T_Job]\r\n                                    ALTER TABLE [dbo].[T_per]  WITH CHECK ADD  CONSTRAINT [FK_T_per_T_Rom] FOREIGN KEY([romno])\r\n                                    REFERENCES [dbo].[T_Rom] ([romno])\r\n                                    ALTER TABLE [dbo].[T_per] CHECK CONSTRAINT [FK_T_per_T_Rom]\r\n                                    ALTER TABLE [dbo].[T_per] ADD  CONSTRAINT [DF_T_per_ch]  DEFAULT ((0)) FOR [ch]");
                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Rom]  WITH CHECK ADD  CONSTRAINT [FK_T_Rom_T_per] FOREIGN KEY([perno])\r\n                                    REFERENCES [dbo].[T_per] ([perno])\r\n                                    ALTER TABLE [dbo].[T_Rom] CHECK CONSTRAINT [FK_T_Rom_T_per]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_RomChart](\r\n\t                                        [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [FName] [varchar](100) NULL,\r\n\t                                        [FNameE] [varchar](100) NULL,\r\n\t                                        [col1] [int] NULL,\r\n\t                                        [col2] [int] NULL,\r\n\t                                        [col3] [int] NULL,\r\n\t                                        [col4] [int] NULL,\r\n\t                                        [col5] [int] NULL,\r\n\t                                        [col6] [int] NULL,\r\n\t                                        [col7] [int] NULL,\r\n\t                                        [col8] [int] NULL,\r\n\t                                        [col9] [int] NULL,\r\n\t                                        [col10] [int] NULL,\r\n\t                                        [col11] [int] NULL,\r\n\t                                        [col12] [int] NULL,\r\n\t                                        [col13] [int] NULL,\r\n\t                                        [col14] [int] NULL,\r\n\t                                        [col15] [int] NULL,\r\n\t                                        [col16] [int] NULL,\r\n\t                                        [col17] [int] NULL,\r\n\t                                        [col18] [int] NULL,\r\n\t                                        [col19] [int] NULL,\r\n\t                                        [col20] [int] NULL,\r\n\t                                        [col21] [int] NULL,\r\n\t                                        [col22] [int] NULL,\r\n\t                                        [col23] [int] NULL,\r\n\t                                        [col24] [int] NULL,\r\n\t                                        [col25] [int] NULL,\r\n\t                                        [col26] [int] NULL,\r\n\t                                        [col27] [int] NULL,\r\n\t                                        [col28] [int] NULL,\r\n\t                                        [col29] [int] NULL,\r\n\t                                        [col30] [int] NULL,\r\n\t                                        [col31] [int] NULL,\r\n\t                                        [col32] [int] NULL,\r\n\t                                        [col33] [int] NULL,\r\n\t                                        [col34] [int] NULL,\r\n\t                                        [col35] [int] NULL,\r\n\t                                        [col36] [int] NULL,\r\n\t                                        [col37] [int] NULL,\r\n\t                                        [col38] [int] NULL,\r\n\t                                        [col39] [int] NULL,\r\n\t                                        [col40] [int] NULL,\r\n\t                                        [col41] [int] NULL,\r\n\t                                        [col42] [int] NULL,\r\n\t                                        [col43] [int] NULL,\r\n\t                                        [col44] [int] NULL,\r\n\t                                        [col45] [int] NULL,\r\n\t                                        [col46] [int] NULL,\r\n\t                                        [col47] [int] NULL,\r\n\t                                        [col48] [int] NULL,\r\n\t                                        [col49] [int] NULL,\r\n\t                                        [col50] [int] NULL,\r\n\t                                        [col51] [int] NULL,\r\n\t                                        [col52] [int] NULL,\r\n\t                                        [col53] [int] NULL,\r\n\t                                        [col54] [int] NULL,\r\n\t                                        [col55] [int] NULL,\r\n\t                                        [col56] [int] NULL,\r\n\t                                        [col57] [int] NULL,\r\n\t                                        [col58] [int] NULL,\r\n\t                                        [col59] [int] NULL,\r\n\t                                        [col60] [int] NULL,\r\n\t                                        [col61] [int] NULL,\r\n\t                                        [col62] [int] NULL,\r\n\t                                        [col63] [int] NULL,\r\n\t                                        [col64] [int] NULL,\r\n\t                                        [col65] [int] NULL,\r\n\t                                        [col66] [int] NULL,\r\n\t                                        [col67] [int] NULL,\r\n\t                                        [col68] [int] NULL,\r\n\t                                        [col69] [int] NULL,\r\n\t                                        [col70] [int] NULL,\r\n\t                                        [col71] [int] NULL,\r\n\t                                        [col72] [int] NULL,\r\n\t                                        [col73] [int] NULL,\r\n\t                                        [col74] [int] NULL,\r\n\t                                        [col75] [int] NULL,\r\n\t                                        [col76] [int] NULL,\r\n\t                                        [col77] [int] NULL,\r\n\t                                        [col78] [int] NULL,\r\n\t                                        [col79] [int] NULL,\r\n\t                                        [col80] [int] NULL,\r\n\t                                        [col81] [int] NULL,\r\n\t                                        [col82] [int] NULL,\r\n\t                                        [col83] [int] NULL,\r\n\t                                        [col84] [int] NULL,\r\n\t                                        [col85] [int] NULL,\r\n\t                                        [col86] [int] NULL,\r\n\t                                        [col87] [int] NULL,\r\n\t                                        [col88] [int] NULL,\r\n\t                                        [col89] [int] NULL,\r\n\t                                        [col90] [int] NULL,\r\n\t                                        [col91] [int] NULL,\r\n\t                                        [col92] [int] NULL,\r\n\t                                        [col93] [int] NULL,\r\n\t                                        [col94] [int] NULL,\r\n\t                                        [col95] [int] NULL,\r\n\t                                        [col96] [int] NULL,\r\n\t                                        [col97] [int] NULL,\r\n\t                                        [col98] [int] NULL,\r\n\t                                        [col99] [int] NULL,\r\n\t                                        [col100] [int] NULL,\r\n                                         CONSTRAINT [PK_T_RomChart] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        SET IDENTITY_INSERT [dbo].[T_RomChart] ON\r\n                                        INSERT [dbo].[T_RomChart] ([ID], [FName], [FNameE], [col1], [col2], [col3], [col4], [col5], [col6], [col7], [col8], [col9], [col10], [col11], [col12], [col13], [col14], [col15], [col16], [col17], [col18], [col19], [col20], [col21], [col22], [col23], [col24], [col25], [col26], [col27], [col28], [col29], [col30], [col31], [col32], [col33], [col34], [col35], [col36], [col37], [col38], [col39], [col40], [col41], [col42], [col43], [col44], [col45], [col46], [col47], [col48], [col49], [col50], [col51], [col52], [col53], [col54], [col55], [col56], [col57], [col58], [col59], [col60], [col61], [col62], [col63], [col64], [col65], [col66], [col67], [col68], [col69], [col70], [col71], [col72], [col73], [col74], [col75], [col76], [col77], [col78], [col79], [col80], [col81], [col82], [col83], [col84], [col85], [col86], [col87], [col88], [col89], [col90], [col91], [col92], [col93], [col94], [col95], [col96], [col97], [col98], [col99], [col100]) VALUES (1, N'الطابق 1', N'floor 1', 101, 102, 103, 104, 105, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\r\n                                        INSERT [dbo].[T_RomChart] ([ID], [FName], [FNameE], [col1], [col2], [col3], [col4], [col5], [col6], [col7], [col8], [col9], [col10], [col11], [col12], [col13], [col14], [col15], [col16], [col17], [col18], [col19], [col20], [col21], [col22], [col23], [col24], [col25], [col26], [col27], [col28], [col29], [col30], [col31], [col32], [col33], [col34], [col35], [col36], [col37], [col38], [col39], [col40], [col41], [col42], [col43], [col44], [col45], [col46], [col47], [col48], [col49], [col50], [col51], [col52], [col53], [col54], [col55], [col56], [col57], [col58], [col59], [col60], [col61], [col62], [col63], [col64], [col65], [col66], [col67], [col68], [col69], [col70], [col71], [col72], [col73], [col74], [col75], [col76], [col77], [col78], [col79], [col80], [col81], [col82], [col83], [col84], [col85], [col86], [col87], [col88], [col89], [col90], [col91], [col92], [col93], [col94], [col95], [col96], [col97], [col98], [col99], [col100]) VALUES (2, N'الطابق 2', N'floor 2', 201, 202, 203, 204, 205, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\r\n                                        INSERT [dbo].[T_RomChart] ([ID], [FName], [FNameE], [col1], [col2], [col3], [col4], [col5], [col6], [col7], [col8], [col9], [col10], [col11], [col12], [col13], [col14], [col15], [col16], [col17], [col18], [col19], [col20], [col21], [col22], [col23], [col24], [col25], [col26], [col27], [col28], [col29], [col30], [col31], [col32], [col33], [col34], [col35], [col36], [col37], [col38], [col39], [col40], [col41], [col42], [col43], [col44], [col45], [col46], [col47], [col48], [col49], [col50], [col51], [col52], [col53], [col54], [col55], [col56], [col57], [col58], [col59], [col60], [col61], [col62], [col63], [col64], [col65], [col66], [col67], [col68], [col69], [col70], [col71], [col72], [col73], [col74], [col75], [col76], [col77], [col78], [col79], [col80], [col81], [col82], [col83], [col84], [col85], [col86], [col87], [col88], [col89], [col90], [col91], [col92], [col93], [col94], [col95], [col96], [col97], [col98], [col99], [col100]) VALUES (3, N'الطابق 3', N'floor 3', 301, 302, 303, 304, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\r\n                                        INSERT [dbo].[T_RomChart] ([ID], [FName], [FNameE], [col1], [col2], [col3], [col4], [col5], [col6], [col7], [col8], [col9], [col10], [col11], [col12], [col13], [col14], [col15], [col16], [col17], [col18], [col19], [col20], [col21], [col22], [col23], [col24], [col25], [col26], [col27], [col28], [col29], [col30], [col31], [col32], [col33], [col34], [col35], [col36], [col37], [col38], [col39], [col40], [col41], [col42], [col43], [col44], [col45], [col46], [col47], [col48], [col49], [col50], [col51], [col52], [col53], [col54], [col55], [col56], [col57], [col58], [col59], [col60], [col61], [col62], [col63], [col64], [col65], [col66], [col67], [col68], [col69], [col70], [col71], [col72], [col73], [col74], [col75], [col76], [col77], [col78], [col79], [col80], [col81], [col82], [col83], [col84], [col85], [col86], [col87], [col88], [col89], [col90], [col91], [col92], [col93], [col94], [col95], [col96], [col97], [col98], [col99], [col100]) VALUES (4, N'الطابق 4', N'floor 4', 401, 402, 403, 404, 405, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\r\n                                        SET IDENTITY_INSERT [dbo].[T_RomChart] OFF");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_BlackList](\r\n\t                                        [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [CustNum] [varchar](50) NOT NULL,\r\n\t                                        [CustNam] [varchar](250) NULL,\r\n\t                                        [IdNo] [varchar](100) NULL,\r\n\t                                        [LecnId] [varchar](100) NULL,\r\n\t                                        [Dis] [varchar](100) NULL,\r\n                                         CONSTRAINT [PK_T_BlackList] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [CustNum] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_per1](\r\n\t                                        [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [perno] [int] NULL,\r\n\t                                        [nm] [varchar](100) NULL,\r\n\t                                        [natNm] [varchar](100) NULL,\r\n\t                                        [nat] [int] NULL,\r\n\t                                        [bdt] [varchar](10) NULL,\r\n\t                                        [bpls] [varchar](50) NULL,\r\n\t                                        [pastyp] [int] NULL,\r\n\t                                        [pasno] [varchar](25) NULL,\r\n\t                                        [paspls] [varchar](30) NULL,\r\n\t                                        [passt] [varchar](10) NULL,\r\n\t                                        [pasend] [varchar](10) NULL,\r\n\t                                        [entdt] [varchar](10) NULL,\r\n\t                                        [job] [int] NULL,\r\n\t                                        [jobNm] [varchar](100) NULL,\r\n\t                                        [jobpls] [varchar](50) NULL,\r\n\t                                        [romno] [int] NULL,\r\n\t                                        [fNo] [int] NULL,\r\n                                         CONSTRAINT [PK_T_per1] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_per1]  WITH CHECK ADD  CONSTRAINT [FK_T_per1_T_IDType] FOREIGN KEY([pastyp])\r\n                                        REFERENCES [dbo].[T_IDType] ([IDType_ID])\r\n                                        ALTER TABLE [dbo].[T_per1] CHECK CONSTRAINT [FK_T_per1_T_IDType]\r\n                                        ALTER TABLE [dbo].[T_per1]  WITH CHECK ADD  CONSTRAINT [FK_T_per1_T_Job] FOREIGN KEY([job])\r\n                                        REFERENCES [dbo].[T_Job] ([Job_No])\r\n                                        ALTER TABLE [dbo].[T_per1] CHECK CONSTRAINT [FK_T_per1_T_Job]\r\n                                        ALTER TABLE [dbo].[T_per1]  WITH CHECK ADD  CONSTRAINT [FK_T_per1_T_Nationalities] FOREIGN KEY([nat])\r\n                                        REFERENCES [dbo].[T_Nationalities] ([Nation_No])\r\n                                        ALTER TABLE [dbo].[T_per1] CHECK CONSTRAINT [FK_T_per1_T_Nationalities]\r\n                                        ALTER TABLE [dbo].[T_per1]  WITH CHECK ADD  CONSTRAINT [FK_T_per1_T_per] FOREIGN KEY([perno])\r\n                                        REFERENCES [dbo].[T_per] ([perno])\r\n                                        ALTER TABLE [dbo].[T_per1] CHECK CONSTRAINT [FK_T_per1_T_per]\r\n                                        ALTER TABLE [dbo].[T_per1]  WITH CHECK ADD  CONSTRAINT [FK_T_per1_T_Rom] FOREIGN KEY([romno])\r\n                                        REFERENCES [dbo].[T_Rom] ([romno])\r\n                                        ALTER TABLE [dbo].[T_per1] CHECK CONSTRAINT [FK_T_per1_T_Rom]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_romtrn](\r\n\t                                        [ID] [int] NOT NULL,\r\n\t                                        [romno1] [int] NULL,\r\n\t                                        [romno2] [int] NULL,\r\n\t                                        [perno] [int] NULL,\r\n\t                                        [dt] [varchar](10) NULL,\r\n\t                                        [tm] [varchar](11) NULL,\r\n\t                                        [Usr] [varchar](3) NULL,\r\n\t                                        [UsrNam] [varchar](50) NULL,\r\n\t                                        [typ] [int] NULL,\r\n                                         CONSTRAINT [PK_T_romtrn] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_romtrn]  WITH CHECK ADD  CONSTRAINT [FK_T_romtrn_T_Rom] FOREIGN KEY([romno1])\r\n                                        REFERENCES [dbo].[T_Rom] ([romno])\r\n                                        ALTER TABLE [dbo].[T_romtrn] CHECK CONSTRAINT [FK_T_romtrn_T_Rom]\r\n                                        ALTER TABLE [dbo].[T_romtrn]  WITH CHECK ADD  CONSTRAINT [FK_T_romtrn_T_Rom1] FOREIGN KEY([romno2])\r\n                                        REFERENCES [dbo].[T_Rom] ([romno])\r\n                                        ALTER TABLE [dbo].[T_romtrn] CHECK CONSTRAINT [FK_T_romtrn_T_Rom1]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        CREATE TABLE [dbo].[T_telmn](\r\n\t                                        [pl] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [price] [float] NULL,\r\n\t                                        [d] [int] NULL,\r\n                                         CONSTRAINT [PK_T_telmn] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [pl] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET IDENTITY_INSERT [dbo].[T_telmn] ON\r\n                                        INSERT [dbo].[T_telmn] ([pl], [price], [d]) VALUES (1, 1, 0)\r\n                                        INSERT [dbo].[T_telmn] ([pl], [price], [d]) VALUES (2, 2.5, 0)\r\n                                        INSERT [dbo].[T_telmn] ([pl], [price], [d]) VALUES (3, 6, 0)\r\n                                        INSERT [dbo].[T_telmn] ([pl], [price], [d]) VALUES (4, 10, 0)\r\n                                        INSERT [dbo].[T_telmn] ([pl], [price], [d]) VALUES (5, 30, 0)\r\n                                        SET IDENTITY_INSERT [dbo].[T_telmn] OFF");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_tel](\r\n\t                                        [ID] [int] NOT NULL,\r\n\t                                        [perno] [int] NULL,\r\n\t                                        [ino] [int] NULL,\r\n\t                                        [romno] [int] NULL,\r\n\t                                        [tel] [varchar](25) NULL,\r\n\t                                        [s] [float] NULL,\r\n\t                                        [m] [int] NULL,\r\n\t                                        [op] [int] NULL,\r\n\t                                        [price] [float] NULL,\r\n\t                                        [dt] [varchar](10) NULL,\r\n\t                                        [tm] [varchar](10) NULL,\r\n\t                                        [h] [int] NULL,\r\n\t                                        [Usr] [varchar](3) NULL,\r\n\t                                        [UsrNam] [varchar](50) NULL,\r\n                                         CONSTRAINT [PK_T_tel] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_tel]  WITH CHECK ADD  CONSTRAINT [FK_T_tel_T_per] FOREIGN KEY([perno])\r\n                                        REFERENCES [dbo].[T_per] ([perno])\r\n                                        ALTER TABLE [dbo].[T_tel] CHECK CONSTRAINT [FK_T_tel_T_per]\r\n                                        ALTER TABLE [dbo].[T_tel]  WITH CHECK ADD  CONSTRAINT [FK_T_tel_T_Rom] FOREIGN KEY([romno])\r\n                                        REFERENCES [dbo].[T_Rom] ([romno])\r\n                                        ALTER TABLE [dbo].[T_tel] CHECK CONSTRAINT [FK_T_tel_T_Rom]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_tran](\r\n\t                                        [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [dt] [varchar](10) NULL,\r\n\t                                        [romno] [int] NULL,\r\n\t                                        [price] [float] NULL,\r\n\t                                        [fat] [int] NULL,\r\n\t                                        [detal] [varchar](100) NULL,\r\n\t                                        [Usr] [varchar](3) NULL,\r\n\t                                        [UsrNam] [varchar](50) NULL,\r\n\t                                        [tm] [varchar](11) NULL,\r\n\t                                        [perno] [int] NULL,\r\n\t                                        [typ] [int] NULL,\r\n                                         CONSTRAINT [PK_T_tran] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_tran]  WITH CHECK ADD  CONSTRAINT [FK_T_tran_T_per] FOREIGN KEY([perno])\r\n                                        REFERENCES [dbo].[T_per] ([perno])\r\n                                        ALTER TABLE [dbo].[T_tran] CHECK CONSTRAINT [FK_T_tran_T_per]\r\n                                        ALTER TABLE [dbo].[T_tran]  WITH CHECK ADD  CONSTRAINT [FK_T_tran_T_Rom] FOREIGN KEY([romno])\r\n                                        REFERENCES [dbo].[T_Rom] ([romno])\r\n                                        ALTER TABLE [dbo].[T_tran] CHECK CONSTRAINT [FK_T_tran_T_Rom]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET IDENTITY_INSERT [dbo].[T_AccCat] ON\r\n                                    INSERT [dbo].[T_AccCat] ([AccCat_ID], [AccCat_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (11, N'11', N'النزلاء', N'Guests', 1)\r\n                                    SET IDENTITY_INSERT [dbo].[T_AccCat] OFF");
                }
                catch
                {
                }
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_sertyp](\r\n\t                                    [Serv_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [Serv_No] [varchar](30) NULL,\r\n\t                                    [Arb_Des] [varchar](100) NULL,\r\n\t                                    [Eng_Des] [varchar](100) NULL,\r\n\t                                    [accno] [varchar](30) NULL,\r\n\t                                    [acched] [varchar](30) NULL,\r\n\t                                    [Usr] [varchar](3) NULL,\r\n\t                                    [UsrNam] [varchar](50) NULL,\r\n\t                                    [CompanyID] [int] NULL,\r\n                                     CONSTRAINT [PK_T_sertyp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Serv_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_sertyp]  WITH CHECK ADD  CONSTRAINT [FK_T_sertyp_T_AccDef] FOREIGN KEY([accno])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_sertyp] CHECK CONSTRAINT [FK_T_sertyp_T_AccDef]");
                db.ExecuteCommand("SET ANSI_PADDING OFF\r\n                                    SET IDENTITY_INSERT [dbo].[T_sertyp] ON\r\n\r\n                                    INSERT [dbo].[T_sertyp] ([Serv_ID], [Serv_No], [Arb_Des], [Eng_Des], [accno], [acched], [Usr], [UsrNam], [CompanyID]) VALUES (1, N'1', N'مستحقات سابقة', N'Previous receivables', NULL, NULL, NULL, NULL, 1)\r\n                                    INSERT [dbo].[T_sertyp] ([Serv_ID], [Serv_No], [Arb_Des], [Eng_Des], [accno], [acched], [Usr], [UsrNam], [CompanyID]) VALUES (2, N'2', N'تل\u0651فيات', N'Damage', NULL, NULL, NULL, NULL, 1)\r\n                                    INSERT [dbo].[T_sertyp] ([Serv_ID], [Serv_No], [Arb_Des], [Eng_Des], [accno], [acched], [Usr], [UsrNam], [CompanyID]) VALUES (3, N'3', N'فرش ومخدات', N'furniture', NULL, NULL, NULL, NULL, 1)\r\n                                    INSERT [dbo].[T_sertyp] ([Serv_ID], [Serv_No], [Arb_Des], [Eng_Des], [accno], [acched], [Usr], [UsrNam], [CompanyID]) VALUES (4, N'4', N'تلفون', N'Phone', NULL, NULL, NULL, NULL, 1)\r\n                                    SET IDENTITY_INSERT [dbo].[T_sertyp] OFF");
                db.ExecuteCommand("ALTER TABLE [dbo].[T_tran]  WITH CHECK ADD  CONSTRAINT [FK_T_tran_T_sertyp] FOREIGN KEY([typ])\r\n                                    REFERENCES [dbo].[T_sertyp] ([Serv_ID])\r\n                                    ALTER TABLE [dbo].[T_tran] CHECK CONSTRAINT [FK_T_tran_T_sertyp]");
                db.ExecuteCommand("ALTER TABLE T_tran ADD GadeNo [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_tran ADD GadeId [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_tran ADD IsGaid [bit] NULL");
                db.ExecuteCommand("alter table T_per alter column dt1 [varchar](10) NULL");
                db.ExecuteCommand("ALTER TABLE T_telmn ADD accno [varchar](30) NULL");
                db.ExecuteCommand("ALTER TABLE [dbo].[T_telmn]  WITH CHECK ADD  CONSTRAINT [FK_T_telmn_T_AccDef] FOREIGN KEY([accno])\r\n                                    REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                    ALTER TABLE [dbo].[T_telmn] CHECK CONSTRAINT [FK_T_telmn_T_AccDef]");
                db.ExecuteCommand("ALTER TABLE T_per ADD vAmPm [varchar](5) NULL");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [GuestAcc] [varchar](30) NULL");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [GuestBoxAcc] [varchar](30) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [GuestAcc] = '' ");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [GuestBoxAcc] = '' ");
                try
                {
                    T_AccDef c = db.StockAccDef("1026");
                    if (c == null || string.IsNullOrEmpty(c.AccDef_No))
                    {
                        int num = 1;
                        try
                        {
                            num = db.T_AccDefs.Max((T_AccDef lgl) => Convert.ToInt32(lgl.AccDef_ID)) + 1;
                        }
                        catch
                        {
                        }
                        db.ExecuteCommand("INSERT [dbo].[T_AccDef] ([AccDef_No], [Arb_Des], [Eng_Des], [ParAcc], [Lev], [Typ], [AccCat], [DC], [Sts], [Debit], [Credit], [Balance], [Trn], [City], [Email], [Telphone1], [Telphone2], [Fax], [Mobile], [MaxLemt], [DesPers], [StrAm], [Adders], [Mnd], [Price], [zipCod], [PersonalNm], [RessonStoped], [StopedState], [CompanyID], [StopInvTyp], [DateAppointment], [ID_Date], [ID_DateEnd], [Passport_Date], [Insurance_Date], [Passport_DateEnd], [Insurance_DateEnd], [ID_No], [Passport_No], [Insurance_No], [ID_From], [Passport_From], [Insurance_From], [MainSal], [DepreciationPercent], [ProofAcc], [RelayAcc],[MaxDisCust],[vColNum1],[vColNum2],[vColStr1],[vColStr2],[vColStr3]) VALUES ( N'1026', N'النزلاء', N'Guests', N'102', 3, NULL, 11, 0, 0, 0, 0, 0, 3, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, NULL,0,0,0,'','','')");
                        T_AccDef q = db.StockAccDef("1026");
                        if (q != null && !string.IsNullOrEmpty(q.AccDef_No))
                        {
                            db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [GuestAcc] = '1026' ");
                        }
                    }
                }
                catch
                {
                }
                try
                {
                    T_AccDef q = db.StockAccDef("1020001");
                    if (q != null && !string.IsNullOrEmpty(q.AccDef_No))
                    {
                        db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [GuestBoxAcc] = '1020001' ");
                    }
                }
                catch
                {
                }
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_Reserv]    Script Date: 07/30/2017 07:38:23 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Reserv](\r\n\t                                    [ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [ResrvNo] [int] NOT NULL,\r\n\t                                    [Dat] [varchar](10) NULL,\r\n\t                                    [Rom] [int] NULL,\r\n\t                                    [PerNm] [varchar](150) NULL,\r\n\t                                    [Dt] [varchar](10) NULL,\r\n\t                                    [Tm] [varchar](11) NULL,\r\n\t                                    [vAmPm] [varchar](5) NULL,\r\n\t                                    [IdNo] [varchar](25) NULL,\r\n\t                                    [Nat] [int] NULL,\r\n\t                                    [Remark] [varchar](300) NULL,\r\n\t                                    [Sts] [int] NULL,\r\n\t                                    [Usr] [varchar](3) NULL,\r\n\t                                    [DayImport] [int] NULL,\r\n\t                                    [Dat2] [varchar](10) NULL,\r\n\t                                    [CompanyID] [int] NULL,\r\n                                     CONSTRAINT [PK_T_Reserv] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [ResrvNo] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_Reserv]  WITH CHECK ADD  CONSTRAINT [FK_T_Reserv_T_Nationalities] FOREIGN KEY([Nat])\r\n                                    REFERENCES [dbo].[T_Nationalities] ([Nation_No])\r\n                                    ALTER TABLE [dbo].[T_Reserv] CHECK CONSTRAINT [FK_T_Reserv_T_Nationalities]\r\n                                    ALTER TABLE [dbo].[T_Reserv]  WITH CHECK ADD  CONSTRAINT [FK_T_Reserv_T_Rom] FOREIGN KEY([Rom])\r\n                                    REFERENCES [dbo].[T_Rom] ([romno])\r\n                                    ALTER TABLE [dbo].[T_Reserv] CHECK CONSTRAINT [FK_T_Reserv_T_Rom]");
                db.ExecuteCommand("/****** Object:  Table [dbo].[cod]    Script Date: 08/03/2017 15:42:49 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    CREATE TABLE [dbo].[cod](\r\n\t                                    [cod] [int] NOT NULL,\r\n                                     CONSTRAINT [PK_cod] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [cod] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (201)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (202)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (212)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (213)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (216)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (218)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (222)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (249)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (252)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (253)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (291)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (962)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (963)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (964)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (965)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (966)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (967)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (968)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (970)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (971)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (973)\r\n                                    INSERT [dbo].[cod] ([cod]) VALUES (974)");
                db.ExecuteCommand("IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_T_telmn_T_AccDef]') AND parent_object_id = OBJECT_ID(N'[dbo].[T_telmn]'))\r\n                                    ALTER TABLE [dbo].[T_telmn] DROP CONSTRAINT [FK_T_telmn_T_AccDef]\r\n                                    /****** Object:  Table [dbo].[T_telmn]    Script Date: 08/03/2017 16:21:54 ******/\r\n                                    IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_telmn]') AND type in (N'U'))\r\n                                    DROP TABLE [dbo].[T_telmn]");
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_telmn]    Script Date: 08/03/2017 16:26:14 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_telmn]') AND type in (N'U'))\r\n                                    BEGIN\r\n                                    CREATE TABLE [dbo].[T_telmn](\r\n\t                                    [pl] [int] NOT NULL,\r\n\t                                    [price] [float] NULL,\r\n\t                                    [d] [int] NULL,\r\n\t                                    [accno] [varchar](30) COLLATE Arabic_CI_AS NULL,\r\n                                     CONSTRAINT [PK_T_telmn] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [pl] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    END\r\n                                    SET ANSI_PADDING OFF\r\n                                    INSERT [dbo].[T_telmn] ([pl], [price], [d], [accno]) VALUES (0, 2, 0, NULL)\r\n                                    INSERT [dbo].[T_telmn] ([pl], [price], [d], [accno]) VALUES (1, 3, 0, NULL)\r\n                                    INSERT [dbo].[T_telmn] ([pl], [price], [d], [accno]) VALUES (2, 7, 0, NULL)\r\n                                    INSERT [dbo].[T_telmn] ([pl], [price], [d], [accno]) VALUES (3, 12, 0, NULL)\r\n                                    INSERT [dbo].[T_telmn] ([pl], [price], [d], [accno]) VALUES (4, 50, 0, NULL)");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_per ADD [romnoNew] [int] NULL");
                db.ExecuteCommand("ALTER TABLE T_Reserv ADD [romnoNew] [int] NULL");
                db.ExecuteCommand("ALTER TABLE T_per1 ADD [romnoNew] [int] NULL");
                db.ExecuteCommand("ALTER TABLE T_tel ADD [romnoNew] [int] NULL");
                db.ExecuteCommand("ALTER TABLE T_tran ADD [romnoNew] [int] NULL");
                db.ExecuteCommand("ALTER TABLE T_romtrn ADD [romnoNew] [int] NULL");
                db.ExecuteCommand("ALTER TABLE T_romtrn ADD [romnoNew1] [int] NULL");
                db.ExecuteCommand("ALTER TABLE T_romtrn ADD [romnoNew2] [int] NULL");
                db.ExecuteCommand("ALTER TABLE dbo.T_per DROP CONSTRAINT [FK_T_per_T_Rom]");
                db.ExecuteCommand("ALTER TABLE dbo.T_romtrn DROP CONSTRAINT [FK_T_romtrn_T_Rom]");
                db.ExecuteCommand("ALTER TABLE dbo.T_romtrn DROP CONSTRAINT [FK_T_romtrn_T_Rom1]");
                db.ExecuteCommand("ALTER TABLE dbo.T_per1 DROP CONSTRAINT [FK_T_per1_T_Rom]");
                db.ExecuteCommand("ALTER TABLE dbo.T_Reserv DROP CONSTRAINT [FK_T_Reserv_T_Rom]");
                db.ExecuteCommand("ALTER TABLE dbo.T_tel DROP CONSTRAINT [FK_T_tel_T_Rom]");
                db.ExecuteCommand("ALTER TABLE dbo.T_tran DROP CONSTRAINT [FK_T_tran_T_Rom]");
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_Snd]    Script Date: 09/03/2017 00:59:10 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Snd](\r\n\t                                    [gd_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [fNo] [int] NOT NULL,\r\n\t                                    [SndName] [varchar](100) NULL,\r\n\t                                    [romno] [int] NULL,\r\n\t                                    [price] [float] NULL,\r\n\t                                    [det] [varchar](250) NULL,\r\n\t                                    [typ] [int] NULL,\r\n\t                                    [Usr] [varchar](30) NULL,\r\n\t                                    [gdUser] [varchar](3) NULL,\r\n\t                                    [gdUserNam] [varchar](50) NULL,\r\n\t                                    [perno] [int] NULL,\r\n\t                                    [dt] [varchar](10) NULL,\r\n\t                                    [curr] [int] NULL,\r\n\t                                    [tm] [varchar](11) NULL,\r\n\t                                    [ch] [int] NULL,\r\n\t                                    [curcost] [float] NULL,\r\n\t                                    [sala] [int] NULL,\r\n\t                                    [typN] [int] NULL,\r\n\t                                    [ShekNo] [varchar](50) NULL,\r\n\t                                    [ShekDate] [varchar](20) NULL,\r\n\t                                    [ShekBank] [varchar](50) NULL,\r\n\t                                    [IfTrans] [int] NULL,\r\n\t                                    [RStat] [int] NULL,\r\n\t                                    [GadeNo] [float] NULL,\r\n\t                                    [GadeId] [float] NULL,\r\n                                     CONSTRAINT [PK_T_Snd] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [gd_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_Snd]  WITH CHECK ADD  CONSTRAINT [FK_T_Snd_T_Curency] FOREIGN KEY([curr])\r\n                                    REFERENCES [dbo].[T_Curency] ([Curency_ID])\r\n                                    ALTER TABLE [dbo].[T_Snd] CHECK CONSTRAINT [FK_T_Snd_T_Curency]\r\n                                    ALTER TABLE [dbo].[T_Snd]  WITH CHECK ADD  CONSTRAINT [FK_T_Snd_T_per] FOREIGN KEY([perno])\r\n                                    REFERENCES [dbo].[T_per] ([perno])\r\n                                    ALTER TABLE [dbo].[T_Snd] CHECK CONSTRAINT [FK_T_Snd_T_per]");
                db.ExecuteCommand("        SET IDENTITY_INSERT [dbo].[T_INVSETTING] ON\r\n                                            INSERT [dbo].[T_INVSETTING] ([InvSet_ID], [InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[defSizePaper],[Orientation],[CatID],[PrintCat]) VALUES (27, 27, N'سند قبض نزيل', N'Catch Receipt Guest', N'1', N'1         ', N'أستلمنا من المكرم             ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, -2147483633, 16706518, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 10, N'', N'111 ', NULL, 1, 1,1,N'',1,NULL,0)\r\n                                            INSERT [dbo].[T_INVSETTING] ([InvSet_ID], [InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[defSizePaper],[Orientation],[CatID],[PrintCat]) VALUES (28, 28, N'سند صرف نزيل', N'receipt Guest', N'1', N'1         ', N'أصرفوا لي المكرم              ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, -2147483633, 16706518, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 10, N'', N'111 ', NULL, 1, 1,1,N'',1,NULL,0)\r\n                                            SET IDENTITY_INSERT [dbo].[T_INVSETTING] OFF");
                try
                {
                    T_AccDef c = db.StockAccDef("3011");
                    if (c != null && !string.IsNullOrEmpty(c.AccDef_No))
                    {
                        T_AccDef q = db.StockAccDef("3011002");
                        if (q == null || string.IsNullOrEmpty(q.AccDef_No))
                        {
                            try
                            {
                                db.ExecuteCommand("INSERT [dbo].[T_AccDef] ([AccDef_No], [Arb_Des], [Eng_Des], [ParAcc], [Lev], [Typ], [AccCat], [DC], [Sts], [Debit], [Credit], [Balance], [Trn], [City], [Email], [Telphone1], [Telphone2], [Fax], [Mobile], [MaxLemt], [DesPers], [StrAm], [Adders], [Mnd], [Price], [zipCod], [PersonalNm], [RessonStoped], [StopedState], [CompanyID]) VALUES (N'3011002', N'إيرادات الفندق', N'Hotel Income', N'3011', 4, N'1', 7, 1, 0, 0, 0, 0, 1, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1)");
                                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [GuestBoxAcc] = '3011002' ");
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                catch
                {
                }
                db.ExecuteCommand("alter table T_Reserv alter column Usr [varchar](100) NULL");
                db.ExecuteCommand("alter table T_per alter column jobpls [varchar](150) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_Loc]    Script Date: 09/14/2017 14:43:05 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Loc](\r\n\t                                    [Loc_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [Loc_No] [varchar](30) NULL,\r\n\t                                    [Arb_Des] [varchar](100) NULL,\r\n\t                                    [Eng_Des] [varchar](100) NULL,\r\n\t                                    [CompanyID] [int] NULL,\r\n                                     CONSTRAINT [PK_T_Loc] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [Loc_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF");
                db.ExecuteCommand("UPDATE [dbo].[T_Rom]  SET [aline] = 1");
                db.ExecuteCommand("SET IDENTITY_INSERT [dbo].[T_Loc] ON\r\n                                    INSERT [dbo].[T_Loc] ([Loc_ID], [Loc_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (1, N'1', N'شمالي', N'South', 1)\r\n                                    INSERT [dbo].[T_Loc] ([Loc_ID], [Loc_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (2, N'2', N'جنوبي', N'North', 1)\r\n                                    INSERT [dbo].[T_Loc] ([Loc_ID], [Loc_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (3, N'3', N'شرقي', N'East', 1)\r\n                                    INSERT [dbo].[T_Loc] ([Loc_ID], [Loc_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (4, N'4', N'غربي', N'West', 1)\r\n                                    SET IDENTITY_INSERT [dbo].[T_Loc] OFF");
                db.ExecuteCommand("ALTER TABLE [dbo].[T_Rom]  WITH CHECK ADD  CONSTRAINT [FK_T_Rom_T_Loc] FOREIGN KEY([aline])\r\n                                    REFERENCES [dbo].[T_Loc] ([Loc_ID])\r\n                                    ALTER TABLE [dbo].[T_Rom] CHECK CONSTRAINT [FK_T_Rom_T_Loc]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[S_T_SINVDET_DELETE]') AND type in (N'P', N'PC'))\r\n                                    BEGIN\r\n                                    EXEC dbo.sp_executesql @statement = N'\r\n                                    CREATE PROCEDURE [dbo].[S_T_SINVDET_DELETE](\r\n                                                      @SInvDet_ID INT \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n\r\n                                            declare @SInvTyp int \r\n                                            declare @SInvId int\r\n                                            declare @SMndID int\r\n                                            declare @SItemCountMnd int \r\n                                            declare @SMndKind int \r\n                                            declare @SRelation int\r\n                                                   \r\n                                            select @SInvId = SInvId from T_SINVDET where SInvDet_ID = @SInvDet_ID;\r\n\r\n                                            select @SRelation = InvId from T_INVDET where InvDet_ID = @SInvId;\r\n\r\n                                            select @SInvTyp = InvTyp from T_INVHED where InvHed_ID = @SRelation;\r\n\r\n                                            select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n                                            \r\n                                            select @SMndKind = Mnd_Typ from T_Mndob where Mnd_ID = @SMndID;\r\n                                            \r\n                                            if(@SInvTyp != 7 and @SInvTyp != 8 and @SInvTyp != 9 and @SInvTyp != 21)\r\n                                            begin\r\n                                              if(@SMndKind != 1 or @SMndKind is null)\r\n\t\t                                          begin\r\n\t\t\t                                          UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) \r\n\t\t\t                                          where (SInvDet_ID = @SInvDet_ID) and (T_SINVDET.SItmTyp <> 3) and (T_SINVDET.SItmTyp <> 2);\r\n\r\n\t\t\t                                          UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) AND (T_SINVDET.SStoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n                                        \t\t\t  \r\n\t\t\t                                          UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From  T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) AND (T_SINVDET.SStoreNo = T_QTYEXP.storeNo) AND (T_SINVDET.SDatExper = T_QTYEXP.DatExper)\r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n\t\t                                          end\r\n                                              if(@SInvTyp = 14)\r\n\t\t                                          begin\r\n\t\t\t                                          UPDATE T_STKSQTY SET T_STKSQTY.stkInt = T_STKSQTY.stkInt - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) AND (T_SINVDET.SStoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n\t\t                                          end\r\n                                             if(@SInvTyp = 17)\r\n\t                                         begin\r\n\t \t\t                                          UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) \r\n\t\t\t                                          where (SInvDet_ID = @SInvDet_ID) and (T_SINVDET.SItmTyp <> 3) and (T_SINVDET.SItmTyp <> 2);\r\n\r\n\t\t\t                                          UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) AND (T_SINVDET.SStoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n                                        \t\t\t  \r\n\t\t\t                                          UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From  T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) AND (T_SINVDET.SStoreNo = T_QTYEXP.storeNo) AND (T_SINVDET.SDatExper = T_QTYEXP.DatExper)\r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 ;\r\n                                        \t\t\t  \r\n\t                                             -- select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n\t\t                                         -- UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_SINVDET.SRealQty)\r\n\t\t                                         -- From T_SINVDET Left Join T_StoreMnd ON (T_SINVDET.SItmNo = T_StoreMnd.itmNo) AND (T_SINVDET.SStoreNo = T_StoreMnd.storeNo)  \r\n\t\t                                         -- where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2) and T_StoreMnd.MndNo = @SMndID ;\r\n                                             end\r\n                                             \r\n                                             if(@SInvTyp = 20)\r\n\t                                         begin\r\n\t       \t                                          UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) \r\n\t\t\t                                          where (SInvDet_ID = @SInvDet_ID) and (T_SINVDET.SItmTyp <> 3) and (T_SINVDET.SItmTyp <> 2);\r\n\r\n\t\t\t                                          UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From T_SINVDET Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) AND (T_SINVDET.SStoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n                                        \t\t\t  \r\n\t\t\t                                          UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_SINVDET.SRealQty \r\n\t\t\t                                          From  T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) AND (T_SINVDET.SStoreNo = T_QTYEXP.storeNo) AND (T_SINVDET.SDatExper = T_QTYEXP.DatExper)\r\n\t\t\t                                          where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2);\r\n                                        \t\t\t  \r\n\t                                            --  select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n\t\t                                        --  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_SINVDET.SRealQty \r\n\t\t                                        --  From T_SINVDET Left Join T_StoreMnd ON (T_SINVDET.SItmNo = T_StoreMnd.itmNo) AND (T_SINVDET.SStoreNo = T_StoreMnd.storeNo)  \r\n\t\t                                        --  where @SInvDet_ID = SInvDet_ID and T_SINVDET.SItmTyp <> 3 and (T_SINVDET.SItmTyp <> 2) and T_StoreMnd.MndNo = @SMndID ;\r\n                                             end\r\n                                            end\r\n\r\n                                        \r\n\r\n                                          DELETE FROM T_SINVDET\r\n                                          WHERE      @SInvDet_ID = SInvDet_ID   \r\n\r\n                                          RETURN\r\n                                          END\r\n                                    ' \r\n                                    END");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[S_T_SINVDET_INSERT]') AND type in (N'P', N'PC'))\r\n                                    BEGIN\r\n                                    EXEC dbo.sp_executesql @statement = N'\r\n\r\n                                    CREATE PROCEDURE [dbo].[S_T_SINVDET_INSERT](   \r\n                                                 @SInvDet_ID INT OUTPUT,\r\n                                                 @SInvNo VARCHAR (10)=NULL,\r\n                                                 @SInvId INT =NULL,\r\n                                                 @SInvSer INT =NULL,\r\n                                                 @SItmNo VARCHAR (50)=NULL,\r\n                                                 @SCost FLOAT =NULL,\r\n                                                 @SQty FLOAT =NULL,\r\n                                                 @SItmDes VARCHAR (50)=NULL,\r\n                                                 @SItmUnt VARCHAR (100)=NULL,\r\n                                                 @SItmDesE VARCHAR (50)=NULL,\r\n                                                 @SItmUntE VARCHAR (100)=NULL,\r\n                                                 @SItmUntPak FLOAT =NULL,\r\n                                                 @SStoreNo INT=NULL,\r\n                                                 @SPrice FLOAT =NULL,\r\n                                                 @SAmount FLOAT =NULL,\r\n                                                 @SRealQty FLOAT =NULL,\r\n                                                 @SitmInvDsc FLOAT =NULL,\r\n                                                 @SDatExper VARCHAR (11)=NULL,\r\n                                                 @SItmDis FLOAT =NULL,\r\n                                                 @SItmTyp INT =NULL,\r\n                                                 @SItmIndex INT =NULL,\r\n                                                 @SItmWight FLOAT =NULL,\r\n                                                 @SItmWight_T FLOAT =NULL,\r\n                                                 @SQtyDef FLOAT =NULL,\r\n                                                 @SPriceDef FLOAT =NULL,\r\n                                                 @SInvIdHEAD INT =NULL\r\n                                                 \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n\r\n                                          INSERT INTO T_SINVDET(\r\n                                                 SInvNo,\r\n                                                 SInvId,\r\n                                                 SInvSer,\r\n                                                 SItmNo,\r\n                                                 SCost,\r\n                                                 SQty,\r\n                                                 SItmDes,\r\n                                                 SItmUnt,\r\n                                                 SItmDesE,\r\n                                                 SItmUntE,\r\n                                                 SItmUntPak,\r\n                                                 SStoreNo,\r\n                                                 SPrice,\r\n                                                 SAmount,\r\n                                                 SRealQty,\r\n                                                 SitmInvDsc,\r\n                                                 SDatExper,\r\n                                                 SItmDis,\r\n                                                 SItmTyp,\r\n                                                 SItmIndex,\r\n                                                 SItmWight,\r\n                                                 SItmWight_T,\r\n                                                 SQtyDef,\r\n                                                 SPriceDef,\r\n                                                 SInvIdHEAD\r\n                                          )\r\n                                          VALUES\r\n                                          (\r\n                                                @SInvNo,\r\n                                                @SInvId,\r\n                                                @SInvSer,\r\n                                                @SItmNo,\r\n                                                @SCost,\r\n                                                @SQty,\r\n                                                @SItmDes,\r\n                                                @SItmUnt,\r\n                                                @SItmDesE,\r\n                                                @SItmUntE,\r\n                                                @SItmUntPak,\r\n                                                @SStoreNo,\r\n                                                @SPrice,\r\n                                                @SAmount,\r\n                                                @SRealQty,\r\n                                                @SitmInvDsc,\r\n                                                @SDatExper,\r\n                                                @SItmDis,\r\n                                                @SItmTyp,\r\n                                                @SItmIndex,\r\n                                                @SItmWight,\r\n                                                @SItmWight_T,\r\n                                                @SQtyDef,\r\n                                                @SPriceDef,\r\n                                                @SInvIdHEAD\r\n                                          )\r\n                                          SELECT @SInvDet_ID = SCOPE_IDENTITY()\r\n\r\n                                                declare @SItemCount int  \r\n                                                declare @SInvTyp int\r\n                                                declare @SMndID int\r\n                                                declare @SItemCountMnd int \r\n                                                declare @SRelation int\r\n                                                   \r\n                                                select @SRelation = InvId from T_INVDET where InvDet_ID = @SInvId;\r\n                                                select @SItemCount = Count(*) from T_STKSQTY where itmNo = @SItmNo and storeNo =@SStoreNo;\r\n                                                select @SInvTyp = InvTyp from T_INVHED where InvHed_ID = @SRelation;\r\n                                                if((@SInvTyp != 7 and @SInvTyp != 8 and @SInvTyp != 9 and @SInvTyp != 21) and @SItmTyp <> 3 and @SItmTyp <> 2)\r\n                                                begin\r\n\r\n                                                    Update T_Items SET OpenQty = OpenQty+@SRealQty WHERE Itm_No = @SItmNo;\r\n                                                    if(@SItemCount > 0)\r\n                                                    begin\r\n                                                    Update T_STKSQTY SET stkQty = stkQty+@SRealQty WHERE itmNo = @SItmNo and storeNo = @SStoreNo;\r\n                                                    end\r\n\r\n                                                    if(@SItemCount = 0)\r\n                                                    begin \r\n                                                    INSERT INTO T_STKSQTY(itmNo,storeNo,stkQty,stkInt) VALUES(@SItmNo,@SStoreNo,@SRealQty,0);\r\n                                                    END\r\n\r\n                                                    if(@SInvTyp = 14)\r\n                                                    begin\r\n                                                        Update T_STKSQTY SET stkInt = stkInt+@SRealQty WHERE itmNo = @SItmNo and storeNo = @SStoreNo;\r\n                                                    end\r\n\r\n                                                    select @SItemCount = Count(*) from T_QTYEXP where itmNo = @SItmNo and storeNo =@SStoreNo and DatExper = @SDatExper;\r\n\r\n                                                    if(@SItemCount > 0 and @SDatExper <> '')\r\n                                                    begin\r\n                                                    Update T_QTYEXP SET stkQty = stkQty+@SRealQty WHERE itmNo = @SItmNo and storeNo = @StoreNo and DatExper = @SDatExper;\r\n                                                    end\r\n\r\n                                                    if(@SItemCount = 0 and @SDatExper <> '')\r\n                                                    begin \r\n                                                    INSERT INTO T_QTYEXP(itmNo,storeNo,DatExper,stkQty) VALUES(@SItmNo,@SStoreNo,@SDatExper,@SRealQty);\r\n                                                    END\r\n--                                                    if(@SInvTyp = 17)\r\n--                                                        begin\r\n--                                                         select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n--                                                            select @SItemCountMnd = Count(*) from T_StoreMnd where itmNo = @SItmNo and storeNo =@SStoreNo and MndNo = @SMndID;\r\n--                                                                    if(@SItemCountMnd > 0)\r\n--                                                                    begin\r\n--                                                                         Update T_StoreMnd SET stkQty = stkQty + abs(@SRealQty) WHERE itmNo = @SItmNo and storeNo = @SStoreNo and MndNo = @SMndID;\r\n--                                                                    end\r\n--\r\n--                                                                    if(@SItemCountMnd = 0)\r\n--                                                                    begin \r\n--                                                                         INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,MndNo) VALUES(@SItmNo,@SStoreNo,abs(@SRealQty),0,@SMndID);\r\n--                                                                    END\r\n--                                                        end\t\r\n--                                                    if(@SInvTyp = 20)\r\n--                                                        begin\r\n--                                                         select @SMndID = MndNo from T_INVHED where InvHed_ID = @SRelation;\r\n--                                                            select @SItemCountMnd = Count(*) from T_StoreMnd where itmNo = @SItmNo and storeNo =@SStoreNo and MndNo = @SMndID;\r\n--                                                                    if(@SItemCountMnd > 0)\r\n--                                                                    begin\r\n--                                                                         Update T_StoreMnd SET stkQty = stkQty + (-@SRealQty) WHERE itmNo = @SItmNo and storeNo = @SStoreNo and MndNo = @SMndID;\r\n--                                                                    end\r\n--\r\n--                                                                    if(@SItemCountMnd = 0)\r\n--                                                                    begin \r\n--                                                                         INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,MndNo) VALUES(@SItmNo,@SStoreNo,-@SRealQty,0,@SMndID);\r\n--                                                                    END\r\n--                                                        end\r\n                                                end\r\n\r\n\r\n                                              RETURN\r\n                                              END\r\n                                    ' \r\n                                    END");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("     ALTER PROCEDURE [dbo].[S_T_INVDET_INSERT](   \r\n                                             @InvDet_ID INT OUTPUT,\r\n                                             @InvNo VARCHAR (10)=NULL,\r\n                                             @InvId INT =NULL,\r\n                                             @InvSer INT =NULL,\r\n                                             @ItmNo VARCHAR (50)=NULL,\r\n                                             @Cost FLOAT =NULL,\r\n                                             @Qty FLOAT =NULL,\r\n                                             @ItmDes VARCHAR (50)=NULL,\r\n                                             @ItmUnt VARCHAR (100)=NULL,\r\n                                             @ItmDesE VARCHAR (50)=NULL,\r\n                                             @ItmUntE VARCHAR (100)=NULL,\r\n                                             @ItmUntPak FLOAT =NULL,\r\n                                             @StoreNo INT=NULL,\r\n                                             @Price FLOAT =NULL,\r\n                                             @Amount FLOAT =NULL,\r\n                                             @RealQty FLOAT =NULL,\r\n                                             @itmInvDsc FLOAT =NULL,\r\n                                             @DatExper VARCHAR (11)=NULL,\r\n                                             @ItmDis FLOAT =NULL,\r\n                                             @ItmTyp INT =NULL,\r\n                                             @ItmIndex INT =NULL,\r\n                                             @ItmWight FLOAT =NULL,\r\n                                             @ItmWight_T FLOAT =NULL,\r\n                                             @ItmAddCost FLOAT =NULL,\r\n                                             @RunCod VARCHAR (100)=NULL,\r\n                                             @LineDetails VARCHAR (250)=NULL,\r\n                                             @Serial_Key VARCHAR (100)=NULL,\r\n                                             @ItmTax FLOAT =NULL ,\r\n                                             @OfferTyp INT =NULL                                                \r\n                                      )\r\n                                      AS\r\n                                      BEGIN\r\n                                      INSERT INTO T_INVDET(\r\n                                             InvNo,\r\n                                             InvId,\r\n                                             InvSer,\r\n                                             ItmNo,\r\n                                             Cost,\r\n                                             Qty,\r\n                                             ItmDes,\r\n                                             ItmUnt,\r\n                                             ItmDesE,\r\n                                             ItmUntE,\r\n                                             ItmUntPak,\r\n                                             StoreNo,\r\n                                             Price,\r\n                                             Amount,\r\n                                             RealQty,\r\n                                             itmInvDsc,\r\n                                             DatExper,\r\n                                             ItmDis,\r\n                                             ItmTyp,\r\n                                             ItmIndex,\r\n                                             ItmWight,\r\n                                             ItmWight_T,\r\n                                             ItmAddCost,\r\n                                             RunCod,\r\n                                             LineDetails,\r\n                                             Serial_Key,\r\n                                             ItmTax,\r\n                                             OfferTyp\r\n                                      )\r\n                                      VALUES\r\n                                      (\r\n                                             \r\n                                            @InvNo,\r\n                                            @InvId,\r\n                                            @InvSer,\r\n                                            @ItmNo,\r\n                                            @Cost,\r\n                                            @Qty,\r\n                                            @ItmDes,\r\n                                            @ItmUnt,\r\n                                            @ItmDesE,\r\n                                            @ItmUntE,\r\n                                            @ItmUntPak,\r\n                                            @StoreNo,\r\n                                            @Price,\r\n                                            @Amount,\r\n                                            @RealQty,\r\n                                            @itmInvDsc,\r\n                                            @DatExper,\r\n                                            @ItmDis,\r\n                                            @ItmTyp,\r\n                                            @ItmIndex,\r\n                                            @ItmWight,\r\n                                            @ItmWight_T,\r\n                                            @ItmAddCost,\r\n                                            @RunCod,\r\n                                            @LineDetails,\r\n                                            @Serial_Key,\r\n                                            @ItmTax,\r\n                                            @OfferTyp\r\n                                      )\r\n                                      SELECT @InvDet_ID = SCOPE_IDENTITY()\r\n                                        declare @ItemCount int  \r\n                                        declare @InvTyp int\r\n                                        declare @MndID int\r\n                                        declare @CusVenNo varchar(30)\r\n                                        declare @ItemCountMnd int \r\n                                        declare @ItemCountCust int \r\n\t\t                                select @ItemCount = Count(*) from T_STKSQTY where itmNo = @ItmNo and storeNo =@StoreNo;\r\n                                        select @InvTyp = InvTyp from T_INVHED where InvHed_ID = @InvId;\r\n                                        if((@InvTyp != 7 and @InvTyp != 8 and @InvTyp != 9 and @InvTyp != 21) and @ItmTyp <> 3)\r\n                                        begin\r\n\t\t\t                                      if(@ItmTyp <> 2)\r\n\t\t\t                                      begin\r\n\t\t                                                Update T_Items SET OpenQty = OpenQty+@RealQty WHERE Itm_No = @ItmNo;\r\n\t\t\t                                            if(@ItemCount > 0)\r\n\t\t\t                                            begin\r\n\t\t\t                                            Update T_STKSQTY SET stkQty = stkQty+@RealQty WHERE itmNo = @ItmNo and storeNo = @StoreNo;\r\n\t\t\t                                            end\r\n\r\n\t\t\t                                            if(@ItemCount = 0)\r\n\t\t\t                                            begin \r\n\t\t\t                                            INSERT INTO T_STKSQTY(itmNo,storeNo,stkQty,stkInt) VALUES(@ItmNo,@StoreNo,@RealQty,0);\r\n\t\t\t                                            END\r\n                                                        if(@InvTyp = 14)\r\n                                                        begin\r\n\t\t\t\t                                            Update T_STKSQTY SET stkInt = stkInt+@RealQty WHERE itmNo = @ItmNo and storeNo = @StoreNo;\r\n                                                        end\r\n\r\n\t\t\t                                            select @ItemCount = Count(*) from T_QTYEXP where itmNo = @ItmNo and storeNo =@StoreNo and (DatExper = @DatExper and RunCod = @RunCod);\r\n\r\n\t\t\t                                            if(@ItemCount > 0 and (@DatExper <> '' or @RunCod <> ''))\r\n\t\t\t                                            begin\r\n\t\t\t                                            Update T_QTYEXP SET stkQty = stkQty+@RealQty WHERE itmNo = @ItmNo and storeNo = @StoreNo and (DatExper = @DatExper and RunCod = @RunCod);\r\n\t\t\t                                            end\r\n\r\n\t\t\t                                            if(@ItemCount = 0 and (@DatExper <> '' or @RunCod <> ''))\r\n\t\t\t                                            begin \r\n\t\t\t                                            INSERT INTO T_QTYEXP(itmNo,storeNo,DatExper,stkQty,RunCod) VALUES(@ItmNo,@StoreNo,@DatExper,@RealQty,@RunCod);\r\n\t\t\t                                            END\r\n                                            END\r\n\t\t\t                                      if(@InvTyp = 17)\r\n\t\t\t\t                                      begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   if(@MndID > 0 )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbegin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t          select @ItemCountMnd = Count(*) from T_StoreMnd where itmNo = @ItmNo and storeNo =@StoreNo and MndNo = @MndID;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  if(@ItemCountMnd > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   Update T_StoreMnd SET stkQty = stkQty + abs(@RealQty) WHERE itmNo = @ItmNo and storeNo = @StoreNo and MndNo = @MndID;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  end\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  if(@ItemCountMnd = 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  begin \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,MndNo) VALUES(@ItmNo,@StoreNo,abs(@RealQty),0,@MndID);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  else\r\n\t\t\t\t\t\t\t\t\t                        begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t         select @ItemCountCust = Count(*) from T_StoreMnd where itmNo = @ItmNo and storeNo =@StoreNo and CusVenNo = @CusVenNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  if(@ItemCountCust > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   Update T_StoreMnd SET stkQty = stkQty + abs(@RealQty) WHERE itmNo = @ItmNo and storeNo = @StoreNo and CusVenNo = @CusVenNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  end\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  if(@ItemCountCust = 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  begin \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,CusVenNo) VALUES(@ItmNo,@StoreNo,abs(@RealQty),0,@CusVenNo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t                                      END\t\r\n\t\t\t                                      if(@InvTyp = 20)\r\n\t\t\t\t                                      begin\r\n\t\t\t\t                                          select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t    if(@MndID > 0 )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbegin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t select @ItemCountMnd = Count(*) from T_StoreMnd where itmNo = @ItmNo and storeNo =@StoreNo and MndNo = @MndID;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  if(@ItemCountMnd > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   Update T_StoreMnd SET stkQty = stkQty + (-@RealQty) WHERE itmNo = @ItmNo and storeNo = @StoreNo and MndNo = @MndID;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  end\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  if(@ItemCountMnd = 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  begin \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,MndNo) VALUES(@ItmNo,@StoreNo,-@RealQty,0,@MndID);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t END\r\n\t\t\t\t\t\t\t                                 else\r\n\t\t\t\t\t\t\t                                     begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t select @ItemCountCust = Count(*) from T_StoreMnd where itmNo = @ItmNo and storeNo =@StoreNo and CusVenNo = @CusVenNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  if(@ItemCountCust > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  begin\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   Update T_StoreMnd SET stkQty = stkQty + (-@RealQty) WHERE itmNo = @ItmNo and storeNo = @StoreNo and CusVenNo = @CusVenNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  end\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  if(@ItemCountCust = 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  begin \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   INSERT INTO T_StoreMnd(itmNo,storeNo,stkQty,stkInt,CusVenNo) VALUES(@ItmNo,@StoreNo,-@RealQty,0,@CusVenNo);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  END\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t END\r\n\t\t\t\t                                      end\r\n                                        end\r\n                                      RETURN @InvDet_ID\r\n                                      END");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("      ALTER PROCEDURE [dbo].[S_T_INVDET_DELETE](\r\n                                                      @InvDet_ID INT \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n                                        declare @InvTyp int \r\n                                        declare @InvId int\r\n                                        declare @MndID int\r\n                                        declare @CusVenNo varchar(30)\r\n                                        declare @PaymentOrderTyp int\r\n                                        declare @ItemCountMnd int \r\n                                        declare @MndKind int \r\n                                         \r\n                                        select @InvId = InvId from T_INVDET where InvDet_ID = @InvDet_ID;\r\n\r\n                                        select @InvTyp = InvTyp from T_INVHED where InvHed_ID = @InvId;\r\n\r\n                                        select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n                                        \r\n                                        select @PaymentOrderTyp = PaymentOrderTyp from T_INVHED where InvHed_ID = @InvId;\r\n\r\n                                        select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n                                        \r\n                                        select @MndKind = Mnd_Typ from T_Mndob where Mnd_ID = @MndID;\r\n                                        \r\n                                        if(@InvTyp != 7 and @InvTyp != 8 and @InvTyp != 9 and @InvTyp != 21)\r\n                                        begin\r\n                                             if((@PaymentOrderTyp <= 0 or @PaymentOrderTyp is null) or ((@PaymentOrderTyp = 1 or @PaymentOrderTyp = 2) and (@InvTyp = 17 or @InvTyp = 20) ))\r\n\t\t                                      begin\r\n\t\t\t                                      UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_INVDET.RealQty \r\n\t\t\t                                      From T_INVDET Left Join T_Items ON (T_INVDET.ItmNo = T_Items.Itm_No) \r\n\t\t\t                                      where (InvDet_ID = @InvDet_ID) and (T_INVDET.ItmTyp <> 3) and (T_INVDET.ItmTyp <> 2);\r\n\r\n\t\t\t                                      UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_INVDET.RealQty \r\n\t\t\t                                      From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                      where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                    \t\t\t  \r\n\t\t\t                                      UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_INVDET.RealQty \r\n\t\t\t                                      From  T_INVDET Left Join T_QTYEXP ON (T_INVDET.ItmNo = T_QTYEXP.itmNo) AND (T_INVDET.StoreNo = T_QTYEXP.storeNo) AND (T_INVDET.DatExper = T_QTYEXP.DatExper and T_INVDET.RunCod = T_QTYEXP.RunCod )\r\n\t\t\t                                      where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                             end\r\n                                             if(@InvTyp = 14)\r\n\t\t                                      begin\r\n\t\t\t                                      UPDATE T_STKSQTY SET T_STKSQTY.stkInt = T_STKSQTY.stkInt - T_INVDET.RealQty \r\n\t\t\t                                      From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo)  \r\n\t\t\t                                      where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n\t\t                                      end\r\n                                         if(@InvTyp = 17)\r\n\t                                     begin\r\n\r\n                                    \t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_INVDET.RealQty)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = @MndID ;\r\n\t\t\t\t                                      \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_INVDET.RealQty)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = @CusVenNo ;\r\n                                         end\r\n                                         \r\n                                         if(@InvTyp = 20)\r\n\t                                     begin\r\n                                    \t\t\t\t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  select @MndID = MndNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = @MndID ;\r\n\t\t\t\t\t                                      \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvId;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo)  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  where @InvDet_ID = InvDet_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = @CusVenNo ;\r\n                                         end\r\n                                        end\r\n                                         \r\n                                          DELETE FROM T_INVDET\r\n                                          WHERE      @InvDet_ID = InvDet_ID    \r\n\r\n                                          RETURN\r\n                                          END");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER PROCEDURE [dbo].[S_T_INVHED_DELETE](\r\n                                              @InvHed_ID INT \r\n                                  )\r\n                                  AS\r\n                                  BEGIN\r\n                                  declare @InvTyp int\r\n                                  declare @MndID int\r\n                                  declare @CusVenNo varchar(30)\r\n                                  declare @PaymentOrderTyp int\r\n                                  declare @MndKind int \r\n                                       \r\n                                  select @InvTyp = InvTyp from T_INVHED where InvHed_ID = @InvHed_ID;\r\n\r\n                                select @MndID = MndNo from T_INVHED where InvHed_ID = @InvHed_ID;\r\n                                \r\n                                select @PaymentOrderTyp = PaymentOrderTyp from T_INVHED where InvHed_ID = @InvHed_ID;\r\n\r\n                                select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvHed_ID;\r\n\r\n                                select @MndKind = Mnd_Typ from T_Mndob where Mnd_ID = @MndID;\r\n                                \r\n                                  if(@InvTyp != 7 and @InvTyp != 8 and @InvTyp != 9 and @InvTyp != 21)\r\n                                begin\r\n                                  if(@PaymentOrderTyp <= 0 or @PaymentOrderTyp is null)\r\n\t                              begin\r\n\t\t                              UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_INVDET.RealQty \r\n\t\t                              From T_INVDET Left Join T_Items ON (T_INVDET.ItmNo = T_Items.Itm_No) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) \r\n\t\t                              where (InvHed_ID = @InvHed_ID) and (T_INVDET.ItmTyp <> 3) and (T_INVDET.ItmTyp <> 2);\r\n\r\n\t\t                              UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_INVDET.RealQty \r\n\t\t                              From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t                              where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                            \t\t  \r\n\t\t                              UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_INVDET.RealQty \r\n\t\t                              From  T_INVDET Left Join T_QTYEXP ON (T_INVDET.ItmNo = T_QTYEXP.itmNo) AND (T_INVDET.StoreNo = T_QTYEXP.storeNo) AND (T_INVDET.DatExper = T_QTYEXP.DatExper and T_INVDET.RunCod = T_QTYEXP.RunCod ) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)\r\n\t\t                              where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                  end\r\n                                 if(@InvTyp = 17)\r\n\t                             begin\r\n                                         if(@PaymentOrderTyp > 0)\r\n\t                                      begin\r\n \t\t\t\t\t\t\t\t\t\t      UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From T_INVDET Left Join T_Items ON (T_INVDET.ItmNo = T_Items.Itm_No) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) \r\n\t\t\t\t\t\t\t\t\t\t      where (InvHed_ID = @InvHed_ID) and (T_INVDET.ItmTyp <> 3) and (T_INVDET.ItmTyp <> 2);\r\n\r\n\t\t\t\t\t\t\t\t\t\t      UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t      where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                \t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t      UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From  T_INVDET Left Join T_QTYEXP ON (T_INVDET.ItmNo = T_QTYEXP.itmNo) AND (T_INVDET.StoreNo = T_QTYEXP.storeNo) AND (T_INVDET.DatExper = T_QTYEXP.DatExper and T_INVDET.RunCod = T_QTYEXP.RunCod ) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)\r\n\t\t\t\t\t\t\t\t\t\t      where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                          end\r\n\r\n\t\t\t\t\t\t\t\t\t\t  select @MndID = MndNo from T_INVHED where InvHed_ID = @InvHed_ID;  \t  \r\n\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_INVDET.RealQty)\r\n\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t  where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = @MndID ;\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvHed_ID;  \t  \r\n\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - abs(T_INVDET.RealQty)\r\n\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t  where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = @CusVenNo ;\r\n                                 end\r\n                                 \r\n                                 if(@InvTyp = 20)\r\n\t                             begin\r\n                                         if(@PaymentOrderTyp > 0)\r\n\t                                      begin\r\n \t\t\t\t\t\t\t\t\t\t      UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From T_INVDET Left Join T_Items ON (T_INVDET.ItmNo = T_Items.Itm_No) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) \r\n\t\t\t\t\t\t\t\t\t\t      where (InvHed_ID = @InvHed_ID) and (T_INVDET.ItmTyp <> 3) and (T_INVDET.ItmTyp <> 2);\r\n\r\n\t\t\t\t\t\t\t\t\t\t      UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t      where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                \t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t      UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t      From  T_INVDET Left Join T_QTYEXP ON (T_INVDET.ItmNo = T_QTYEXP.itmNo) AND (T_INVDET.StoreNo = T_QTYEXP.storeNo) AND (T_INVDET.DatExper = T_QTYEXP.DatExper and T_INVDET.RunCod = T_QTYEXP.RunCod ) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)\r\n\t\t\t\t\t\t\t\t\t\t      where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                          end\r\n\t\t\t\t\t\t\t\t\t\t\t  select @MndID = MndNo from T_INVHED where InvHed_ID = @InvHed_ID;  \t  \r\n\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t\t  where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = @MndID ;\r\n\t\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t\t  select @CusVenNo = CusVenNo from T_INVHED where InvHed_ID = @InvHed_ID;  \t  \r\n\t\t\t\t\t\t\t\t\t\t\t  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + T_INVDET.RealQty \r\n\t\t\t\t\t\t\t\t\t\t\t  From T_INVDET Left Join T_StoreMnd ON (T_INVDET.ItmNo = T_StoreMnd.itmNo) AND (T_INVDET.StoreNo = T_StoreMnd.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t\t\t\t\t\t\t\t\t\t  where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = @CusVenNo ;\r\n                                 end\r\n                             \r\n                                  if(@InvTyp = 14)\r\n                                  begin\r\n\t\t                              UPDATE T_STKSQTY SET T_STKSQTY.stkInt = T_STKSQTY.stkInt - T_INVDET.RealQty \r\n\t\t                              From T_INVDET Left Join T_STKSQTY ON (T_INVDET.ItmNo = T_STKSQTY.itmNo) AND (T_INVDET.StoreNo = T_STKSQTY.storeNo) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID)  \r\n\t\t                              where InvHed_ID = @InvHed_ID and T_INVDET.ItmTyp <> 3 and (T_INVDET.ItmTyp <> 2);\r\n                                  end       \r\n                                  \r\n                                end\r\n                                  UPDATE T_INVHED SET T_INVHED.IfDel = 1 \r\n                                  FROM  T_INVHED\r\n                                  WHERE  @InvHed_ID = InvHed_ID\r\n\r\n                                  RETURN\r\n                                  END");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("/****** Object:  StoredProcedure [dbo].[S_T_GDDET_INSERT]    Script Date: 12/23/2016 17:51:49 ******/\r\n                                    ALTER PROCEDURE [dbo].[S_T_GDDET_INSERT](   \r\n                                                 @GDDET_ID INT OUTPUT,\r\n                                                 @gdID INT =NULL,\r\n                                                 @gdNo VARCHAR (10)=NULL,\r\n                                                 @gdDes VARCHAR (100)=NULL,\r\n                                                 @gdDesE VARCHAR (100)=NULL,\r\n                                                 @recptTyp VARCHAR (20)=NULL,\r\n                                                 @AccNo VARCHAR (30)=NULL,\r\n                                                 @AccName VARCHAR (50)=NULL,\r\n                                                 @gdValue FLOAT =NULL,\r\n                                                 @recptNo VARCHAR (20)=NULL,\r\n                                                 @Lin INT =NULL,\r\n                                                 @AccNoDestruction VARCHAR (30)=NULL\r\n                                                 \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n\r\n                                          INSERT INTO T_GDDET(\r\n                                                 gdID,\r\n                                                 gdNo,\r\n                                                 gdDes,\r\n                                                 gdDesE,\r\n                                                 recptTyp,\r\n                                                 AccNo,\r\n                                                 AccName,\r\n                                                 gdValue,\r\n                                                 recptNo,\r\n                                                 Lin,\r\n                                                 AccNoDestruction\r\n                                          )\r\n                                          VALUES\r\n                                          (\r\n                                                 \r\n                                                @gdID,\r\n                                                @gdNo,\r\n                                                @gdDes,\r\n                                                @gdDesE,\r\n                                                @recptTyp,\r\n                                                @AccNo,\r\n                                                @AccName,\r\n                                                @gdValue,\r\n                                                @recptNo,\r\n                                                @Lin,\r\n                                                @AccNoDestruction\r\n                                          )\r\n                                          SELECT @GDDET_ID = SCOPE_IDENTITY()\r\n                                          UPDATE T_AccDef SET T_AccDef.Debit = T_AccDef.Debit + ROUND( T_GDDET.gdValue, case when Substring((select MAX(T_SYSSETTING.Seting) from T_SYSSETTING),49,1) = 0 then 2 else 3 end)\r\n                                          From T_AccDef Left Join T_GDDET ON (T_AccDef.AccDef_No = T_GDDET.AccNo) \r\n                                          where @GDDET_ID = GDDET_ID and  T_GDDET.gdValue > 0 ;\r\n                                          UPDATE T_AccDef SET T_AccDef.Credit = T_AccDef.Credit + ABS(ROUND( T_GDDET.gdValue, case when Substring((select MAX(T_SYSSETTING.Seting) from T_SYSSETTING),49,1) = 0 then 2 else 3 end))\r\n                                          From T_AccDef Left Join T_GDDET ON (T_AccDef.AccDef_No = T_GDDET.AccNo) \r\n                                          where @GDDET_ID = GDDET_ID and  T_GDDET.gdValue < 0 ;\r\n                                          UPDATE T_AccDef SET T_AccDef.Balance = T_AccDef.Debit - T_AccDef.Credit\r\n                                          From T_AccDef Left Join T_GDDET ON (T_AccDef.AccDef_No = T_GDDET.AccNo) \r\n                                          where @GDDET_ID = GDDET_ID ;\r\n                                          RETURN\r\n                                          END");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER PROCEDURE [dbo].[S_T_INVHED_INSERT](   \r\n                                                                     @InvHed_ID INT OUTPUT,\r\n                                                                     @InvId FLOAT =NULL,\r\n                                                                     @InvNo VARCHAR (10),\r\n                                                                     @InvTyp INT =NULL,\r\n                                                                     @InvCashPay INT =NULL,\r\n                                                                     @CusVenNo VARCHAR (20)=NULL,\r\n                                                                     @CusVenNm VARCHAR (50)=NULL,\r\n                                                                     @CusVenAdd VARCHAR (100)=NULL,\r\n                                                                     @CusVenTel VARCHAR (30)=NULL,\r\n                                                                     @Remark VARCHAR (MAX)=NULL,\r\n                                                                     @HDat VARCHAR (10)=NULL,\r\n                                                                     @GDat VARCHAR (10)=NULL,\r\n                                                                     @MndNo INT =NULL,\r\n                                                                     @SalsManNo VARCHAR (3)=NULL,\r\n                                                                     @SalsManNam VARCHAR (50)=NULL,\r\n                                                                     @InvTot FLOAT =NULL,\r\n                                                                     @InvTotLocCur FLOAT =NULL,\r\n                                                                     @InvDisPrs FLOAT =NULL,\r\n                                                                     @InvDisVal FLOAT =NULL,\r\n                                                                     @InvDisValLocCur FLOAT =NULL,\r\n                                                                     @InvNet FLOAT =NULL,\r\n                                                                     @InvNetLocCur FLOAT =NULL,\r\n                                                                     @CashPay FLOAT =NULL,\r\n                                                                     @CashPayLocCur FLOAT =NULL,\r\n                                                                     @IfRet INT =NULL,\r\n                                                                     @GadeNo FLOAT =NULL,\r\n                                                                     @GadeId FLOAT =NULL,\r\n                                                                     @IfDel INT =NULL,\r\n                                                                     @RetNo VARCHAR (10)=NULL,\r\n                                                                     @RetId FLOAT =NULL,\r\n                                                                     @InvCstNo INT =NULL,\r\n                                                                     @InvCashPayNm VARCHAR (100)=NULL,\r\n                                                                     @RefNo VARCHAR (20)=NULL,\r\n                                                                     @InvCost FLOAT =NULL,\r\n                                                                     @EstDat VARCHAR (10)=NULL,\r\n                                                                     @CustPri INT =NULL,\r\n                                                                     @ArbTaf VARCHAR (150)=NULL,\r\n                                                                     @CurTyp INT =NULL,\r\n                                                                     @InvCash VARCHAR (20)=NULL,\r\n                                                                     @ToStore VARCHAR (3)=NULL,\r\n                                                                     @ToStoreNm VARCHAR (50)=NULL,\r\n                                                                     @InvQty FLOAT =NULL,\r\n                                                                     @EngTaf VARCHAR (150)=NULL,\r\n                                                                     @IfTrans INT =NULL,\r\n                                                                     @CustRep FLOAT =NULL,\r\n                                                                     @CustNet FLOAT =NULL,\r\n                                                                     @InvWight_T FLOAT =NULL,\r\n                                                                     @IfPrint INT =NULL,\r\n                                                                     @LTim VARCHAR (10)=NULL,\r\n                                                                     @CREATED_BY VARCHAR(100) =NULL,\r\n                                                                     @DATE_CREATED datetime =NULL,\r\n                                                                     @MODIFIED_BY VARCHAR (100)=NULL,\r\n                                                                     @DATE_MODIFIED datetime=NULL,\r\n                                                                     @CreditPay float=NULL,\r\n                                                                     @CreditPayLocCur float=NULL,\r\n                                                                     @NetworkPay float=NULL,\r\n                                                                     @NetworkPayLocCur float=NULL,\r\n                                                                     @CommMnd_Inv float=NULL,\r\n                                                                     @MndExtrnal bit=NULL,\r\n                                                                     @CompanyID int=NULL,\r\n                                                                     @InvAddCost float=NULL,\r\n                                                                     @InvAddCostLoc float=NULL,\r\n                                                                     @InvAddCostExtrnal float=NULL,\r\n                                                                     @InvAddCostExtrnalLoc float=NULL,\r\n                                                                     @IsExtrnalGaid bit=NULL,\r\n                                                                     @ExtrnalCostGaidID float=NULL,\r\n                                                                     @Puyaid float=NULL,\r\n                                                                     @Remming float=NULL,\r\n                                                                     @RoomNo int=NULL,\r\n                                                                     @OrderTyp int=NULL,\r\n                                                                     @RoomSts bit=NULL,\r\n                                                                     @chauffeurNo int=NULL,\r\n                                                                     @RoomPerson int=NULL,\r\n                                                                     @ServiceValue float=NULL,\r\n                                                                     @Sts bit=NULL,\r\n                                                                     @PaymentOrderTyp int=NULL,\r\n                                                                     @AdminLock bit=NULL,\r\n                                                                     @DeleteDate VARCHAR (10)=NULL,\r\n                                                                     @DeleteTime VARCHAR (10)=NULL,\r\n                                                                     @UserNew VARCHAR (3)=NULL,\r\n                                                                     @IfEnter int=NULL,\r\n                                                                     @InvAddTax float=NULL,\r\n                                                                     @InvAddTaxlLoc float=NULL,\r\n                                                                     @IsTaxGaid bit=NULL,\r\n                                                                     @TaxGaidID float=NULL,\r\n                                                                     @IsTaxUse bit=NULL,\r\n                                                                     @InvValGaidDis float=NULL,\r\n                                                                     @InvValGaidDislLoc float=NULL,\r\n                                                                     @IsDisGaid bit=NULL,\r\n                                                                     @DisGaidID1 float=NULL,\r\n                                                                     @IsDisUse1 bit=NULL,\r\n                                                                     @InvComm float=NULL,\r\n                                                                     @InvCommLoc float=NULL,\r\n                                                                     @IsCommGaid bit=NULL,\r\n                                                                     @CommGaidID float=NULL,\r\n                                                                     @IsCommUse bit=NULL,\r\n                                                                     @IsTaxLines bit=NULL,\r\n                                                                     @IsTaxByTotal bit=NULL,\r\n                                                                     @IsTaxByNet bit=NULL,\r\n                                                                     @TaxByNetValue float=NULL,\r\n                                                                     @DesPointsValue float=NULL,\r\n                                                                     @DesPointsValueLocCur float=NULL,\r\n                                                                     @PointsCount float=NULL,\r\n                                                                     @IsPoints bit=NULL,\r\n                                                                     @tailor1 VARCHAR (100)=NULL,\r\n                                                                     @tailor2 VARCHAR (100)=NULL,\r\n                                                                     @tailor3 VARCHAR (100)=NULL,\r\n                                                                     @tailor4 VARCHAR (100)=NULL,\r\n                                                                     @tailor5 VARCHAR (100)=NULL,\r\n                                                                     @tailor6 VARCHAR (100)=NULL,\r\n                                                                     @tailor7 VARCHAR (100)=NULL,\r\n                                                                     @tailor8 VARCHAR (100)=NULL,\r\n                                                                     @tailor9 VARCHAR (100)=NULL,\r\n                                                                     @tailor10 VARCHAR (100)=NULL,\r\n                                                                     @tailor11 VARCHAR (100)=NULL,\r\n                                                                     @tailor12 VARCHAR (100)=NULL,\r\n                                                                     @tailor13 VARCHAR (100)=NULL,\r\n                                                                     @tailor14 VARCHAR (100)=NULL,\r\n                                                                     @tailor15 VARCHAR (100)=NULL,\r\n                                                                     @tailor16 VARCHAR (100)=NULL,\r\n                                                                     @tailor17 VARCHAR (100)=NULL,\r\n                                                                     @tailor18 VARCHAR (100)=NULL,\r\n                                                                     @tailor19 VARCHAR (100)=NULL,\r\n                                                                     @tailor20 VARCHAR (100)=NULL,\r\n                                                                     @InvImg [varbinary](max) =NULL\r\n                                                              )\r\n                                                              AS\r\n                                                              BEGIN\r\n\r\n                                                              INSERT INTO T_INVHED(\r\n                                                                     InvId,\r\n                                                                     InvNo,\r\n                                                                     InvTyp,\r\n                                                                     InvCashPay,\r\n                                                                     CusVenNo,\r\n                                                                     CusVenNm,\r\n                                                                     HDat,\r\n                                                                     CusVenAdd,\r\n                                                                     CusVenTel,\r\n                                                                     Remark,\r\n                                                                     GDat,\r\n                                                                     MndNo,\r\n                                                                     SalsManNo,\r\n                                                                     SalsManNam,\r\n                                                                     InvTot,\r\n                                                                     InvTotLocCur,\r\n                                                                     InvDisPrs,\r\n                                                                     InvDisVal,\r\n                                                                     InvDisValLocCur,\r\n                                                                     InvNet,\r\n                                                                     InvNetLocCur,\r\n                                                                     CashPay,\r\n                                                                     CashPayLocCur,\r\n                                                                     IfRet,\r\n                                                                     GadeNo,\r\n                                                                     GadeId,\r\n                                                                     IfDel,\r\n                                                                     RetNo,\r\n                                                                     RetId,\r\n                                                                     InvCstNo,\r\n                                                                     InvCashPayNm,\r\n                                                                     RefNo,\r\n                                                                     InvCost,\r\n                                                                     EstDat,\r\n                                                                     CustPri,\r\n                                                                     ArbTaf,\r\n                                                                     CurTyp,\r\n                                                                     InvCash,\r\n                                                                     ToStore,\r\n                                                                     ToStoreNm,\r\n                                                                     InvQty,\r\n                                                                     EngTaf,\r\n                                                                     IfTrans,\r\n                                                                     CustRep,\r\n                                                                     CustNet,\r\n                                                                     InvWight_T,\r\n                                                                     IfPrint,\r\n                                                                     LTim,\r\n                                                                     CREATED_BY,\r\n                                                                     DATE_CREATED,\r\n                                                                     MODIFIED_BY ,\r\n                                                                     DATE_MODIFIED ,\r\n                                                                     CreditPay ,\r\n                                                                     CreditPayLocCur ,\r\n                                                                     NetworkPay ,\r\n                                                                     NetworkPayLocCur ,\r\n                                                                     CommMnd_Inv ,\r\n                                                                     MndExtrnal ,\r\n                                                                     CompanyID ,\r\n                                                                     InvAddCost ,\r\n                                                                     InvAddCostLoc ,\r\n                                                                     InvAddCostExtrnal ,\r\n                                                                     InvAddCostExtrnalLoc ,\r\n                                                                     IsExtrnalGaid ,\r\n                                                                     ExtrnalCostGaidID ,\r\n                                                                     Puyaid ,\r\n                                                                     Remming ,\r\n                                                                     RoomNo ,\r\n                                                                     OrderTyp ,\r\n                                                                     RoomSts ,\r\n                                                                     chauffeurNo ,\r\n                                                                     RoomPerson ,\r\n                                                                     ServiceValue ,\r\n                                                                     Sts ,\r\n                                                                     PaymentOrderTyp ,\r\n                                                                     AdminLock ,\r\n                                                                     DeleteDate ,\r\n                                                                     DeleteTime ,\r\n                                                                     UserNew ,\r\n                                                                     IfEnter ,\r\n                                                                     InvAddTax ,\r\n                                                                     InvAddTaxlLoc ,\r\n                                                                     IsTaxGaid ,\r\n                                                                     TaxGaidID ,\r\n                                                                     IsTaxUse ,\r\n                                                                     InvValGaidDis ,\r\n                                                                     InvValGaidDislLoc ,\r\n                                                                     IsDisGaid ,\r\n                                                                     DisGaidID1 ,\r\n                                                                     IsDisUse1 ,\r\n                                                                     InvComm ,\r\n                                                                     InvCommLoc ,\r\n                                                                     IsCommGaid ,\r\n                                                                     CommGaidID ,\r\n                                                                     IsCommUse ,\r\n                                                                     IsTaxLines ,\r\n                                                                     IsTaxByTotal ,\r\n                                                                     IsTaxByNet ,\r\n                                                                     TaxByNetValue ,\r\n                                                                     DesPointsValue ,\r\n                                                                     DesPointsValueLocCur ,\r\n                                                                     PointsCount,\r\n                                                                     IsPoints,\r\n                                                                     tailor1 ,\r\n                                                                     tailor2 ,\r\n                                                                     tailor3 ,\r\n                                                                     tailor4 ,\r\n                                                                     tailor5 ,\r\n                                                                     tailor6 ,\r\n                                                                     tailor7 ,\r\n                                                                     tailor8 ,\r\n                                                                     tailor9 ,\r\n                                                                     tailor10 ,\r\n                                                                     tailor11 ,\r\n                                                                     tailor12 ,\r\n                                                                     tailor13 ,\r\n                                                                     tailor14 ,\r\n                                                                     tailor15 ,\r\n                                                                     tailor16 ,\r\n                                                                     tailor17 ,\r\n                                                                     tailor18 ,\r\n                                                                     tailor19 ,\r\n                                                                     tailor20,\r\n                                                                     InvImg\r\n                                                              )\r\n                                                              VALUES\r\n                                                              (\r\n                                                                     \r\n                                                                    @InvId,\r\n                                                                    @InvNo,\r\n                                                                    @InvTyp,\r\n                                                                    @InvCashPay,\r\n                                                                    @CusVenNo,\r\n                                                                    @CusVenNm,\r\n                                                                    @HDat,\r\n                                                                    @CusVenAdd,\r\n                                                                    @CusVenTel,\r\n                                                                    @Remark,\r\n                                                                    @GDat,\r\n                                                                    @MndNo,\r\n                                                                    @SalsManNo,\r\n                                                                    @SalsManNam,\r\n                                                                    @InvTot,\r\n                                                                    @InvTotLocCur,\r\n                                                                    @InvDisPrs,\r\n                                                                    @InvDisVal,\r\n                                                                    @InvDisValLocCur,\r\n                                                                    @InvNet,\r\n                                                                    @InvNetLocCur,\r\n                                                                    @CashPay,\r\n                                                                    @CashPayLocCur,\r\n                                                                    @IfRet,\r\n                                                                    @GadeNo,\r\n                                                                    @GadeId,\r\n                                                                    @IfDel,\r\n                                                                    @RetNo,\r\n                                                                    @RetId,\r\n                                                                    @InvCstNo,\r\n                                                                    @InvCashPayNm,\r\n                                                                    @RefNo,\r\n                                                                    @InvCost,\r\n                                                                    @EstDat,\r\n                                                                    @CustPri,\r\n                                                                    @ArbTaf,\r\n                                                                    @CurTyp,\r\n                                                                    @InvCash,\r\n                                                                    @ToStore,\r\n                                                                    @ToStoreNm,\r\n                                                                    @InvQty,\r\n                                                                    @EngTaf,\r\n                                                                    @IfTrans,\r\n                                                                    @CustRep,\r\n                                                                    @CustNet,\r\n                                                                    @InvWight_T,\r\n                                                                    @IfPrint,\r\n                                                                    @LTim,\r\n                                                                    @CREATED_BY,\r\n                                                                    @DATE_CREATED,\r\n                                                                    @MODIFIED_BY ,\r\n                                                                    @DATE_MODIFIED ,\r\n                                                                    @CreditPay ,\r\n                                                                    @CreditPayLocCur ,\r\n                                                                    @NetworkPay ,\r\n                                                                    @NetworkPayLocCur ,\r\n                                                                    @CommMnd_Inv ,\r\n                                                                    @MndExtrnal ,\r\n                                                                    @CompanyID ,\r\n                                                                    @InvAddCost ,\r\n                                                                    @InvAddCostLoc ,\r\n                                                                    @InvAddCostExtrnal ,\r\n                                                                    @InvAddCostExtrnalLoc ,\r\n                                                                    @IsExtrnalGaid ,\r\n                                                                    @ExtrnalCostGaidID ,\r\n                                                                    @Puyaid ,\r\n                                                                    @Remming ,\r\n                                                                    @RoomNo ,\r\n                                                                    @OrderTyp ,\r\n                                                                    @RoomSts ,\r\n                                                                    @chauffeurNo ,\r\n                                                                    @RoomPerson ,\r\n                                                                    @ServiceValue ,\r\n                                                                    @Sts ,\r\n                                                                    @PaymentOrderTyp ,\r\n                                                                    @AdminLock ,\r\n                                                                    @DeleteDate ,\r\n                                                                    @DeleteTime ,\r\n                                                                    @UserNew ,\r\n                                                                    @IfEnter ,\r\n                                                                    @InvAddTax ,\r\n                                                                    @InvAddTaxlLoc ,\r\n                                                                    @IsTaxGaid ,\r\n                                                                    @TaxGaidID ,\r\n                                                                    @IsTaxUse ,\r\n                                                                    @InvValGaidDis ,\r\n                                                                    @InvValGaidDislLoc ,\r\n                                                                    @IsDisGaid ,\r\n                                                                    @DisGaidID1 ,\r\n                                                                    @IsDisUse1 ,\r\n                                                                    @InvComm ,\r\n                                                                    @InvCommLoc ,\r\n                                                                    @IsCommGaid ,\r\n                                                                    @CommGaidID ,\r\n                                                                    @IsCommUse ,\r\n                                                                    @IsTaxLines ,\r\n                                                                    @IsTaxByTotal ,\r\n                                                                    @IsTaxByNet ,\r\n                                                                    @TaxByNetValue ,\r\n                                                                    @DesPointsValue ,\r\n                                                                    @DesPointsValueLocCur ,\r\n                                                                    @PointsCount,\r\n                                                                    @IsPoints,\r\n                                                                    @tailor1 ,\r\n                                                                    @tailor2 ,\r\n                                                                    @tailor3 ,\r\n                                                                    @tailor4 ,\r\n                                                                    @tailor5 ,\r\n                                                                    @tailor6 ,\r\n                                                                    @tailor7 ,\r\n                                                                    @tailor8 ,\r\n                                                                    @tailor9 ,\r\n                                                                    @tailor10 ,\r\n                                                                    @tailor11 ,\r\n                                                                    @tailor12 ,\r\n                                                                    @tailor13 ,\r\n                                                                    @tailor14 ,\r\n                                                                    @tailor15 ,\r\n                                                                    @tailor16 ,\r\n                                                                    @tailor17 ,\r\n                                                                    @tailor18 ,\r\n                                                                    @tailor19 ,\r\n                                                                    @tailor20,\r\n                                                                    @InvImg\r\n                                                              )\r\n\r\n\r\n                                                              SELECT @InvHed_ID = SCOPE_IDENTITY()\r\n                                                                      \r\n\r\n                                                              RETURN\r\n                                                              END");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER PROCEDURE [dbo].[S_T_INVHED_UPDATE](\r\n                                                                                 @InvHed_ID INT ,\r\n                                                                                 @InvId FLOAT =NULL,\r\n                                                                                 @InvNo VARCHAR (10),\r\n                                                                                 @InvTyp INT =NULL,\r\n                                                                                 @InvCashPay INT =NULL,\r\n                                                                                 @CusVenNo VARCHAR (20)=NULL,\r\n                                                                                 @CusVenNm VARCHAR (50)=NULL,\r\n                                                                                 @CusVenAdd VARCHAR (100)=NULL,\r\n                                                                                 @CusVenTel VARCHAR (30)=NULL,\r\n                                                                                 @Remark VARCHAR (MAX)=NULL,\r\n                                                                                 @HDat VARCHAR (10)=NULL,\r\n                                                                                 @GDat VARCHAR (10)=NULL,\r\n                                                                                 @MndNo INT =NULL,\r\n                                                                                 @SalsManNo VARCHAR (3)=NULL,\r\n                                                                                 @SalsManNam VARCHAR (50)=NULL,\r\n                                                                                 @InvTot FLOAT =NULL,\r\n                                                                                 @InvTotLocCur FLOAT =NULL,\r\n                                                                                 @InvDisPrs FLOAT =NULL,\r\n                                                                                 @InvDisVal FLOAT =NULL,\r\n                                                                                 @InvDisValLocCur FLOAT =NULL,\r\n                                                                                 @InvNet FLOAT =NULL,\r\n                                                                                 @InvNetLocCur FLOAT =NULL,\r\n                                                                                 @CashPay FLOAT =NULL,\r\n                                                                                 @CashPayLocCur FLOAT =NULL,\r\n                                                                                 @IfRet INT =NULL,\r\n                                                                                 @GadeNo FLOAT =NULL,\r\n                                                                                 @GadeId FLOAT =NULL,\r\n                                                                                 @IfDel INT =NULL,\r\n                                                                                 @RetNo VARCHAR (10)=NULL,\r\n                                                                                 @RetId FLOAT =NULL,\r\n                                                                                 @InvCstNo INT =NULL,\r\n                                                                                 @InvCashPayNm VARCHAR (100)=NULL,\r\n                                                                                 @RefNo VARCHAR (20)=NULL,\r\n                                                                                 @InvCost FLOAT =NULL,\r\n                                                                                 @EstDat VARCHAR (10)=NULL,\r\n                                                                                 @CustPri INT =NULL,\r\n                                                                                 @ArbTaf VARCHAR (150)=NULL,\r\n                                                                                 @CurTyp INT =NULL,\r\n                                                                                 @InvCash VARCHAR (20)=NULL,\r\n                                                                                 @ToStore VARCHAR (3)=NULL,\r\n                                                                                 @ToStoreNm VARCHAR (50)=NULL,\r\n                                                                                 @InvQty FLOAT =NULL,\r\n                                                                                 @EngTaf VARCHAR (150)=NULL,\r\n                                                                                 @IfTrans INT =NULL,\r\n                                                                                 @CustRep FLOAT =NULL,\r\n                                                                                 @CustNet FLOAT =NULL,\r\n                                                                                 @InvWight_T FLOAT =NULL,\r\n                                                                                 @IfPrint INT =NULL,\r\n                                                                                 @LTim VARCHAR (10)=NULL,\r\n                                                                                 @CREATED_BY VARCHAR(100) =NULL,\r\n                                                                                 @DATE_CREATED datetime =NULL,\r\n                                                                                 @MODIFIED_BY VARCHAR (100)=NULL,\r\n                                                                                 @DATE_MODIFIED datetime=NULL,\r\n                                                                                 @CreditPay float=NULL,\r\n                                                                                 @CreditPayLocCur float=NULL,\r\n                                                                                 @NetworkPay float=NULL,\r\n                                                                                 @NetworkPayLocCur float=NULL,\r\n                                                                                 @CommMnd_Inv float=NULL,\r\n                                                                                 @MndExtrnal bit=NULL,\r\n                                                                                 @CompanyID int=NULL,\r\n                                                                                 @InvAddCost float=NULL,\r\n                                                                                 @InvAddCostLoc float=NULL,\r\n                                                                                 @InvAddCostExtrnal float=NULL,\r\n                                                                                 @InvAddCostExtrnalLoc float=NULL,\r\n                                                                                 @IsExtrnalGaid bit=NULL,\r\n                                                                                 @ExtrnalCostGaidID float=NULL,\r\n                                                                                 @Puyaid float=NULL,\r\n                                                                                 @Remming float=NULL,\r\n                                                                                 @RoomNo int=NULL,\r\n                                                                                 @OrderTyp int=NULL,\r\n                                                                                 @RoomSts bit=NULL,\r\n                                                                                 @chauffeurNo int=NULL,\r\n                                                                                 @RoomPerson int=NULL,\r\n                                                                                 @ServiceValue float=NULL,\r\n                                                                                 @Sts bit=NULL,\r\n                                                                                 @PaymentOrderTyp int=NULL,\r\n                                                                                 @AdminLock bit=NULL,\r\n                                                                                 @DeleteDate VARCHAR (10)=NULL,\r\n                                                                                 @DeleteTime VARCHAR (10)=NULL,\r\n                                                                                 @UserNew VARCHAR (3)=NULL,\r\n                                                                                 @IfEnter int=NULL,\r\n                                                                                 @InvAddTax float=NULL,\r\n                                                                                 @InvAddTaxlLoc float=NULL,\r\n                                                                                 @IsTaxGaid bit=NULL,\r\n                                                                                 @TaxGaidID float=NULL,\r\n                                                                                 @IsTaxUse bit=NULL,\r\n                                                                                 @InvValGaidDis float=NULL,\r\n                                                                                 @InvValGaidDislLoc float=NULL,\r\n                                                                                 @IsDisGaid bit=NULL,\r\n                                                                                 @DisGaidID1 float=NULL,\r\n                                                                                 @IsDisUse1 bit=NULL,\r\n                                                                                 @InvComm float=NULL,\r\n                                                                                 @InvCommLoc float=NULL,\r\n                                                                                 @IsCommGaid bit=NULL,\r\n                                                                                 @CommGaidID float=NULL,\r\n                                                                                 @IsCommUse bit=NULL,\r\n                                                                                 @IsTaxLines bit=NULL,\r\n                                                                                 @IsTaxByTotal bit=NULL,\r\n                                                                                 @IsTaxByNet bit=NULL,\r\n                                                                                 @TaxByNetValue float=NULL,\r\n                                                                                 @DesPointsValue float=NULL,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     @DesPointsValueLocCur float=NULL,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     @PointsCount float=NULL,\r\n                                                                                 @IsPoints bit=NULL,\r\n                                                                                 @tailor1 VARCHAR (100)=NULL,\r\n                                                                                 @tailor2 VARCHAR (100)=NULL,\r\n                                                                                 @tailor3 VARCHAR (100)=NULL,\r\n                                                                                 @tailor4 VARCHAR (100)=NULL,\r\n                                                                                 @tailor5 VARCHAR (100)=NULL,\r\n                                                                                 @tailor6 VARCHAR (100)=NULL,\r\n                                                                                 @tailor7 VARCHAR (100)=NULL,\r\n                                                                                 @tailor8 VARCHAR (100)=NULL,\r\n                                                                                 @tailor9 VARCHAR (100)=NULL,\r\n                                                                                 @tailor10 VARCHAR (100)=NULL,\r\n                                                                                 @tailor11 VARCHAR (100)=NULL,\r\n                                                                                 @tailor12 VARCHAR (100)=NULL,\r\n                                                                                 @tailor13 VARCHAR (100)=NULL,\r\n                                                                                 @tailor14 VARCHAR (100)=NULL,\r\n                                                                                 @tailor15 VARCHAR (100)=NULL,\r\n                                                                                 @tailor16 VARCHAR (100)=NULL,\r\n                                                                                 @tailor17 VARCHAR (100)=NULL,\r\n                                                                                 @tailor18 VARCHAR (100)=NULL,\r\n                                                                                 @tailor19 VARCHAR (100)=NULL,\r\n                                                                                 @tailor20 VARCHAR (100)=NULL,\r\n                                                                                 @InvImg VARBINARY(max) =NULL\r\n                                  )\r\n                                  AS\r\n                                  BEGIN\r\n\r\n                                  UPDATE T_INVHED\r\n                                  SET    InvId = @InvId,\r\n                                         InvNo = @InvNo,\r\n                                         InvTyp = @InvTyp,\r\n                                         InvCashPay = @InvCashPay,\r\n                                         CusVenNo = @CusVenNo,\r\n                                         CusVenNm = @CusVenNm,\r\n                                         CusVenAdd = @CusVenAdd,\r\n                                         CusVenTel = @CusVenTel,\r\n                                         Remark = @Remark,\r\n                                         HDat = @HDat,\r\n                                         GDat = @GDat,\r\n                                         MndNo = @MndNo,\r\n                                         SalsManNo = @SalsManNo,\r\n                                         SalsManNam = @SalsManNam,\r\n                                         InvTot = @InvTot,\r\n                                         InvTotLocCur = @InvTotLocCur,\r\n                                         InvDisPrs = @InvDisPrs,\r\n                                         InvDisVal = @InvDisVal,\r\n                                         InvDisValLocCur = @InvDisValLocCur,\r\n                                         InvNet = @InvNet,\r\n                                         InvNetLocCur = @InvNetLocCur,\r\n                                         CashPay = @CashPay,\r\n                                         CashPayLocCur = @CashPayLocCur,\r\n                                         IfRet = @IfRet,\r\n                                         GadeNo = @GadeNo,\r\n                                         GadeId = @GadeId,\r\n                                         IfDel = @IfDel,\r\n                                         RetNo = @RetNo,\r\n                                         RetId = @RetId,\r\n                                         InvCstNo = @InvCstNo,\r\n                                         InvCashPayNm = @InvCashPayNm,\r\n                                         RefNo = @RefNo,\r\n                                         InvCost = @InvCost,\r\n                                         EstDat = @EstDat,\r\n                                         CustPri = @CustPri,\r\n                                         ArbTaf = @ArbTaf,\r\n                                         CurTyp = @CurTyp,\r\n                                         InvCash = @InvCash,\r\n                                         ToStore = @ToStore,\r\n                                         ToStoreNm = @ToStoreNm,\r\n                                         InvQty = @InvQty,\r\n                                         EngTaf = @EngTaf,\r\n                                         IfTrans = @IfTrans,\r\n                                         CustRep = @CustRep,\r\n                                         CustNet = @CustNet,\r\n                                         InvWight_T = @InvWight_T,\r\n                                         IfPrint = @IfPrint,\r\n                                         LTim = @LTim,\r\n                                         MODIFIED_BY = @MODIFIED_BY,\r\n                                         DATE_MODIFIED = @DATE_MODIFIED,\r\n                                                                                 CreditPay = @CreditPay,\r\n                                                                                 CreditPayLocCur = @CreditPayLocCur,\r\n                                                                                 NetworkPay = @NetworkPay,\r\n                                                                                 NetworkPayLocCur = @NetworkPayLocCur,\r\n                                                                                 CommMnd_Inv = @CommMnd_Inv,\r\n                                                                                 MndExtrnal = @MndExtrnal,\r\n                                                                                 CompanyID = @CompanyID,\r\n                                                                                 InvAddCost = @InvAddCost,\r\n                                                                                 InvAddCostLoc = @InvAddCostLoc,\r\n                                                                                 InvAddCostExtrnal = @InvAddCostExtrnal,\r\n                                                                                 InvAddCostExtrnalLoc = @InvAddCostExtrnalLoc,\r\n                                                                                 IsExtrnalGaid = @IsExtrnalGaid,\r\n                                                                                 ExtrnalCostGaidID = @ExtrnalCostGaidID,\r\n                                                                                 Puyaid = @Puyaid,\r\n                                                                                 Remming = @Remming,\r\n                                                                                 RoomNo = @RoomNo,\r\n                                                                                 OrderTyp = @OrderTyp,\r\n                                                                                 RoomSts = @RoomSts,\r\n                                                                                 chauffeurNo = @chauffeurNo,\r\n                                                                                 RoomPerson = @RoomPerson,\r\n                                                                                 ServiceValue = @ServiceValue,\r\n                                                                                 Sts = @Sts,\r\n                                                                                 PaymentOrderTyp = @PaymentOrderTyp,\r\n                                                                                 AdminLock = @AdminLock,\r\n                                                                                 DeleteDate = @DeleteDate,\r\n                                                                                 DeleteTime = @DeleteTime,\r\n                                                                                 UserNew = @UserNew,\r\n                                                                                 IfEnter = @IfEnter,\r\n                                                                                 InvAddTax = @InvAddTax,\r\n                                                                                 InvAddTaxlLoc = @InvAddTaxlLoc,\r\n                                                                                 IsTaxGaid = @IsTaxGaid,\r\n                                                                                 TaxGaidID = @TaxGaidID,\r\n                                                                                 IsTaxUse = @IsTaxUse,\r\n                                                                                 InvValGaidDis = @InvValGaidDis,\r\n                                                                                 InvValGaidDislLoc = @InvValGaidDislLoc,\r\n                                                                                 IsDisGaid = @IsDisGaid,\r\n                                                                                 DisGaidID1 = @DisGaidID1,\r\n                                                                                 IsDisUse1 = @IsDisUse1,\r\n                                                                                 InvComm = @InvComm,\r\n                                                                                 InvCommLoc = @InvCommLoc,\r\n                                                                                 IsCommGaid = @IsCommGaid,\r\n                                                                                 CommGaidID = @CommGaidID,\r\n                                                                                 IsCommUse = @IsCommUse,\r\n                                                                                 IsTaxLines = @IsTaxLines,\r\n                                                                                 IsTaxByTotal = @IsTaxByTotal,\r\n                                                                                 IsTaxByNet = @IsTaxByNet,\r\n                                                                                 TaxByNetValue = @TaxByNetValue,\r\n                                                                                 DesPointsValue = @DesPointsValue ,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t DesPointsValueLocCur = @DesPointsValueLocCur ,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t PointsCount = @PointsCount,\r\n                                                                                 IsPoints = @IsPoints,\r\n                                                                                 tailor1 = @tailor1 ,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor2 = @tailor2,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor3 = @tailor3,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor4 = @tailor4,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor5 = @tailor5,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor6 = @tailor6,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor7 = @tailor7,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor8 = @tailor8,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor9 = @tailor9,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor10 = @tailor10,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor11 = @tailor11,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor12 = @tailor12,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor13 = @tailor13,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor14 = @tailor14,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor15 = @tailor15,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor16 = @tailor16,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor17 = @tailor17,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor18 = @tailor18,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor19 = @tailor19,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t tailor20 = @tailor20,\r\n                                                                                 InvImg   = @InvImg \r\n                                  WHERE  @InvHed_ID = InvHed_ID\r\n                                  RETURN\r\n                                  END");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("update T_Items set T_Items.OpenQty = 0 where T_Items.Itm_No not in (select itmNo from T_STKSQTY) and T_Items.OpenQty > 0");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [ItemComm] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [ItemComm] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IfEnter] [int] NULL");
                db.ExecuteCommand("UPDATE [dbo].[T_INVHED] Set [IfEnter] = [IfRet] Where [InvTyp] = 6 ");
                db.ExecuteCommand("UPDATE [dbo].[T_INVHED] Set [IfRet] = 0 Where [InvTyp] = 6 ");
            }
            catch
            {
            }
            try
            {
                T_AccDef q = db.StockAccDef("3051002");
                if (q == null || string.IsNullOrEmpty(q.AccDef_No))
                {
                    db.ExecuteCommand("INSERT [dbo].[T_AccDef] ([AccDef_No], [Arb_Des], [Eng_Des], [ParAcc], [Lev], [Typ], [AccCat], [DC], [Sts], [Debit], [Credit], [Balance], [Trn], [City], [Email], [Telphone1], [Telphone2], [Fax], [Mobile], [MaxLemt], [DesPers], [StrAm], [Adders], [Mnd], [Price], [zipCod], [PersonalNm], [RessonStoped], [StopedState], [CompanyID]) VALUES ( N'3051002', N'تكلفة المواد الخام', N'Cost of raw materials', N'3051', 4, N'', 7, 0, 0, 0, 0, 0, 1, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1)");
                    db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IfEnter] = 0 where IfEnter is null");
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AccSup] = '' where AccSup is null");
                    db.ExecuteCommand("alter table T_SYSSETTING alter column AccSup varchar(10)");
                    T_AccDef c = db.StockAccDef("3051001");
                    if (c != null && !string.IsNullOrEmpty(c.AccDef_No))
                    {
                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Arb_Des] = 'إنتاج أصناف - تصنيع' ,Eng_Des = 'Production of varieties' where AccDef_No= '3051001'");
                    }
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [TaxSales] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [TaxSales] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [TaxPurchas] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [TaxPurchas] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD [InvEnterStoped] [bit] NULL");
                db.ExecuteCommand("ALTER TABLE T_Items ADD [InvOutStoped] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [InvEnterStoped] = 0 ");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [InvOutStoped] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvAddTax] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvAddTax] = 0 where InvAddTax is null");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvAddTaxlLoc] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvAddTaxlLoc] = 0 where InvAddTaxlLoc is null");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsTaxGaid] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsTaxGaid] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [TaxGaidID] [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsTaxUse] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsTaxUse] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_INVDET ADD  [ItmTax] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVDET] Set [ItmTax] = 0 where ItmTax is null");
                db.ExecuteCommand("ALTER TABLE T_INVDET_Repair ADD  [ItmTax_Repair] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVDET_Repair] Set [ItmTax_Repair] = 0 where ItmTax_Repair is null");
                db.ExecuteCommand("ALTER TABLE T_SINVDET ADD  [SItmTax] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_SINVDET] Set [SItmTax] = 0 where SItmTax is null");
                string Max_ = "***";
                string Max_Purchaes = "***";
                try
                {
                    T_AccDef c = db.StockAccDef("4011");
                    if (c != null && !string.IsNullOrEmpty(c.AccDef_No))
                    {
                        try
                        {
                            int Value = 0;
                            string txtMainAccNo2 = "4011";
                            T_AccDef _AccDefBind = new T_AccDef();
                            List<T_AccDef> q4 = (from t in db.T_AccDefs
                                                 where t.ParAcc == txtMainAccNo2
                                                 orderby t.AccDef_ID
                                                 select t).ToList();
                            if (q4.Count == 0)
                            {
                                Max_ = txtMainAccNo2 + "001";
                            }
                            else
                            {
                                _AccDefBind = q4[q4.Count - 1];
                                string _Zero = "";
                                for (int iiCnt = 0; iiCnt < _AccDefBind.AccDef_No.Substring(_AccDefBind.ParAcc.Length).Length && _AccDefBind.AccDef_No.Substring(_AccDefBind.ParAcc.Length).Substring(iiCnt, 1) == "0"; iiCnt++)
                                {
                                    _Zero += _AccDefBind.AccDef_No.Substring(_AccDefBind.ParAcc.Length).Substring(iiCnt, 1);
                                }
                                Value = int.Parse(_AccDefBind.AccDef_No.Substring(_AccDefBind.ParAcc.Length)) + 1;
                                Max_ = (string.IsNullOrEmpty(_Zero) ? (_AccDefBind.ParAcc + Value) : (_AccDefBind.ParAcc + _Zero + Value));
                            }
                            db.ExecuteCommand("INSERT [dbo].[T_AccDef] ([AccDef_No], [Arb_Des], [Eng_Des], [ParAcc], [Lev], [Typ], [AccCat], [DC], [Sts], [Debit], [Credit], [Balance], [Trn], [City], [Email], [Telphone1], [Telphone2], [Fax], [Mobile], [MaxLemt], [DesPers], [StrAm], [Adders], [Mnd], [Price], [zipCod], [PersonalNm], [RessonStoped], [StopedState], [CompanyID],MainSal,DepreciationPercent) VALUES (N'" + Max_ + "', N'القيمة المضافة - ضريبة المبيعات', N'Sales Tax', N'4011', 4, N'', 8, 0, 0, 0, 0, 0, 2, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 1,0,0)");
                        }
                        catch
                        {
                            Max_ = "***";
                        }
                    }
                }
                catch
                {
                    Max_ = "***";
                }
                try
                {
                    T_AccDef c = db.StockAccDef("4011");
                    if (c != null && !string.IsNullOrEmpty(c.AccDef_No))
                    {
                        try
                        {
                            int Value = 0;
                            string txtMainAccNo = "4011";
                            T_AccDef _AccDefBind = new T_AccDef();
                            List<T_AccDef> q4 = (from t in db.T_AccDefs
                                                 where t.ParAcc == txtMainAccNo
                                                 orderby t.AccDef_ID
                                                 select t).ToList();
                            if (q4.Count == 0)
                            {
                                Max_Purchaes = txtMainAccNo + "001";
                            }
                            else
                            {
                                _AccDefBind = q4[q4.Count - 1];
                                string _Zero = "";
                                for (int iiCnt = 0; iiCnt < _AccDefBind.AccDef_No.Substring(_AccDefBind.ParAcc.Length).Length && _AccDefBind.AccDef_No.Substring(_AccDefBind.ParAcc.Length).Substring(iiCnt, 1) == "0"; iiCnt++)
                                {
                                    _Zero += _AccDefBind.AccDef_No.Substring(_AccDefBind.ParAcc.Length).Substring(iiCnt, 1);
                                }
                                Value = int.Parse(_AccDefBind.AccDef_No.Substring(_AccDefBind.ParAcc.Length)) + 1;
                                Max_Purchaes = (string.IsNullOrEmpty(_Zero) ? (_AccDefBind.ParAcc + Value) : (_AccDefBind.ParAcc + _Zero + Value));
                            }
                            db.ExecuteCommand("INSERT [dbo].[T_AccDef] ([AccDef_No], [Arb_Des], [Eng_Des], [ParAcc], [Lev], [Typ], [AccCat], [DC], [Sts], [Debit], [Credit], [Balance], [Trn], [City], [Email], [Telphone1], [Telphone2], [Fax], [Mobile], [MaxLemt], [DesPers], [StrAm], [Adders], [Mnd], [Price], [zipCod], [PersonalNm], [RessonStoped], [StopedState], [CompanyID],MainSal,DepreciationPercent) VALUES (N'" + Max_Purchaes + "', N'القيمة المضافة - ضريبة المشتريات', N'Purchaes Tax', N'4011', 4, N'', 8, 0, 0, 0, 0, 0, 2, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 1,0,0)");
                        }
                        catch
                        {
                            Max_Purchaes = "***";
                        }
                    }
                }
                catch
                {
                    Max_Purchaes = "***";
                }
                string AccBox = "***";
                try
                {
                    T_AccDef x = db.StockAccDef("1020001");
                    AccBox = ((x == null || string.IsNullOrEmpty(x.AccDef_No)) ? "***" : "1020001");
                }
                catch
                {
                    AccBox = "***";
                }
                if (string.IsNullOrEmpty(Max_))
                {
                    Max_ = "***";
                }
                if (string.IsNullOrEmpty(Max_Purchaes))
                {
                    Max_Purchaes = "***";
                }
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [TaxOptions] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '110110' where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '111010'  where InvID = 2");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '110110'  where InvID = 3");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '111010'  where InvID = 4");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '111010'  where InvID = 5");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '111010'  where InvID = 6");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '110110'  where InvID = 7");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '110110'  where InvID = 8");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '111010'  where InvID = 9");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '111010'  where InvID = 10");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '111010'  where InvID = 14");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '111010'  where InvID = 16");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '110110'  where InvID = 17");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = '110110'  where InvID = 20");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [autoTaxGaid] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [autoTaxGaid] = 0");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [TaxDebit] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = '***'");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [TaxCredit] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCredit] = '***'");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = '" + Max_Purchaes + "' where InvID = 2");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCredit] = '" + AccBox + "' where InvID = 2");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = '" + AccBox + "' where InvID = 4");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCredit] = '" + Max_Purchaes + "' where InvID = 4");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = '" + AccBox + "' where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCredit] = '" + Max_ + "' where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = '" + Max_ + "' where InvID = 3");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCredit] = '" + AccBox + "' where InvID = 3");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [DefSalesTax] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [DefSalesTax] = 0");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [DefPurchaesTax] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [DefPurchaesTax] = 0");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [autoDisGaid] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [autoDisGaid] = 0");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [DisDebit] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [DisDebit] = '***'");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [DisCredit] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [DisCredit] = '***'");
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [ItemDis] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [ItemDis] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvValGaidDis] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvValGaidDis] = 0 where InvValGaidDis is null");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvValGaidDislLoc] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvValGaidDislLoc] = 0 where InvValGaidDislLoc is null");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsDisGaid] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsDisGaid] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [DisGaidID1] [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsDisUse1] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsDisUse1] = 0 ");
                string Sales1 = "***";
                string Sales2 = "***";
                string SalesReturn1 = "***";
                string SalesReturn2 = "***";
                string Purchaes1 = "***";
                string Purchaes2 = "***";
                string PurchaesReturn1 = "***";
                string PurchaesReturn2 = "***";
                try
                {
                    T_AccDef t2 = db.StockAccDef("3021003");
                    Sales1 = ((t2 == null || string.IsNullOrEmpty(t2.AccDef_No)) ? "***" : "3021003");
                }
                catch
                {
                    Sales1 = "***";
                }
                try
                {
                    T_AccDef t2 = db.StockAccDef("3021001");
                    Sales2 = ((t2 == null || string.IsNullOrEmpty(t2.AccDef_No)) ? "***" : "3021001");
                }
                catch
                {
                    Sales2 = "***";
                }
                try
                {
                    T_AccDef t2 = db.StockAccDef("3021002");
                    SalesReturn1 = ((t2 == null || string.IsNullOrEmpty(t2.AccDef_No)) ? "***" : "3021002");
                }
                catch
                {
                    SalesReturn1 = "***";
                }
                try
                {
                    T_AccDef t2 = db.StockAccDef("3021004");
                    SalesReturn2 = ((t2 == null || string.IsNullOrEmpty(t2.AccDef_No)) ? "***" : "3021004");
                }
                catch
                {
                    SalesReturn2 = "***";
                }
                try
                {
                    T_AccDef t2 = db.StockAccDef("3041001");
                    Purchaes1 = ((t2 == null || string.IsNullOrEmpty(t2.AccDef_No)) ? "***" : "3041001");
                }
                catch
                {
                    Purchaes1 = "***";
                }
                try
                {
                    T_AccDef t2 = db.StockAccDef("3041003");
                    Purchaes2 = ((t2 == null || string.IsNullOrEmpty(t2.AccDef_No)) ? "***" : "3041003");
                }
                catch
                {
                    Purchaes2 = "***";
                }
                try
                {
                    T_AccDef t2 = db.StockAccDef("3041004");
                    PurchaesReturn1 = ((t2 == null || string.IsNullOrEmpty(t2.AccDef_No)) ? "***" : "3041004");
                }
                catch
                {
                    PurchaesReturn1 = "***";
                }
                try
                {
                    T_AccDef t2 = db.StockAccDef("3041002");
                    PurchaesReturn2 = ((t2 == null || string.IsNullOrEmpty(t2.AccDef_No)) ? "***" : "3041002");
                }
                catch
                {
                    PurchaesReturn2 = "***";
                }
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [DisDebit] = '" + Sales1 + "',[DisCredit] = '" + Sales2 + "' where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [DisDebit] = '" + Purchaes1 + "',[DisCredit] = '" + Purchaes2 + "' where InvID = 2");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [DisDebit] = '" + SalesReturn1 + "',[DisCredit] = '" + SalesReturn2 + "' where InvID = 3");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [DisDebit] = '" + PurchaesReturn1 + "',[DisCredit] = '" + PurchaesReturn2 + "' where InvID = 4");
                try
                {
                    if (File.Exists(Application.StartupPath + "\\Script\\SecriptInvitationCards.dll"))
                    {
                        db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'إصدار الدعوات' ,[InvNamE] = 'Issue invitations' where InvID = 8 ");
                        db.ExecuteCommand("Update [dbo].[T_INVHED] Set [ArbTaf] = '' where InvTyp = 8");
                        db.ExecuteCommand("Update [dbo].[T_INVHED] Set [EngTaf] = '' where InvTyp = 8");
                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [RessonStoped] = '' where Lev = 4 and AccCat = 4");
                    }
                }
                catch
                {
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvComm] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvComm] = 0 where InvComm is null");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [InvCommLoc] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvCommLoc] = 0 where InvCommLoc is null");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsCommGaid] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsCommGaid] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [CommGaidID] [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsCommUse] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsCommUse] = 0 ");
                string AccBox = "***";
                try
                {
                    T_AccDef x = db.StockAccDef("4011012");
                    AccBox = ((x == null || string.IsNullOrEmpty(x.AccDef_No)) ? "***" : "4011012");
                }
                catch
                {
                    AccBox = "***";
                }
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [CommOptions] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10' where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 2");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 3");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 4");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 5");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 6");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 7");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 8");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 9");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 10");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 14");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 16");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 17");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommOptions] = '10'  where InvID = 20");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [autoCommGaid] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [autoCommGaid] = 0");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [CommDebit] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommDebit] = '***'");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [CommCredit] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommCredit] = '***'");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommDebit] = '***' where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommCredit] = '" + AccBox + "' where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommDebit] = '" + AccBox + "' where InvID = 2");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [CommCredit] = '***' where InvID = 2");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [TaxAcc] [varchar](30) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [TaxAcc] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [TaxNoteInv] [varchar](150) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [TaxNoteInv] = 'Tax is 5%    |   الضريبة 5 %' ");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsTaxLines] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsTaxLines] = 1 ");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [ItemComm] = 0 Where [ItemComm] is null");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [TaxSales] = 0 Where [TaxSales] is null");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [TaxPurchas] = 0 Where [TaxPurchas] is null");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [InvEnterStoped] = 0 Where [InvEnterStoped] is null");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [InvOutStoped] = 0 Where [InvOutStoped] is null");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [ItemDis] = 0 Where [ItemDis] is null");
                string AccBox = "";
                try
                {
                    T_AccDef x = db.StockAccDef("4011026");
                    AccBox = ((x == null || string.IsNullOrEmpty(x.AccDef_No)) ? "" : "4011026");
                }
                catch
                {
                    AccBox = "";
                }
                if (!string.IsNullOrEmpty(AccBox))
                {
                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [TaxAcc] = '4011026' where [TaxAcc] is null or [TaxAcc] = ''");
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvComm] = 0 where InvComm is null");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [InvCommLoc] = 0 where InvCommLoc is null");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsCommGaid] = 0 where IsCommGaid is null");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsCommUse] = 0 where IsCommUse is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [IsCustomerDisplay] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsCustomerDisplay] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [Port] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Port] = 'COM4' ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [Fast] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Fast] = 9600 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [BitStop] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BitStop] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [BitData] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BitData] = 8 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [Parity] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [Parity] = 3 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [CustomerHello] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [CustomerHello] = 'Pro.Soft-Solution' ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [DisplayTypeShow] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [DisplayTypeShow] = 0 ");
            }
            catch
            {
            }
            try
            {
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptSchool.dll"))
                {
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'عرض سعر للطـلاب' ,[InvNamE] = 'Students Qutation' where InvID = 7 ");
                    db.ExecuteCommand("Update [dbo].[T_AccCat] Set [Arb_Des] = 'الطلاب' ,[Eng_Des]= 'Students' where AccCat_ID = 4");
                }
            }
            catch
            {
            }
            try
            {
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptTegnicalCollage.dll"))
                {
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'إصدار عهـدة' ,[InvNamE] = 'Issuance of Custody' where InvID = 17 ");
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'إرجاع عهـدة' ,[InvNamE] = 'Return Custody' where InvID = 20 ");
                    db.ExecuteCommand("Update [dbo].[T_AccCat] Set [Arb_Des] = 'الطلاب' ,[Eng_Des]= 'Students' where AccCat_ID = 4");
                    try
                    {
                        db.ExecuteCommand("UPDATE [T_Mndob]SET [Mnd_Typ] = 1");
                    }
                    catch
                    {
                    }
                    try
                    {
                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Arb_Des] = 'الطــلاب' ,[Eng_Des] = 'Students' where AccDef_ID = 28 and AccCat = 4 and ParAcc = '102' and Lev = 3 ");
                    }
                    catch
                    {
                    }
                    try
                    {
                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Arb_Des] = 'طالب' ,[Eng_Des] = 'Student' where AccDef_ID = 29 and AccCat = 4 and ParAcc = '1022' and Lev = 4 and  Arb_Des = 'عميل' ");
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            try
            {
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptWaterPackages.dll"))
                {
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'عرض سعر السائقين' ,[InvNamE] = 'Drivers Qutation' where InvID = 7 ");
                    db.ExecuteCommand("Update [dbo].[T_AccCat] Set [Arb_Des] = 'السائقين' ,[Eng_Des]= 'Drivers' where AccCat_ID = 4");
                    try
                    {
                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Arb_Des] = 'السائقين' ,[Eng_Des] = 'Drivers' where AccDef_ID = 28 and AccCat = 4 and ParAcc = '102' and Lev = 3 ");
                    }
                    catch
                    {
                    }
                    try
                    {
                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Arb_Des] = 'سائق' ,[Eng_Des] = 'Driver' where AccDef_ID = 29 and AccCat = 4 and ParAcc = '1022' and Lev = 4 and  Arb_Des = 'عميل'");
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            try
            {
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptStons.dll"))
                {
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'أمر تحميل' ,[InvNamE] = 'Students Qutation' where InvID = 8 ");
                    db.ExecuteCommand("Update [dbo].[T_AccCat] Set [Arb_Des] = 'أمر تحميل' ,[Eng_Des]= 'Students' where AccCat_ID = 5");
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [SecriptCeramicCombo] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [SecriptCeramicCombo] = '0' ");
                try
                {
                    db.ExecuteCommand("ALTER TABLE T_Items ADD  [SecriptCeramic] [varchar](100) NULL");
                    db.ExecuteCommand("Update [dbo].[T_Items] Set [SecriptCeramic] = '' ");
                }
                catch
                {
                }
                db.ExecuteCommand("Update [dbo].[T_Items] Set [SecriptCeramic] = '' where SecriptCeramic='0' or SecriptCeramic='1' or SecriptCeramic='2' or SecriptCeramic='3' or SecriptCeramic='4'");
            }
            catch
            {
            }
            try
            {
                string ckhStatString = db.StockInvSetting( 1).TaxOptions.Substring(4, 1);
            }
            catch
            {
                try
                {
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxOptions] = [TaxOptions] + '11'");
                }
                catch
                {
                }
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsTaxByTotal] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsTaxByTotal] = 0 ");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AccCus] = '30' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [IsTaxByNet] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsTaxByNet] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [TaxByNetValue] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [TaxByNetValue] = 0 ");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsTaxLines] = 1 where IsTaxLines is null");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsTaxByTotal] = 0 where IsTaxByTotal is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Rom ADD  [Furnished] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_Rom] Set [Furnished] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_Rom ADD  [AreaDetail] [varchar](250) NULL");
                db.ExecuteCommand("Update [dbo].[T_Rom] Set [AreaDetail] = '' ");
                db.ExecuteCommand("ALTER TABLE T_Rom ADD  [RoomCount] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_Rom] Set [RoomCount] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_Rom ADD  [loungesCount] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_Rom] Set [loungesCount] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_Rom ADD  [kitchensCount] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_Rom] Set [kitchensCount] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [LineOfInvoices] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [LineOfInvoices] = 100 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_Items alter column BarCod1 [varchar](250) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_Items alter column BarCod2 [varchar](250) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_Items alter column BarCod3 [varchar](250) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_Items alter column BarCod4 [varchar](250) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_Items alter column BarCod5 [varchar](250) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [IsActiveBalance] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [IsActiveBalance] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [BalanceType] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BalanceType] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [BarcodFrom] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BarcodFrom] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [BarcodTo] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [BarcodTo] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [WightFrom] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [WightFrom] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [WightTo] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [WightTo] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [PriceFrom] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [PriceFrom] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [PriceTo] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [PriceTo] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [WightQ] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [WightQ] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [PriceQ] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [PriceQ] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD [IsBalance] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [IsBalance] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Waiter ADD [Brn] [varchar](50) ");
                db.ExecuteCommand("Update [dbo].[T_Waiter] Set [Brn] = 1 ");
                db.ExecuteCommand("ALTER TABLE T_Waiter ADD [ProLng] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_Waiter] Set [ProLng] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_INVDET alter column ItmUnt [varchar](100) NULL");
                db.ExecuteCommand("alter table T_INVDET alter column ItmUntE [varchar](100) NULL");
                db.ExecuteCommand("alter table T_SINVDET alter column SItmUnt [varchar](100) NULL");
                db.ExecuteCommand("alter table T_SINVDET alter column SItmUntE [varchar](100) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [TaxDebitCredit] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebitCredit] = '***'");
                db.ExecuteCommand("ALTER TABLE T_INVSETTING ADD  [TaxCreditCredit] [varchar](15) NULL");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCreditCredit] = '***'");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebitCredit] = '***' where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebitCredit] = [TaxDebit] where InvID = 2");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebitCredit] = [TaxDebit] where InvID = 3");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebitCredit] = '***' where InvID = 4");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCreditCredit] = [TaxCredit] where InvID = 1");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCreditCredit] = '***' where InvID = 2");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCreditCredit] = '***' where InvID = 3");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxCreditCredit] = [TaxCredit] where InvID = 4");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("update T_Items set Itm_No = RTRIM(LTRIM(Itm_No)) WHERE Itm_No LIKE '% %'");
            }
            catch
            {
            }
            try
            {
                List<T_GDHEAD> q6 = (from t in db.T_GDHEADs
                                     where t.gdTyp == (int?)13
                                     where t.gdTot.Value <= 0.0
                                     where t.gdLok == false
                                     select t).ToList();
                for (int i = 0; i < q6.Count; i++)
                {
                    try
                    {
                        db.ExecuteCommand("update T_GDHEAD set gdTot = (select abs(MAX(T_GDDET.gdValue)) from  T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDDET.gdValue < 0  and T_GDHEAD.gdTyp = 13 and T_GDHEAD.gdTot <= 0 and T_GDHEAD.gdhead_ID = " + q6[i].gdhead_ID + ") where T_GDHEAD.gdTyp = 13 and T_GDHEAD.gdTot <= 0 and T_GDHEAD.gdhead_ID = " + q6[i].gdhead_ID);
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_Offer]    Script Date: 05/19/2018 04:32:57 ******/\r\n                                        SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_Offer](\r\n\t                                        [OfferHeadID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [OfferHeadNo] [varchar](10) NULL,\r\n\t                                        [OfferHeadName] [varchar](250) NULL,\r\n\t                                        [OfferHeadTyp] [int] NULL,\r\n\t                                        [StartDat] [varchar](10) NULL,\r\n\t                                        [EndDat] [varchar](10) NULL,\r\n\t                                        [OfferHeadCashCredit] [int] NULL,\r\n\t                                        [CustPri] [int] NULL,\r\n\t                                        [CusVenNo] [varchar](20) NULL,\r\n\t                                        [OfferSalsManNo] [varchar](3) NULL,\r\n\t                                        [OfferRemark] [varchar](max) NULL,\r\n                                         CONSTRAINT [PK_T_Offer] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [OfferHeadID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n                                        SET ANSI_PADDING OFF");
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_OfferDet]    Script Date: 05/19/2018 04:37:20 ******/\r\n                                        SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_OfferDet](\r\n\t                                        [OfferDet_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [OfferDetNo] [varchar](10) NULL,\r\n\t                                        [OfferID] [int] NULL,\r\n\t                                        [OfferDetSer] [int] NULL,\r\n\t                                        [ItmNo] [varchar](50) NULL,\r\n\t                                        [ItmUnt] [int] NULL,\r\n\t                                        [Price] [float] NULL,\r\n\t                                        [DisVal] [float] NULL,\r\n\t                                        [UnitPriVal] [float] NULL,\r\n                                            [Qty] [float] NULL,\r\n                                         CONSTRAINT [PK_T_OfferDet] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [OfferDet_ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_OfferDet]  WITH CHECK ADD  CONSTRAINT [FK_T_OfferDet_T_Items] FOREIGN KEY([ItmNo])\r\n                                        REFERENCES [dbo].[T_Items] ([Itm_No])\r\n                                        ALTER TABLE [dbo].[T_OfferDet] CHECK CONSTRAINT [FK_T_OfferDet_T_Items]\r\n                                        ALTER TABLE [dbo].[T_OfferDet]  WITH CHECK ADD  CONSTRAINT [FK_T_OfferDet_T_Offer] FOREIGN KEY([OfferID])\r\n                                        REFERENCES [dbo].[T_Offer] ([OfferHeadID])\r\n                                        ALTER TABLE [dbo].[T_OfferDet] CHECK CONSTRAINT [FK_T_OfferDet_T_Offer]\r\n                                        ALTER TABLE [dbo].[T_OfferDet]  WITH CHECK ADD  CONSTRAINT [FK_T_OfferDet_T_Unit] FOREIGN KEY([ItmUnt])\r\n                                        REFERENCES [dbo].[T_Unit] ([Unit_ID])\r\n                                        ALTER TABLE [dbo].[T_OfferDet] CHECK CONSTRAINT [FK_T_OfferDet_T_Unit]");
                db.ExecuteCommand("/****** Object:  Table [dbo].[T_OfferQFree]    Script Date: 05/23/2018 08:22:46 ******/\r\n                                        SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_OfferQFree](\r\n\t                                        [OfferQFree_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [OfferQFreeNo] [varchar](10) NULL,\r\n\t                                        [OfferQFreeID] [int] NULL,\r\n\t                                        [OfferQFreeSer] [int] NULL,\r\n\t                                        [OfferQFreeItmNo] [varchar](50) NULL,\r\n\t                                        [OfferQFreeItmUnt] [int] NULL,\r\n\t                                        [OfferQFreePrice] [float] NULL,\r\n\t                                        [OfferQFreeDisVal] [float] NULL,\r\n\t                                        [OfferQFreeUnitPriVal] [float] NULL,\r\n\t                                        [OfferIDQ] [int] NULL,\r\n                                            [OfferQFreeQty] [float] NULL,\r\n\t                                        [OfferQFreeStoreNo] [int] NULL,\r\n\t                                        [OfferQFreeItmTax] [float] NULL,\r\n\t                                        [OfferQFreeRunCod] [varchar](100) NULL,\r\n\t                                        [OfferQFreeDatExper] [varchar](11) NULL,\r\n                                         CONSTRAINT [PK_T_OfferQFree] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [OfferQFree_ID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_OfferQFree]  WITH CHECK ADD  CONSTRAINT [FK_T_OfferQFree_T_Items] FOREIGN KEY([OfferQFreeItmNo])\r\n                                        REFERENCES [dbo].[T_Items] ([Itm_No])\r\n                                        ALTER TABLE [dbo].[T_OfferQFree] CHECK CONSTRAINT [FK_T_OfferQFree_T_Items]\r\n                                        ALTER TABLE [dbo].[T_OfferQFree]  WITH CHECK ADD  CONSTRAINT [FK_T_OfferQFree_T_Offer] FOREIGN KEY([OfferIDQ])\r\n                                        REFERENCES [dbo].[T_Offer] ([OfferHeadID])\r\n                                        ALTER TABLE [dbo].[T_OfferQFree] CHECK CONSTRAINT [FK_T_OfferQFree_T_Offer]\r\n                                        ALTER TABLE [dbo].[T_OfferQFree]  WITH CHECK ADD  CONSTRAINT [FK_T_OfferQFree_T_OfferDet] FOREIGN KEY([OfferQFreeID])\r\n                                        REFERENCES [dbo].[T_OfferDet] ([OfferDet_ID])\r\n                                        ALTER TABLE [dbo].[T_OfferQFree] CHECK CONSTRAINT [FK_T_OfferQFree_T_OfferDet]\r\n                                        ALTER TABLE [dbo].[T_OfferQFree]  WITH CHECK ADD  CONSTRAINT [FK_T_OfferQFree_T_Unit] FOREIGN KEY([OfferQFreeItmUnt])\r\n                                        REFERENCES [dbo].[T_Unit] ([Unit_ID])\r\n                                        ALTER TABLE [dbo].[T_OfferQFree] CHECK CONSTRAINT [FK_T_OfferQFree_T_Unit]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVDET ADD  [OfferTyp] [int] NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [PointOfRyal] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [PointOfRyal] = 0.01 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [ItemTyp1] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ItemTyp1] = 'سلعة' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [ItemTyp2] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ItemTyp2] = 'مواد خامة' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [ItemTyp3] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ItemTyp3] = 'خدمة' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [ItemTyp1E] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ItemTyp1E] = 'Commodity' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [ItemTyp2E] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ItemTyp2E] = 'Raw materials' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [ItemTyp3E] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [ItemTyp3E] = 'Service' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_CATEGORY ADD [TotalPurchaes] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_CATEGORY] Set [TotalPurchaes] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_CATEGORY ADD [TotalPoint] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_CATEGORY] Set [TotalPoint] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD [IsPoints] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [IsPoints] = 1 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [DesPointsValue] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [DesPointsValue] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [DesPointsValueLocCur] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [DesPointsValueLocCur] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD  [PointsCount] [float] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [PointsCount] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [IsPoints] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [IsPoints] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_tel ADD  [GadeNo] [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_tel ADD  [GadeId] [float] NULL");
                db.ExecuteCommand("ALTER TABLE T_tel ADD [IsGaid] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_tel] Set [IsGaid] = 0 ");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'خدمات النزلاء' ,[InvNamE] = 'Guests Services' where InvID = 15 ");
                db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Mobile] = '' ,[DateAppointment] = '',[ID_Date] = '',[ID_DateEnd] = '',[Passport_Date] = '',[Insurance_Date] = '',[Passport_DateEnd] = '',[Insurance_DateEnd] = '',[ID_No] = '',[Passport_No] = '',[Insurance_No] = '',[ID_From] = '',[Passport_From] = '',[Insurance_From] = '',[MainSal] = 0,[BankComm] = 0,[TaxNo] = '',[TotPoints] = 0,[DepreciationPercent] = 0,[ProofAcc] = '',[RelayAcc] = '' where [Mobile]  is null and [DateAppointment]  is null and [ID_Date]  is null and [ID_DateEnd]  is null and [Passport_Date]  is null and [Insurance_Date]  is null and [Passport_DateEnd]  is null and [Insurance_DateEnd]  is null and [ID_No]  is null and [Passport_No]  is null and [Insurance_No]  is null and [ID_From]  is null and [Passport_From]  is null and [Insurance_From]  is null and [BankComm]  is null and [TaxNo]  is null and [TotPoints]  is null and [ProofAcc]  is null and [RelayAcc] is null ");
                db.ExecuteCommand("Update [dbo].[T_sertyp] Set [accno] = '3011002' where accno is null ");
                db.ExecuteCommand("Update [dbo].[T_telmn] Set [accno] = '3011002' where accno is null ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [AlarmDueoBefore] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [AlarmDueoBefore] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [EmpSeting] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [EmpSeting] = '0' ");
                db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'شؤون الموظفين' ,[InvNamE] = 'HR',[InvSetting] = '1' where InvID = 16 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [SyncPath] [varchar](max) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [SyncPath] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_InvDetNote alter column Arb_Des [varchar](max) NULL");
                db.ExecuteCommand("alter table T_InvDetNote alter column Eng_Des [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Mndob ADD  [MndFlied1] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_Mndob] Set [MndFlied1] = '' ");
                db.ExecuteCommand("ALTER TABLE T_Mndob ADD  [MndFlied2] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_Mndob] Set [MndFlied2] = '' ");
                db.ExecuteCommand("ALTER TABLE T_Mndob ADD  [MndFlied3] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_Mndob] Set [MndFlied3] = '' ");
                db.ExecuteCommand("ALTER TABLE T_Mndob ADD  [MndFlied4] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_Mndob] Set [MndFlied4] = '' ");
                db.ExecuteCommand("ALTER TABLE T_CstTbl ADD  [CstFlied1] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_CstTbl] Set [CstFlied1] = '' ");
                db.ExecuteCommand("ALTER TABLE T_CstTbl ADD  [CstFlied2] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_CstTbl] Set [CstFlied2] = '' ");
                db.ExecuteCommand("ALTER TABLE T_CstTbl ADD  [CstFlied3] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_CstTbl] Set [CstFlied3] = '' ");
                db.ExecuteCommand("ALTER TABLE T_CstTbl ADD  [CstFlied4] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_CstTbl] Set [CstFlied4] = '' ");
                db.ExecuteCommand("ALTER TABLE T_CstTbl ADD  [CstFlied5] varchar(250) NULL");
                db.ExecuteCommand("Update [dbo].[T_CstTbl] Set [CstFlied5] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_CATEGORY ADD [CAT_Symbol] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_CATEGORY] Set [CAT_Symbol] = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_INVSETTING alter column invGdADesc [varchar](max) NULL");
                db.ExecuteCommand("alter table T_INVSETTING alter column invGdEDesc [varchar](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("alter table T_Items alter column ItmLoc [varchar](40) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor1] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor2] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor3] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor4] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor5] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor6] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor7] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor8] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor9] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor10] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor11] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor12] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor13] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor14] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor15] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor16] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor17] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor18] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor19] [varchar](100) NULL");
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [tailor20] [varchar](100) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_INVHED ADD [InvImg] [varbinary](max) NULL");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [vFiledA] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vFiledA] = '' ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [vFiledB] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vFiledB] = '' ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [vFiledC] [varchar](100)");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vFiledC] = '' ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [vFiledInt] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vFiledInt] = 0 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [vFiledBool] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [vFiledBool] = 0 ");
                try
                {
                    T_AccDef c = db.StockAccDef("4011026");
                    if (c != null && !string.IsNullOrEmpty(c.AccDef_No))
                    {
                        db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = (select AccDebit0 from T_INVSETTING where InvID = 1),[TaxCredit]= '4011026',[TaxDebitCredit] = '***',[TaxCreditCredit]='4011026' where InvID = 1");
                        db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = '4011026',[TaxCredit]=(select AccCredit0 from T_INVSETTING where InvID = 3),[TaxDebitCredit] = '4011026',[TaxCreditCredit]='***' where InvID = 3");
                    }
                    T_AccDef cc = db.StockAccDef("4011027");
                    if (cc != null && !string.IsNullOrEmpty(cc.AccDef_No))
                    {
                        db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = '4011027',[TaxCredit]=(select AccCredit0 from T_INVSETTING where InvID = 2),[TaxDebitCredit] = '4011027',[TaxCreditCredit]='***' where InvID = 2");
                        db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [TaxDebit] = (select AccDebit0 from T_INVSETTING where InvID = 4),[TaxCredit]='4011027',[TaxDebitCredit] = '***',[TaxCreditCredit]= '4011027' where InvID = 4");
                    }
                }
                catch
                {
                }
            }
            catch
            {
            }
            try
            {
                List<T_INVSETTING> c2 = db.T_INVSETTINGs.Select((T_INVSETTING t) => t).Where<T_INVSETTING>(a => a.InvID != VarGeneral.DraftBillId).ToList();
                if (c2.Count <= 28)
                {
                    List<T_CATEGORY> q5 = db.FillCat_2("").ToList();
                    for (int i = 0; i < q5.Count; i++)
                    {
                        db.ExecuteCommand("SET IDENTITY_INSERT [dbo].[T_INVSETTING] ON \r\n                                            INSERT [dbo].[T_INVSETTING] ([InvSet_ID],[InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[CatID],[PrintCat]) VALUES (" + (100 + i) + "," + (100 + i) + ", N'" + q5[i].Arb_Des + "', N'" + q5[i].Eng_Des + "', N'212', N'1         ', N'نقدي                          ', N'آجل       ', NULL, NULL, NULL, N'Cash      ', N'Credit    ', NULL, NULL, NULL, -2147483633, 12640511, 0, N'العميل              ', NULL, NULL, NULL, NULL, N'Customer            ', NULL, NULL, NULL, NULL, N'3021001        ', N'1020001        ', NULL, NULL, NULL, NULL, NULL, N'3021005        ', N'***', N'3021005', N'1022001', NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 6, N'Microsoft XPS Document Writer', N'110 ', N'1011 ', 1, 1,1," + q5[i].CAT_ID + ",0)\r\n                                            SET IDENTITY_INSERT [dbo].[T_INVSETTING] OFF");
                    }
                }
            }
            catch
            {
            }
            try
            {
                List<T_CATEGORY> q5 = db.ExecuteQuery<T_CATEGORY>("SELECT T_CATEGORY.*\r\n                                                                   FROM T_CATEGORY\r\n                                                                   WHERE CAT_ID NOT IN (SELECT T_INVSETTING.CatID from T_INVSETTING where CatID != '' )", new object[0]).ToList();
                for (int i = 0; i < q5.Count; i++)
                {
                    int max = db.MaxINVSETTING;
                    db.ExecuteCommand("INSERT [dbo].[T_INVSETTING] ([InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[CatID],[PrintCat]) VALUES (" + max + ", N'" + q5[i].Arb_Des + "', N'" + q5[i].Eng_Des + "', N'212', N'1         ', N'نقدي                          ', N'آجل       ', NULL, NULL, NULL, N'Cash      ', N'Credit    ', NULL, NULL, NULL, -2147483633, 12640511, 0, N'العميل              ', NULL, NULL, NULL, NULL, N'Customer            ', NULL, NULL, NULL, NULL, N'3021001        ', N'1020001        ', NULL, NULL, NULL, NULL, NULL, N'3021005        ', N'***', N'3021005', N'1022001', NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 6, N'Microsoft XPS Document Writer', N'110 ', N'1011 ', 1, 1,1," + q5[i].CAT_ID + ",0)");
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [vSize1] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [vSize1] = '' where vSize1 = '' or vSize1 is null");
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [vSize2] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [vSize2] = '' where vSize2 = '' or vSize2 is null");
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [vSize3] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [vSize3] = '' where vSize3 = '' or vSize3 is null");
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [vSize4] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [vSize4] = '' where vSize4 = '' or vSize4 is null");
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [vSize5] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [vSize5] = '' where vSize5 = '' or vSize5 is null");
                db.ExecuteCommand("ALTER TABLE T_Items ADD  [vSize6] [varchar](100) NULL");
                db.ExecuteCommand("Update [dbo].[T_Items] Set [vSize6] = '' where vSize6 = '' or vSize6 is null");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Vacation ADD [EmpCover] [varchar](40)");
                db.ExecuteCommand("ALTER TABLE [dbo].[T_Vacation]  WITH CHECK ADD  CONSTRAINT [FK_T_Vacation_T_Emp1] FOREIGN KEY([EmpCover])\r\n                                        REFERENCES [dbo].[T_Emp] ([Emp_ID])\r\n                                        ALTER TABLE [dbo].[T_Vacation] CHECK CONSTRAINT [FK_T_Vacation_T_Emp1]");
            }
            catch
            {
            }
            try
            {
                List<T_INVSETTING> q3 = (from t in db.T_INVSETTINGs
                                         orderby t.InvID
                                         where t.CatID.HasValue && t.InvID != VarGeneral.DraftBillId
                                         select t).ToList();
                if (q3.Count > 0)
                {
                    if (q3.FirstOrDefault().InvID < 100)
                    {
                        db.ExecuteCommand("Delete from T_INVSETTING where CatID > 0 and CatID != ''");
                        List<T_INVSETTING> q7 = (from t in db.T_INVSETTINGs
                                                 orderby t.InvID
                                                 where t.InvID == 27 && !t.CatID.HasValue
                                                 select t).ToList();
                        if (q7.Count <= 0)
                        {
                            try
                            {
                                try
                                {
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE T_per ADD [romnoNew] [int] NULL");
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE T_Reserv ADD [romnoNew] [int] NULL");
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE T_per1 ADD [romnoNew] [int] NULL");
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE T_tel ADD [romnoNew] [int] NULL");
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE T_tran ADD [romnoNew] [int] NULL");
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE T_romtrn ADD [romnoNew] [int] NULL");
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE T_romtrn ADD [romnoNew1] [int] NULL");
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE T_romtrn ADD [romnoNew2] [int] NULL");
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        db.ExecuteCommand("ALTER TABLE dbo.T_per DROP CONSTRAINT [FK_T_per_T_Rom]");
                                        db.ExecuteCommand("ALTER TABLE dbo.T_romtrn DROP CONSTRAINT [FK_T_romtrn_T_Rom]");
                                        db.ExecuteCommand("ALTER TABLE dbo.T_romtrn DROP CONSTRAINT [FK_T_romtrn_T_Rom1]");
                                        db.ExecuteCommand("ALTER TABLE dbo.T_per1 DROP CONSTRAINT [FK_T_per1_T_Rom]");
                                        db.ExecuteCommand("ALTER TABLE dbo.T_Reserv DROP CONSTRAINT [FK_T_Reserv_T_Rom]");
                                        db.ExecuteCommand("ALTER TABLE dbo.T_tel DROP CONSTRAINT [FK_T_tel_T_Rom]");
                                        db.ExecuteCommand("ALTER TABLE dbo.T_tran DROP CONSTRAINT [FK_T_tran_T_Rom]");
                                    }
                                    catch
                                    {
                                    }
                                    db.ExecuteCommand("/****** Object:  Table [dbo].[T_Snd]    Script Date: 09/03/2017 00:59:10 ******/\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_Snd](\r\n\t                                    [gd_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [fNo] [int] NOT NULL,\r\n\t                                    [SndName] [varchar](100) NULL,\r\n\t                                    [romno] [int] NULL,\r\n\t                                    [price] [float] NULL,\r\n\t                                    [det] [varchar](250) NULL,\r\n\t                                    [typ] [int] NULL,\r\n\t                                    [Usr] [varchar](30) NULL,\r\n\t                                    [gdUser] [varchar](3) NULL,\r\n\t                                    [gdUserNam] [varchar](50) NULL,\r\n\t                                    [perno] [int] NULL,\r\n\t                                    [dt] [varchar](10) NULL,\r\n\t                                    [curr] [int] NULL,\r\n\t                                    [tm] [varchar](11) NULL,\r\n\t                                    [ch] [int] NULL,\r\n\t                                    [curcost] [float] NULL,\r\n\t                                    [sala] [int] NULL,\r\n\t                                    [typN] [int] NULL,\r\n\t                                    [ShekNo] [varchar](50) NULL,\r\n\t                                    [ShekDate] [varchar](20) NULL,\r\n\t                                    [ShekBank] [varchar](50) NULL,\r\n\t                                    [IfTrans] [int] NULL,\r\n\t                                    [RStat] [int] NULL,\r\n\t                                    [GadeNo] [float] NULL,\r\n\t                                    [GadeId] [float] NULL,\r\n                                     CONSTRAINT [PK_T_Snd] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [gd_ID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_Snd]  WITH CHECK ADD  CONSTRAINT [FK_T_Snd_T_Curency] FOREIGN KEY([curr])\r\n                                    REFERENCES [dbo].[T_Curency] ([Curency_ID])\r\n                                    ALTER TABLE [dbo].[T_Snd] CHECK CONSTRAINT [FK_T_Snd_T_Curency]\r\n                                    ALTER TABLE [dbo].[T_Snd]  WITH CHECK ADD  CONSTRAINT [FK_T_Snd_T_per] FOREIGN KEY([perno])\r\n                                    REFERENCES [dbo].[T_per] ([perno])\r\n                                    ALTER TABLE [dbo].[T_Snd] CHECK CONSTRAINT [FK_T_Snd_T_per]");
                                    db.ExecuteCommand("        SET IDENTITY_INSERT [dbo].[T_INVSETTING] ON\r\n                                            INSERT [dbo].[T_INVSETTING] ([InvSet_ID], [InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[defSizePaper],[Orientation],[CatID],[PrintCat]) VALUES (27, 27, N'سند قبض نزيل', N'Catch Receipt Guest', N'1', N'1         ', N'أستلمنا من المكرم             ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, -2147483633, 16706518, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 10, N'', N'111 ', NULL, 1, 1,1,N'',1,NULL,0)\r\n                                            INSERT [dbo].[T_INVSETTING] ([InvSet_ID], [InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[defSizePaper],[Orientation],[CatID],[PrintCat]) VALUES (28, 28, N'سند صرف نزيل', N'receipt Guest', N'1', N'1         ', N'أصرفوا لي المكرم              ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, -2147483633, 16706518, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 10, N'', N'111 ', NULL, 1, 1,1,N'',1,NULL,0)\r\n                                            SET IDENTITY_INSERT [dbo].[T_INVSETTING] OFF");
                                    try
                                    {
                                        T_AccDef c = db.StockAccDef("3011");
                                        if (c != null && !string.IsNullOrEmpty(c.AccDef_No))
                                        {
                                            T_AccDef H = db.StockAccDef("3011002");
                                            if (H == null || string.IsNullOrEmpty(H.AccDef_No))
                                            {
                                                try
                                                {
                                                    db.ExecuteCommand("INSERT [dbo].[T_AccDef] ([AccDef_No], [Arb_Des], [Eng_Des], [ParAcc], [Lev], [Typ], [AccCat], [DC], [Sts], [Debit], [Credit], [Balance], [Trn], [City], [Email], [Telphone1], [Telphone2], [Fax], [Mobile], [MaxLemt], [DesPers], [StrAm], [Adders], [Mnd], [Price], [zipCod], [PersonalNm], [RessonStoped], [StopedState], [CompanyID]) VALUES (N'3011002', N'إيرادات الفندق', N'Hotel Income', N'3011', 4, N'1', 7, 1, 0, 0, 0, 0, 1, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1)");
                                                    try
                                                    {
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [DateAppointment] = '' where  AccDef_No = '3011002' ");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ID_Date] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ID_DateEnd] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Passport_DateEnd] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Insurance_DateEnd] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Passport_DateEnd] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Insurance_DateEnd] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ID_No] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Passport_No] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Insurance_No] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ID_From] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Passport_From] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [Insurance_From] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [MainSal] = 0 ");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [BankComm] = 0.008 where  AccDef_No = '3011002' ");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [TaxNo] = '' where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [TotPoints] = 0 where  AccDef_No = '3011002'");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [DepreciationPercent] = 0 where DepreciationPercent is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [ProofAcc] = ''  where ProofAcc is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [RelayAcc] = '' where RelayAcc is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [StopedState] = 0 where [StopedState] is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [MaxDisCust] = 0 where MaxDisCust is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColNum1] = 0 where vColNum1 is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColNum2] = 0 where vColNum2 is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColStr1] = '' where vColStr1 is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColStr2] = '' where vColStr2 is null");
                                                        db.ExecuteCommand("Update [dbo].[T_AccDef] Set [vColStr3] = '' where vColStr3 is null");
                                                    }
                                                    catch
                                                    {
                                                    }
                                                    db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [GuestBoxAcc] = '3011002' ");
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                    }
                                    catch
                                    {
                                    }
                                    db.ExecuteCommand("alter table T_Reserv alter column Usr [varchar](100) NULL");
                                    db.ExecuteCommand("alter table T_per alter column jobpls [varchar](150) NULL");
                                }
                                catch
                                {
                                }
                                try
                                {
                                    db.ExecuteCommand("UPDATE [dbo].[T_Rom]  SET [aline] = 1");
                                    db.ExecuteCommand("SET IDENTITY_INSERT [dbo].[T_Loc] ON\r\n                                    INSERT [dbo].[T_Loc] ([Loc_ID], [Loc_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (1, N'1', N'شمالي', N'South', 1)\r\n                                    INSERT [dbo].[T_Loc] ([Loc_ID], [Loc_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (2, N'2', N'جنوبي', N'North', 1)\r\n                                    INSERT [dbo].[T_Loc] ([Loc_ID], [Loc_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (3, N'3', N'شرقي', N'East', 1)\r\n                                    INSERT [dbo].[T_Loc] ([Loc_ID], [Loc_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (4, N'4', N'غربي', N'West', 1)\r\n                                    SET IDENTITY_INSERT [dbo].[T_Loc] OFF");
                                    db.ExecuteCommand("ALTER TABLE [dbo].[T_Rom]  WITH CHECK ADD  CONSTRAINT [FK_T_Rom_T_Loc] FOREIGN KEY([aline])\r\n                                    REFERENCES [dbo].[T_Loc] ([Loc_ID])\r\n                                    ALTER TABLE [dbo].[T_Rom] CHECK CONSTRAINT [FK_T_Rom_T_Loc]");
                                }
                                catch
                                {
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    List<T_CATEGORY> FillCat_ = db.FillCat_2("").ToList();
                    for (int i = 0; i < FillCat_.Count; i++)
                    {
                        db.ExecuteCommand("SET IDENTITY_INSERT [dbo].[T_INVSETTING] ON \r\n                                            INSERT [dbo].[T_INVSETTING] ([InvSet_ID],[InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[CatID],[PrintCat]) VALUES (" + (100 + i) + "," + (100 + i) + ", N'" + FillCat_[i].Arb_Des + "', N'" + FillCat_[i].Eng_Des + "', N'212', N'1         ', N'نقدي                          ', N'آجل       ', NULL, NULL, NULL, N'Cash      ', N'Credit    ', NULL, NULL, NULL, -2147483633, 12640511, 0, N'العميل              ', NULL, NULL, NULL, NULL, N'Customer            ', NULL, NULL, NULL, NULL, N'3021001        ', N'1020001        ', NULL, NULL, NULL, NULL, NULL, N'3021005        ', N'***', N'3021005', N'1022001', NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 6, N'Microsoft XPS Document Writer', N'110 ', N'1011 ', 1, 1,1," + FillCat_[i].CAT_ID + ",0)\r\n                                            SET IDENTITY_INSERT [dbo].[T_INVSETTING] OFF");
                    }
                }
                List<T_CATEGORY> QT = db.ExecuteQuery<T_CATEGORY>("SELECT T_CATEGORY.*\r\n                                                                   FROM T_CATEGORY\r\n                                                                   WHERE CAT_ID NOT IN (SELECT T_INVSETTING.CatID from T_INVSETTING where CatID != '' )", new object[0]).ToList();
                for (int i = 0; i < QT.Count; i++)
                {
                    int max = db.MaxINVSETTING;
                    db.ExecuteCommand("INSERT [dbo].[T_INVSETTING] ([InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[CatID],[PrintCat]) VALUES (" + max + ", N'" + QT[i].Arb_Des + "', N'" + QT[i].Eng_Des + "', N'212', N'1         ', N'نقدي                          ', N'آجل       ', NULL, NULL, NULL, N'Cash      ', N'Credit    ', NULL, NULL, NULL, -2147483633, 12640511, 0, N'العميل              ', NULL, NULL, NULL, NULL, N'Customer            ', NULL, NULL, NULL, NULL, N'3021001        ', N'1020001        ', NULL, NULL, NULL, NULL, NULL, N'3021005        ', N'***', N'3021005', N'1022001', NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 6, N'Microsoft XPS Document Writer', N'110 ', N'1011 ', 1, 1,1," + QT[i].CAT_ID + ",0)");
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_Vacation ADD  [AdminLock] [bit] NULL");
                db.ExecuteCommand("Update [dbo].[T_Vacation] Set [AdminLock] = 1 where AdminLock is null");
                db.ExecuteCommand("    ALTER FUNCTION [dbo].[GetVacUsed](@EmpID varchar(40))\r\n                                            RETURNS INT\r\n                                            WITH EXECUTE AS CALLER\r\n                                            AS\r\n                                            begin\r\n\t                                            DECLARE @valueIn int;\r\n\t                                            DECLARE @value int;\r\n\t\t                                            set @valueIn = ISNull((SELECT sum(VacCountDay) from T_Vacation join T_VacTyp on T_Vacation.VacTyp = T_VacTyp.VacT_No Where T_Vacation.EmpID=@EmpID AND T_VacTyp.Dis_VacT = 1 AND T_Vacation.AdminLock = 1),'0')\r\n\r\n\t                                            set @value = @valueIn ;\r\n\t                                            return (@value);\r\n                                            end");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("Update [dbo].[T_INVHED] Set [tailor20] = '0' where tailor20 is null or tailor20 = '' ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_OfferDet ADD [QtyTo] [float] NULL ");
                db.ExecuteCommand("Update [dbo].[T_OfferDet] Set [QtyTo] = 0 ");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_EqarTyp](\r\n\t                                    [EqarTyp_ID] [varchar](40) NOT NULL,\r\n\t                                    [EqarTyp_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](50) NULL,\r\n                                     CONSTRAINT [PK_T_EqarTyp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [EqarTyp_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    INSERT [dbo].[T_EqarTyp] ([EqarTyp_ID], [EqarTyp_No], [NameA], [NameE], [Note]) VALUES (N'404d5799-d96c-4461-bd43-4d88ddea630e', 1, N'سكني', N'residential', N'----------')\r\n                                    INSERT [dbo].[T_EqarTyp] ([EqarTyp_ID], [EqarTyp_No], [NameA], [NameE], [Note]) VALUES (N'326ec889-2aee-4d38-b22e-f152a5796c6a', 2, N'تجاري', N'commercial', N'--------')\r\n                                    INSERT [dbo].[T_EqarTyp] ([EqarTyp_ID], [EqarTyp_No], [NameA], [NameE], [Note]) VALUES (N'8a56f18d-cadd-4541-9e5a-63d1d06b3a93', 3, N'سكني تجاري', N'residential commercial', N'--------')");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("\r\n                                                SET ANSI_NULLS ON\r\n                                                SET QUOTED_IDENTIFIER ON\r\n                                                SET ANSI_PADDING ON\r\n                                                CREATE TABLE [dbo].[T_EqarNatural](\r\n\t                                                [EqarNatural_ID] [varchar](40) NOT NULL,\r\n\t                                                [EqarNatural_No] [int] NOT NULL,\r\n\t                                                [NameA] [varchar](30) NULL,\r\n\t                                                [NameE] [varchar](30) NULL,\r\n\t                                                [Note] [varchar](50) NULL,\r\n                                                 CONSTRAINT [PK_T_EqarNatural] PRIMARY KEY CLUSTERED \r\n                                                (\r\n\t                                                [EqarNatural_No] ASC\r\n                                                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                                ) ON [PRIMARY]\r\n                                                SET ANSI_PADDING OFF   \r\n                                                INSERT [dbo].[T_EqarNatural] ([EqarNatural_ID], [EqarNatural_No], [NameA], [NameE], [Note]) VALUES (N'a0724d8d-4764-4d44-90a4-138bec9a0dec', 1, N'للإيجار', N'to Rent', N'----------')\r\n                                                INSERT [dbo].[T_EqarNatural] ([EqarNatural_ID], [EqarNatural_No], [NameA], [NameE], [Note]) VALUES (N'4bcb64e1-1897-40a7-b705-955a70f641a4', 2, N'للبيع', N'To Sales', N'--------')");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("\r\n                                    SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_AinTyp](\r\n\t                                    [AinTyp_ID] [varchar](40) NOT NULL,\r\n\t                                    [AinTyp_No] [int] NOT NULL,\r\n\t                                    [NameA] [varchar](30) NULL,\r\n\t                                    [NameE] [varchar](30) NULL,\r\n\t                                    [Note] [varchar](50) NULL,\r\n                                     CONSTRAINT [PK_T_AinTyp] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [AinTyp_No] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n                                    SET ANSI_PADDING OFF\r\n                                    INSERT [dbo].[T_AinTyp] ([AinTyp_ID], [AinTyp_No], [NameA], [NameE], [Note]) VALUES (N'8f9260d3-3c6c-4e00-a989-89ed520c8230', 1, N'شقة', N'Flat', N'----------')\r\n                                    INSERT [dbo].[T_AinTyp] ([AinTyp_ID], [AinTyp_No], [NameA], [NameE], [Note]) VALUES (N'f1fbd4c5-7fe3-4830-ae5f-b92b0f4b64f3', 2, N'مستودع', N'Store', N'--------')\r\n                                    INSERT [dbo].[T_AinTyp] ([AinTyp_ID], [AinTyp_No], [NameA], [NameE], [Note]) VALUES (N'e32f19df-d0e5-45c6-b26c-49aa9d4e0a1e', 3, N'محل', N'Shop commercial', N'--------')\r\n                                    INSERT [dbo].[T_AinTyp] ([AinTyp_ID], [AinTyp_No], [NameA], [NameE], [Note]) VALUES (N'35d46f05-6b84-47ea-bfa3-315429288c63', 4, N'معرض', N'Exhibition', N'--------')\r\n                                    INSERT [dbo].[T_AinTyp] ([AinTyp_ID], [AinTyp_No], [NameA], [NameE], [Note]) VALUES (N'40f0228b-27c4-4569-bb41-6966aca524cb', 5, N'قاعة', N'Hall', N'--------')");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("\r\n                                                SET ANSI_NULLS ON\r\n                                                SET QUOTED_IDENTIFIER ON\r\n                                                SET ANSI_PADDING ON\r\n                                                CREATE TABLE [dbo].[T_AinNatural](\r\n\t                                                [AinNatural_ID] [varchar](40) NOT NULL,\r\n\t                                                [AinNatural_No] [int] NOT NULL,\r\n\t                                                [NameA] [varchar](30) NULL,\r\n\t                                                [NameE] [varchar](30) NULL,\r\n\t                                                [Note] [varchar](50) NULL,\r\n                                                 CONSTRAINT [PK_T_AinNatural] PRIMARY KEY CLUSTERED \r\n                                                (\r\n\t                                                [AinNatural_No] ASC\r\n                                                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                                ) ON [PRIMARY]\r\n                                                SET ANSI_PADDING OFF   \r\n                                                INSERT [dbo].[T_AinNatural] ([AinNatural_ID], [AinNatural_No], [NameA], [NameE], [Note]) VALUES (N'08696a45-14e0-4ee3-bd98-858dc4861c8e', 1, N'للإيجار', N'to Rent', N'----------')\r\n                                                INSERT [dbo].[T_AinNatural] ([AinNatural_ID], [AinNatural_No], [NameA], [NameE], [Note]) VALUES (N'ffb6c5ee-e85a-4e8e-a0f5-d453d4ff463d', 2, N'للبيع', N'To Sales', N'--------')");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("\r\n                                        SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_Owner](\r\n\t                                        [Owner_ID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [Owner_No] [int] NOT NULL,\r\n\t                                        [NameA] [varchar](50) NULL,\r\n\t                                        [NameE] [varchar](50) NULL,\r\n\t                                        [OwnerIdent] [varchar](50) NULL,\r\n\t                                        [OwnerIdentDate] [varchar](10) NULL,\r\n\t                                        [OwnerIdentSource] [varchar](100) NULL,\r\n\t                                        [Nationalty] [int] NULL,\r\n\t                                        [Address] [varchar](30) NULL,\r\n\t                                        [Tel] [varchar](30) NULL,\r\n\t                                        [Mobile] [varchar](30) NULL,\r\n                                         CONSTRAINT [PK_T_Owner] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [Owner_No] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_Owner]  WITH CHECK ADD  CONSTRAINT [FK_T_Owner_T_Nationalities] FOREIGN KEY([Nationalty])\r\n                                        REFERENCES [dbo].[T_Nationalities] ([Nation_No])\r\n                                        ALTER TABLE [dbo].[T_Owner] CHECK CONSTRAINT [FK_T_Owner_T_Nationalities]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("    SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_EqarsData](\r\n\t                                        [EqarID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [EqarNo] [int] NOT NULL,\r\n\t                                        [NameA] [varchar](100) NULL,\r\n\t                                        [NameE] [varchar](100) NULL,\r\n\t                                        [EqarStatus] [int] NULL,\r\n\t                                        [AccNo] [varchar](30) NULL,\r\n\t                                        [Nationalty] [int] NULL,\r\n\t                                        [CityNo] [int] NULL,\r\n\t                                        [EqarTypNo] [int] NULL,\r\n\t                                        [EqarNatureNo] [int] NULL,\r\n\t                                        [OwnerNo] [int] NULL,\r\n\t                                        [ContractValue] [float] NULL,\r\n\t                                        [ContractRentValue] [float] NULL,\r\n\t                                        [SQNo] [varchar](100) NULL,\r\n\t                                        [SQDate] [varchar](10) NULL,\r\n\t                                        [Neighborhood] [varchar](100) NULL,\r\n\t                                        [Street] [varchar](100) NULL,\r\n\t                                        [FloorsCount] [int] NULL,\r\n\t                                        [EyesCount] [int] NULL,\r\n\t                                        [Space] [varchar](100) NULL,\r\n\t                                        [Note] [varchar](500) NULL,\r\n                                         CONSTRAINT [PK_T_EqarsData] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [EqarID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_EqarsData]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarsData_T_AccDef] FOREIGN KEY([AccNo])\r\n                                        REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                        ALTER TABLE [dbo].[T_EqarsData] CHECK CONSTRAINT [FK_T_EqarsData_T_AccDef]\r\n                                        ALTER TABLE [dbo].[T_EqarsData]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarsData_T_City] FOREIGN KEY([CityNo])\r\n                                        REFERENCES [dbo].[T_City] ([City_No])\r\n                                        ALTER TABLE [dbo].[T_EqarsData] CHECK CONSTRAINT [FK_T_EqarsData_T_City]\r\n                                        ALTER TABLE [dbo].[T_EqarsData]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarsData_T_EqarNatural] FOREIGN KEY([EqarNatureNo])\r\n                                        REFERENCES [dbo].[T_EqarNatural] ([EqarNatural_No])\r\n                                        ALTER TABLE [dbo].[T_EqarsData] CHECK CONSTRAINT [FK_T_EqarsData_T_EqarNatural]\r\n                                        ALTER TABLE [dbo].[T_EqarsData]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarsData_T_EqarTyp] FOREIGN KEY([EqarTypNo])\r\n                                        REFERENCES [dbo].[T_EqarTyp] ([EqarTyp_No])\r\n                                        ALTER TABLE [dbo].[T_EqarsData] CHECK CONSTRAINT [FK_T_EqarsData_T_EqarTyp]\r\n                                        ALTER TABLE [dbo].[T_EqarsData]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarsData_T_Nationalities] FOREIGN KEY([Nationalty])\r\n                                        REFERENCES [dbo].[T_Nationalities] ([Nation_No])\r\n                                        ALTER TABLE [dbo].[T_EqarsData] CHECK CONSTRAINT [FK_T_EqarsData_T_Nationalities]\r\n                                        ALTER TABLE [dbo].[T_EqarsData]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarsData_T_Owner] FOREIGN KEY([OwnerNo])\r\n                                        REFERENCES [dbo].[T_Owner] ([Owner_No])\r\n                                        ALTER TABLE [dbo].[T_EqarsData] CHECK CONSTRAINT [FK_T_EqarsData_T_Owner]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_AinsData](\r\n\t                                    [AinID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [AinNo] [varchar](100) NOT NULL,\r\n\t                                    [EqarID] [int] NOT NULL,\r\n\t                                    [AinTyp] [int] NOT NULL,\r\n\t                                    [AinNature] [int] NOT NULL,\r\n\t                                    [AinStatus] [int] NULL,\r\n\t                                    [RentOfYear] [float] NULL,\r\n\t                                    [EyeValue] [float] NULL,\r\n\t                                    [EyeDetail] [varchar](750) NULL,\r\n                                     CONSTRAINT [PK_T_Ain] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [AinID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_AinsData]  WITH CHECK ADD  CONSTRAINT [FK_T_AinsData_T_AinNatural] FOREIGN KEY([AinNature])\r\n                                    REFERENCES [dbo].[T_AinNatural] ([AinNatural_No])\r\n                                    ALTER TABLE [dbo].[T_AinsData] CHECK CONSTRAINT [FK_T_AinsData_T_AinNatural]\r\n                                    ALTER TABLE [dbo].[T_AinsData]  WITH CHECK ADD  CONSTRAINT [FK_T_AinsData_T_AinTyp] FOREIGN KEY([AinTyp])\r\n                                    REFERENCES [dbo].[T_AinTyp] ([AinTyp_No])\r\n                                    ALTER TABLE [dbo].[T_AinsData] CHECK CONSTRAINT [FK_T_AinsData_T_AinTyp]\r\n                                    ALTER TABLE [dbo].[T_AinsData]  WITH CHECK ADD  CONSTRAINT [FK_T_AinsData_T_EqarsData] FOREIGN KEY([EqarID])\r\n                                    REFERENCES [dbo].[T_EqarsData] ([EqarID])\r\n                                    ALTER TABLE [dbo].[T_AinsData] CHECK CONSTRAINT [FK_T_AinsData_T_EqarsData]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_EqarContract](\r\n\t                                    [ContractID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [ContractNo] [varchar](100) NOT NULL,\r\n\t                                    [EqarID] [int] NOT NULL,\r\n\t                                    [AinID] [int] NOT NULL,\r\n\t                                    [StartDate] [varchar](10) NOT NULL,\r\n\t                                    [EndDate] [varchar](10) NOT NULL,\r\n\t                                    [RentOfYear] [float] NOT NULL,\r\n\t                                    [tenant] [int] NOT NULL,\r\n\t                                    [Note] [varchar](500) NULL,\r\n                                     CONSTRAINT [PK_T_EqarContract] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [ContractID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_EqarContract]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarContract_T_AinsData] FOREIGN KEY([AinID])\r\n                                    REFERENCES [dbo].[T_AinsData] ([AinID])\r\n                                    ALTER TABLE [dbo].[T_EqarContract] CHECK CONSTRAINT [FK_T_EqarContract_T_AinsData]\r\n                                    ALTER TABLE [dbo].[T_EqarContract]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarContract_T_EqarsData] FOREIGN KEY([EqarID])\r\n                                    REFERENCES [dbo].[T_EqarsData] ([EqarID])\r\n                                    ALTER TABLE [dbo].[T_EqarContract] CHECK CONSTRAINT [FK_T_EqarContract_T_EqarsData]");
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                    SET QUOTED_IDENTIFIER ON\r\n                                    SET ANSI_PADDING ON\r\n                                    CREATE TABLE [dbo].[T_EqarSale](\r\n\t                                    [EqarSaleID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                    [EqarSaleNo] [varchar](100) NOT NULL,\r\n\t                                    [EqarID] [int] NOT NULL,\r\n\t                                    [AinID] [int] NULL,\r\n\t                                    [GDate] [varchar](10) NOT NULL,\r\n\t                                    [HDate] [varchar](10) NOT NULL,\r\n\t                                    [SaleValue] [float] NULL,\r\n\t                                    [Note] [varchar](500) NULL,\r\n                                     CONSTRAINT [PK_T_EqarSale] PRIMARY KEY CLUSTERED \r\n                                    (\r\n\t                                    [EqarSaleID] ASC\r\n                                    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                    ) ON [PRIMARY]\r\n\r\n                                    SET ANSI_PADDING OFF\r\n                                    ALTER TABLE [dbo].[T_EqarSale]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarSale_T_AinsData] FOREIGN KEY([AinID])\r\n                                    REFERENCES [dbo].[T_AinsData] ([AinID])\r\n                                    ALTER TABLE [dbo].[T_EqarSale] CHECK CONSTRAINT [FK_T_EqarSale_T_AinsData]\r\n                                    ALTER TABLE [dbo].[T_EqarSale]  WITH CHECK ADD  CONSTRAINT [FK_T_EqarSale_T_EqarsData] FOREIGN KEY([EqarID])\r\n                                    REFERENCES [dbo].[T_EqarsData] ([EqarID])\r\n                                    ALTER TABLE [dbo].[T_EqarSale] CHECK CONSTRAINT [FK_T_EqarSale_T_EqarsData]");
            }
            catch
            {
            }
            try
            {
                try
                {
                    db.ExecuteCommand("SET IDENTITY_INSERT [dbo].[T_AccCat] ON\r\n                                    INSERT [dbo].[T_AccCat] ([AccCat_ID], [AccCat_No], [Arb_Des], [Eng_Des], [CompanyID]) VALUES (12, N'12', N'المستأجرين', N'Tenant', 1)\r\n                                    SET IDENTITY_INSERT [dbo].[T_AccCat] OFF");
                }
                catch
                {
                }
            }
            catch
            {
            }
            try
            {
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [EqarAlarmContractEnd] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [EqarAlarmContractEnd] = 30 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD  [EqarAlarmDayPay] [int] NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [EqarAlarmDayPay] = 5 ");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [EqarAcc] [varchar](30) NULL");
                db.ExecuteCommand("ALTER TABLE T_SYSSETTING ADD [tenantAcc] [varchar](30) NULL");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [EqarAcc] = '' ");
                db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [tenantAcc] = '' ");
                try
                {
                    T_AccDef c = db.StockAccDef("10110");
                    if (c == null || string.IsNullOrEmpty(c.AccDef_No))
                    {
                        int num = 1;
                        try
                        {
                            num = db.T_AccDefs.Max((T_AccDef lgl) => Convert.ToInt32(lgl.AccDef_ID)) + 1;
                        }
                        catch
                        {
                        }
                        db.ExecuteCommand("INSERT [dbo].[T_AccDef] ([AccDef_No], [Arb_Des], [Eng_Des], [ParAcc], [Lev], [Typ], [AccCat], [DC], [Sts], [Debit], [Credit], [Balance], [Trn], [City], [Email], [Telphone1], [Telphone2], [Fax], [Mobile], [MaxLemt], [DesPers], [StrAm], [Adders], [Mnd], [Price], [zipCod], [PersonalNm], [RessonStoped], [StopedState], [CompanyID], [StopInvTyp], [DateAppointment], [ID_Date], [ID_DateEnd], [Passport_Date], [Insurance_Date], [Passport_DateEnd], [Insurance_DateEnd], [ID_No], [Passport_No], [Insurance_No], [ID_From], [Passport_From], [Insurance_From], [MainSal], [DepreciationPercent], [ProofAcc], [RelayAcc],[MaxDisCust],[vColNum1],[vColNum2],[vColStr1],[vColStr2],[vColStr3]) VALUES ( N'10110', N'العقارات', N'Real Est', N'101', 3, NULL, 1, 0, 0, 0, 0, 0, 3, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, '', '',0,0,0,'','','')");
                        T_AccDef q = db.StockAccDef("10110");
                        if (q != null && !string.IsNullOrEmpty(q.AccDef_No))
                        {
                            db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [EqarAcc] = '10110' ");
                        }
                    }
                }
                catch
                {
                }
                try
                {
                    T_AccDef c = db.StockAccDef("1027");
                    if (c == null || string.IsNullOrEmpty(c.AccDef_No))
                    {
                        int num = 1;
                        try
                        {
                            num = db.T_AccDefs.Max((T_AccDef lgl) => Convert.ToInt32(lgl.AccDef_ID)) + 1;
                        }
                        catch
                        {
                        }
                        db.ExecuteCommand("INSERT [dbo].[T_AccDef] ([AccDef_No], [Arb_Des], [Eng_Des], [ParAcc], [Lev], [Typ], [AccCat], [DC], [Sts], [Debit], [Credit], [Balance], [Trn], [City], [Email], [Telphone1], [Telphone2], [Fax], [Mobile], [MaxLemt], [DesPers], [StrAm], [Adders], [Mnd], [Price], [zipCod], [PersonalNm], [RessonStoped], [StopedState], [CompanyID], [StopInvTyp], [DateAppointment], [ID_Date], [ID_DateEnd], [Passport_Date], [Insurance_Date], [Passport_DateEnd], [Insurance_DateEnd], [ID_No], [Passport_No], [Insurance_No], [ID_From], [Passport_From], [Insurance_From], [MainSal], [DepreciationPercent], [ProofAcc], [RelayAcc],[MaxDisCust],[vColNum1],[vColNum2],[vColStr1],[vColStr2],[vColStr3]) VALUES ( N'1027', N'المستأجرين', N'Tenant', N'102', 3, NULL, 12, 0, 0, 0, 0, 0, 3, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, '', '',0,0,0,'','','')");
                        T_AccDef q = db.StockAccDef("1027");
                        if (q != null && !string.IsNullOrEmpty(q.AccDef_No))
                        {
                            db.ExecuteCommand("Update [dbo].[T_SYSSETTING] Set [tenantAcc] = '1027' ");
                        }
                    }
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_Tenant](\r\n\t                                        [tenantID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [tenantNo] [int] NOT NULL,\r\n\t                                        [NameA] [varchar](100) NULL,\r\n\t                                        [NameE] [varchar](100) NULL,\r\n\t                                        [AccNo] [varchar](30) NULL,\r\n\t                                        [Nationalty] [int] NULL,\r\n\t                                        [IDNo] [varchar](100) NULL,\r\n\t                                        [IDDate] [varchar](10) NULL,\r\n\t                                        [IDSource] [varchar](200) NULL,\r\n\t                                        [Tel] [varchar](100) NULL,\r\n\t                                        [Mobile] [varchar](100) NULL,\r\n\t                                        [workAdd] [varchar](200) NULL,\r\n\t                                        [workPhone] [varchar](100) NULL,\r\n\t                                        [BossName] [varchar](100) NULL,\r\n\t                                        [BossID] [varchar](100) NULL,\r\n\t                                        [BossIDDate] [varchar](10) NULL,\r\n\t                                        [BossIDSource] [varchar](200) NULL,\r\n\t                                        [BossAdd] [varchar](200) NULL,\r\n\t                                        [BossPhone] [varchar](100) NULL,\r\n\t                                        [BossMobile] [varchar](100) NULL,\r\n                                         CONSTRAINT [PK_T_Tenant] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [tenantID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_Tenant]  WITH CHECK ADD  CONSTRAINT [FK_T_Tenant_T_AccDef] FOREIGN KEY([AccNo])\r\n                                        REFERENCES [dbo].[T_AccDef] ([AccDef_No])\r\n                                        ALTER TABLE [dbo].[T_Tenant] CHECK CONSTRAINT [FK_T_Tenant_T_AccDef]\r\n                                        ALTER TABLE [dbo].[T_Tenant]  WITH CHECK ADD  CONSTRAINT [FK_T_Tenant_T_Nationalities] FOREIGN KEY([Nationalty])\r\n                                        REFERENCES [dbo].[T_Nationalities] ([Nation_No])\r\n                                        ALTER TABLE [dbo].[T_Tenant] CHECK CONSTRAINT [FK_T_Tenant_T_Nationalities]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_TenantContract](\r\n\t                                        [ContractID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [ContractNo] [int] NOT NULL,\r\n\t                                        [tenant_ID] [int] NOT NULL,\r\n\t                                        [Eqar_ID] [int] NOT NULL,\r\n\t                                        [Ain_ID] [int] NULL,\r\n\t                                        [RentOfYear] [float] NULL,\r\n\t                                        [ContractStart] [varchar](10) NOT NULL,\r\n\t                                        [ContractEnd] [varchar](10) NOT NULL,\r\n\t                                        [RentOfYearPayment] [float] NULL,\r\n\t                                        [PayMethod] [int] NULL,\r\n                                         CONSTRAINT [PK_T_TenantContract] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [ContractID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_TenantContract]  WITH CHECK ADD  CONSTRAINT [FK_T_TenantContract_T_AinsData] FOREIGN KEY([Ain_ID])\r\n                                        REFERENCES [dbo].[T_AinsData] ([AinID])\r\n                                        ALTER TABLE [dbo].[T_TenantContract] CHECK CONSTRAINT [FK_T_TenantContract_T_AinsData]\r\n                                        ALTER TABLE [dbo].[T_TenantContract]  WITH CHECK ADD  CONSTRAINT [FK_T_TenantContract_T_EqarsData] FOREIGN KEY([Eqar_ID])\r\n                                        REFERENCES [dbo].[T_EqarsData] ([EqarID])\r\n                                        ALTER TABLE [dbo].[T_TenantContract] CHECK CONSTRAINT [FK_T_TenantContract_T_EqarsData]\r\n                                        ALTER TABLE [dbo].[T_TenantContract]  WITH CHECK ADD  CONSTRAINT [FK_T_TenantContract_T_Tenant] FOREIGN KEY([tenant_ID])\r\n                                        REFERENCES [dbo].[T_Tenant] ([tenantID])\r\n                                        ALTER TABLE [dbo].[T_TenantContract] CHECK CONSTRAINT [FK_T_TenantContract_T_Tenant]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_AlarmTenant](\r\n\t                                        [AlarmTenantID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [AlarmTenantNo] [int] NOT NULL,\r\n\t                                        [AlarmDateG] [varchar](10) NOT NULL,\r\n\t                                        [AlarmDateH] [varchar](10) NOT NULL,\r\n\t                                        [tenant_ID] [int] NOT NULL,\r\n\t                                        [AlarmSubject] [varchar](100) NOT NULL,\r\n\t                                        [AlarmDetail] [varchar](1500) NULL,\r\n\t                                        [AlarmAdmin] [varchar](100) NULL,\r\n                                         CONSTRAINT [PK_T_AlarmTenant] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [AlarmTenantNo] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_AlarmTenant]  WITH CHECK ADD  CONSTRAINT [FK_T_AlarmTenant_T_Tenant] FOREIGN KEY([tenant_ID])\r\n                                        REFERENCES [dbo].[T_Tenant] ([tenantID])\r\n                                        ALTER TABLE [dbo].[T_AlarmTenant] CHECK CONSTRAINT [FK_T_AlarmTenant_T_Tenant]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("SET ANSI_NULLS ON\r\n                                        SET QUOTED_IDENTIFIER ON\r\n                                        SET ANSI_PADDING ON\r\n                                        CREATE TABLE [dbo].[T_TenantPayment](\r\n\t                                        [PaymentID] [int] IDENTITY(1,1) NOT NULL,\r\n\t                                        [PaymentNo] [int] NOT NULL,\r\n\t                                        [tenantContract_ID] [int] NOT NULL,\r\n\t                                        [Value] [float] NULL,\r\n\t                                        [PayMonth] [varchar](10) NULL,\r\n\t                                        [Statue] [bit] NULL,\r\n\t                                        [Remining] [float] NULL,\r\n\t                                        [SndNo] [int] NULL,\r\n                                         CONSTRAINT [PK_T_TenantPayment] PRIMARY KEY CLUSTERED \r\n                                        (\r\n\t                                        [PaymentID] ASC\r\n                                        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\r\n                                        ) ON [PRIMARY]\r\n\r\n                                        SET ANSI_PADDING OFF\r\n                                        ALTER TABLE [dbo].[T_TenantPayment]  WITH CHECK ADD  CONSTRAINT [FK_T_TenantPayment_T_GDHEAD] FOREIGN KEY([SndNo])\r\n                                        REFERENCES [dbo].[T_GDHEAD] ([gdhead_ID])\r\n                                        ALTER TABLE [dbo].[T_TenantPayment] CHECK CONSTRAINT [FK_T_TenantPayment_T_GDHEAD]\r\n                                        ALTER TABLE [dbo].[T_TenantPayment]  WITH CHECK ADD  CONSTRAINT [FK_T_TenantPayment_T_TenantContract] FOREIGN KEY([tenantContract_ID])\r\n                                        REFERENCES [dbo].[T_TenantContract] ([ContractID])\r\n                                        ALTER TABLE [dbo].[T_TenantPayment] CHECK CONSTRAINT [FK_T_TenantPayment_T_TenantContract]");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("        SET IDENTITY_INSERT [dbo].[T_INVSETTING] ON\r\n                                            INSERT [dbo].[T_INVSETTING] ([InvSet_ID], [InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[defSizePaper],[Orientation],[CatID],[PrintCat]) VALUES (29, 29, N'سند قبض مستأجر', N'Catch Receipt Tenant', N'1', N'1         ', N'أستلمنا من المكرم             ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, -2147483633, 16706518, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 10, N'', N'111 ', NULL, 1, 1,1,N'',1,NULL,0)\r\n                                            INSERT [dbo].[T_INVSETTING] ([InvSet_ID], [InvID], [InvNamA], [InvNamE], [InvSetting], [InvStartNo], [InvTypA0], [InvTypA1], [InvTypA2], [InvTypA3], [InvTypA4], [InvTypE0], [InvTypE1], [InvTypE2], [InvTypE3], [InvTypE4], [InvColorH], [InvColorD], [InvPrice], [FldA1], [FldA2], [FldA3], [FldA4], [FldA5], [FldE1], [FldE2], [FldE3], [FldE4], [FldE5], [AccCredit0], [AccDebit0], [invALogo], [invELogo], [invGdADesc], [invGdEDesc], [invGdStng], [AccCredit1], [AccDebit1], [AccCredit2], [AccDebit2], [AccCredit3], [AccDebit3], [AccCredit4], [AccDebit4], [hAl], [hAs], [hYm], [hYs], [lnPg], [lnSpc], [defPrn], [nTyp], [ItmTyp], [InvNum], [InvNum1], [DefLines],[defSizePaper],[Orientation],[CatID],[PrintCat]) VALUES (30, 30, N'سند صرف مستأجر', N'receipt Tenant', N'1', N'1         ', N'أصرفوا لي المكرم              ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, -2147483633, 16706518, 6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 1, 1, 1, 0, 10, N'', N'111 ', NULL, 1, 1,1,N'',1,NULL,0)\r\n                                            SET IDENTITY_INSERT [dbo].[T_INVSETTING] OFF");
                }
                catch
                {
                }
                try
                {
                    db.ExecuteCommand("  ALTER PROCEDURE [dbo].[S_T_GDHEAD_DELETE](\r\n                                          @gdhead_ID INT \r\n                                          )\r\n                                          AS\r\n                                          BEGIN\r\n                                          \r\n                                          UPDATE T_GDHEAD SET T_GDHEAD.gdLok = 'True',T_GDHEAD.gdTp = null,T_GDHEAD.gdRcptID = null \r\n                                          From T_GDHEAD\r\n                                          where @gdhead_ID = gdhead_ID\r\n                                          \r\n                                          RETURN\r\n                                          END");
                }
                catch
                {
                }
            }
            catch
            {
            }
            try
            {
                if (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim() + "\\khalijwatania.dll"))
                {
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'فاتورة خدمة' ,[InvNamE] = 'Service Invoice' where InvID = 1 ");
                }
            }
            catch
            {
            }
            try
            {
                if (File.Exists(Application.StartupPath + "\\Script\\Secriptjustlight.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim() + "\\Secriptjustlight.dll")))
                {
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'حجز وتأجير' ,[InvNamE] = 'Renting and Booking' where InvID = 1 ");
                    db.ExecuteCommand("Update [dbo].[T_INVSETTING] Set [InvNamA] = 'إلغاء حجز وتأجير' ,[InvNamE] = 'Renting and Booking Cancel' where InvID = 3 ");
                }
            }
            catch
            {
            }
        }
        private void buttonItem4_Click(object sender, EventArgs e)
        {
            FrmDelQTYEXP frm = new FrmDelQTYEXP();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem6_Click(object sender, EventArgs e)
        {
            if (VarGeneral.UserID == 1 && MessageBox.Show("هل أنت متاكد من تصفير جميع تكاليف الأصناف?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) == DialogResult.Yes)
            {
                db.ExecuteCommand("UPDATE [dbo].[T_Items] SET [StartCost] = 0,[AvrageCost] = 0,[LastCost] = 0,[FirstCost] = 0");
            }
        }
        private void buttonItem7_Click(object sender, EventArgs e)
        {
            MessageBox.Show("تأكد من حسابات الضريبة للمبيعات والمشتريات في تهيئة النظام قبل تشغيل المعالج");
            if (MessageBox.Show("يرجى الانتظار حتى ينتهي المعالج من عملية التصحيح ولا تقم بايقاف النظام تحت اي ظرف كان \n هل أنت متاكد من اتمام هذه العملية ?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) != DialogResult.Yes)
            {
                return;
            }
            try
            {
                List<T_INVHED> q = (from t in db.T_INVHEDs
                                    where t.InvTyp == (int?)1
                                    where t.IfDel.Value == 0
                                    where t.InvAddTax.Value > 0.0
                                    where t.TaxGaidID.HasValue
                                    where t.GadeId.HasValue
                                    where t.CashPayLocCur.Value + t.NetworkPayLocCur.Value + t.CreditPayLocCur.Value == t.InvNetLocCur.Value
                                    select t).ToList();
                T_INVHED vData4;
                for (int i = 0; i < q.Count; i++)
                {
                    try
                    {
                        vData4 = q[i];
                        T_GDHEAD vGaid = (from item in db.T_GDHEADs
                                          where item.gdTyp == (int?)1
                                          where item.gdLok == false
                                          where (double?)(double)item.gdhead_ID == vData4.GadeId
                                          select item).ToList().FirstOrDefault();
                        T_GDHEAD vGaidTax = (from item in db.T_GDHEADs
                                             where item.gdTyp == (int?)1
                                             where item.gdLok == false
                                             where (double?)(double)item.gdhead_ID == vData4.TaxGaidID
                                             select item).ToList().FirstOrDefault();
                        T_INVSETTING _InvSettingTax = db.StockInvSetting( 1);
                        string TaxCredit = ((_InvSettingTax.TaxCredit.Trim() != "***") ? _InvSettingTax.TaxCredit.Trim() : vData4.CusVenNo);
                        if (string.IsNullOrEmpty(TaxCredit))
                        {
                            continue;
                        }
                        List<T_GDDET> LDataThis;
                        if (vData4.InvCashPay.Value == 0)
                        {
                            if (vData4.CashPayLocCur - vData4.InvAddTax.Value > 0.0)
                            {
                                if (vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData4.CashPayLocCur.Value + vData4.NetworkPayLocCur.Value + vData4.CreditPayLocCur.Value != vData4.InvNetLocCur.Value)
                                {
                                    continue;
                                }
                                T_INVHED T_INVHED = vData4;
                                T_INVHED.CashPayLocCur -= vData4.InvAddTax.Value;
                                T_INVHED T_INVHED2 = vData4;
                                T_INVHED2.CashPay -= vData4.InvAddTax.Value;
                                T_GDHEAD t_GDHEAD = vGaid;
                                t_GDHEAD.gdTot -= vData4.InvAddTax.Value;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                             orderby g.Lin.Value
                                             select g into v
                                             where v.Lin.Value == 1
                                             select v).ToList();
                                for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                                {
                                    if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                    {
                                        T_GDDET gdDet_ = LDataThis[iiCnt];
                                        T_GDDET t_GDDET = gdDet_;
                                        t_GDDET.gdValue -= vData4.InvAddTax.Value;
                                        List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                      orderby g.Lin.Value
                                                                      select g into v
                                                                      where v.gdValue.Value > 0.0
                                                                      select v).ToList();
                                        LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                        db.Log = VarGeneral.DebugLog;
                                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                    }
                                    else
                                    {
                                        T_GDDET gdDet_ = LDataThis[iiCnt];
                                        T_GDDET t_GDDET2 = gdDet_;
                                        t_GDDET2.gdValue += vData4.InvAddTax.Value;
                                        List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                      orderby g.Lin.Value
                                                                      select g into v
                                                                      where v.gdValue.Value < 0.0
                                                                      select v).ToList();
                                        LDataThisTax.FirstOrDefault().AccNo = TaxCredit;
                                        db.Log = VarGeneral.DebugLog;
                                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                    }
                                }
                                continue;
                            }
                            if (!(vData4.NetworkPayLocCur - vData4.InvAddTax.Value > 0.0) || vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData4.CashPayLocCur.Value + vData4.NetworkPayLocCur.Value + vData4.CreditPayLocCur.Value != vData4.InvNetLocCur.Value)
                            {
                                continue;
                            }
                            T_INVHED T_INVHED3 = vData4;
                            T_INVHED3.NetworkPayLocCur -= vData4.InvAddTax.Value;
                            T_INVHED T_INVHED4 = vData4;
                            T_INVHED4.NetworkPay -= vData4.InvAddTax.Value;
                            T_GDHEAD t_GDHEAD2 = vGaid;
                            t_GDHEAD2.gdTot -= vData4.InvAddTax.Value;
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                         orderby g.Lin.Value
                                         select g into v
                                         where v.Lin.Value == 3
                                         select v).ToList();
                            for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                            {
                                if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET3 = gdDet_;
                                    t_GDDET3.gdValue -= vData4.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value > 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                                else
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET4 = gdDet_;
                                    t_GDDET4.gdValue += vData4.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value < 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = TaxCredit;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                            }
                            continue;
                        }
                        if (vData4.CreditPayLocCur - vData4.InvAddTax.Value > 0.0)
                        {
                            if (vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData4.CashPayLocCur.Value + vData4.NetworkPayLocCur.Value + vData4.CreditPayLocCur.Value != vData4.InvNetLocCur.Value)
                            {
                                continue;
                            }
                            T_INVHED T_INVHED5 = vData4;
                            T_INVHED5.CreditPayLocCur -= vData4.InvAddTax.Value;
                            T_INVHED T_INVHED6 = vData4;
                            T_INVHED6.CreditPay -= vData4.InvAddTax.Value;
                            T_GDHEAD t_GDHEAD3 = vGaid;
                            t_GDHEAD3.gdTot -= vData4.InvAddTax.Value;
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                         orderby g.Lin.Value
                                         select g into v
                                         where v.Lin.Value == 2
                                         select v).ToList();
                            for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                            {
                                if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET5 = gdDet_;
                                    t_GDDET5.gdValue -= vData4.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value > 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                                else
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET6 = gdDet_;
                                    t_GDDET6.gdValue += vData4.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value < 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = TaxCredit;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                            }
                            continue;
                        }
                        if (!(vData4.NetworkPayLocCur - vData4.InvAddTax.Value > 0.0) || vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData4.CashPayLocCur.Value + vData4.NetworkPayLocCur.Value + vData4.CreditPayLocCur.Value != vData4.InvNetLocCur.Value)
                        {
                            continue;
                        }
                        T_INVHED T_INVHED7 = vData4;
                        T_INVHED7.NetworkPayLocCur -= vData4.InvAddTax.Value;
                        T_INVHED T_INVHED8 = vData4;
                        T_INVHED8.NetworkPay -= vData4.InvAddTax.Value;
                        T_GDHEAD t_GDHEAD4 = vGaid;
                        t_GDHEAD4.gdTot -= vData4.InvAddTax.Value;
                        db.Log = VarGeneral.DebugLog;
                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                        LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                     orderby g.Lin.Value
                                     select g into v
                                     where v.Lin.Value == 3
                                     select v).ToList();
                        for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                        {
                            if (LDataThis[iiCnt].gdValue.Value > 0.0)
                            {
                                T_GDDET gdDet_ = LDataThis[iiCnt];
                                T_GDDET t_GDDET7 = gdDet_;
                                t_GDDET7.gdValue -= vData4.InvAddTax.Value;
                                List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                              orderby g.Lin.Value
                                                              select g into v
                                                              where v.gdValue.Value > 0.0
                                                              select v).ToList();
                                LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            }
                            else
                            {
                                T_GDDET gdDet_ = LDataThis[iiCnt];
                                T_GDDET t_GDDET8 = gdDet_;
                                t_GDDET8.gdValue += vData4.InvAddTax.Value;
                                List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                              orderby g.Lin.Value
                                                              select g into v
                                                              where v.gdValue.Value < 0.0
                                                              select v).ToList();
                                LDataThisTax.FirstOrDefault().AccNo = TaxCredit;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            }
                        }
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            try
            {
                List<T_INVHED> q = (from t in db.T_INVHEDs
                                    where t.InvTyp == (int?)3
                                    where t.IfDel.Value == 0
                                    where t.InvAddTax.Value > 0.0
                                    where t.TaxGaidID.HasValue
                                    where t.GadeId.HasValue
                                    where t.CashPayLocCur.Value + t.NetworkPayLocCur.Value + t.CreditPayLocCur.Value == t.InvNetLocCur.Value
                                    select t).ToList();
                T_INVHED vData3;
                for (int i = 0; i < q.Count; i++)
                {
                    try
                    {
                        vData3 = q[i];
                        T_GDHEAD vGaid = (from item in db.T_GDHEADs
                                          where item.gdTyp == (int?)3
                                          where item.gdLok == false
                                          where (double?)(double)item.gdhead_ID == vData3.GadeId
                                          select item).ToList().FirstOrDefault();
                        T_GDHEAD vGaidTax = (from item in db.T_GDHEADs
                                             where item.gdTyp == (int?)3
                                             where item.gdLok == false
                                             where (double?)(double)item.gdhead_ID == vData3.TaxGaidID
                                             select item).ToList().FirstOrDefault();
                        T_INVSETTING _InvSettingTax = db.StockInvSetting( 3);
                        string TaxCredit = ((_InvSettingTax.TaxCredit.Trim() != "***") ? _InvSettingTax.TaxCredit.Trim() : vData3.CusVenNo);
                        if (string.IsNullOrEmpty(TaxCredit))
                        {
                            continue;
                        }
                        string TaxDebit = ((_InvSettingTax.TaxDebit.Trim() != "***") ? _InvSettingTax.TaxDebit.Trim() : vData3.CusVenNo);
                        if (string.IsNullOrEmpty(TaxDebit))
                        {
                            continue;
                        }
                        List<T_GDDET> LDataThis;
                        if (vData3.InvCashPay.Value == 0)
                        {
                            if (vData3.CashPayLocCur - vData3.InvAddTax.Value > 0.0)
                            {
                                if (vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData3.CashPayLocCur.Value + vData3.NetworkPayLocCur.Value + vData3.CreditPayLocCur.Value != vData3.InvNetLocCur.Value)
                                {
                                    continue;
                                }
                                T_INVHED T_INVHED9 = vData3;
                                T_INVHED9.CashPayLocCur -= vData3.InvAddTax.Value;
                                T_INVHED T_INVHED10 = vData3;
                                T_INVHED10.CashPay -= vData3.InvAddTax.Value;
                                T_GDHEAD t_GDHEAD5 = vGaid;
                                t_GDHEAD5.gdTot -= vData3.InvAddTax.Value;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                             orderby g.Lin.Value
                                             select g into v
                                             where v.Lin.Value == 1
                                             select v).ToList();
                                for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                                {
                                    if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                    {
                                        T_GDDET gdDet_ = LDataThis[iiCnt];
                                        T_GDDET t_GDDET9 = gdDet_;
                                        t_GDDET9.gdValue -= vData3.InvAddTax.Value;
                                        List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                      orderby g.Lin.Value
                                                                      select g into v
                                                                      where v.gdValue.Value > 0.0
                                                                      select v).ToList();
                                        LDataThisTax.FirstOrDefault().AccNo = TaxDebit;
                                        db.Log = VarGeneral.DebugLog;
                                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                    }
                                    else
                                    {
                                        T_GDDET gdDet_ = LDataThis[iiCnt];
                                        T_GDDET t_GDDET10 = gdDet_;
                                        t_GDDET10.gdValue += vData3.InvAddTax.Value;
                                        List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                      orderby g.Lin.Value
                                                                      select g into v
                                                                      where v.gdValue.Value < 0.0
                                                                      select v).ToList();
                                        LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                        db.Log = VarGeneral.DebugLog;
                                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                    }
                                }
                                continue;
                            }
                            if (!(vData3.NetworkPayLocCur - vData3.InvAddTax.Value > 0.0) || vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData3.CashPayLocCur.Value + vData3.NetworkPayLocCur.Value + vData3.CreditPayLocCur.Value != vData3.InvNetLocCur.Value)
                            {
                                continue;
                            }
                            T_INVHED T_INVHED11 = vData3;
                            T_INVHED11.NetworkPayLocCur -= vData3.InvAddTax.Value;
                            T_INVHED T_INVHED12 = vData3;
                            T_INVHED12.NetworkPay -= vData3.InvAddTax.Value;
                            T_GDHEAD t_GDHEAD6 = vGaid;
                            t_GDHEAD6.gdTot -= vData3.InvAddTax.Value;
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                         orderby g.Lin.Value
                                         select g into v
                                         where v.Lin.Value == 3
                                         select v).ToList();
                            for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                            {
                                if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET11 = gdDet_;
                                    t_GDDET11.gdValue -= vData3.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value > 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = TaxDebit;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                                else
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET12 = gdDet_;
                                    t_GDDET12.gdValue += vData3.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value < 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                            }
                            continue;
                        }
                        if (vData3.CreditPayLocCur - vData3.InvAddTax.Value > 0.0)
                        {
                            if (vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData3.CashPayLocCur.Value + vData3.NetworkPayLocCur.Value + vData3.CreditPayLocCur.Value != vData3.InvNetLocCur.Value)
                            {
                                continue;
                            }
                            T_INVHED T_INVHED13 = vData3;
                            T_INVHED13.CreditPayLocCur -= vData3.InvAddTax.Value;
                            T_INVHED T_INVHED14 = vData3;
                            T_INVHED14.CreditPay -= vData3.InvAddTax.Value;
                            T_GDHEAD t_GDHEAD7 = vGaid;
                            t_GDHEAD7.gdTot -= vData3.InvAddTax.Value;
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                         orderby g.Lin.Value
                                         select g into v
                                         where v.Lin.Value == 2
                                         select v).ToList();
                            for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                            {
                                if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET13 = gdDet_;
                                    t_GDDET13.gdValue -= vData3.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value > 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = TaxDebit;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                                else
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET14 = gdDet_;
                                    t_GDDET14.gdValue += vData3.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value < 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                            }
                            continue;
                        }
                        if (!(vData3.NetworkPayLocCur - vData3.InvAddTax.Value > 0.0) || vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData3.CashPayLocCur.Value + vData3.NetworkPayLocCur.Value + vData3.CreditPayLocCur.Value != vData3.InvNetLocCur.Value)
                        {
                            continue;
                        }
                        T_INVHED T_INVHED15 = vData3;
                        T_INVHED15.NetworkPayLocCur -= vData3.InvAddTax.Value;
                        T_INVHED T_INVHED16 = vData3;
                        T_INVHED16.NetworkPay -= vData3.InvAddTax.Value;
                        T_GDHEAD t_GDHEAD8 = vGaid;
                        t_GDHEAD8.gdTot -= vData3.InvAddTax.Value;
                        db.Log = VarGeneral.DebugLog;
                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                        LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                     orderby g.Lin.Value
                                     select g into v
                                     where v.Lin.Value == 3
                                     select v).ToList();
                        for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                        {
                            if (LDataThis[iiCnt].gdValue.Value > 0.0)
                            {
                                T_GDDET gdDet_ = LDataThis[iiCnt];
                                T_GDDET t_GDDET15 = gdDet_;
                                t_GDDET15.gdValue -= vData3.InvAddTax.Value;
                                List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                              orderby g.Lin.Value
                                                              select g into v
                                                              where v.gdValue.Value > 0.0
                                                              select v).ToList();
                                LDataThisTax.FirstOrDefault().AccNo = TaxDebit;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            }
                            else
                            {
                                T_GDDET gdDet_ = LDataThis[iiCnt];
                                T_GDDET t_GDDET16 = gdDet_;
                                t_GDDET16.gdValue += vData3.InvAddTax.Value;
                                List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                              orderby g.Lin.Value
                                                              select g into v
                                                              where v.gdValue.Value < 0.0
                                                              select v).ToList();
                                LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            }
                        }
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            try
            {
                List<T_INVHED> q = (from t in db.T_INVHEDs
                                    where t.InvTyp == (int?)2
                                    where t.IfDel.Value == 0
                                    where t.InvAddTax.Value > 0.0
                                    where t.TaxGaidID.HasValue
                                    where t.GadeId.HasValue
                                    where t.CashPayLocCur.Value + t.NetworkPayLocCur.Value + t.CreditPayLocCur.Value == t.InvNetLocCur.Value
                                    select t).ToList();
                T_INVHED vData2;
                for (int i = 0; i < q.Count; i++)
                {
                    try
                    {
                        vData2 = q[i];
                        T_GDHEAD vGaid = (from item in db.T_GDHEADs
                                          where item.gdTyp == (int?)2
                                          where item.gdLok == false
                                          where (double?)(double)item.gdhead_ID == vData2.GadeId
                                          select item).ToList().FirstOrDefault();
                        T_GDHEAD vGaidTax = (from item in db.T_GDHEADs
                                             where item.gdTyp == (int?)2
                                             where item.gdLok == false
                                             where (double?)(double)item.gdhead_ID == vData2.TaxGaidID
                                             select item).ToList().FirstOrDefault();
                        T_INVSETTING _InvSettingTax = db.StockInvSetting( 2);
                        string TaxCredit = ((_InvSettingTax.TaxCredit.Trim() != "***") ? _InvSettingTax.TaxCredit.Trim() : vData2.CusVenNo);
                        if (string.IsNullOrEmpty(TaxCredit))
                        {
                            continue;
                        }
                        string TaxDebit = ((_InvSettingTax.TaxDebit.Trim() != "***") ? _InvSettingTax.TaxDebit.Trim() : vData2.CusVenNo);
                        if (string.IsNullOrEmpty(TaxDebit))
                        {
                            continue;
                        }
                        List<T_GDDET> LDataThis;
                        if (vData2.InvCashPay.Value == 0)
                        {
                            if (vData2.CashPayLocCur - vData2.InvAddTax.Value > 0.0)
                            {
                                if (vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData2.CashPayLocCur.Value + vData2.NetworkPayLocCur.Value + vData2.CreditPayLocCur.Value != vData2.InvNetLocCur.Value)
                                {
                                    continue;
                                }
                                T_INVHED T_INVHED17 = vData2;
                                T_INVHED17.CashPayLocCur -= vData2.InvAddTax.Value;
                                T_INVHED T_INVHED18 = vData2;
                                T_INVHED18.CashPay -= vData2.InvAddTax.Value;
                                T_GDHEAD t_GDHEAD9 = vGaid;
                                t_GDHEAD9.gdTot -= vData2.InvAddTax.Value;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                             orderby g.Lin.Value
                                             select g into v
                                             where v.Lin.Value == 1
                                             select v).ToList();
                                for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                                {
                                    if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                    {
                                        T_GDDET gdDet_ = LDataThis[iiCnt];
                                        T_GDDET t_GDDET17 = gdDet_;
                                        t_GDDET17.gdValue -= vData2.InvAddTax.Value;
                                        List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                      orderby g.Lin.Value
                                                                      select g into v
                                                                      where v.gdValue.Value > 0.0
                                                                      select v).ToList();
                                        LDataThisTax.FirstOrDefault().AccNo = TaxDebit;
                                        db.Log = VarGeneral.DebugLog;
                                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                    }
                                    else
                                    {
                                        T_GDDET gdDet_ = LDataThis[iiCnt];
                                        T_GDDET t_GDDET18 = gdDet_;
                                        t_GDDET18.gdValue += vData2.InvAddTax.Value;
                                        List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                      orderby g.Lin.Value
                                                                      select g into v
                                                                      where v.gdValue.Value < 0.0
                                                                      select v).ToList();
                                        LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                        db.Log = VarGeneral.DebugLog;
                                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                    }
                                }
                                continue;
                            }
                            if (!(vData2.NetworkPayLocCur - vData2.InvAddTax.Value > 0.0) || vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData2.CashPayLocCur.Value + vData2.NetworkPayLocCur.Value + vData2.CreditPayLocCur.Value != vData2.InvNetLocCur.Value)
                            {
                                continue;
                            }
                            T_INVHED T_INVHED19 = vData2;
                            T_INVHED19.NetworkPayLocCur -= vData2.InvAddTax.Value;
                            T_INVHED T_INVHED20 = vData2;
                            T_INVHED20.NetworkPay -= vData2.InvAddTax.Value;
                            T_GDHEAD t_GDHEAD10 = vGaid;
                            t_GDHEAD10.gdTot -= vData2.InvAddTax.Value;
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                         orderby g.Lin.Value
                                         select g into v
                                         where v.Lin.Value == 3
                                         select v).ToList();
                            for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                            {
                                if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET19 = gdDet_;
                                    t_GDDET19.gdValue -= vData2.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value > 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = TaxDebit;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                                else
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET20 = gdDet_;
                                    t_GDDET20.gdValue += vData2.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value < 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                            }
                            continue;
                        }
                        if (vData2.CreditPayLocCur - vData2.InvAddTax.Value > 0.0)
                        {
                            if (vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData2.CashPayLocCur.Value + vData2.NetworkPayLocCur.Value + vData2.CreditPayLocCur.Value != vData2.InvNetLocCur.Value)
                            {
                                continue;
                            }
                            T_INVHED T_INVHED21 = vData2;
                            T_INVHED21.CreditPayLocCur -= vData2.InvAddTax.Value;
                            T_INVHED T_INVHED22 = vData2;
                            T_INVHED22.CreditPay -= vData2.InvAddTax.Value;
                            T_GDHEAD t_GDHEAD11 = vGaid;
                            t_GDHEAD11.gdTot -= vData2.InvAddTax.Value;
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                         orderby g.Lin.Value
                                         select g into v
                                         where v.Lin.Value == 2
                                         select v).ToList();
                            for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                            {
                                if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET21 = gdDet_;
                                    t_GDDET21.gdValue -= vData2.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value > 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = TaxDebit;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                                else
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET22 = gdDet_;
                                    t_GDDET22.gdValue += vData2.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value < 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                            }
                            continue;
                        }
                        if (!(vData2.NetworkPayLocCur - vData2.InvAddTax.Value > 0.0) || vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData2.CashPayLocCur.Value + vData2.NetworkPayLocCur.Value + vData2.CreditPayLocCur.Value != vData2.InvNetLocCur.Value)
                        {
                            continue;
                        }
                        T_INVHED T_INVHED23 = vData2;
                        T_INVHED23.NetworkPayLocCur -= vData2.InvAddTax.Value;
                        T_INVHED T_INVHED24 = vData2;
                        T_INVHED24.NetworkPay -= vData2.InvAddTax.Value;
                        T_GDHEAD t_GDHEAD12 = vGaid;
                        t_GDHEAD12.gdTot -= vData2.InvAddTax.Value;
                        db.Log = VarGeneral.DebugLog;
                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                        LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                     orderby g.Lin.Value
                                     select g into v
                                     where v.Lin.Value == 3
                                     select v).ToList();
                        for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                        {
                            if (LDataThis[iiCnt].gdValue.Value > 0.0)
                            {
                                T_GDDET gdDet_ = LDataThis[iiCnt];
                                T_GDDET t_GDDET23 = gdDet_;
                                t_GDDET23.gdValue -= vData2.InvAddTax.Value;
                                List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                              orderby g.Lin.Value
                                                              select g into v
                                                              where v.gdValue.Value > 0.0
                                                              select v).ToList();
                                LDataThisTax.FirstOrDefault().AccNo = TaxDebit;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            }
                            else
                            {
                                T_GDDET gdDet_ = LDataThis[iiCnt];
                                T_GDDET t_GDDET24 = gdDet_;
                                t_GDDET24.gdValue += vData2.InvAddTax.Value;
                                List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                              orderby g.Lin.Value
                                                              select g into v
                                                              where v.gdValue.Value < 0.0
                                                              select v).ToList();
                                LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            }
                        }
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            try
            {
                List<T_INVHED> q = (from t in db.T_INVHEDs
                                    where t.InvTyp == (int?)4
                                    where t.IfDel.Value == 0
                                    where t.InvAddTax.Value > 0.0
                                    where t.TaxGaidID.HasValue
                                    where t.GadeId.HasValue
                                    where t.CashPayLocCur.Value + t.NetworkPayLocCur.Value + t.CreditPayLocCur.Value == t.InvNetLocCur.Value
                                    select t).ToList();
                T_INVHED vData;
                for (int i = 0; i < q.Count; i++)
                {
                    try
                    {
                        vData = q[i];
                        T_GDHEAD vGaid = (from item in db.T_GDHEADs
                                          where item.gdTyp == (int?)4
                                          where item.gdLok == false
                                          where (double?)(double)item.gdhead_ID == vData.GadeId
                                          select item).ToList().FirstOrDefault();
                        T_GDHEAD vGaidTax = (from item in db.T_GDHEADs
                                             where item.gdTyp == (int?)4
                                             where item.gdLok == false
                                             where (double?)(double)item.gdhead_ID == vData.TaxGaidID
                                             select item).ToList().FirstOrDefault();
                        T_INVSETTING _InvSettingTax = db.StockInvSetting( 4);
                        string TaxCredit = ((_InvSettingTax.TaxCredit.Trim() != "***") ? _InvSettingTax.TaxCredit.Trim() : vData.CusVenNo);
                        if (string.IsNullOrEmpty(TaxCredit))
                        {
                            continue;
                        }
                        List<T_GDDET> LDataThis;
                        if (vData.InvCashPay.Value == 0)
                        {
                            if (vData.CashPayLocCur - vData.InvAddTax.Value > 0.0)
                            {
                                if (vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData.CashPayLocCur.Value + vData.NetworkPayLocCur.Value + vData.CreditPayLocCur.Value != vData.InvNetLocCur.Value)
                                {
                                    continue;
                                }
                                T_INVHED T_INVHED25 = vData;
                                T_INVHED25.CashPayLocCur -= vData.InvAddTax.Value;
                                T_INVHED T_INVHED26 = vData;
                                T_INVHED26.CashPay -= vData.InvAddTax.Value;
                                T_GDHEAD t_GDHEAD13 = vGaid;
                                t_GDHEAD13.gdTot -= vData.InvAddTax.Value;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                             orderby g.Lin.Value
                                             select g into v
                                             where v.Lin.Value == 1
                                             select v).ToList();
                                for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                                {
                                    if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                    {
                                        T_GDDET gdDet_ = LDataThis[iiCnt];
                                        T_GDDET t_GDDET25 = gdDet_;
                                        t_GDDET25.gdValue -= vData.InvAddTax.Value;
                                        List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                      orderby g.Lin.Value
                                                                      select g into v
                                                                      where v.gdValue.Value > 0.0
                                                                      select v).ToList();
                                        LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                        db.Log = VarGeneral.DebugLog;
                                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                    }
                                    else
                                    {
                                        T_GDDET gdDet_ = LDataThis[iiCnt];
                                        T_GDDET t_GDDET26 = gdDet_;
                                        t_GDDET26.gdValue += vData.InvAddTax.Value;
                                        List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                      orderby g.Lin.Value
                                                                      select g into v
                                                                      where v.gdValue.Value < 0.0
                                                                      select v).ToList();
                                        LDataThisTax.FirstOrDefault().AccNo = TaxCredit;
                                        db.Log = VarGeneral.DebugLog;
                                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                    }
                                }
                                continue;
                            }
                            if (!(vData.NetworkPayLocCur - vData.InvAddTax.Value > 0.0) || vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData.CashPayLocCur.Value + vData.NetworkPayLocCur.Value + vData.CreditPayLocCur.Value != vData.InvNetLocCur.Value)
                            {
                                continue;
                            }
                            T_INVHED T_INVHED27 = vData;
                            T_INVHED27.NetworkPayLocCur -= vData.InvAddTax.Value;
                            T_INVHED T_INVHED28 = vData;
                            T_INVHED28.NetworkPay -= vData.InvAddTax.Value;
                            T_GDHEAD t_GDHEAD14 = vGaid;
                            t_GDHEAD14.gdTot -= vData.InvAddTax.Value;
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                         orderby g.Lin.Value
                                         select g into v
                                         where v.Lin.Value == 3
                                         select v).ToList();
                            for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                            {
                                if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET27 = gdDet_;
                                    t_GDDET27.gdValue -= vData.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value > 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                                else
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET28 = gdDet_;
                                    t_GDDET28.gdValue += vData.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value < 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = TaxCredit;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                            }
                            continue;
                        }
                        if (vData.CreditPayLocCur - vData.InvAddTax.Value > 0.0)
                        {
                            if (vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData.CashPayLocCur.Value + vData.NetworkPayLocCur.Value + vData.CreditPayLocCur.Value != vData.InvNetLocCur.Value)
                            {
                                continue;
                            }
                            T_INVHED T_INVHED29 = vData;
                            T_INVHED29.CreditPayLocCur -= vData.InvAddTax.Value;
                            T_INVHED T_INVHED30 = vData;
                            T_INVHED30.CreditPay -= vData.InvAddTax.Value;
                            T_GDHEAD t_GDHEAD15 = vGaid;
                            t_GDHEAD15.gdTot -= vData.InvAddTax.Value;
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                         orderby g.Lin.Value
                                         select g into v
                                         where v.Lin.Value == 2
                                         select v).ToList();
                            for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                            {
                                if (LDataThis[iiCnt].gdValue.Value > 0.0)
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET29 = gdDet_;
                                    t_GDDET29.gdValue -= vData.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value > 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                                else
                                {
                                    T_GDDET gdDet_ = LDataThis[iiCnt];
                                    T_GDDET t_GDDET30 = gdDet_;
                                    t_GDDET30.gdValue += vData.InvAddTax.Value;
                                    List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                                  orderby g.Lin.Value
                                                                  select g into v
                                                                  where v.gdValue.Value < 0.0
                                                                  select v).ToList();
                                    LDataThisTax.FirstOrDefault().AccNo = TaxCredit;
                                    db.Log = VarGeneral.DebugLog;
                                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                                }
                            }
                            continue;
                        }
                        if (!(vData.NetworkPayLocCur - vData.InvAddTax.Value > 0.0) || vGaid == null || string.IsNullOrEmpty(vGaid.gdNo) || vData.CashPayLocCur.Value + vData.NetworkPayLocCur.Value + vData.CreditPayLocCur.Value != vData.InvNetLocCur.Value)
                        {
                            continue;
                        }
                        T_INVHED T_INVHED31 = vData;
                        T_INVHED31.NetworkPayLocCur -= vData.InvAddTax.Value;
                        T_INVHED T_INVHED32 = vData;
                        T_INVHED32.NetworkPay -= vData.InvAddTax.Value;
                        T_GDHEAD t_GDHEAD16 = vGaid;
                        t_GDHEAD16.gdTot -= vData.InvAddTax.Value;
                        db.Log = VarGeneral.DebugLog;
                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                        LDataThis = (from g in new BindingList<T_GDDET>(vGaid.T_GDDETs)
                                     orderby g.Lin.Value
                                     select g into v
                                     where v.Lin.Value == 3
                                     select v).ToList();
                        for (int iiCnt = 0; iiCnt < LDataThis.Count; iiCnt++)
                        {
                            if (LDataThis[iiCnt].gdValue.Value > 0.0)
                            {
                                T_GDDET gdDet_ = LDataThis[iiCnt];
                                T_GDDET t_GDDET31 = gdDet_;
                                t_GDDET31.gdValue -= vData.InvAddTax.Value;
                                List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                              orderby g.Lin.Value
                                                              select g into v
                                                              where v.gdValue.Value > 0.0
                                                              select v).ToList();
                                LDataThisTax.FirstOrDefault().AccNo = LDataThis[iiCnt].AccNo;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            }
                            else
                            {
                                T_GDDET gdDet_ = LDataThis[iiCnt];
                                T_GDDET t_GDDET32 = gdDet_;
                                t_GDDET32.gdValue += vData.InvAddTax.Value;
                                List<T_GDDET> LDataThisTax = (from g in new BindingList<T_GDDET>(vGaidTax.T_GDDETs)
                                                              orderby g.Lin.Value
                                                              select g into v
                                                              where v.gdValue.Value < 0.0
                                                              select v).ToList();
                                LDataThisTax.FirstOrDefault().AccNo = TaxCredit;
                                db.Log = VarGeneral.DebugLog;
                                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                            }
                        }
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            MessageBox.Show("تمت العملية بنجاح");
        }
        private void buttonItem8_Click(object sender, EventArgs e)
        {
            if (VarGeneral.UserID == 1)
            {
                FrmRunProgrammallyOrder frm = new FrmRunProgrammallyOrder();
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void button_BrSetting_Click(object sender, EventArgs e)
        {
            FrmBrachSetting f = new FrmBrachSetting();
            //f.MdiParent = this;
            //childmin();
            showChild(f);
        }
        
        private void toolStripMenuItem_waitersActive_Click(object sender, EventArgs e)
        {
            if (VarGeneral.vDemo)
            {
                FrmNetWork frm = new FrmNetWork(13, toolStripMenuItem_waitersActive.Text);
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
            else if (RegToSupport(14))
            {
                FrmNetWork frm = new FrmNetWork(13, toolStripMenuItem_waitersActive.Text);
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private bool RegToSupport(int RegTyp)
        {
            return true;
            try
            {
                string sssPass = InputDialog.mostrar(" ادخل رقم تفعيل العملية ", "الدعم الفني");
                if (sssPass == "Um056027954488" && (Control.ModifierKeys & Keys.Control) == Keys.Control)
                
                {
                    return true;
                }
                try
                {
                    WebClient c = new WebClient();
                    string data = c.DownloadString("http://PROSOFTsa.com/orders_list/reg.txt");
                    string url = "http://PROSOFTsa.com/orders_list/reg.txt";
                    WebClient client = new WebClient();
                    using (Stream stream2 = client.OpenRead(url))
                    {
                        StreamReader streamReader = new StreamReader(stream2);
                        string line;
                        while ((line = streamReader.ReadLine()) != null)
                        {
                            try
                            {
                                if (line == "1")
                                {
                                    return true;
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    return false;
                }
                catch
                {
                    return false;
                }
            }
            catch
            {
                try
                {
                    WebClient c = new WebClient();
                    string data = c.DownloadString("http://PROSOFTsa.com/orders_list/reg.txt");
                    string url = "http://PROSOFTsa.com/orders_list/reg.txt";
                    WebClient client = new WebClient();
                    using (Stream stream2 = client.OpenRead(url))
                    {
                        StreamReader streamReader = new StreamReader(stream2);
                        string line;
                        while ((line = streamReader.ReadLine()) != null)
                        {
                            try
                            {
                                if (line == "1")
                                {
                                    return true;
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    return false;
                }
                catch
                {
                    return false;
                }
            }
        }
        private void bubbleButton_invSett_Click(object sender, EventArgs e)
        {
            SSSFMInvPrintSetup frm = new SSSFMInvPrintSetup();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_SndSett_Click(object sender, EventArgs e)
        {
            SSSFMSndPrintSetup frm = new SSSFMSndPrintSetup();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem_BarcodItems_Click(object sender, EventArgs e)
        {
            FMBarCodeUser frm = new FMBarCodeUser();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem_BarcodIInvoices_Click(object sender, EventArgs e)
        {
            FMBarCodeUserInv frm = new FMBarCodeUserInv();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem_InvDataSetting_Click(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    db.ExecuteCommand("Update [dbo].[T_mInvPrint] Set [BarcodeTyp] = 0 where BarcodeTyp is null");
                }
                catch
                {
                }
                FolderBrowserDialog fbd = new FolderBrowserDialog();
                DialogResult result = fbd.ShowDialog();
                string vPath = fbd.SelectedPath;
                if (string.IsNullOrEmpty(vPath))
                {
                    return;
                }
                List<T_mInvPrint> vData = db.T_mInvPrints.Where((T_mInvPrint t) => t.repNum == (int?)3).ToList();
                if (vData.Count > 0)
                {
                    List<string> vLines = new List<string>();
                    for (int i = 0; i < vData.Count; i++)
                    {
                        vLines.Add(vData[i].mInvPrint_ID + "," + vData[i].InvSndNo + "," + vData[i].nTyp.Value + "," + vData[i].IsPrint.Value + "," + vData[i].pField + "," + vData[i].vCol.Value + "," + vData[i].vRow.Value + "," + vData[i].vFont + "," + vData[i].vEt.Value + "," + vData[i].vBold.Value + "," + vData[i].vFldNo + "," + vData[i].vSize.Value + "," + vData[i].MaxW + "," + vData[i].IsPrntHd.Value + "," + vData[i].fldName + "," + vData[i].inRows + "," + vData[i].IsSum + "," + vData[i].repNum.Value + "," + vData[i].repTyp.Value + "," + vData[i].uChr + "," + vData[i].vWer + "," + vData[i].BarcodeTyp.Value);
                    }
                    File.WriteAllLines(vPath + "\\INVOICE_SETTING.txt", vLines.ToArray());
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("buttonItem_InvDataSetting_Click:", error, enable: true);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_SndDataSetting_Click(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    db.ExecuteCommand("Update [dbo].[T_mInvPrint] Set [BarcodeTyp] = 0 where BarcodeTyp is null");
                }
                catch
                {
                }
                FolderBrowserDialog fbd = new FolderBrowserDialog();
                DialogResult result = fbd.ShowDialog();
                string vPath = fbd.SelectedPath;
                if (string.IsNullOrEmpty(vPath))
                {
                    return;
                }
                List<T_mInvPrint> vData = db.T_mInvPrints.Where((T_mInvPrint t) => t.repNum == (int?)2).ToList();
                if (vData.Count > 0)
                {
                    List<string> vLines = new List<string>();
                    for (int i = 0; i < vData.Count; i++)
                    {
                        vLines.Add(vData[i].mInvPrint_ID + "," + vData[i].InvSndNo + "," + vData[i].nTyp.Value + "," + vData[i].IsPrint.Value + "," + vData[i].pField + "," + vData[i].vCol.Value + "," + vData[i].vRow.Value + "," + vData[i].vFont + "," + vData[i].vEt.Value + "," + vData[i].vBold.Value + "," + vData[i].vFldNo + "," + vData[i].vSize.Value + "," + vData[i].MaxW + "," + vData[i].IsPrntHd.Value + "," + vData[i].fldName + "," + vData[i].inRows + "," + vData[i].IsSum + "," + vData[i].repNum.Value + "," + vData[i].repTyp.Value + "," + vData[i].uChr + "," + vData[i].vWer + "," + vData[i].BarcodeTyp.Value);
                    }
                    File.WriteAllLines(vPath + "\\SND_SETTING.txt", vLines.ToArray());
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("buttonItem_SndDataSetting_Click:", error, enable: true);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_BarcodDataSetting_Click(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    db.ExecuteCommand("Update [dbo].[T_mInvPrint] Set [BarcodeTyp] = 0 where BarcodeTyp is null");
                }
                catch
                {
                }
                FolderBrowserDialog fbd = new FolderBrowserDialog();
                DialogResult result = fbd.ShowDialog();
                string vPath = fbd.SelectedPath;
                if (string.IsNullOrEmpty(vPath))
                {
                    return;
                }
                List<T_mInvPrint> vData = (from t in db.T_mInvPrints
                                           where t.repNum == (int?)4
                                           where t.repTyp == (int?)22
                                           where t.BarcodeTyp == (int?)0 || t.BarcodeTyp == (int?)1
                                           select t).ToList();
                if (vData.Count > 0)
                {
                    List<string> vLines = new List<string>();
                    for (int i = 0; i < vData.Count; i++)
                    {
                        vLines.Add(vData[i].mInvPrint_ID + "," + vData[i].InvSndNo + "," + vData[i].nTyp.Value + "," + vData[i].IsPrint.Value + "," + vData[i].pField + "," + vData[i].vCol.Value + "," + vData[i].vRow.Value + "," + vData[i].vFont + "," + vData[i].vEt.Value + "," + vData[i].vBold.Value + "," + vData[i].vFldNo + "," + vData[i].vSize.Value + "," + vData[i].MaxW + "," + vData[i].IsPrntHd.Value + "," + vData[i].fldName + "," + vData[i].inRows + "," + vData[i].IsSum + "," + vData[i].repNum.Value + "," + vData[i].repTyp.Value + "," + vData[i].uChr + "," + vData[i].vWer + "," + vData[i].BarcodeTyp.Value);
                    }
                    File.WriteAllLines(vPath + "\\BARCODE_SETTING.txt", vLines.ToArray());
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("buttonItem_BarcodDataSetting_Click:", error, enable: true);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_BarcodInvSetting_Click(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    db.ExecuteCommand("Update [dbo].[T_mInvPrint] Set [BarcodeTyp] = 0 where BarcodeTyp is null");
                }
                catch
                {
                }
                FolderBrowserDialog fbd = new FolderBrowserDialog();
                DialogResult result = fbd.ShowDialog();
                string vPath = fbd.SelectedPath;
                if (string.IsNullOrEmpty(vPath))
                {
                    return;
                }
                List<T_mInvPrint> vData = (from t in db.T_mInvPrints
                                           where t.repNum == (int?)4
                                           where t.repTyp == (int?)22
                                           where t.BarcodeTyp == (int?)2 || t.BarcodeTyp == (int?)3 || t.BarcodeTyp == (int?)4
                                           select t).ToList();
                if (vData.Count > 0)
                {
                    List<string> vLines = new List<string>();
                    for (int i = 0; i < vData.Count; i++)
                    {
                        vLines.Add(vData[i].mInvPrint_ID + "," + vData[i].InvSndNo + "," + vData[i].nTyp.Value + "," + vData[i].IsPrint.Value + "," + vData[i].pField + "," + vData[i].vCol.Value + "," + vData[i].vRow.Value + "," + vData[i].vFont + "," + vData[i].vEt.Value + "," + vData[i].vBold.Value + "," + vData[i].vFldNo + "," + vData[i].vSize.Value + "," + vData[i].MaxW + "," + vData[i].IsPrntHd.Value + "," + vData[i].fldName + "," + vData[i].inRows + "," + vData[i].IsSum + "," + vData[i].repNum.Value + "," + vData[i].repTyp.Value + "," + vData[i].uChr + "," + vData[i].vWer + "," + vData[i].BarcodeTyp.Value);
                    }
                    File.WriteAllLines(vPath + "\\BARCODE_INVOICE_SETTING.txt", vLines.ToArray());
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("buttonItem_BarcodInvSetting_Click:", error, enable: true);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_RepairGaidNo_Click(object sender, EventArgs e)
        {
            FrmRepairGd frm = new FrmRepairGd();
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem5_Click(object sender, EventArgs e)
        {
            try
            {
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 1 where [gdLok] = 0 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21 ) and gdhead_ID NOT IN (select GadeId from T_INVHED where GadeId != '') and gdhead_ID NOT IN (select TaxGaidID from T_INVHED where TaxGaidID != '') and gdhead_ID NOT IN (select DisGaidID1 from T_INVHED where DisGaidID1 != '') and gdhead_ID NOT IN (select CommGaidID from T_INVHED where CommGaidID != '') and gdhead_ID NOT IN (select ExtrnalCostGaidID from T_INVHED where ExtrnalCostGaidID != '')");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 1 where [gdLok] = 0 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID IN (select GadeId from T_INVHED where GadeId != '' and IfDel = 1)");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 1 where [gdLok] = 0 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID IN (select TaxGaidID from T_INVHED where TaxGaidID != '' and IfDel = 1)");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 1 where [gdLok] = 0 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID IN (select DisGaidID1 from T_INVHED where DisGaidID1 != '' and IfDel = 1)");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 1 where [gdLok] = 0 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID IN (select CommGaidID from T_INVHED where CommGaidID != '' and IfDel = 1)");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 1 where [gdLok] = 0 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID IN (select ExtrnalCostGaidID from T_INVHED where ExtrnalCostGaidID != '' and IfDel = 1)");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 0 where [gdLok] = 1 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID  IN (select GadeId from T_INVHED where GadeId != '' and IfDel = 0) ");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 0 where [gdLok] = 1 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID  IN (select TaxGaidID from T_INVHED where TaxGaidID != '' and IfDel = 0)");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 0 where [gdLok] = 1 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID  IN (select DisGaidID1 from T_INVHED where DisGaidID1 != '' and IfDel = 0)");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 0 where [gdLok] = 1 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID  IN (select CommGaidID from T_INVHED where CommGaidID != '' and IfDel = 0)");
                db.ExecuteCommand(" update T_GDHEAD set [gdLok] = 0 where [gdLok] = 1 and (gdTyp = 1 or gdTyp = 2  or gdTyp = 3  or gdTyp = 4  or gdTyp = 5  or gdTyp = 6  or gdTyp = 7  or gdTyp = 8  or gdTyp = 9  or gdTyp = 10  or gdTyp = 14  or gdTyp = 17  or gdTyp = 20 or gdTyp = 21) and gdhead_ID  IN (select ExtrnalCostGaidID from T_INVHED where ExtrnalCostGaidID != '' and IfDel = 0)");
            }
            catch
            {
            }
        }
        private void buttonItem_RepairInvoiceByTyp_Click(object sender, EventArgs e)
        {
            try
            {
                FrmRepairInvGaid frm = new FrmRepairInvGaid(_typ: false);
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
            catch
            {
            }
        }
        private void buttonItem_TSHFEER_Click(object sender, EventArgs e)
        {
            if ((Control.ModifierKeys & Keys.Control) == Keys.Control)
            {
                FrmTshfeer frm = new FrmTshfeer();
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        
#pragma warning disable CS0108 // 'Frm_Main.FormClosed()' hides inherited member 'Form.FormClosed'. Use the new keyword if hiding was intended.
     
        private void switchButtonItem_Exit_ValueChanged(object sender, EventArgs e)
        {
            if (switchButtonItem_Exit.Value)
            {
                return;
            }
            try
            {
                if (MessageBox.Show((LangArEn == 0) ? "هل انت متأكد من الخروج من النظام حقا ؟ " : "Do you want to exit the program already?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) == DialogResult.No)
                {
                    switchButtonItem_Exit.Value = true;
                }
                else
                {
                    Close();
                }
            }
            catch
            {
                Application.ExitThread();
            }
        }
        private void DBBackupElectronic(bool vMsg, int sts)
        {
           
            string _oldDBNo = VarGeneral.DBNo;
            int b = 0;
            string ServiceNm = "";
            try
            {
                if (VarGeneral.vEndYears)
                {
                    return;
                }
                if (VarGeneral.gUserName == "runsetting")
                {
                    ServiceNm = VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim();
                }
                else
                {
                    for (b = 0; b < VarGeneral.gServerName.Length && !(VarGeneral.gServerName.Substring(b, 1) == "\\"); b++)
                    {
                    }
                    try
                    {
                        ServiceNm = VarGeneral.gServerName.Substring(b + 1);
                    }
                    catch
                    {
                        ServiceNm = "";
                    }
                }
                if (string.IsNullOrEmpty(ServiceNm))
                {
                    ServiceNm = VarGeneral.DBNo.Replace("DBPROSOFT_", null);
                }
                try
                {
                    if (!Directory.Exists(Application.StartupPath + "\\" + ServiceNm))
                    {
                        Directory.CreateDirectory(Application.StartupPath + "\\" + ServiceNm);
                    }
                }
                catch
                {
                }
                try
                {
                    if (!Directory.Exists(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName))
                    {
                        Directory.CreateDirectory(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName);
                    }
                }
                catch
                {
                }
                List<string> _DBNo = new List<string>();
                using (Rate_DataDataContext _db = new Rate_DataDataContext("Server=" + VarGeneral.gServerName + ";Database=;UID=" + VarGeneral.UsrName + ";PWD=" + VarGeneral.Qut+ VarGeneral.UsrPass+ VarGeneral.Qut))
                {
                    _DBNo = _db.ExecuteQuery<string>("select name From master..sysdatabases Where name like 'DBPROSOFT_%' and name not like '%_Endsyr_%' order by name ", new object[0]).ToList();
                }
                for (int iiCnt = 0; iiCnt < _DBNo.Count; iiCnt++)
                {
                    string BackupPath = ((sts == 0) ? VarGeneral._SysDirPath : pthMailDB);
                    VarGeneral.DBNo = _DBNo[iiCnt];
                    try
                    {
                        List<string> FileBackup = new List<string>();
                        string filepath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                        DirectoryInfo d = new DirectoryInfo(BackupPath);
                        FileInfo[] files = d.GetFiles("*.bak");
                        foreach (FileInfo file in files)
                        {
                            if (file.Name.StartsWith(VarGeneral.DBNo))
                            {
                                FileBackup.Add(file.FullName);
                            }
                        }
                        FileBackup.Sort();
                        if (!CheckDB(VarGeneral.DBNo))
                        {
                            //label_AlarmBackup.Text = ((LangArEn == 0) ? "يرحى التأكد من المسار\n لم تتم عملية النسخ الاحتياطي بنجاح..  " : "Is not the backup process successfully .. Check Path");
                            //label_AlarmBackup.Visible = true;
                            //button_AlarmBackupClose.Visible = true;
                            //label_AlarmBackup.BringToFront();
                            //button_AlarmBackupClose.BringToFront();
                            return;
                        }
                        for (int i = 0; i < FileBackup.Count; i++)
                        {
                            if (FileBackup.Count <= ((!(VarGeneral.gUserName == "runsetting")) ? 4 : 0))
                            {
                                break;
                            }
                            if (File.Exists(FileBackup[i]))
                            {
                                GC.Collect();
                                GC.WaitForPendingFinalizers();
                                File.Delete(FileBackup[i]);
                                FileBackup.RemoveAt(i);
                                i = 0;
                            }
                        }
                    }
                    catch
                    {
                    }
                    int? calendr = VarGeneral.Settings_Sys.Calendr;
                    if (calendr.Value == 0 && calendr.HasValue)
                    {
                        object obj5 = BackupPath;
                        BackupPath = string.Concat(obj5, "\\", VarGeneral.DBNo, "_", VarGeneral.Gdate.Substring(0, 4), "_", VarGeneral.Gdate.Substring(5, 2), "_", VarGeneral.Gdate.Substring(8, 2), "_", DateTime.Now.Hour, "_", DateTime.Now.Minute, "_", DateTime.Now.Second, ".bak");
                    }
                    else
                    {
                        object obj5 = BackupPath;
                        BackupPath = string.Concat(obj5, "\\", VarGeneral.DBNo, "_", VarGeneral.Hdate.Substring(0, 4), "_", VarGeneral.Hdate.Substring(5, 2), "_", VarGeneral.Hdate.Substring(8, 2), "_", DateTime.Now.Hour, "_", DateTime.Now.Minute, "_", DateTime.Now.Second, ".bak");
                    }
                    string CmdText = " BACKUP DATABASE " + VarGeneral.DBNo + " TO DISK='{0}' WITH NOFORMAT, NOINIT, NAME = N'MyDB-FullBackup, SKIP, NOREWIND, NOUNLOAD, STATS = 10'";
                    CmdText = string.Format(CmdText, BackupPath);
                    try
                    {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        File.Delete(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName + "\\BackupDB.sql");
                    }
                    catch
                    {
                    }
                    TextWriter tw = File.CreateText(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName + "\\BackupDB.sql");
                    tw.WriteLine(CmdText);
                    tw.Close();
                    string sqlConnectionString = VarGeneral.BranchCS;
                    FileInfo fileDB = new FileInfo(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName + "\\BackupDB.sql");
                    FileStream fsToRead = fileDB.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                    StreamReader sr = new StreamReader(fsToRead);
                    string script = sr.ReadToEnd();
                    sr.Close();
                    SqlConnection conn = new SqlConnection(sqlConnectionString);
                    Server server = new Server(new ServerConnection(conn));
                    server.ConnectionContext.ExecuteNonQuery(script);
                    SSSBackupElectroinc(BackupPath, ServiceNm);
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("ButBackUp_Click:", error, enable: true);
            }
            try
            {
                if (!string.IsNullOrEmpty(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName) && Directory.Exists(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName))
                {
                    try
                    {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                    catch
                    {
                    }
                    Directory.Delete(Application.StartupPath + "\\" + ServiceNm + "\\DB\\" + Environment.UserName, recursive: true);
                }
            }
            catch
            {
            }
            VarGeneral.DBNo = _oldDBNo;
        }
        private void SSSBackupElectroinc(string vPaths, string vServerNm)
        {
            try
            {
                List<T_Branch> vBranchCount = dbc.FillBranch_2("").ToList();
                for (int i = 0; i < vBranchCount.Count; i++)
                {
                    try
                    {
                        string CmdText = " BACKUP DATABASE " + VarGeneral.DBNo.Replace("DBPROSOFT", "PROSOFT") + "_" + vBranchCount[i].Branch_no + " TO DISK='{0}' WITH NOFORMAT, NOINIT, NAME = N'MyDB-FullBackup, SKIP, NOREWIND, NOUNLOAD, STATS = 10'";
                        CmdText = string.Format(CmdText, vPaths);
                        try
                        {
                            GC.Collect();
                            GC.WaitForPendingFinalizers();
                            File.Delete(Application.StartupPath + "\\" + vServerNm + "\\DB\\" + Environment.UserName + "\\BackupDB.sql");
                        }
                        catch
                        {
                        }
                        TextWriter tw = File.CreateText(Application.StartupPath + "\\" + vServerNm + "\\DB\\" + Environment.UserName + "\\BackupDB.sql");
                        tw.WriteLine(CmdText);
                        tw.Close();
                        string sqlConnectionString = VarGeneral.BranchCS;
                        FileInfo fileDB = new FileInfo(Application.StartupPath + "\\" + vServerNm + "\\DB\\" + Environment.UserName + "\\BackupDB.sql");
                        FileStream fsToRead = fileDB.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                        StreamReader sr = new StreamReader(fsToRead);
                        string script = sr.ReadToEnd();
                        sr.Close();
                        SqlConnection conn = new SqlConnection(sqlConnectionString);
                        Server server = new Server(new ServerConnection(conn));
                        server.ConnectionContext.ExecuteNonQuery(script);
                    }
                    catch
                    {
                    }
                }
                dbInstance = null;
                //  if(_SysSetting==null) _SysSetting = new T_SYSSETTING();
                _SysSetting = db.SystemSettingStock();
                _SysSetting.AutoBackupDate = n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd");
                db.Log = VarGeneral.DebugLog;
                db.SubmitChanges(ConflictMode.ContinueOnConflict);
                try
                {
                    VarGeneral.Settings_Sys = db.SystemSettingStock();
                }
                catch
                {
                    Application.Exit();
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("ButBackUp_Click:", error, enable: true);
            }
        }
        private void Frm_Main_FormClosing(object sender, FormClosingEventArgs e)
        {
            
            {
                //Close();
            }
            //Application.Exit();
        }
        private void Frm_Main_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                //if (Frame1.Visible)
                //{
                //    Frame1.Visible = false;
                //}
                //else
                //{
                //    Close();
                //}
            }
        }
        private void Frm_Main_SizeChanged(object sender, EventArgs e)
        {
            //try
            //{
            //    Frame1.Left = (base.ClientSize.Width - Frame1.Width) / 2;
            //    Frame1.Top = (base.ClientSize.Height - Frame1.Height) / 2;
            //    OnlineWarning.Left = (base.ClientSize.Width - OnlineWarning.Width) / 2;
            //    OnlineWarning.Top = (base.ClientSize.Height - OnlineWarning.Height) / 2;
            //    //for (int i = 0; i < sideBarPanelItem_Files.SubItems.Count; i++)
            //    //{
            //    //	(sideBarPanelItem_Files.SubItems[i] as ButtonItem).FixedSize = new Size(0, sideBar_itemMain.Height / 21);
            //    //}
            //    for (int i = 0; i < sideBarPanelItem_Invioces.SubItems.Count; i++)
            //    {
            //        (sideBarPanelItem_Invioces.SubItems[i] as ButtonItem).FixedSize = new Size(0, sideBar_itemMain.Height / 20);
            //    }
            //    for (int i = 0; i < sideBarPanelItem_Acc.SubItems.Count; i++)
            //    {
            //        (sideBarPanelItem_Acc.SubItems[i] as ButtonItem).FixedSize = new Size(0, sideBar_itemMain.Height / 20);
            //    }
            //    for (int i = 0; i < sideBarPanelItem_RepStocks.SubItems.Count; i++)
            //    {
            //        (sideBarPanelItem_RepStocks.SubItems[i] as ButtonItem).FixedSize = new Size(0, sideBar_itemMain.Height / 24);
            //    }
            //    for (int i = 0; i < sideBarPanelItem_RepAcc.SubItems.Count; i++)
            //    {
            //        (sideBarPanelItem_RepAcc.SubItems[i] as ButtonItem).FixedSize = new Size(0, sideBar_itemMain.Height / 20);
            //    }
            //    for (int i = 0; i < sideBarPanelItem_Emps.SubItems.Count; i++)
            //    {
            //        (sideBarPanelItem_Emps.SubItems[i] as ButtonItem).FixedSize = new Size(0, sideBar_itemMain.Height / 15);
            //    }
            //    for (int i = 0; i < sideBarPanelItem_Hotel.SubItems.Count; i++)
            //    {
            //        (sideBarPanelItem_Hotel.SubItems[i] as ButtonItem).FixedSize = new Size(0, sideBar_itemMain.Height / 11);
            //    }
            //    for (int i = 0; i < sideBarPanelItem_Eqar.SubItems.Count; i++)
            //    {
            //        (sideBarPanelItem_Eqar.SubItems[i] as ButtonItem).FixedSize = new Size(0, sideBar_itemMain.Height / 11);
            //    }
            //    if (expandablePanel3.Visible)
            //    {
            //        expandablePanel3.Height = metroTilePanel.Height;
            //    }
            //}
            //catch
            //{
            //}
            //if (f != null) f.Hide();
        }
        private void buttonItem_DefaultSts_Click(object sender, EventArgs e)
        {
            string arguments = string.Empty;
            string[] args = Environment.GetCommandLineArgs();
            for (int i = 1; i < args.Length; i++)
            {
                arguments = arguments + args[i] + " ";
            }
            Application.ExitThread();
            Process.Start(Application.ExecutablePath, arguments);
        }
        private void bubbleButton_BarcodSetting_Click(object sender, EventArgs e)
        {
            FMBarCodePrintSetup frm = new FMBarCodePrintSetup();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void bubbleButton_InvSetting_DoubleClick(object sender, EventArgs e)
        {
        }
        private void bubbleButton_InvSetting_Click_1(object sender, EventArgs e)
        {
            FMInvPrintSetup frm = new FMInvPrintSetup(0);
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void AlarmPeaperBanksDate()
        {
            if (dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp.Value == 1)
            {
                return;
            }
            try
            {
                if (!radialMenuItem_AlArmBankPeaper2.Visible)
                {
                    return;
                }
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = "T_BankPeaper LEFT OUTER JOIN T_AccDef ON T_BankPeaper.CustAcc = T_AccDef.AccDef_No AND T_BankPeaper.BankAcc = T_AccDef.AccDef_No AND T_BankPeaper.BranchAcc = T_AccDef.AccDef_No LEFT OUTER JOIN T_SYSSETTING ON T_BankPeaper.CompanyID = T_SYSSETTING.SYSSETTING_ID LEFT OUTER JOIN T_INVSETTING ON T_BankPeaper.gdTyp = T_INVSETTING.InvID   ";
                string Fields = "";
                Fields = ((LangArEn != 0) ? " T_BankPeaper.PageNo, T_BankPeaper.PageDatePay, T_BankPeaper.Amount, T_BankPeaper.PageDate, T_BankPeaper.PayState,(select Eng_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.CustAcc ) as CusVenNm,(select Eng_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.BankAcc ) as AccDefNmBank,(select Eng_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.BranchAcc ) as AccDefNmBr, T_SYSSETTING.LogImg,T_INVSETTING.InvNamE as InvNm ,case when vTyp = 1 then 'Check' else 'Draft' end as vTyp,T_INVSETTING.InvID,gdID,ID, PayState" : " T_BankPeaper.PageNo, T_BankPeaper.PageDatePay, T_BankPeaper.Amount, T_BankPeaper.PageDate, T_BankPeaper.PayState,(select Arb_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.CustAcc ) as CusVenNm,(select Arb_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.BankAcc ) as AccDefNmBank,(select Arb_Des from T_AccDef as x  where x.AccDef_No = T_BankPeaper.BranchAcc ) as AccDefNmBr, T_SYSSETTING.LogImg,T_INVSETTING.InvNamA as InvNm ,case when vTyp = 1 then 'شيك' else 'كمبيالة' end as vTyp,T_INVSETTING.InvID,gdID,ID, PayState");
                _RepShow.Rule = " where (gdTyp = 23 or gdTyp = 24) and (((SUBSTRING(T_BankPeaper.PageDatePay,1,4) >= 1800 and T_BankPeaper.PageDatePay <= '" + VarGeneral.Gdate + "')) or ((SUBSTRING(T_BankPeaper.PageDatePay,1,4) < 1800 and T_BankPeaper.PageDatePay <= '" + VarGeneral.Hdate + "')))";
                if (!string.IsNullOrEmpty(Fields))
                {
                    _RepShow.Fields = Fields;
                    try
                    {
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData = _RepShow.RepData;
                    }
                    catch (Exception ex2)
                    {
                        VarGeneral.DebLog.writeLog("AlarmPeaperBanksDate:", ex2, enable: true);
                    }
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count != 0)
                {
                    try
                    {
                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Tag = LangArEn;
                        frm.Repvalue = "RepBankPeaperList";
                        VarGeneral.vTitle = ((LangArEn == 0) ? "الأوراق البنكية الواجب استحقاقها" : "Banknotes to be due");
                        frm.TopMost = true;
                        //frm.MdiParent = this;
                        //childmin();
                        frm.ShowDialog();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("button_ShowRep_Click:", error, enable: true);
                    }
                }
            }
            catch (Exception ex2)
            {
                VarGeneral.DebLog.writeLog("AlarmPeaperBanksDate:", ex2, enable: true);
                MessageBox.Show(ex2.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private double GetTotalFreeSpace(string driveName)
        {
            DriveInfo[] drives = DriveInfo.GetDrives();
            foreach (DriveInfo drive in drives)
            {
                if (drive.IsReady && drive.Name == driveName)
                {
                    return drive.TotalFreeSpace / 1024 / 1024 / 1024;
                }
            }
            return -1.0;
        }
        public static string GetProcessOwner(int processId)
        {
            string query = "Select * From Win32_Process Where ProcessID = " + processId;
            ManagementObjectCollection processList;
            using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(query))
            {
                processList = searcher.Get();
            }
            foreach (ManagementObject mo in processList.OfType<ManagementObject>())
            {
                object[] argList = new object[2]
                {
                    string.Empty,
                    string.Empty
                };
                if (Convert.ToInt32(mo.InvokeMethod("GetOwner", argList)) == 0)
                {
                    return string.Concat(argList[1], "\\", argList[0]);
                }
            }
            return "NO OWNER";
        }
        private void _OpenData(string filename)
        {
            if (VarGeneral.gUserName == "runsetting" && GetTotalFreeSpace("C:\\") < 20.0)
            {
                MessageBox.Show((LangArEn == 0) ? "لا توجد مساحة كافية لقراء البيانات .. يرجى المحاولة في وقت لاحق" : "There is not enough room for data readers ... please try later", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                return;
            }
            string DBName = "";
            string DBNameLog = "";
            string vPathDB = "";
            int b = 0;
            string ServiceNm = "";
            for (b = 0; b < VarGeneral.gServerName.Length && !(VarGeneral.gServerName.Substring(b, 1) == "\\"); b++)
            {
            }
            try
            {
                ServiceNm = VarGeneral.gServerName.Substring(b + 1);
            }
            catch
            {
                ServiceNm = "";
            }
            if (string.IsNullOrEmpty(ServiceNm))
            {
                ServiceNm = VarGeneral.DBNo.Replace("DBPROSOFT_", null);
            }
            try
            {
                if (!Directory.Exists(Application.StartupPath + "\\" + ServiceNm))
                {
                    Directory.CreateDirectory(Application.StartupPath + "\\" + ServiceNm);
                }
            }
            catch
            {
            }
            try
            {
                if (!File.Exists(Application.StartupPath + "\\" + ServiceNm + "\\Ending.txt"))
                {
                    File.CreateText(Application.StartupPath + "\\" + ServiceNm + "\\Ending.txt");
                }
            }
            catch
            {
            }
            try
            {
                StreamReader streamReader = new StreamReader(Application.StartupPath + "\\" + ServiceNm + "\\Ending.txt");
                string[] lines = streamReader.ReadToEnd().Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                vPathDB = lines[0];
            }
            catch
            {
                vPathDB = "";
            }
            if (string.IsNullOrEmpty(vPathDB))
            {
                vPathDB = Application.StartupPath + "\\" + ServiceNm;
            }
            if (VarGeneral.gUserName == "runsetting")
            {
                vPathDB = "C:\\Program Files\\Microsoft SQL Server\\MSSQL10_50.var_Ser_Nm\\MSSQL\\DATA".Replace("var_Ser_Nm", ServiceNm.ToUpper());
            }
       System.Windows.Forms. OpenFileDialog  ofd = new System.Windows.Forms. OpenFileDialog (); 
            List<string> vDB = new List<string>();
            List<string> vDBc = new List<string>();
            ofd.FileName = filename;
            if (string.IsNullOrEmpty(filename) || !File.Exists(filename))
            {
                return;
            }
            try
            {
                List<string> c2 = db.ExecuteQuery<string>(" SELECT db.name \r\n                                                                    FROM   sys.master_files mf INNER JOIN sys.databases db ON db.database_id = mf.database_id\r\n                                                                    where db.name like '%_Endsyr_%'", new object[0]).ToList();
                for (int i = 0; i < c2.Count; i++)
                {
                    db.ExecuteCommand("ALTER DATABASE " + c2[i] + " SET SINGLE_USER WITH ROLLBACK IMMEDIATE;\r\n                                                DROP DATABASE [ " + c2[i] + " ]");
                }
            }
            catch
            {
            }
            List<string> vLogicalName = new List<string>();
            List<string> vLogicalNameLog = new List<string>();
            try
            {
                List<string> newDb = db.ExecuteQuery<string>("  SELECT DB_NAME(database_id) AS DatabaseName\r\n                                                                        FROM sys.master_files AS mf\r\n                                                                        Where DB_NAME(database_id) like '%_Endsyr_%'", new object[0]).ToList();
                for (int i = 0; i < newDb.Count; i++)
                {
                    try
                    {
                        db.ExecuteCommand("DROP DATABASE [" + newDb[i] + "]");
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            for (int i = 1; i < 100; i++)
            {
                try
                {
                    List<string> vRecPath = db.ExecuteQuery<string>("RESTORE FILELISTONLY FROM DISK = '" + filename + "' with file = " + i, new object[0]).ToList();
                    if (vRecPath.Count > 0 && (vRecPath[0].StartsWith("DBPROSOFT_") || vRecPath[0].StartsWith("PROSOFT_")))
                    {
                        vLogicalName.Add(vRecPath[0]);
                        vLogicalNameLog.Add(vRecPath[1]);
                    }
                }
                catch
                {
                    break;
                }
            }
            vLogicalName = vLogicalName.Distinct().ToList();
            vLogicalNameLog = vLogicalNameLog.Distinct().ToList();
            if (vLogicalName.Count > 1)
            {
                for (int c = 0; c < vLogicalName.Count; c++)
                {
                    if (vLogicalName[c].StartsWith("DBPROSOFT_"))
                    {
                        DBName = vLogicalName[c];
                        DBNameLog = vLogicalNameLog[c];
                        break;
                    }
                }
                for (int c = 0; c < vLogicalNameLog.Count; c++)
                {
                    if (vLogicalName[c].StartsWith("DBPROSOFT_"))
                    {
                        DBNameLog = vLogicalNameLog[c];
                        break;
                    }
                }
                vDB = new List<string>();
                vDBc = new List<string>();
                if (string.IsNullOrEmpty(DBName) || string.IsNullOrEmpty(DBNameLog))
                {
                    return;
                }
                for (int i = 0; i <= vLogicalName.Count; i++)
                {
                    try
                    {
                        if (vLogicalName[i].StartsWith("DBPROSOFT_"))
                        {
                            using (Rate_DataDataContext _EndYearMain = new Rate_DataDataContext("Server=" + VarGeneral.gServerName + ";Database=;UID=" + VarGeneral.UsrName + ";PWD=" + VarGeneral.Qut+ VarGeneral.UsrPass+ VarGeneral.Qut))
                            {
                                string vWITH = "";
                                vWITH = " Move '" + vLogicalName[i] + "' TO '" + vPathDB + "\\" + vLogicalName[i] + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null) + ".mdf',Move '" + vLogicalNameLog[i] + "' TO '" + vPathDB + "\\" + vLogicalNameLog[i] + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null) + ".ldf' ALTER DATABASE [" + vLogicalName[i] + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null) + "] SET READ_ONLY ";
                                vWITH = " WITH RECOVERY, file = " + (i + 1) + ", " + vWITH;
                                _EndYearMain.ExecuteCommand("USE [master] RESTORE DATABASE [" + vLogicalName[i] + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null) + "] FROM DISK = '" + filename + "'" + vWITH);
                                vDBc.Add(vLogicalName[i] + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null));
                            }
                            continue;
                        }
                        int _Loop = 0;
                        while (true)
                        {
                            try
                            {
                                if (_Loop > 2)
                                {
                                    break;
                                }
                                string logNm = "";
                                string logNmLog = "";
                                try
                                {
                                    if (!vLogicalName[i].Contains(DBName.Replace("DBPROSOFT_", "")))
                                    {
                                        logNm = "PROSOFT_" + DBName.Replace("DBPROSOFT_", "") + "_" + i;
                                        logNmLog = "PROSOFT_" + DBName.Replace("DBPROSOFT_", "") + "_" + i + "_log";
                                    }
                                }
                                catch
                                {
                                    logNm = "";
                                    logNmLog = "";
                                }
                                if (string.IsNullOrEmpty(logNm))
                                {
                                    logNm = vLogicalName[i];
                                }
                                if (string.IsNullOrEmpty(logNmLog))
                                {
                                    logNmLog = vLogicalName[i];
                                }
                                string vWITH = "";
                                vWITH = " Move '" + vLogicalName[i] + "' TO '" + vPathDB + "\\" + DBName.Replace("DBPROSOFT", "PROSOFT") + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null) + logNm.Substring(DBName.Length - 2) + ".mdf',Move '" + vLogicalNameLog[i] + "' TO '" + vPathDB + "\\" + DBName.Replace("DBPROSOFT", "PROSOFT") + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null) + logNmLog.Substring(DBName.Length - 2) + ".ldf' ";
                                vWITH = " WITH RECOVERY,  file = " + (i + 1) + ", " + vWITH;
                                try
                                {
                                    GC.Collect();
                                    GC.WaitForPendingFinalizers();
                                    File.Delete(Application.StartupPath + "\\" + ServiceNm + "\\RestoreScript.sql");
                                }
                                catch
                                {
                                }
                                TextWriter tw = File.CreateText(Application.StartupPath + "\\" + ServiceNm + "\\RestoreScript.sql");
                                tw.WriteLine("USE [master] RESTORE DATABASE [" + DBName.Replace("DBPROSOFT", "PROSOFT") + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null) + logNm.Substring(DBName.Length - 2) + "] FROM DISK = '" + filename + "'" + vWITH);
                                tw.Close();
                                string sqlConnectionString = "Server=" + VarGeneral.gServerName + ";Database=;UID=" + VarGeneral.UsrName + ";PWD=" + VarGeneral.Qut+ VarGeneral.UsrPass+ VarGeneral.Qut;
                                FileInfo file = new FileInfo(Application.StartupPath + "\\" + ServiceNm + "\\RestoreScript.sql");
                                FileStream fsToRead = file.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                                StreamReader sr = new StreamReader(fsToRead);
                                string script = sr.ReadToEnd();
                                sr.Close();
                                SqlConnection conn = new SqlConnection(sqlConnectionString);
                                Server server = new Server(new ServerConnection(conn));
                                server.ConnectionContext.ExecuteNonQuery(script);
                                vDB.Add(DBName.Replace("DBPROSOFT", "PROSOFT") + "_Endsyr_" + Path.GetFileName(ofd.FileName).Replace(".lck", null).Replace(".lck_" + VarGeneral.BranchNumber, null) + logNm.Substring(DBName.Length - 2));
                            }
                            catch (Exception error)
                            {
                                VarGeneral.DebLog.writeLog("_OpenData SendMail: ", error, enable: true);
                                _Loop++;
                                continue;
                            }
                            break;
                        }
                    }
                    catch
                    {
                    }
                }
                List<string> newDb = db.ExecuteQuery<string>("  SELECT DB_NAME(database_id) AS DatabaseName\r\n                                                                        FROM sys.master_files AS mf\r\n                                                                        Where substring(DB_NAME(database_id),0,11) = 'DBPROSOFT_' and DB_NAME(database_id) like '%_Endsyr_%' and name not like '%log%' ", new object[0]).ToList();
                if (newDb.Count <= 0)
                {
                    return;
                }
                for (int i = 0; i < vDBc.Count; i++)
                {
                    try
                    {
                        dbc.ExecuteCommand("ALTER DATABASE [" + vDBc[i] + "] SET READ_WRITE");
                    }
                    catch
                    {
                    }
                }
                for (int i = 0; i < vDB.Count; i++)
                {
                    Stock_DataDataContext _cc = new Stock_DataDataContext("Server=" + VarGeneral.gServerName + ";Database=" + vDB[i] + ";UID=" + VarGeneral.UsrName + ";PWD=" + VarGeneral.Qut+ VarGeneral.UsrPass+ VarGeneral.Qut);
                    try
                    {
                        _cc.ExecuteCommand("ALTER DATABASE [" + vDB[i] + "] SET READ_WRITE");
                    }
                    catch
                    {
                    }
                }
                dbInstance = null;
                dbInstanceRate = null;
                VarGeneral.vEndYears = true;
                VarGeneral.DBNo = newDb.FirstOrDefault();
                new FrmMain(null, null, "", 0);
                FrmLog frm = new FrmLog();
                frm.TopMost = false;
                frm.ShowDialog();
                dbInstance = null;
                dbInstanceRate = null;
                Frm_Main_Load(null, null);
                return;
            }
            MessageBox.Show((LangArEn == 0) ? "انت تحاول فتح قاعدة بيانات لا تحوي فروع ولا بيانات ممكن انت تعرض او ان الملف غير صحيح .!" : "You are trying to open a database does not contain branches and data possible you bid or the file is incorrect.!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
        }
        private void ItemDataImport()
        {
            if (dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp.Value == 1)
            {
                return;
            }
            try
            {
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_CATEGORY Inner Join T_Items on T_CATEGORY.CAT_ID = T_Items.ItmCat left join T_SYSSETTING on T_SYSSETTING.SYSSETTING_ID = T_Items.CompanyID ";
                string Fields = "";
                Fields = ((LangArEn != 0) ? " T_Items.Itm_No as No, T_Items.Eng_Des as NmA, T_CATEGORY.Eng_Des as GroupNm, T_Items.StartCost  , T_Items.OpenQty,T_SYSSETTING.LogImg " : " T_Items.Itm_No as No, T_Items.Arb_Des as NmA, T_CATEGORY.Arb_Des as GroupNm, T_Items.StartCost  , T_Items.OpenQty,T_SYSSETTING.LogImg ");
                _RepShow.Rule = " where T_Items.OpenQty <= T_Items.QtyLvl and T_Items.QtyLvl != 0";
                _RepShow.Fields = Fields;
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex2)
                {
                    VarGeneral.DebLog.writeLog("ItemDataImport: 1", ex2, enable: true);
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count != 0)
                {
                    try
                    {
                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Tag = LangArEn;
                        frm.Repvalue = "RepRequestAlarm";
                        VarGeneral.vTitle = ((LangArEn == 0) ? "الأصناف الواجب توفرها" : "Items must be met");
                        frm.TopMost = true;
                        //frm.MdiParent = this;
                        //childmin();
                        frm.ShowDialog();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("ItemDataImport: 2", error, enable: true);
                    }
                }
            }
            catch (Exception ex2)
            {
                VarGeneral.DebLog.writeLog("ItemDataImport: 3", ex2, enable: true);
            }
        }
        private string BuildRuleEstDat()
        {
            HijriGregDates dateFormatter = new HijriGregDates();
            string Rule = "Where (T_INVHED.InvTyp = 1 or T_INVHED.InvTyp = 2)";
            Rule += " and ( T_INVHED.EstDat != '' )";
            object obj = Rule;
            Rule = string.Concat(obj, " AND DATEADD(DAY, -", VarGeneral.Settings_Sys.AlarmDueoBefore.Value, ", CONVERT(DATE, EstDat)) <= CASE WHEN substring(EstDat,1,4) < 1800 THEN CONVERT(DATE, '", VarGeneral.Hdate, "') ELSE '", VarGeneral.Gdate, "' END");
            Rule += " and IfDel != 1 ";
            if (File.Exists(Application.StartupPath + "\\Script\\SecriptGlasses.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim() + "\\SecriptGlasses.dll")))
            {
                obj = Rule;
                Rule = string.Concat(obj, " and (select sum(Round(T_GDDET.gdValue,", VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2, ")) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.AccNo = T_INVHED.CusVenNo) > 0 ");
                Rule = Rule.Replace("or T_INVHED.InvTyp = 2", "");
            }
            return Rule;
        }
        private void AlarmDataExpitem()
        {
            if (dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp.Value == 1)
            {
                return;
            }
            try
            {
                VarGeneral.RepData = new DataSet();
                var q = (from p in db.T_Items
                         join c in db.T_QTYEXPs on p.Itm_No equals c.itmNo into j1
                         from j2 in j1.DefaultIfEmpty()
                         where p.Lot.Value == 1 && j2.stkQty.HasValue
                         group new
                         {
                             j2,
                             j1
                         } by new
                         {
                             Itm_No = p.Itm_No,
                             DMY = p.DMY,
                             LrnExp = p.LrnExp,
                             itemNm = ((LangArEn == 0) ? p.Arb_Des : p.Eng_Des),
                             CategoyNm = ((LangArEn == 0) ? p.T_CATEGORY.Arb_Des : p.T_CATEGORY.Eng_Des),
                             stkQty = j2.stkQty,
                             storeNo = j2.storeNo,
                             DatExper = j2.DatExper,
                             LogImg = p.T_SYSSETTING.LogImg
                         } into grouped
                         orderby grouped.Key.DatExper
                         select new
                         {
                             grouped.Key.Itm_No,
                             grouped.Key.DMY,
                             grouped.Key.itemNm,
                             grouped.Key.CategoyNm,
                             grouped.Key.stkQty,
                             grouped.Key.storeNo,
                             grouped.Key.DatExper,
                             grouped.Key.LrnExp,
                             grouped.Key.LogImg
                         }).ToList();
                int _dytot = 1;
                try
                {
                    _dytot = ((VarGeneral.Settings_Sys.DMY.Value == 0) ? VarGeneral.Settings_Sys.LrnExp.Value : ((VarGeneral.Settings_Sys.DMY.Value != 1) ? (VarGeneral.Settings_Sys.LrnExp.Value * 365) : (VarGeneral.Settings_Sys.LrnExp.Value * 30)));
                }
                catch
                {
                    _dytot = 1;
                }
                if (_dytot <= 0)
                {
                    _dytot = 1;
                }
                for (int i = 0; i < q.Count; i++)
                {
                    if (q[i].DatExper.Length != 10)
                    {
                        continue;
                    }
                    if (int.Parse(q[i].DatExper.Substring(0, 4)) >= 1800 && q[i].stkQty.Value != 0.0 && VarGeneral.CheckDate(q[i].DatExper))
                    {
                        if (!(Convert.ToDateTime(n.GDateAdd3(q[i].DatExper, _dytot)).Date <= Convert.ToDateTime(VarGeneral.Gdate).Date))
                        {
                            continue;
                        }
                        if (VarGeneral.RepData.Tables.Count <= 0)
                        {
                            VarGeneral.RepData.Tables.Add();
                            for (int ii = 0; ii <= q.Count; ii++)
                            {
                                VarGeneral.RepData.Tables[0].Rows.Add();
                            }
                            if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
                            {
                                VarGeneral.RepData.Tables[0].Columns.Add("Itm_No");
                                VarGeneral.RepData.Tables[0].Columns.Add("itemNm");
                                VarGeneral.RepData.Tables[0].Columns.Add("CategoyNm");
                                VarGeneral.RepData.Tables[0].Columns.Add("DatExper");
                                VarGeneral.RepData.Tables[0].Columns.Add("DMY");
                                VarGeneral.RepData.Tables[0].Columns.Add("LrnExp");
                                VarGeneral.RepData.Tables[0].Columns.Add("stkQty");
                                VarGeneral.RepData.Tables[0].Columns.Add("storeNo");
                                VarGeneral.RepData.Tables[0].Columns.Add("LogImg");
                            }
                        }
                        VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"] = q[i].Itm_No;
                        VarGeneral.RepData.Tables[0].Rows[i]["itemNm"] = q[i].itemNm;
                        VarGeneral.RepData.Tables[0].Rows[i]["CategoyNm"] = q[i].CategoyNm;
                        VarGeneral.RepData.Tables[0].Rows[i]["DatExper"] = q[i].DatExper;
                        VarGeneral.RepData.Tables[0].Rows[i]["DMY"] = q[i].DMY;
                        VarGeneral.RepData.Tables[0].Rows[i]["LrnExp"] = q[i].LrnExp;
                        VarGeneral.RepData.Tables[0].Rows[i]["stkQty"] = q[i].stkQty;
                        VarGeneral.RepData.Tables[0].Rows[i]["storeNo"] = q[i].storeNo;
                        VarGeneral.RepData.Tables[0].Rows[i]["LogImg"] = q[i].LogImg;
                    }
                    else
                    {
                        if (int.Parse(q[i].DatExper.Substring(0, 4)) >= 1800 || q[i].stkQty.Value == 0.0 || !VarGeneral.CheckDate(q[i].DatExper) || !(Convert.ToDateTime(n.GDateAdd3(q[i].DatExper, _dytot)).Date <= Convert.ToDateTime(VarGeneral.Hdate).Date))
                        {
                            continue;
                        }
                        if (VarGeneral.RepData.Tables.Count <= 0)
                        {
                            VarGeneral.RepData.Tables.Add();
                            for (int ii = 0; ii <= q.Count; ii++)
                            {
                                VarGeneral.RepData.Tables[0].Rows.Add();
                            }
                            if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
                            {
                                VarGeneral.RepData.Tables[0].Columns.Add("Itm_No");
                                VarGeneral.RepData.Tables[0].Columns.Add("itemNm");
                                VarGeneral.RepData.Tables[0].Columns.Add("CategoyNm");
                                VarGeneral.RepData.Tables[0].Columns.Add("DatExper");
                                VarGeneral.RepData.Tables[0].Columns.Add("DMY");
                                VarGeneral.RepData.Tables[0].Columns.Add("LrnExp");
                                VarGeneral.RepData.Tables[0].Columns.Add("stkQty");
                                VarGeneral.RepData.Tables[0].Columns.Add("storeNo");
                                VarGeneral.RepData.Tables[0].Columns.Add("LogImg");
                            }
                        }
                        VarGeneral.RepData.Tables[0].Rows[i]["Itm_No"] = q[i].Itm_No;
                        VarGeneral.RepData.Tables[0].Rows[i]["itemNm"] = q[i].itemNm;
                        VarGeneral.RepData.Tables[0].Rows[i]["CategoyNm"] = q[i].CategoyNm;
                        VarGeneral.RepData.Tables[0].Rows[i]["DatExper"] = q[i].DatExper;
                        VarGeneral.RepData.Tables[0].Rows[i]["DMY"] = q[i].DMY;
                        VarGeneral.RepData.Tables[0].Rows[i]["LrnExp"] = q[i].LrnExp;
                        VarGeneral.RepData.Tables[0].Rows[i]["stkQty"] = q[i].stkQty;
                        VarGeneral.RepData.Tables[0].Rows[i]["storeNo"] = q[i].storeNo;
                        VarGeneral.RepData.Tables[0].Rows[i]["LogImg"] = q[i].LogImg;
                    }
                }
                try
                {
                }
                catch (Exception)
                {
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count != 0)
                {
                    try
                    {
                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Tag = LangArEn;
                        frm.Repvalue = "RepDateExpir";
                        VarGeneral.vTitle = ((LangArEn == 0) ? "تنبيه بالأصناف حسب تاريخ انتهاء الصلاحية" : "Alert Items by the expiration date");
                        frm.TopMost = true;
                        //frm.MdiParent = this;
                        //childmin();
                        frm.ShowDialog();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("AlarmDataExpitem:", error, enable: true);
                    }
                }
            }
            catch (Exception ex2)
            {
                VarGeneral.DebLog.writeLog("AlarmDataExpitem:", ex2, enable: true);
            }
        }
        private void radialMenuItem_OpenCloseTheYear2_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_OpenCloseTheYear";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_Permisson_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_Permisson";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_Reg_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_Reg";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_AlarmRequest2_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_AlarmRequest";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_AlarmDateExp2_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_AlarmDateExp";
            radialMenu_Setting_ItemClick(item, e);
        }
        public static bool activflag = true;
        private int CalculateSupport()
        {
            try
            {
                if (VarGeneral.gUserName == "runsetting")
                {
                    return 1000;
                }
                RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\MrdSoft\\Register", writable: true);
                RegistryKey hKeyElec = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
                bool isRemotCheck = false;
                string dtCheck = "";
                try
                {
                    if (File.Exists(Application.StartupPath + "\\flxgridD.txt"))
                    {
                        isRemotCheck = true;
                        FileInfo fileSecurity = new FileInfo(Application.StartupPath + "\\flxgridD.txt");
                        FileStream fsToReadSecurity = fileSecurity.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                        StreamReader srSecurity = new StreamReader(fsToReadSecurity);
                        dtCheck = VarGeneral.Decrypt(srSecurity.ReadToEnd().Trim());
                        srSecurity.Close();
                    }
                    else
                    {
                        isRemotCheck = false;
                    }
                }
                catch
                {
                }
                string regval = "";
                string DT_H = "";
                string regval_ELECTa = "";
                string regval_New = "";
                try
                {
                    regval = n.FormatGreg(hKey.GetValue("DTBackup").ToString(), "yyyy/MM/dd");
                    DT_H = n.GregToHijri(regval);
                }
                catch
                {
                    regval = "";
                    DT_H = "";
                }
                try
                {
                    regval_ELECTa = n.FormatGreg(hKeyElec.GetValue("vBackupELEC").ToString(), "yyyy/MM/dd");
                }
                catch
                {
                    regval_ELECTa = "";
                }
                try
                {
                    regval_New = n.FormatGreg(hKeyNew.GetValue("vBackup_New").ToString(), "yyyy/MM/dd");
                }
                catch
                {
                    regval_New = "";
                }
                if (!VarGeneral.CheckDate(regval))
                {
                    try
                    {
                        if (!VarGeneral.vDemo)
                        {
                            hKeyNew.CreateSubKey("TurnOff");
                            hKeyNew.SetValue("TurnOff", "0");
                        }
                    }
                    catch
                    {
                    }
                    return 0;
                }
                if (!VarGeneral.CheckDate(regval_ELECTa))
                {
                    try
                    {
                        if (!VarGeneral.vDemo)
                        {
                            hKeyNew.CreateSubKey("TurnOff");
                            hKeyNew.SetValue("TurnOff", "0");
                        }
                    }
                    catch
                    {
                    }
                    return 0;
                }
                if (!VarGeneral.CheckDate(regval_New))
                {
                    try
                    {
                        if (!VarGeneral.vDemo)
                        {
                            hKeyNew.CreateSubKey("TurnOff");
                            hKeyNew.SetValue("TurnOff", "0");
                        }
                    }
                    catch
                    {
                    }
                    return 0;
                }
                if (regval.Trim() != regval_ELECTa.Trim() || regval.Trim() != regval_New.Trim() || regval_New.Trim() != regval_ELECTa.Trim())
                {
                    try
                    {
                        if (!VarGeneral.vDemo)
                        {
                            hKeyNew.CreateSubKey("TurnOff");
                            hKeyNew.SetValue("TurnOff", "0");
                        }
                    }
                    catch
                    {
                    }
                    return 0;
                }
                if (isRemotCheck)
                {
                    if (!VarGeneral.CheckDate(dtCheck))
                    {
                        try
                        {
                            if (!VarGeneral.vDemo)
                            {
                                hKeyNew.CreateSubKey("TurnOff");
                                hKeyNew.SetValue("TurnOff", "0");
                            }
                        }
                        catch
                        {
                        }
                        return 0;
                    }
                    if (dtCheck.Trim() != regval.Trim() || dtCheck.Trim() != regval_New.Trim() || dtCheck.Trim() != regval_ELECTa.Trim())
                    {
                        try
                        {
                            if (!VarGeneral.vDemo)
                            {
                                hKeyNew.CreateSubKey("TurnOff");
                                hKeyNew.SetValue("TurnOff", "0");
                            }
                        }
                        catch
                        {
                        }
                        return 0;
                    }
                }
                try
                {
                    if (Convert.ToDateTime(VarGeneral.Hdate) > Convert.ToDateTime(n.FormatHijri(DT_H, "yyyy/MM/dd")))
                    {
                        try
                        {
                            if (!VarGeneral.vDemo)
                            {
                                hKeyNew.CreateSubKey("TurnOff");
                                hKeyNew.SetValue("TurnOff", "0");
                            }
                        }
                        catch
                        {
                        }
                        return 0;
                    }
                    return n.vDiff(n.FormatHijri(DT_H, "yyyy/MM/dd"), VarGeneral.Hdate);
                }
                catch
                {
                    if (Convert.ToDateTime(VarGeneral.Gdate) > Convert.ToDateTime(n.FormatGreg(regval, "yyyy/MM/dd")))
                    {
                        try
                        {
                            if (!VarGeneral.vDemo)
                            {
                                hKeyNew.CreateSubKey("TurnOff");
                                hKeyNew.SetValue("TurnOff", "0");
                            }
                        }
                        catch
                        {
                        }
                        return 0;
                    }
                    return n.vDiff_E(n.FormatGreg(regval, "yyyy/MM/dd"), VarGeneral.Gdate);
                }
            }
            catch
            {
                try
                {
                    if (!VarGeneral.vDemo)
                    {
                        RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
                        hKeyNew.CreateSubKey("TurnOff");
                        hKeyNew.SetValue("TurnOff", "0");
                    }
                }
                catch
                {
                }
                return 0;
            }
        }
        private void CheckBackupFile()
        {
            if (!(VarGeneral.gUserName != "runsetting") || File.Exists(Application.StartupPath + "\\stopcheck.txt"))
            {
                return;
            }
            try
            {
                string LBak_pth = (from d in Directory.GetFiles(VarGeneral._SysDirPath, "*.bak")
                                   orderby new FileInfo(d).CreationTime descending
                                   select d into f
                                   where f.Contains(VarGeneral.DBNo.Replace("DBPROSOFT_", null))
                                   select f).FirstOrDefault();
                if (!string.IsNullOrEmpty(LBak_pth))
                {
                    try
                    {
                        if (int.Parse(db.ExecuteCommand("RESTORE HEADERONLY FROM DISK = '" + LBak_pth + "'").ToString()) != dbc.FillBranch_2("").ToList().Count + 1)
                        {
                            //OnlineWarning.Visible = true;
                            //OnlineWarning.BringToFront();
                            //OnlineWarning.Text = "عزيزي العميل : \n يبدو بأن بيانات عملك الإحتياطية تالفة ومتضررة \n يرجى منك سرعة الاتصال الى قسم الدعم الفني لمعالجة الأمر \n لأرقام التواصل يرجى الضغط على الزر أعلاه";
                        }
                    }
                    catch
                    {
                        //OnlineWarning.Visible = true;
                        //OnlineWarning.BringToFront();
                        //OnlineWarning.Text = "عزيزي المستخدم : \n يبدو بأن بيانات عملك الإحتياطية تالفة ومتضررة \n يرجى منك سرعة الاتصال الى قسم الدعم الفني لمعالجة الأمر \n لأرقام التواصل يرجى الضغط على الزر أعلاه";
                    }
                }
                else
                {
                    //OnlineWarning.Visible = true;
                    //OnlineWarning.BringToFront();
                    //OnlineWarning.Text = "عزيزنا العميل : \n يبدو بأن بيانات عملك الإحتياطية تالفة ومتضررة \n يرجى منك سرعة الاتصال الى قسم الدعم الفني لمعالجة الأمر \n لأرقام التواصل يرجى الضغط على الزر أعلاه";
                }
            }
            catch
            {
                //OnlineWarning.Visible = true;
                //OnlineWarning.BringToFront();
                //OnlineWarning.Text = "تنبيه هام : \n يبدو بأن بيانات عملك الإحتياطية تالفة ومتضررة \n يرجى منك سرعة الاتصال الى قسم الدعم الفني لمعالجة الأمر \n لأرقام التواصل يرجى الضغط على الزر أعلاه";
            }
        }
        private bool CheckUserIFRemote()
        {
            try
            {
#pragma warning disable CS0162 // Unreachable code detected
               return false; if (SystemInformation.TerminalServerSession)
#pragma warning restore CS0162 // Unreachable code detected
                {
                    return true;
                }
                return false;
            }
            catch
            {
                return true;
            }
        }
        private void ShowLoadAlert()
        {
            try
            {
                m_AlertOnLoad.Close();
            }
            catch
            {
            }
            m_AlertOnLoad = new AlertCustom();
            m_AlertOnLoad.ShowCloseButton = false;
            m_AlertOnLoad.labelX2.Text = "لقد تم ايقاف خدمات الدعم الفني \n يرجى التواصل مع الادارة لتشغيل الخدمات";
            Rectangle r = Screen.GetWorkingArea(this);
            m_AlertOnLoad.Location = new Point(r.Right - m_AlertOnLoad.Width, r.Bottom - m_AlertOnLoad.Height);
            m_AlertOnLoad.AutoClose = true;
            m_AlertOnLoad.AutoCloseTimeOut = 40;
            m_AlertOnLoad.AlertAnimation = eAlertAnimation.BottomToTop;
            m_AlertOnLoad.AlertAnimationDuration = 300;
            m_AlertOnLoad.Show(balloonFocus: false);
        }
        private void timer2_Tick(object sender, EventArgs e)
        {
            bubbleButton_Enter_Click(null, null);
        }
        private void radialMenuItem_AlArmBankPeaper2_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_AlArmBankPeaper";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void InvoiceByDuoe()
        {
            if (dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp.Value == 1)
            {
                return;
            }
            try
            {
                VarGeneral.itmDes = "";
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_INVHED Left Join  T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  Left Join T_Curency On T_INVHED.CurTyp = T_Curency.Curency_ID Left Join T_CstTbl On T_INVHED.InvCstNo = T_CstTbl.Cst_ID Left Join T_Mndob on T_INVHED.MndNo = T_Mndob.Mnd_Id Left Join T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID";
                string Fields = "";
                Fields = ((LangArEn != 0) ? (" T_INVHED.InvNo,T_INVSETTING.InvNamE as InvTypNm,T_INVHED.GDat,T_INVHED.HDat,T_INVHED.InvCash ,T_CstTbl.Eng_Des as CostCenteNm,T_Mndob.Eng_Des as MndNm,T_INVHED.CashPayLocCur,T_INVHED.NetworkPayLocCur,T_INVHED.CreditPayLocCur,(case when T_INVHED.IsTaxUse = 1 then (T_INVHED.InvNetLocCur - T_INVHED.InvAddTax) else T_INVHED.InvNetLocCur end ) as InvNetLocCur,case when InvTyp = 1 then (Round(T_INVHED.InvCost," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2) + ")) else 0 end as  InvCost,case when InvTyp = 1 then(Round((  (case when T_INVHED.IsTaxUse = 1 then (T_INVHED.InvNetLocCur - T_INVHED.InvAddTax) else T_INVHED.InvNetLocCur end ) - (case when T_INVHED.IsTaxUse = 1 then((select sum(Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmTax) from T_INVDET where T_INVDET.InvId = T_INVHED.InvHed_ID) / 100) else 0 end)) - T_INVHED.InvCost," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2) + ")) else 0 end as InvProfit, T_INVHED.EstDat as GadeNo,T_INVHED.CusVenNo,T_INVHED.CusVenNm,T_SYSSETTING.LogImg ,T_SYSSETTING.Calendr,T_INVHED.SalsManNo,((case when IsDisUse1 = 1 then T_INVHED.InvValGaidDis else T_INVHED.InvDisVal end) + T_INVHED.DesPointsValue) as InvDisVal,T_INVHED.InvDisVal as InvDisValOnly,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints,'' as UsrNamA,''as UsrNamE,Round(case when IsTaxByNet = 1 and T_INVHED.TaxByNetValue > 0 then (T_INVHED.TaxByNetValue * T_INVHED.InvNetLocCur / 100) else (case when T_INVHED.IsTaxLines = 1 then((select sum(Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmTax) from T_INVDET where T_INVDET.InvId = T_INVHED.InvHed_ID) / 100) else 0 end ) end ," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2) + ") as TaxValue,'" + buttonItem_Mndob.Text.Replace(":", "") + "' as MndHeaderX,'' as MndNoX,'' as MndNameX,'" + buttonItem_Vender.Text.Replace(":", "") + "' as CustHeaderX,'' as CustNoX,'' as CustNameX,'" + buttonItem_Supp.Text.Replace(":", "") + "' as SuppHeaderX,'' as SuppNoX,'' as SuppNameX") : (" T_INVHED.InvNo,T_INVSETTING.InvNamA as InvTypNm,T_INVHED.GDat,T_INVHED.HDat,T_INVHED.InvCash ,T_CstTbl.Arb_Des as CostCenteNm,T_Mndob.Arb_Des as MndNm,T_INVHED.CashPayLocCur,T_INVHED.NetworkPayLocCur,T_INVHED.CreditPayLocCur,(case when T_INVHED.IsTaxUse = 1 then (T_INVHED.InvNetLocCur - T_INVHED.InvAddTax) else T_INVHED.InvNetLocCur end ) as InvNetLocCur,case when InvTyp = 1 then (Round(T_INVHED.InvCost," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2) + ")) else 0 end as  InvCost,case when InvTyp = 1 then (Round((  (case when T_INVHED.IsTaxUse = 1 then (T_INVHED.InvNetLocCur - T_INVHED.InvAddTax) else T_INVHED.InvNetLocCur end ) - (case when T_INVHED.IsTaxUse = 1 then((select sum(Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmTax) from T_INVDET where T_INVDET.InvId = T_INVHED.InvHed_ID) / 100) else 0 end)) - T_INVHED.InvCost," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2) + ")) else 0 end as InvProfit, T_INVHED.EstDat as GadeNo,T_INVHED.CusVenNo,T_INVHED.CusVenNm,T_SYSSETTING.LogImg ,T_SYSSETTING.Calendr,T_INVHED.SalsManNo,((case when IsDisUse1 = 1 then T_INVHED.InvValGaidDis else T_INVHED.InvDisVal end) + T_INVHED.DesPointsValue) as InvDisVal,T_INVHED.InvDisVal as InvDisValOnly,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints,'' as UsrNamA,''as UsrNamE,Round(case when IsTaxByNet = 1 and T_INVHED.TaxByNetValue > 0 then (T_INVHED.TaxByNetValue * T_INVHED.InvNetLocCur / 100) else (case when T_INVHED.IsTaxLines = 1 then((select sum(Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmTax) from T_INVDET where T_INVDET.InvId = T_INVHED.InvHed_ID) / 100) else 0 end ) end ," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2) + ") as TaxValue,'" + buttonItem_Mndob.Text.Replace(":", "") + "' as MndHeaderX,'' as MndNoX,'' as MndNameX,'" + buttonItem_Vender.Text.Replace(":", "") + "' as CustHeaderX,'' as CustNoX,'' as CustNameX,'" + buttonItem_Supp.Text.Replace(":", "") + "' as SuppHeaderX,'' as SuppNoX,'' as SuppNameX"));
                _RepShow.Rule = BuildRuleEstDat() + " order by T_INVHED.InvTyp,T_INVHED.GDat,  CONVERT(INT, LEFT(T_INVHED.InvNo, PATINDEX('%[^0-9]%', T_INVHED.InvNo + 'z')-1))";
                _RepShow.Fields = Fields;
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptGlasses.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim() + "\\SecriptGlasses.dll")))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == "")
                    {
                        _RepShow.Fields = _RepShow.Fields.Replace("T_CstTbl.Arb_Des as CostCenteNm", "(case when T_INVHED.IfPrint = 1 then 'جاهز' else 'غير جاهز' end ) as CostCenteNm").Replace("T_INVSETTING.InvNamA as InvTypNm", "(case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Arb_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END ) as InvTypNm");
                    }
                    else
                    {
                        _RepShow.Fields = _RepShow.Fields.Replace("T_CstTbl.Eng_Des as CostCenteNm", "(case when T_INVHED.IfPrint = 1 then 'Ready' else 'UnReady' end ) as CostCenteNm").Replace("T_INVSETTING.InvNamE as InvTypNm", "(case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Eng_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END ) as InvTypNm");
                    }
                }
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception)
                {
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
                {
                    try
                    {
                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Tag = LangArEn;
                        frm.Repvalue = "Invoices";
                        VarGeneral.InvTyp = 1;
                        VarGeneral.itmDesIndex = 1;
                        VarGeneral.itemCommRep = false;
                        VarGeneral.itmDes = "DatePay";
                        VarGeneral.vTitle = ((LangArEn == 0) ? "تنبيه بالفواتير حسب تاريخ الإستحقاق" : "Billing Notification by Maturity Date");
                        VarGeneral.Customerlbl = buttonItem_Vender.Text.Replace(" :", "");
                        VarGeneral.Supplierlbl = buttonItem_Supp.Text.Replace(" :", "");
                        //VarGeneral.CostCenterlbl = buttonItem_CenterCost.Text.Replace(" :", "");
                        VarGeneral.Mndoblbl = buttonItem_Mndob.Text.Replace(" :", "");
                        if (File.Exists(Application.StartupPath + "\\Script\\SecriptGlasses.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", "").Trim() + "\\SecriptGlasses.dll")))
                        {
                            VarGeneral.CostCenterlbl = ((LangArEn == 0) ? "الحالة" : "State");
                        }
                        frm.Tag = LangArEn;
                        frm.TopMost = true;
                        //frm.MdiParent = this;
                        //childmin();
                        frm.ShowDialog();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("button_ShowRep_Click:", error, enable: true);
                    }
                }
            }
            catch (Exception)
            {
            }
            try
            {
                VarGeneral.itmDesIndex = 0;
                VarGeneral.itmDes = "";
            }
            catch
            {
            }
        }
        private void radialMenuItem_AlArmDueoInvoic_Click(object sender, EventArgs e)
        {
            InvoiceByDuoe();
        }
        private void radialMenuItem_Backup_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_Backup";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_Restore_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_Restore";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_PathSetting_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_PathSetting";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_CloseTheYear2_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_CloseTheYear";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void timerBackupElctornic_Tick(object sender, EventArgs e)
        {
            try
            {
                TTTime.Text = DateTime.Now.ToString("hh:mm:ss tt");
                int tMinute = DateTime.Now.Minute;
                if (!string.IsNullOrEmpty(VarGeneral._SysDirPath) && txtCount.Value > 0 && Directory.Exists(VarGeneral._SysDirPath))
                {
                    if ((tMinute == 0 || tMinute == 15 || tMinute == 30 || tMinute == 45) && sTimerBackupElc)
                    {
                        sTimerBackupElc = false;
                        DBBackupElectronic(vMsg: false, 0);
                        CheckBackupFile();
                    }
                    else if (tMinute != 0 && tMinute != 15 && tMinute != 30 && tMinute != 45)
                    {
                        sTimerBackupElc = true;
                    }
                }
                if (txtCount.Value <= 0 && VarGeneral.gUserName != "runsetting" && (tMinute == 0 || tMinute == 5 || tMinute == 10 || tMinute == 15 || tMinute == 20 || tMinute == 25 || tMinute == 30 || tMinute == 35 || tMinute == 40 || tMinute == 45 || tMinute == 50 || tMinute == 55) && tMinute != _AlertWin && !VarGeneral.vDemo)
                {
                    _AlertWin = tMinute;
                    ShowLoadAlert();
                }
                if (!(VarGeneral.gUserName == "runsetting"))
                {
                    return;
                }
                try
                {
                    string tm = DateTime.Now.ToString("hh:mm:ss tt");
                    if (tm == "03:58:00 AM")
                    {
                        SendToGmail();
                    }
                }
                catch (Exception ex2)
                {
                    VarGeneral.DebLog.writeLog("FrmMain_SendEmail:", ex2, enable: true);
                }
                try
                {
                    if (tMinute == 37 && sTimerBackupCount)
                    {
                        sTimerBackupCount = false;
                        List<string> _DBNo = new List<string>();
                        using (Rate_DataDataContext _db = new Rate_DataDataContext("Server=" + VarGeneral.gServerName + ";Database=;UID=" + VarGeneral.UsrName + ";PWD=" + VarGeneral.Qut+ VarGeneral.UsrPass+ VarGeneral.Qut))
                        {
                            _DBNo = _db.ExecuteQuery<string>("select name From master..sysdatabases Where name like 'DBPROSOFT_%' and name not like '%_Endsyr_%' order by name ", new object[0]).ToList();
                        }
                        for (int iiCnt = 0; iiCnt < _DBNo.Count; iiCnt++)
                        {
                            string BackupPath = VarGeneral._SysDirPath;
                            VarGeneral.DBNo = _DBNo[iiCnt];
                            try
                            {
                                List<string> FileBackup = new List<string>();
                                string filepath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                                DirectoryInfo d = new DirectoryInfo(BackupPath);
                                FileInfo[] files = d.GetFiles("*.bak");
                                foreach (FileInfo file in files)
                                {
                                    if (file.Name.StartsWith(VarGeneral.DBNo))
                                    {
                                        FileBackup.Add(file.FullName);
                                    }
                                }
                                FileBackup.Sort();
                                for (int i = 0; i < FileBackup.Count; i++)
                                {
                                    if (FileBackup.Count <= 1)
                                    {
                                        break;
                                    }
                                    if (File.Exists(FileBackup[i]))
                                    {
                                        GC.Collect();
                                        GC.WaitForPendingFinalizers();
                                        File.Delete(FileBackup[i]);
                                        FileBackup.RemoveAt(i);
                                        i = 0;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    else if (tMinute != 37)
                    {
                        sTimerBackupCount = true;
                    }
                }
                catch (Exception ex2)
                {
                    VarGeneral.DebLog.writeLog("FrmMain_CheckBackupCount:", ex2, enable: true);
                }
            }
            catch
            {
            }
        }
        private void timer1_Tick(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    if (VarGeneral.gUserName != "runsetting")
                    {
                        bool User_Remotly = CheckUserIFRemote();
                        RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
                        RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                        long regval = 0L;
                        long regvalNew = 0L;
                        if (hKey != null)
                        {
                            try
                            {
                                object q = hKey.GetValue("vRemotly");
                                if (string.IsNullOrEmpty(q.ToString()))
                                {
                                    hKey.CreateSubKey("vRemotly");
                                    hKey.SetValue("vRemotly", "0");
                                }
                            }
                            catch
                            {
                                hKey.CreateSubKey("vRemotly");
                                hKey.SetValue("vRemotly", "0");
                            }
                            try
                            {
                                object t = hKeyNew.GetValue("vRemotly_New");
                                if (string.IsNullOrEmpty(t.ToString()))
                                {
                                    hKeyNew.CreateSubKey("vRemotly_New");
                                    hKeyNew.SetValue("vRemotly_New", "0");
                                }
                            }
                            catch
                            {
                                hKeyNew.CreateSubKey("vRemotly_New");
                                hKeyNew.SetValue("vRemotly_New", "0");
                            }
                            regval = long.Parse(hKey.GetValue("vRemotly").ToString());
                            regvalNew = long.Parse(hKeyNew.GetValue("vRemotly_New").ToString());
                        }
                        if (CalculateSupport() <= 0 && VarGeneral.vDemo == false)
                        {
                            acv = 1;
                            onlineworning2.Visible = true;
                            onlineworning2.BringToFront();
                            // onlineworning2.Top = 1;
                            c1Ribbon1.Enabled = false;
                            activflag = false;
                            ribbonControl1.Enabled = false;
                            bar2.Enabled = false;
                            expandablePanel3.Enabled = false;
                        }
                        else
                        {
                            expandablePanel3.Enabled = true;
                            bar2.Enabled = true;
                            activflag = true;
                            c1Ribbon1.Enabled = true;
                            ribbonControl1.Enabled = true; acv = 0; onlineworning2.Visible = false;
                        }
                        if (((regval == 1 || regvalNew == 1) && CalculateSupport() <= 0) || ((regval == 1 || regvalNew == 1) && !File.Exists(Application.StartupPath + "\\flxgridD.txt")) || ((regval == 0 || regvalNew == 0) && File.Exists(Application.StartupPath + "\\flxgridD.txt")))
                        {
                            if (_CheckRemotly)
                            {
                                //Environment.Exit(0);
                            }
                        }
                        else if (User_Remotly && (regval != 1 || regval != regvalNew || VarGeneral.vDemo) && _CheckRemotly)
                        {
                         //   Environment.Exit(0);
                        }
                        try
                        {
                            if (File.Exists(Application.StartupPath + "\\plus.txt") && VarGeneral.UsersActivated.Count <= 0)
                            {
                                StreamReader sr = new StreamReader(Application.StartupPath + "\\plus.txt");
                                List<string> lines = sr.ReadToEnd().Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).ToList();
                                for (int i = 0; i < lines.Count; i++)
                                {
                                    VarGeneral.UsersActivated.Add(lines[i]);
                                }
                                sr.Close();
                            }
                        }
                        catch
                        {
                            VarGeneral.UsersActivated = new List<string>();
                        }
                    }
                }
                catch
                {
                }
                try
                {
                    if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 53) && VarGeneral.CheckDate(VarGeneral.Gdate) && VarGeneral.CheckDate(VarGeneral.Hdate) && DateTime.Now.Date.ToString("yyyy/MM/dd") != VarGeneral.Gdate && DateTime.Now.Date.ToString("yyyy/MM/dd") != VarGeneral.Hdate)
                    {
                        db.getdate = "";
                    }
                }
                catch
                {
                }
                try
                {
                    if (Directory.Exists(Application.StartupPath + "\\ReportOnline_" + VarGeneral._ActivaionNo) && Directory.Exists(Application.StartupPath + "\\ReportOnline_" + VarGeneral._ActivaionNo + "_Run") && !string.IsNullOrEmpty(VarGeneral._ActivaionNo) && !VarGeneral.vDemo)
                    {
                        RegistryKey hKeyReportOnline = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\settingConn\\path", writable: true);
                        if (hKeyReportOnline != null && hKeyReportOnline.GetValue("RunSync").ToString() == "0")
                        {
                            try
                            {
                                Process.Start(Application.StartupPath + "\\CheckOnlineDB.exe");
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                catch
                {
                }
                TTTime.Text = DateTime.Now.ToString("hh:mm:ss tt");
                int tMinute = DateTime.Now.Minute;
                if (!VarGeneral.Settings_Sys.IsAutoBackup.Value || !radialMenuItem_Backup.Enabled || VarGeneral.vDemo)
                {
                    return;
                }
                if (VarGeneral._AutoBackup == 0)
                {
                    if ((tMinute == 0 || tMinute == 15 || tMinute == 30 || tMinute == 45) && sTimer)
                    {
                        sTimer = false;
                        DBBackup(vMsg: false);
                    }
                    else if (tMinute != 0 && tMinute != 15 && tMinute != 30 && tMinute != 45)
                    {
                        sTimer = true;
                    }
                }
                else if (VarGeneral._AutoBackup == 1)
                {
                    if ((tMinute == 0 || tMinute == 30) && sTimer)
                    {
                        sTimer = false;
                        DBBackup(vMsg: false);
                    }
                    else if (tMinute != 0 && tMinute != 30)
                    {
                        sTimer = true;
                    }
                }
                else if (VarGeneral._AutoBackup == 2)
                {
                    if (tMinute == 0 && sTimer)
                    {
                        sTimer = false;
                        DBBackup(vMsg: false);
                    }
                    else if (tMinute != 0)
                    {
                        sTimer = true;
                    }
                }
                else if (VarGeneral._AutoBackup == 3)
                {
                    if (VarGeneral.CheckDate(VarGeneral.Settings_Sys.AutoBackupDate))
                    {
                        if (Convert.ToDateTime(n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd")) >= Convert.ToDateTime(n.FormatGreg(VarGeneral.Settings_Sys.AutoBackupDate, "yyyy/MM/dd")))
                        {
                         if(autbackupstatus==0)   DBBackup(vMsg: false);
                        }
                    }
                    else
                    {
                        DBBackup(vMsg: false);
                    }
                }
                else if (VarGeneral.Settings_Sys.AutoBackup == 4)
                {
                    if (VarGeneral.CheckDate(VarGeneral.Settings_Sys.AutoBackupDate))
                    {
                        if (Convert.ToDateTime(n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd")) >= Convert.ToDateTime(n.FormatGreg(VarGeneral.Settings_Sys.AutoBackupDate, "yyyy/MM/dd")).AddDays(2.0))
                        {
                            DBBackup(vMsg: false);
                        }
                    }
                    else
                    {
                        DBBackup(vMsg: false);
                    }
                }
                else if (VarGeneral.Settings_Sys.AutoBackup == 5)
                {
                    if (VarGeneral.CheckDate(VarGeneral.Settings_Sys.AutoBackupDate))
                    {
                        if (Convert.ToDateTime(n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd")) >= Convert.ToDateTime(n.FormatGreg(VarGeneral.Settings_Sys.AutoBackupDate, "yyyy/MM/dd")).AddDays(3.0))
                        {
                            DBBackup(vMsg: false);
                        }
                    }
                    else
                    {
                        DBBackup(vMsg: false);
                    }
                }
                else if (VarGeneral.Settings_Sys.AutoBackup == 6)
                {
                    if (VarGeneral.CheckDate(VarGeneral.Settings_Sys.AutoBackupDate))
                    {
                        if (Convert.ToDateTime(n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd")) >= Convert.ToDateTime(n.FormatGreg(VarGeneral.Settings_Sys.AutoBackupDate, "yyyy/MM/dd")).AddDays(7.0))
                        {
                            DBBackup(vMsg: false);
                        }
                    }
                    else
                    {
                        DBBackup(vMsg: false);
                    }
                }
                else if (VarGeneral.Settings_Sys.AutoBackup == 7)
                {
                    if (VarGeneral.CheckDate(VarGeneral.Settings_Sys.AutoBackupDate))
                    {
                        if (Convert.ToDateTime(n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd")) >= Convert.ToDateTime(n.FormatGreg(VarGeneral.Settings_Sys.AutoBackupDate, "yyyy/MM/dd")).AddDays(14.0))
                        {
                            DBBackup(vMsg: false);
                        }
                    }
                    else
                    {
                        DBBackup(vMsg: false);
                    }
                }
                else
                {
                    if (VarGeneral.Settings_Sys.AutoBackup != 8)
                    {
                        return;
                    }
                    if (VarGeneral.CheckDate(VarGeneral.Settings_Sys.AutoBackupDate))
                    {
                        if (Convert.ToDateTime(n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd")) >= Convert.ToDateTime(n.FormatGreg(VarGeneral.Settings_Sys.AutoBackupDate, "yyyy/MM/dd")).AddDays(30.0))
                        {
                            DBBackup(vMsg: false);
                        }
                    }
                    else
                    {
                        DBBackup(vMsg: false);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void bubbleButton_Enter_Click(object sender, EventArgs e)
        {
            try
            {
                CloseFrmChilde();
                tabControl1.TabPages.Clear();

                return; dbInstance = null;
                dbInstanceRate = null;
                FrmLog frm = new FrmLog();
                frm.TopMost = true;
                frm.ShowDialog();
                LangChange(VarGeneral.UserLang);
                LangArEn = VarGeneral.UserLang;
                Show();
                DateSync = false;
                Frm_Main_Load(sender, e);
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("bubbleButton_Enter_Click:", error, enable: true);
            }
        }
        private void ribbonGroup2_DialogLauncherClick(object sender, EventArgs e)
        {
        }
        private void cRoom_DoubleClick(object sender, EventArgs e)
        {
            //try
            //{
            //    MetroTileItem _cC = sender as MetroTileItem;
            //    if ((_cC.TileStyle.BackColor == txtRBussyDaily.BackColor || _cC.TileStyle.BackColor == txtRBussyMonthly.BackColor || _cC.TileStyle.BackColor == txtRLeave.BackColor || _cC.TileStyle.BackColor == txtRBussyAppendix.BackColor) && !string.IsNullOrEmpty(_cC.TitleText))
            //    {
            //        RoomOp = db.StockRoom(int.Parse(_cC.TitleText));
            //        VarGeneral._hotelrom = RoomOp.romno;
            //        if (RoomOp.perno.HasValue)
            //        {
            //            VarGeneral._hotelper = RoomOp.perno.Value;
            //        }
            //        else
            //        {
            //            VarGeneral._hotelper = 0;
            //        }
            //        Stat = RoomOp.state.Value;
            //        VarGeneral.Trn = 0;
            //        if (VarGeneral._hotelper > 0)
            //        {
            //            VarGeneral.vGuestData = 1;
            //            Frame1.Visible = false;
            //            GuestForm();
            //        }
            //    }
            //}
            //catch
            //{
            //}
        }
        private void GuestForm()
        {
            FrmGuests frm = new FrmGuests();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
            dbInstance = null;
            FillRommChart(LangArEn);
            Refresh();
            //Frame1.Visible = false;
        }
        private void cRoom_CheckedChanged(object sender, EventArgs e)
        {
        }
        private void FillRoomStatus()
        {
            //try
            //{
            //    txtREmpty.BackColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.BColor0.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor0.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor0.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRAvailable.BackColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.BColor1.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor1.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor1.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRBussyDaily.BackColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.BColor2.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor2.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor2.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRBussyAppendix.BackColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.BColor3.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor3.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor3.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRClean.BackColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.BColor4.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor4.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor4.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRRepair.BackColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.BColor5.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor5.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor5.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRBussyMonthly.BackColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.BColor6.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor6.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor6.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRLeave.BackColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.BColor7.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor7.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.BColor7.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtREmpty.ForeColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.FColor0.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor0.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor0.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRAvailable.ForeColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.FColor1.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor1.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor1.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRBussyDaily.ForeColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.FColor2.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor2.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor2.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRBussyAppendix.ForeColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.FColor3.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor3.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor3.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRClean.ForeColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.FColor4.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor4.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor4.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRRepair.ForeColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.FColor5.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor5.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor5.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRBussyMonthly.ForeColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.FColor6.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor6.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor6.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
            //try
            //{
            //    txtRLeave.ForeColor = Color.FromArgb(int.Parse(VarGeneral.Settings_Sys.FColor7.Split(',').ToList()[0].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor7.Split(',').ToList()[1].Trim()), int.Parse(VarGeneral.Settings_Sys.FColor7.Split(',').ToList()[2].Trim()));
            //}
            //catch
            //{
            //}
        }
        private int _ReturnRoomFloor(int id)
        {
            Stock_DataDataContext DBx = new Stock_DataDataContext(VarGeneral.BranchCS);
            List<T_RomChart> q = DBx.T_RomCharts.Where((T_RomChart t) => t.ID == id).ToList();
            List<int> c = new List<int>();
            if (q.FirstOrDefault().col1.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col2.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col3.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col4.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col5.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col6.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col7.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col8.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col9.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col10.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col11.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col12.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col13.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col14.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col15.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col16.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col17.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col18.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col19.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col20.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col21.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col22.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col23.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col24.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col25.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col26.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col27.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col28.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col29.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col30.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col31.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col32.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col33.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col34.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col35.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col36.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col37.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col38.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col39.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col40.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col41.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col42.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col43.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col44.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col45.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col46.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col47.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col48.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col49.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col50.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col51.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col52.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col53.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col54.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col55.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col56.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col57.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col58.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col59.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col60.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col61.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col62.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col63.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col64.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col65.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col66.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col67.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col68.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col69.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col70.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col71.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col72.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col73.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col74.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col75.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col76.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col77.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col78.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col79.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col80.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col81.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col82.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col83.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col84.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col85.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col86.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col87.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col88.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col89.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col90.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col91.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col92.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col93.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col94.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col95.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col96.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col97.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col98.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col99.Value > 0)
            {
                c.Add(1);
            }
            if (q.FirstOrDefault().col100.Value > 0)
            {
                c.Add(1);
            }
            return c.Count;
        }
        private void ReadOrderFromWebsit()
        {
            //try
            //{
            //    Stock_DataDataContext dbx = new Stock_DataDataContext(VarGeneral.BranchCS);
            //    WebClient c = new WebClient();
            //    string vSer_vActiv = VarGeneral._SerialNo + "-" + VarGeneral._ActivaionNo + ".txt";
            //    string data = c.DownloadString("http://PROSOFTsa.com/orders_list/" + vSer_vActiv);
            //    string url = "http://PROSOFTsa.com/orders_list/" + vSer_vActiv;
            //    WebClient client = new WebClient();
            //    Stream stream = client.OpenRead(url);
            //    StreamReader reader = new StreamReader(stream);
            //    string line;
            //    while ((line = reader.ReadLine()) != null)
            //    {
            //        try
            //        {
            //            //int q = dbx.ExecuteCommand(line);
            //        }
            //        catch
            //        {
            //        }
            //    }
            //}
            //catch
            //{
            //}
        }
        private void FillRommChart(int LangVal)
        {
            //if (!metroTilePanel.Visible)
            //{
            //    return;
            //}
            //metroTilePanel.RightToLeft = RightToLeft.No;
            //FillRoomStatus();
            //metroTilePanel.Items.Clear();
            List<T_RomChart> q = db.T_RomCharts.Select((T_RomChart t) => t).ToList();
            for (int i = 0; i < q.Count; i++)
            {
                ItemContainer _floor = new ItemContainer();
                _floor.BackgroundStyle.CornerType = eCornerType.Square;
                _floor.TitleStyle.BackColor = Color.FromArgb(198, 195, 198);
                _floor.TitleStyle.Class = "MetroTileGroupTitle";
                _floor.TitleStyle.CornerType = eCornerType.Square;
                _floor.TitleStyle.TextColor = Color.Red;
                _floor.TitleText = ((LangVal == 0) ? q[i].FName : q[i].FNameE);
                _floor.TitleStyle.Font = new Font("Tahoma", 16.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
                _floor.TitleStyle.TextAlignment = eStyleTextAlignment.Near;
                int _RoomOfFloor = _ReturnRoomFloor(q[i].ID);
                for (int iicnt = 1; iicnt <= _RoomOfFloor; iicnt++)
                {
                    MetroTileItem _Room = new MetroTileItem();
                    _Room.SymbolColor = Color.Empty;
                    _Room.TileStyle.CornerType = eCornerType.Square;
                    _Room.TitleText = db.ExecuteQuery<int>(" Select col" + iicnt + " From T_RomChart where ID = " + q[i].ID, new object[0]).FirstOrDefault().ToString();
                    _Room.TitleTextFont = new Font("Tahoma", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
                    _Room.TileSize = new Size(VarGeneral.Settings_Sys.Fld_w.Value, VarGeneral.Settings_Sys.Fld_H.Value);
                    _Room.TileStyle.Border = eStyleBorderType.Solid;
                    _Room.TileStyle.BorderColor = Color.Black;
                    _Room.TileStyle.BorderWidth = 1;
                    _Room.CheckedChanged += cRoom_CheckedChanged;
                    _Room.DoubleClick += cRoom_DoubleClick;
                    _Room.Click += cRoom_Click;
                    if (db.StockRoom(int.Parse(_Room.TitleText)).state.Value == 0)
                    {
                        //_Room.TileStyle.BackColor = txtRRepair.BackColor;
                        //_Room.TileStyle.BackColor2 = txtRRepair.BackColor;
                        //_Room.TitleTextColor = txtRRepair.ForeColor;
                    }
                    else if (db.StockRoom(int.Parse(_Room.TitleText)).state.Value == 1)
                    {
                        //_Room.TileStyle.BackColor = txtREmpty.BackColor;
                        //_Room.TileStyle.BackColor2 = txtREmpty.BackColor;
                        //_Room.TitleTextColor = txtREmpty.ForeColor;
                    }
                    else if (db.StockRoom(int.Parse(_Room.TitleText)).state.Value == 2)
                    {
                        //_Room.TileStyle.BackColor = txtRClean.BackColor;
                        //_Room.TileStyle.BackColor2 = txtRClean.BackColor;
                        //_Room.TitleTextColor = txtRClean.ForeColor;
                    }
                    else if (db.StockRoom(int.Parse(_Room.TitleText)).state.Value == 3 && VarGeneral.CheckDate(db.StockPer(db.StockRoom(int.Parse(_Room.TitleText)).perno.Value).dt4) && Convert.ToDateTime(db.StockPer(db.StockRoom(int.Parse(_Room.TitleText)).perno.Value).dt4) <= Convert.ToDateTime(DateTime.Now.ToString("yyyy/MM/dd")))
                    {
                        //_Room.TileStyle.BackColor = txtRLeave.BackColor;
                        //_Room.TileStyle.BackColor2 = txtRLeave.BackColor;
                        //_Room.TitleTextColor = txtRLeave.ForeColor;
                    }
                    else if (db.StockRoom(int.Parse(_Room.TitleText)).state.Value == 3)
                    {
                        if (db.StockRoom(int.Parse(_Room.TitleText)).hed.Value == 1)
                        {
                            if (db.StockPer(db.StockRoom(int.Parse(_Room.TitleText)).perno.Value).KindPer.Value == 0)
                            {
                                //_Room.TileStyle.BackColor = txtRBussyDaily.BackColor;
                                //_Room.TileStyle.BackColor2 = txtRBussyDaily.BackColor;
                                //_Room.TitleTextColor = txtRBussyDaily.ForeColor;
                            }
                            else
                            {
                                //_Room.TileStyle.BackColor = txtRBussyMonthly.BackColor;
                                //_Room.TileStyle.BackColor2 = txtRBussyMonthly.BackColor;
                                //_Room.TitleTextColor = txtRBussyMonthly.ForeColor;
                            }
                        }
                        else
                        {
                            //_Room.TileStyle.BackColor = txtRBussyAppendix.BackColor;
                            //_Room.TileStyle.BackColor2 = txtRBussyAppendix.BackColor;
                            //_Room.TitleTextColor = txtRBussyAppendix.ForeColor;
                        }
                    }
                    _floor.SubItems.AddRange(new BaseItem[1]
                    {
                        _Room
                    });
                }
                //metroTilePanel.Items.AddRange(new BaseItem[1]
                //{
                //    _floor
                //});
            }
            //metroTilePanel.Refresh();
        }
        private void cRoom_Click(object sender, EventArgs e)
        {
        }
        private void buttonItem_SrchRefresh_Click(object sender, EventArgs e)
        {
            syninfo();
            string RulDate = "";
            string RulDateSnd = "";
            string quryEditSales = "";
            string quryEditSalesRet = "";
            string quryEditPurach = "";
            string quryEditPurachRet = "";
            string quryEditSndSerf = "";
            try
            {
                if (buttonItem_SrchBtwDate.Checked && VarGeneral.CheckDate(textBoxItem_SrchDateFrom.Text) && VarGeneral.CheckDate(textBoxItem_SrchDateTo.Text) && ((n.IsGreg(textBoxItem_SrchDateTo.Text) && n.IsHijri(textBoxItem_SrchDateFrom.Text)) || (n.IsHijri(textBoxItem_SrchDateTo.Text) && n.IsGreg(textBoxItem_SrchDateFrom.Text))))
                {
                    textBoxItem_SrchDateFrom.Text = "";
                    textBoxItem_SrchDateTo.Text = "";
                }
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_INVHED Left Join  T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  Left Join T_Curency On T_INVHED.CurTyp = T_Curency.Curency_ID Left Join T_CstTbl On T_INVHED.InvCstNo = T_CstTbl.Cst_ID Left Join T_Mndob on T_INVHED.MndNo = T_Mndob.Mnd_Id Left Join T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID";
                string Fields = "";
                if (buttonItem_SrchDay.Checked)
                {
                    RulDate = " and  T_INVHED.GDat  >= '" + n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd") + "' and  T_INVHED.GDat  <= '" + n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd") + "'";
                    RulDateSnd = " and  T_GDHEAD.gdGDate  >= '" + n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd") + "' and  T_GDHEAD.gdGDate  <= '" + n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd") + "'";
                }
                else if (buttonItem_SrchWeek.Checked)
                {
                    string NewDate = Convert.ToDateTime(VarGeneral.Hdate).AddDays(-7.0).ToString("yyyy/MM/dd");
                    RulDate = " and  T_INVHED.HDat  >= '" + n.FormatHijri(NewDate, "yyyy/MM/dd") + "' and  T_INVHED.HDat  <= '" + n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd") + "'";
                    RulDateSnd = " and  T_GDHEAD.gdHDate  >= '" + n.FormatHijri(NewDate, "yyyy/MM/dd") + "' and  T_GDHEAD.gdHDate  <= '" + n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd") + "'";
                }
                else if (buttonItem_SrchMonth.Checked)
                {
                    string NewDate = Convert.ToDateTime(VarGeneral.Hdate).AddMonths(-1).ToString("yyyy/MM/dd");
                    RulDate = " and  T_INVHED.HDat  >= '" + n.FormatHijri(NewDate, "yyyy/MM/dd") + "' and  T_INVHED.HDat  <= '" + n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd") + "'";
                    RulDateSnd = " and  T_GDHEAD.gdHDate  >= '" + n.FormatHijri(NewDate, "yyyy/MM/dd") + "' and  T_GDHEAD.gdHDate  <= '" + n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd") + "'";
                }
                else
                {
                    if (VarGeneral.CheckDate(textBoxItem_SrchDateFrom.Text) && textBoxItem_SrchDateFrom.Text.Length == 10)
                    {
                        RulDate = ((int.Parse(textBoxItem_SrchDateFrom.Text.Substring(0, 4)) >= 1800) ? (" and  T_INVHED.GDat  >= '" + n.FormatGreg(textBoxItem_SrchDateFrom.Text, "yyyy/MM/dd") + "'") : (" and  T_INVHED.HDat  >= '" + n.FormatHijri(textBoxItem_SrchDateFrom.Text, "yyyy/MM/dd") + "'"));
                    }
                    if (VarGeneral.CheckDate(textBoxItem_SrchDateTo.Text) && textBoxItem_SrchDateTo.Text.Length == 10)
                    {
                        RulDate = ((int.Parse(textBoxItem_SrchDateTo.Text.Substring(0, 4)) >= 1800) ? (RulDate + " and  T_INVHED.GDat  <= '" + n.FormatGreg(textBoxItem_SrchDateTo.Text, "yyyy/MM/dd") + "'") : (RulDate + " and  T_INVHED.HDat  <= '" + n.FormatHijri(textBoxItem_SrchDateTo.Text, "yyyy/MM/dd") + "'"));
                    }
                    if (VarGeneral.CheckDate(textBoxItem_SrchDateFrom.Text) && textBoxItem_SrchDateFrom.Text.Length == 10)
                    {
                        RulDateSnd = ((int.Parse(textBoxItem_SrchDateFrom.Text.Substring(0, 4)) >= 1800) ? (" and  T_INVHED.GDat  >= '" + n.FormatGreg(textBoxItem_SrchDateFrom.Text, "yyyy/MM/dd") + "'") : (" and  T_GDHEAD.gdHDate  >= '" + n.FormatHijri(textBoxItem_SrchDateFrom.Text, "yyyy/MM/dd") + "'"));
                    }
                    if (VarGeneral.CheckDate(textBoxItem_SrchDateTo.Text) && textBoxItem_SrchDateTo.Text.Length == 10)
                    {
                        RulDateSnd = ((int.Parse(textBoxItem_SrchDateTo.Text.Substring(0, 4)) >= 1800) ? (RulDateSnd + " and  T_INVHED.GDat  <= '" + n.FormatGreg(textBoxItem_SrchDateTo.Text, "yyyy/MM/dd") + "'") : (RulDateSnd + " and  T_GDHEAD.gdHDate  <= '" + n.FormatHijri(textBoxItem_SrchDateTo.Text, "yyyy/MM/dd") + "'"));
                    }
                }
                quryEditSales = " Where (T_INVHED.InvTyp = 1 ) and T_INVHED.IfDel = 0 " + RulDate;
                quryEditSalesRet = " Where (T_INVHED.InvTyp = 3 ) and T_INVHED.IfDel = 0 " + RulDate;
                quryEditPurach = " Where (T_INVHED.InvTyp = 2 ) and T_INVHED.IfDel = 0 " + RulDate;
                quryEditPurachRet = " Where (T_INVHED.InvTyp = 4 ) and T_INVHED.IfDel = 0 " + RulDate;
                quryEditSndSerf = " Where T_GDHEAD.gdLok = 0 and T_GDHEAD.gdTyp = 13 " + RulDateSnd;
                Fields = " (case when (select sum(T_INVHED.InvNetLocCur)  from T_INVHED " + quryEditSales + " ) > 0 then (select sum(T_INVHED.InvNetLocCur)  from T_INVHED " + quryEditSales + ") else 0 end) as TotSales,(case when (select sum(T_INVHED.InvNetLocCur)  from T_INVHED " + quryEditSalesRet + " ) > 0 then (select sum(T_INVHED.InvNetLocCur)  from T_INVHED " + quryEditSalesRet + ") else 0 end) as TotSalesRet,(case when (select sum(T_INVHED.InvNetLocCur)  from T_INVHED " + quryEditPurach + " ) > 0 then (select sum(T_INVHED.InvNetLocCur)  from T_INVHED " + quryEditPurach + ") else 0 end) as TotPurach,(case when (select sum(T_INVHED.InvNetLocCur)  from T_INVHED " + quryEditPurachRet + " ) > 0 then (select sum(T_INVHED.InvNetLocCur)  from T_INVHED " + quryEditPurachRet + ") else 0 end) as TotPurchRet,(case when (select count(*) from T_INVHED " + quryEditSales + " ) > 0 then (select count(*) from T_INVHED " + quryEditSales + ") else 0 end) as InvSalesCount,(case when (select count(*) from T_INVHED " + quryEditPurach + " ) > 0 then (select count(*) from T_INVHED " + quryEditPurach + ") else 0 end) as InvPurchCount";
                _RepShow.Rule = "";
                _RepShow.Fields = Fields;
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex5)
                {
                    MessageBox.Show(ex5.Message);
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
                {
                    labelItem_TotSales.Text = "0.00";
                    labelItem_TotSalReturn.Text = "0.00";
                    labelItem_TotPurch.Text = "0.00";
                    labelItem_TotPurReturn.Text = "0.00";
                    labelItem_SalesInvCount.Text = "0";
                    labelItem_PurchInvCount.Text = "0";
                }
                else
                {
                    labelItem_TotSales.Text = VarGeneral.TString.TEmpty(Math.Round(double.Parse(VarGeneral.RepData.Tables[0].Rows[0]["TotSales"].ToString()), 2).ToString());
                    labelItem_TotSalReturn.Text = VarGeneral.TString.TEmpty(Math.Round(double.Parse(VarGeneral.RepData.Tables[0].Rows[0]["TotSalesRet"].ToString()), 2).ToString());
                    labelItem_TotPurch.Text = VarGeneral.TString.TEmpty(Math.Round(double.Parse(VarGeneral.RepData.Tables[0].Rows[0]["TotPurach"].ToString()), 2).ToString());
                    labelItem_TotPurReturn.Text = VarGeneral.TString.TEmpty(Math.Round(double.Parse(VarGeneral.RepData.Tables[0].Rows[0]["TotPurchRet"].ToString()), 2).ToString());
                    labelItem_SalesInvCount.Text = VarGeneral.RepData.Tables[0].Rows[0]["InvSalesCount"].ToString();
                    labelItem_PurchInvCount.Text = VarGeneral.RepData.Tables[0].Rows[0]["InvPurchCount"].ToString();
                }
            }
            catch
            {
                labelItem_TotSales.Text = "0.00";
                labelItem_TotSalReturn.Text = "0.00";
                labelItem_TotPurch.Text = "0.00";
                labelItem_TotPurReturn.Text = "0.00";
                labelItem_SalesInvCount.Text = "0";
                labelItem_PurchInvCount.Text = "0";
            }
            try
            {
                dataGridView_TopInvoice.Clear(ClearFlags.Content, 1, 1, dataGridView_TopInvoice.Rows.Count - 1, 3);
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_INVHED Left Join  T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  Left Join T_Curency On T_INVHED.CurTyp = T_Curency.Curency_ID Left Join T_CstTbl On T_INVHED.InvCstNo = T_CstTbl.Cst_ID Left Join T_Mndob on T_INVHED.MndNo = T_Mndob.Mnd_Id Left Join T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID";
                string Fields = "";
                Fields = " T_INVHED.InvNo,T_INVHED.InvNetLocCur,case when T_SYSSETTING.Calendr = 0 then T_INVHED.GDat else T_INVHED.HDat end as Dt";
                _RepShow.Rule = quryEditSales + " order by T_INVHED.InvNetLocCur desc";
                _RepShow.Fields = Fields;
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex5)
                {
                    MessageBox.Show(ex5.Message);
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
                {
                    for (int iiCnt = 1; iiCnt <= VarGeneral.RepData.Tables[0].Rows.Count && iiCnt <= 10; iiCnt++)
                    {
                        dataGridView_TopInvoice.SetData(iiCnt, 1, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["InvNo"]);
                        dataGridView_TopInvoice.SetData(iiCnt, 2, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["Dt"]);
                        dataGridView_TopInvoice.SetData(iiCnt, 3, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["InvNetLocCur"]);
                    }
                }
            }
            catch
            {
                dataGridView_TopInvoice.Clear(ClearFlags.Content, 1, 1, dataGridView_TopInvoice.Rows.Count - 1, 3);
            }
            try
            {
                dataGridView_TopInvoicePurchaes.Clear(ClearFlags.Content, 1, 1, dataGridView_TopInvoicePurchaes.Rows.Count - 1, 3);
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_INVHED Left Join  T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  Left Join T_Curency On T_INVHED.CurTyp = T_Curency.Curency_ID Left Join T_CstTbl On T_INVHED.InvCstNo = T_CstTbl.Cst_ID Left Join T_Mndob on T_INVHED.MndNo = T_Mndob.Mnd_Id Left Join T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID";
                string Fields = "";
                Fields = " T_INVHED.InvNo,T_INVHED.InvNetLocCur,case when T_SYSSETTING.Calendr = 0 then T_INVHED.GDat else T_INVHED.HDat end as Dt";
                _RepShow.Rule = quryEditPurach + " order by T_INVHED.InvNetLocCur desc";
                _RepShow.Fields = Fields;
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex5)
                {
                    MessageBox.Show(ex5.Message);
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
                {
                    for (int iiCnt = 1; iiCnt <= VarGeneral.RepData.Tables[0].Rows.Count && iiCnt <= 10; iiCnt++)
                    {
                        dataGridView_TopInvoicePurchaes.SetData(iiCnt, 1, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["InvNo"]);
                        dataGridView_TopInvoicePurchaes.SetData(iiCnt, 2, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["Dt"]);
                        dataGridView_TopInvoicePurchaes.SetData(iiCnt, 3, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["InvNetLocCur"]);
                    }
                }
            }
            catch
            {
                dataGridView_TopInvoicePurchaes.Clear(ClearFlags.Content, 1, 1, dataGridView_TopInvoicePurchaes.Rows.Count - 1, 3);
            }
            try
            {
                c1FlexGrid1.Clear(ClearFlags.Content, 1, 1, c1FlexGrid1.Rows.Count - 1, 3);
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_GDDET LEFT OUTER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID  LEFT OUTER JOIN T_Curency ON T_GDHEAD.CurTyp = T_Curency.Curency_ID  LEFT OUTER JOIN T_INVSETTING On T_GDHEAD.gdTyp = T_INVSETTING.InvID   LEFT OUTER JOIN T_AccDef on T_GDDET.AccNo = T_AccDef.AccDef_No LEFT OUTER JOIN T_SYSSETTING ON T_GDHEAD.CompanyID = T_SYSSETTING.SYSSETTING_ID";
                string Fields = "";
                Fields = " DISTINCT  T_GDHEAD.gdhead_ID ,T_GDHEAD.gdTot ,T_GDHEAD.gdTyp,T_GDHEAD.gdGDate,T_GDHEAD.gdHDate,T_GDHEAD.gdNo,(select T_AccDef.Arb_Des from T_AccDef where T_AccDef.AccDef_No = (select MAX(T_GDDET.AccNo)  from T_GDDET where T_GDDET.gdID = T_GDHEAD.gdhead_ID and  T_GDDET.Lin = 0)) AccNm_Ar,(select T_AccDef.Eng_Des from T_AccDef where T_AccDef.AccDef_No = (select MAX(T_GDDET.AccNo)  from T_GDDET where T_GDDET.gdID = T_GDHEAD.gdhead_ID and  T_GDDET.Lin = 0)) AccNm_En ";
                _RepShow.Rule = quryEditSndSerf + " order by T_GDHEAD.gdTot desc";
                _RepShow.Fields = Fields;
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex5)
                {
                    MessageBox.Show(ex5.Message);
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
                {
                    for (int iiCnt = 1; iiCnt <= VarGeneral.RepData.Tables[0].Rows.Count && iiCnt <= 10; iiCnt++)
                    {
                        c1FlexGrid1.SetData(iiCnt, 1, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["gdNo"]);
                        c1FlexGrid1.SetData(iiCnt, 2, (LangArEn == 0) ? VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["AccNm_Ar"] : VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["AccNm_En"]);
                        c1FlexGrid1.SetData(iiCnt, 3, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["gdTot"]);
                    }
                }
            }
            catch
            {
                c1FlexGrid1.Clear(ClearFlags.Content, 1, 1, c1FlexGrid1.Rows.Count - 1, 3);
            }
            try
            {
                dataGridView_TopItems.Clear(ClearFlags.Content, 1, 1, dataGridView_TopItems.Rows.Count - 1, 2);
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_Items LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID INNER JOIN T_INVDET ON T_Items.Itm_No = T_INVDET.ItmNo INNER JOIN T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID Left Join T_SYSSETTING ON T_Items.CompanyID = T_SYSSETTING.SYSSETTING_ID";
                string Fields = "T_Items.Itm_ID, T_Items.Itm_No, T_Items.ItmCat, " + ((LangArEn == 0) ? " T_Items.Arb_Des as itemNm" : " T_Items.Eng_Des as itemNm ") + " ," + ((LangArEn == 0) ? " T_CATEGORY.Arb_Des as CategoyNm" : " T_CATEGORY.Eng_Des as CategoyNm ") + ", T_Items.StartCost, T_Items.AvrageCost, T_Items.LastCost, T_Items.Price1, \r\n                                                                                  T_Items.Price3, T_Items.Price2, T_Items.Price5, T_Items.Price4, T_Items.Price6, T_Items.Unit1, T_Items.Pack1, T_Items.Unit2, T_Items.UntPri2, T_Items.UntPri1, \r\n                                                                                  T_Items.Pack2, T_Items.Unit3, T_Items.Pack3, T_Items.Unit4, T_Items.UntPri3, T_Items.UntPri4, T_Items.Pack4, T_Items.Unit5, T_Items.UntPri5, T_Items.Pack5, \r\n                                                                                  T_Items.DefultUnit, T_Items.DefultVendor, T_Items.OpenQty, T_Items.QtyLvl, T_Items.ItmLoc, T_Items.BarCod1, T_Items.BarCod2, T_Items.BarCod3, \r\n                                                                                  T_Items.BarCod4, T_Items.BarCod5, T_Items.Lot, T_Items.LrnExp, T_Items.DMY, T_Items.ItmTyp, T_Items.DefPack, T_Items.ItmImg, \r\n                                                                                  T_Items.InvSaleStoped, T_Items.InvPaymentStoped, T_Items.InvPaymentReturnStoped, T_Items.FirstCost, T_Items.CompanyID, T_Items.InvSaleReturnStoped, \r\n                                                                                  T_Items.SerialKey,sum(RealQty) as QtyMax";
                _RepShow.Rule = quryEditSales + " and T_Items.ItmTyp != 2  Group By T_Items.Itm_ID, T_Items.Itm_No, T_Items.ItmCat, T_Items.Arb_Des, T_Items.Eng_Des, T_Items.StartCost, T_Items.AvrageCost, T_Items.LastCost, T_Items.Price1, \r\n                                                                                  T_Items.Price3, T_Items.Price2, T_Items.Price5, T_Items.Price4, T_Items.Price6, T_Items.Unit1, T_Items.Pack1, T_Items.Unit2, T_Items.UntPri2, T_Items.UntPri1, \r\n                                                                                  T_Items.Pack2, T_Items.Unit3, T_Items.Pack3, T_Items.Unit4, T_Items.UntPri3, T_Items.UntPri4, T_Items.Pack4, T_Items.Unit5, T_Items.UntPri5, T_Items.Pack5, \r\n                                                                                  T_Items.DefultUnit, T_Items.DefultVendor, T_Items.OpenQty, T_Items.QtyLvl, T_Items.ItmLoc, T_Items.BarCod1, T_Items.BarCod2, T_Items.BarCod3, \r\n                                                                                  T_Items.BarCod4, T_Items.BarCod5, T_Items.Lot, T_Items.QtyMax, T_Items.LrnExp, T_Items.DMY, T_Items.ItmTyp, T_Items.DefPack, T_Items.ItmImg, \r\n                                                                                  T_Items.InvSaleStoped, T_Items.InvPaymentStoped, T_Items.InvPaymentReturnStoped, T_Items.FirstCost, T_Items.CompanyID, T_Items.InvSaleReturnStoped, \r\n                                                                                  T_Items.SerialKey,T_CATEGORY.Arb_Des,T_CATEGORY.Eng_Des \r\n                                                                                  order by QtyMax ";
                _RepShow.Fields = Fields;
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex5)
                {
                    MessageBox.Show(ex5.Message);
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
                {
                    for (int iiCnt = 1; iiCnt <= VarGeneral.RepData.Tables[0].Rows.Count && iiCnt <= 10; iiCnt++)
                    {
                        dataGridView_TopItems.SetData(iiCnt, 1, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["Itm_No"]);
                        dataGridView_TopItems.SetData(iiCnt, 2, VarGeneral.RepData.Tables[0].Rows[iiCnt - 1]["itemNm"]);
                    }
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("FrmMain_AlarmDataExpitem:", error, enable: true);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_SrchWeek_CheckedChanged(object sender, EventArgs e)
        {
            //buttonItem_SrchBtwDate_Click(sender, e);
            //buttonItem_SrchRefresh_Click(sender, e);
        }
        public DBMonitoring dbmonitor;
        void exe(string cms)
        {
            sampleSqlConnection = new SqlConnection(VarGeneral.BranchCS);
            SqlCommand cm = new SqlCommand(cms, sampleSqlConnection);
            sampleSqlConnection.Open();
            cm.ExecuteNonQuery();
            sampleSqlConnection.Close();
        }
        public void init()
        {
            string dbname = getdatabasename();
            sampleSqlConnection = new SqlConnection(VarGeneral.BranchCS);
            DataTable tb =ProShared. DBUdate.DbUpdates.execute("SELECT is_broker_enabled FROM sys.databases WHERE name = 'Database_name';".Replace("Database_name", dbname), VarGeneral.BranchCS);
            if (tb.Rows.Count > 0)
            {
                if (((bool)tb.Rows[0][0]) == false)
                {
                    try
                    {
                        exe("USE [master] ALTER DATABASE [" + dbname + "] SET SINGLE_USER WITH Rollback IMMEDIATE ");
                        Thread.Sleep(5000);
                        //             dbx.ExecuteCommand("USE [master] RESTORE DATABASE [" +  + "] FROM DISK = '" + vFile1 + "' WITH FILE = 1 , " + vWITH);
                        string cms = @"ALTER DATABASE [DBNAME] SET ENABLE_BROKER WITH NO_WAIT";
                        cms = cms.Replace("DBNAME", dbname);
                        exe(cms);
                        Thread.Sleep(5000);
                        exe("USE [master] ALTER DATABASE [" + dbname + "] SET MULTI_USER");
                        string arguments = string.Empty;
                        string[] args = Environment.GetCommandLineArgs();
                        for (int i = 1; i < args.Length; i++)
                        {
                            arguments = arguments + args[i] + " ";
                        }
                        Application.ExitThread();
                        Process.Start(Application.ExecutablePath, arguments);
                    }
                    catch
                    {
                        MessageBox.Show("please Contatct IT SUPPORT");
                    }
                }
            }
            SqlDependency.Start(VarGeneral.BranchCS);
            DBMonitoring();
        }
        public static string getdatabasename()
        {
            return InvAcc.Properties.Settings.Default.DefaultDDatabaseName + "_" + VarGeneral.BranchNumber;
        }
        public void DBMonitoring()
        {
            string c = @"SELECT [InvHed_ID]
      ,[InvId]
      ,[InvNo]
      ,[InvTyp]
      ,[InvCashPay]
      ,[CusVenNo]
      ,[CusVenNm]
      ,[CusVenAdd]
      ,[CusVenTel]
      ,[Remark]
      ,[HDat]
      ,[GDat]
      ,[MndNo]
      ,[SalsManNo]
      ,[SalsManNam]
      ,[InvTot]
      ,[InvTotLocCur]
      ,[InvDisPrs]
      ,[InvDisVal]
      ,[InvDisValLocCur]
      ,[InvNet]
      ,[InvNetLocCur]
      ,[CashPay]
      ,[CashPayLocCur]
      ,[IfRet]
      ,[GadeNo]
      ,[GadeId]
      ,[IfDel]
      ,[RetNo]
      ,[RetId]
      ,[InvCstNo]
      ,[InvCashPayNm]
      ,[RefNo]
      ,[InvCost]
      ,[EstDat]
      ,[CustPri]
      ,[ArbTaf]
      ,[CurTyp]
      ,[InvCash]
      ,[ToStore]
      ,[ToStoreNm]
      ,[InvQty]
      ,[EngTaf]
      ,[IfTrans]
      ,[CustRep]
      ,[CustNet]
      ,[InvWight_T]
      ,[IfPrint]
      ,[LTim]
      ,[CREATED_BY]
      ,[DATE_CREATED]
      ,[MODIFIED_BY]
      ,[DATE_MODIFIED]
      ,[CreditPay]
      ,[CreditPayLocCur]
      ,[NetworkPay]
      ,[NetworkPayLocCur]
      ,[CommMnd_Inv]
      ,[MndExtrnal]
      ,[CompanyID]
      ,[InvAddCost]
      ,[InvAddCostLoc]
      ,[InvAddCostExtrnal]
      ,[InvAddCostExtrnalLoc]
      ,[IsExtrnalGaid]
      ,[ExtrnalCostGaidID]
      ,[Puyaid]
      ,[Remming]
      ,[RoomNo]
      ,[OrderTyp]
      ,[RoomSts]
      ,[chauffeurNo]
      ,[RoomPerson]
      ,[ServiceValue]
      ,[Sts]
      ,[PaymentOrderTyp]
      ,[AdminLock]
      ,[DeleteDate]
      ,[DeleteTime]
      ,[UserNew]
      ,[IfEnter]
      ,[InvAddTax]
      ,[InvAddTaxlLoc]
      ,[IsTaxGaid]
      ,[TaxGaidID]
      ,[IsTaxUse]
      ,[InvValGaidDis]
      ,[InvValGaidDislLoc]
      ,[IsDisGaid]
      ,[DisGaidID1]
      ,[IsDisUse1]
      ,[InvComm]
      ,[InvCommLoc]
      ,[IsCommGaid]
      ,[CommGaidID]
      ,[IsCommUse]
      ,[IsTaxLines]
      ,[IsTaxByTotal]
      ,[IsTaxByNet]
      ,[TaxByNetValue]
      ,[DesPointsValue]
      ,[DesPointsValueLocCur]
      ,[PointsCount]
      ,[IsPoints]
      ,[tailor1]
      ,[tailor2]
      ,[tailor3]
      ,[tailor4]
      ,[tailor5]
      ,[tailor6]
      ,[tailor7]
      ,[tailor8]
      ,[tailor9]
      ,[tailor10]
      ,[tailor11]
      ,[tailor12]
      ,[tailor13]
      ,[tailor14]
      ,[tailor15]
      ,[tailor16]
      ,[tailor17]
      ,[tailor18]
      ,[tailor19]
      ,[tailor20]
      ,[InvImg]
      ,[PriceIncludTax]
      ,[CusVenMob]
      ,[CInvType]
      ,[VehiclechassisNumber]
      ,[Car_ID]
      ,[Car_TypeNameA]
      ,[Car_TypeNameE]
      ,[Car_NameA]
      ,[Car_NameE]
      ,[PlateNo]
      ,[Color]
      ,[ModelNo]
      ,[Delevery_Date]
      ,[OrderStatus]
  FROM [dbo].[T_INVHED];";
            if (sampleSqlConnection.State == ConnectionState.Closed)
                sampleSqlConnection.Open();
            this.sampleSqlCommand = new SqlCommand();
            this.sampleSqlCommand.Connection = this.sampleSqlConnection; this.sampleSqlCommand.CommandType = CommandType.Text;
            this.sampleSqlCommand.CommandText = c;// "SELECT [SampleId],[SampleName], [SampleCategory], [SampleDateTime], [IsSampleProcessed] FROM [dbo].[SampleTable01];";
            this.sampleSqlCommand.Notification = null;
            this.sampleSqlDependency = new SqlDependency(this.sampleSqlCommand);
            this.sampleSqlDependency.OnChange += this.SqlDependencyOnChange;
            try
            {
                this.sampleSqlCommand.ExecuteReader();
            }
            catch { }
        }
        public void termination()
        {
            try
            {
                SqlDependency.Start(VarGeneral.BranchCS);
            }
            catch { }
        }
        public delegate void customMessageHandler(System.Object sender,
                                   SqlNotificationEventArgs e);
#pragma warning disable CS0067 // The event 'Frm_Main.OrderStatuschanged' is never used
        public event customMessageHandler OrderStatuschanged;
#pragma warning restore CS0067 // The event 'Frm_Main.OrderStatuschanged' is never used
        private void SqlDependencyOnChange(object sender, SqlNotificationEventArgs e)
        {
            buttonItem_SrchDay_Click(sender, e);
            this.sampleSqlDependency.OnChange -= this.SqlDependencyOnChange;
            DBMonitoring();
        }
        SqlCommand sampleSqlCommand;
        SqlDependency sampleSqlDependency;
        SqlConnection sampleSqlConnection;
        private void buttonItem_SrchWeek_Click(object sender, EventArgs e)
        {
            buttonItem_SrchBtwDate_Click(sender, e);
            buttonItem_SrchRefresh_Click(sender, e);
        }
        private void buttonItem_SrchDay_Click(object sender, EventArgs e)
        {
            buttonItem_SrchBtwDate_Click(sender, e);
            buttonItem_SrchRefresh_Click(sender, e);
        }
        private void buttonItem_SrchMonth_Click(object sender, EventArgs e)
        {
            buttonItem_SrchBtwDate_Click(sender, e);
            buttonItem_SrchRefresh_Click(sender, e);
        }
        private void buttonItem_SrchBtwDate_Click(object sender, EventArgs e)
        {
            if (buttonItem_SrchBtwDate.Checked)
            {
                try
                {
                    TextBoxItem textBoxItem = textBoxItem_SrchDateFrom;
                    int? calendr = VarGeneral.Settings_Sys.Calendr;
                    textBoxItem.Text = ((calendr.Value == 0 && calendr.HasValue) ? n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd") : n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd"));
                    TextBoxItem textBoxItem2 = textBoxItem_SrchDateTo;
                    calendr = VarGeneral.Settings_Sys.Calendr;
                    textBoxItem2.Text = ((calendr.Value == 0 && calendr.HasValue) ? n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd") : n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd"));
                }
                catch
                {
                    textBoxItem_SrchDateFrom.Text = "";
                    textBoxItem_SrchDateTo.Text = "";
                }
            }
            else
            {
                textBoxItem_SrchDateFrom.Text = "";
                textBoxItem_SrchDateTo.Text = "";
            }
            buttonItem_SrchRefresh.Focus();
            if (buttonItem_SrchDay.Checked)
            {
                label2.Text = ((LangArEn == 0) ? "قائمة بفواتير المبيعات الأعلى قيمة خلال " : "List of the higher sales through ") + buttonItem_SrchDay.Text;
                label4.Text = ((LangArEn == 0) ? "قائمة بفواتير المشتريات الأعلى قيمة خلال " : "List of the higher Purchaes through ") + buttonItem_SrchDay.Text;
                label3.Text = ((LangArEn == 0) ? "قائمة بالأصناف الأكثر مبيعا خلال " : "List of best-selling items through ") + buttonItem_SrchDay.Text;
                label5.Text = ((LangArEn == 0) ? "قائمة بسندات الصرف الأعلى قيمة خلال " : "List of the higher Bills of exchange through ") + buttonItem_SrchDay.Text;
            }
            else if (buttonItem_SrchWeek.Checked)
            {
                label2.Text = ((LangArEn == 0) ? "قائمة بفواتير المبيعات الأعلى قيمة خلال " : "List of the higher sales through ") + buttonItem_SrchWeek.Text;
                label4.Text = ((LangArEn == 0) ? "قائمة بفواتير المشتريات الأعلى قيمة خلال " : "List of the higher Purchaes through ") + buttonItem_SrchWeek.Text;
                label3.Text = ((LangArEn == 0) ? "قائمة بالأصناف الأكثر مبيعا خلال " : "List of best-selling items through ") + buttonItem_SrchWeek.Text;
                label5.Text = ((LangArEn == 0) ? "قائمة بسندات الصرف الأعلى قيمة خلال " : "List of the higher Bills of exchange through ") + buttonItem_SrchWeek.Text;
            }
            else if (buttonItem_SrchMonth.Checked)
            {
                label2.Text = ((LangArEn == 0) ? "قائمة بفواتير المبيعات الأعلى قيمة خلال " : "List of the higher sales through ") + buttonItem_SrchMonth.Text;
                label4.Text = ((LangArEn == 0) ? "قائمة بفواتير المشتريات الأعلى قيمة خلال " : "List of the higher Purchaes through ") + buttonItem_SrchMonth.Text;
                label3.Text = ((LangArEn == 0) ? "قائمة بالأصناف الأكثر مبيعا خلال " : "List of best-selling items through ") + buttonItem_SrchMonth.Text;
                label5.Text = ((LangArEn == 0) ? "قائمة بسندات الصرف الأعلى قيمة خلال " : "List of the higher Bills of exchange through ") + buttonItem_SrchMonth.Text;
            }
            else
            {
                label2.Text = ((LangArEn == 0) ? "قائمة بفواتير المبيعات الأعلى قيمة " : "List of the higher sales ");
                label4.Text = ((LangArEn == 0) ? "قائمة بفواتير المشتريات الأعلى قيمة " : "List of the higher Purchaes ");
                label3.Text = ((LangArEn == 0) ? "قائمة بالأصناف الأكثر مبيعا " : "List of best-selling items");
                label5.Text = ((LangArEn == 0) ? "قائمة بسندات الصرف الأعلى قيمة " : "List of the higher Bills of exchange ");
            }
        }
        private void Frm_Main_FormClosed(object sender, FormClosedEventArgs e)
        {
            //p.  Application.Exit();
        }
        private void TTVirsionSafe_Click(object sender, EventArgs e)
        {
        }
        private void buttonItem_PaymentOrder_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FMPaymentOrder()))
            {
                VarGeneral.InvTyp = 17;
                FMPaymentOrder frm = new FMPaymentOrder();
                frm.Tag = LangArEn;
                frm.Text = buttonItem_PaymentOrder.Text.Replace("       Ctrl+F6", "");
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void bubbleButton_RelayInvPoint_Click(object sender, EventArgs e)
        {
            FrmRelayInv frm = new FrmRelayInv();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            //frm.MdiParent = this;
            //childmin();
            showChild(frm);
        }
        private void buttonItem_EqarNationality_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmNation()))
            {
                FrmNation frm = new FrmNation();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_EqarCity_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmCity()))
            {
                FrmCity frm = new FrmCity();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_EqarTyp_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmEqarTyp()))
            {
                FrmEqarTyp frm = new FrmEqarTyp();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_EqarNature_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmEqarNatural()))
            {
                FrmEqarNatural frm = new FrmEqarNatural();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_EqarEinTyp_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmAinTyp()))
            {
                FrmAinTyp frm = new FrmAinTyp();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_EqarEinNature_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmAinNatural()))
            {
                FrmAinNatural frm = new FrmAinNatural();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_Eqars_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmEqars()))
            {
                FrmEqars frm = new FrmEqars();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
            }
        }
        private void buttonItem90_Owner_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmOwners()))
            {
                FrmOwners frm = new FrmOwners();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_EqarSale_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmEqarSale()))
            {
                FrmEqarSale frm = new FrmEqarSale();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
            }
        }
        private void buttonItem_RendDesigne_Click(object sender, EventArgs e)
        {
            try
            {
                if (VarGeneral.vDemo && VarGeneral.UserID != 1)
                {
                    MessageBox.Show((LangArEn == 0) ? "يرجى تفعيل المنتج للاستفادة من جميع مميزات النظام \n  لا تستطيع استخدام هذه الميزة لان النسخة الحالية تجريبية..  " : "Please activate the product to take advantage of all system features \n You can not use this feature because the current version is experimental ..", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
                MessageBox.Show((LangArEn == 0) ? "للأهمية . يرجى عدم التعديل على الكلمات الموجودة داخل العلامة <> فهي علامات برمجية" : "Important. Please do not modify the words inside the <> .", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                Process.Start(Application.StartupPath + "\\Contract.doc");
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("buttonItem_RendDesigne:", error, enable: true);
                MessageBox.Show((LangArEn == 0) ? "لم يتم العثور على ملف تصميم العقد .. يرجى التواصل مع الادارة" : "The contract file was not found.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
                MessageBox.Show(error.Message, VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, MessageBoxOptions.DefaultDesktopOnly);
            }
        }
        private void buttonItem_TenantData_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmTenant()))
            {
                FrmTenant frm = new FrmTenant();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
            }
        }
        private void buttonItem_TenantAlarm_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmAlarmTenant()))
            {
                FrmAlarmTenant frm = new FrmAlarmTenant();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_TenantCatch_Click(object sender, EventArgs e)
        {
            VarGeneral.InvTyp = 29;
            FrmSndTenant frm = new FrmSndTenant();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            frm.ShowDialog();
        }
        private void buttonItem_TenantSerf_Click(object sender, EventArgs e)
        {
            VarGeneral.InvTyp = 30;
            FrmSndTenant frm = new FrmSndTenant();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            frm.ShowDialog();
        }
        private void buttonItem_EqarSearch_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmEqarRepQuery()))
            {
                FrmEqarRepQuery frm = new FrmEqarRepQuery();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
            }
        }
        private void buttonItem_TenantRep_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmEqarAccTenantRep()))
            {
                FrmEqarAccTenantRep frm = new FrmEqarAccTenantRep();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_EqarRep_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmEqarAccRep()))
            {
                FrmEqarAccRep frm = new FrmEqarAccRep();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }
        private void buttonItem_RentGetRep_Click(object sender, EventArgs e)
        {
            if (!IsFormOpen(new FrmEqarRentRep()))
            {
                FrmEqarRentRep frm = new FrmEqarRentRep();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.Show();
            }
        }

        private void c1Ribbon1_RibbonEvent(object sender, C1.Win.C1Ribbon.RibbonEventArgs e)
        {
        }
        private void ribbonControl1_Click(object sender, EventArgs e)
        {
        }
        private void fileSystemWatcher1_Created(object sender, FileSystemEventArgs e)
        {
        }
        private void fileSystemWatcher1_Changed(object sender, FileSystemEventArgs e)
        {
            dropboxsyn();
        }
        private void fileSystemWatcher1_Deleted(object sender, FileSystemEventArgs e)
        {
        }
        DropBoxSyncronization sync;
        public void syninfo()
        {
                   }
        private void radialMenu_Lang_Item_Click(object sender, EventArgs e)
        {
            try
            {
                if (radialMenu_Lang_Item.Text == "Arabic")
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == "")
                    {
                        radialMenu_Lang_Item.Text = "English";
                        LangChange(0);
                        LangArEn = 0;
                    }
                }
                else if (radialMenu_Lang_Item.Text == "English" && LangArEn != 1)
                {
                    LangChange(1);
                    LangArEn = 1;
                }
            }
            catch
            {
            }
        }
        private void c1FlexGrid2_Click(object sender, EventArgs e)
        {
            try
            {
                string n = c1FlexGrid2.Rows[c1FlexGrid2.RowSel][1].ToString();
                foreach (DataRow r in sync.dropsyninfo.table.Rows)
                {
#pragma warning disable CS0252 // Possible unintended reference comparison; to get a value comparison, cast the left hand side to type 'string'
                    if (r["BrA"] == n)
#pragma warning restore CS0252 // Possible unintended reference comparison; to get a value comparison, cast the left hand side to type 'string'
                    {
                        if ((DateTime)r["Time"] == DateTime.MinValue)
                        {
                            Alert fa = new Alert("بيانات هذا الفرع غير متوفره الرجاء تنبيه المسؤول في فرع " + n + "  الى عمل مزامنة والتأكد من الاتصال بالانترنت");
                            //fa.MdiParent = this;
                            //childmin();
                            showChild(fa);
                            return;
                        }
                    }
                }
                //if (c1FlexGrid2.RowSel > 0)
                //    sync.syncBranch(c1FlexGrid2.RowSel);
            }
            catch { }
        }
        private void ribbonPanel1_Click(object sender, EventArgs e)
        {
        }
        private void c1FlexGrid2_SelChange(object sender, EventArgs e)
        {
        }
        private void OnlineWarning_OptionsClick(object sender, EventArgs e)
        {
        }
        private void expandablePanel3_Click(object sender, EventArgs e)
        {
        }
        int acv = 0;
        private void c1Button1_Click(object sender, EventArgs e)
        {
            if (acv == 0)
                onlineworning2.Visible = false;
        }
        private void dataGridView_TopItems_Click(object sender, EventArgs e)
        {
        }
        private void ribbonButton100_Click(object sender, EventArgs e)
        {
        }
        private void ribbonButton101_Click(object sender, EventArgs e)
        {
            FrmPrinters f = new FrmPrinters();
            //f.MdiParent = this;
            //childmin();
            try
            {
                showChild(f);
            }
#pragma warning disable CS0168 // The variable 'error7' is declared but never used
            catch (Exception error7)
#pragma warning restore CS0168 // The variable 'error7' is declared but never used
            {
                DbUpdates.copysetting2(); 
                FrmPrinters sf= new FrmPrinters();
                showChild(sf);
            }
        }
        private void buttonItem_Emp_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmEmp()))
            {
                FrmEmp frm = new FrmEmp();
                frm.Tag = LangArEn;
                VarGeneral.FrmEmpStat = true;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Attend_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmGenAttend()))
            {
                FrmGenAttend frm = new FrmGenAttend();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_EmpRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepEmps()))
            {
                FrmRepEmps frm = new FrmRepEmps();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_IDRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepID()))
            {
                FrmRepID frm = new FrmRepID();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_PassportRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepPassport()))
            {
                FrmRepPassport frm = new FrmRepPassport();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_FormRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepForm()))
            {
                FrmRepForm frm = new FrmRepForm();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_LicensRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepLicense()))
            {
                FrmRepLicense frm = new FrmRepLicense();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_MidicAllowncRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepMidicalAllownce()))
            {
                FrmRepMidicalAllownce frm = new FrmRepMidicalAllownce();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_ReportUpdate_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepUpdateDoc()))
            {
                FrmRepUpdateDoc frm = new FrmRepUpdateDoc();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_RepDocAllownc_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepUpdateDocAllownce()))
            {
                FrmRepUpdateDocAllownce frm = new FrmRepUpdateDocAllownce();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_VacRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepVacation()))
            {
                FrmRepVacation frm = new FrmRepVacation();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_TicketRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepTickit()))
            {
                FrmRepTickit frm = new FrmRepTickit();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Authriz_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmAuthorization()))
            {
                FrmAuthorization frm = new FrmAuthorization();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_SecretariatsRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepSecretariats()))
            {
                FrmRepSecretariats frm = new FrmRepSecretariats();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_VisaGoBackRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepVisa()))
            {
                FrmRepVisa frm = new FrmRepVisa();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_EndServicRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepEndService()))
            {
                FrmRepEndService frm = new FrmRepEndService();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_AddRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepAdd()))
            {
                FrmRepAdd frm = new FrmRepAdd();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_AwardRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepReward()))
            {
                FrmRepReward frm = new FrmRepReward();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_AdvancRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepAdvances()))
            {
                FrmRepAdvances frm = new FrmRepAdvances();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Phons_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepCalls()))
            {
                FrmRepCalls frm = new FrmRepCalls();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_DisRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepDiscount()))
            {
                FrmRepDiscount frm = new FrmRepDiscount();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_CommentaryRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepCommentary()))
            {
                FrmRepCommentary frm = new FrmRepCommentary();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_RepCars_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepCars()))
            {
                FrmRepCars frm = new FrmRepCars();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_RepVaccNeedProv_Click(object sender, EventArgs e)
        {
            RepShow _RepShow = new RepShow();
            _RepShow.Tables = " T_Emp Right JOIN  T_Vacation ON T_Emp.Emp_ID = T_Vacation.EmpID LEFT JOIN  T_VacTyp ON T_Vacation.VacTyp = T_VacTyp.VacT_No LEFT JOIN  T_Dept ON T_Emp.Dept = T_Dept.Dept_No LEFT JOIN  T_Job ON T_Emp.Job = T_Job.Job_No LEFT JOIN  T_Nationalities ON T_Emp.Nationalty = T_Nationalities.Nation_No LEFT JOIN  T_Section ON T_Emp.Section = T_Section.Section_No  left JOIN T_SYSSETTING ON T_Emp.CompanyID = T_SYSSETTING.SYSSETTING_ID";
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == "")
            {
                _RepShow.Fields = " T_Emp.*,T_SYSSETTING.LogImg as LogoPic  , T_Vacation.*, T_VacTyp.NameA AS VacTypNameA,  T_Dept.NameA AS DeptNameA, T_Job.NameA AS JobNameA, T_Section.NameA AS SectionNameA,T_Nationalities.NameA as NationNameA ";
            }
            else
            {
                _RepShow.Fields = " T_Emp.*,T_SYSSETTING.LogImg as LogoPic  , T_Vacation.*, T_VacTyp.NameE AS VacTypNameA,  T_Dept.NameE AS DeptNameA, T_Job.NameE AS JobNameA, T_Section.NameE AS SectionNameA,T_Nationalities.NameE as NationNameA ";
            }
            _RepShow.Rule = " Where T_Vacation.AdminLock = 0  ";
            _RepShow.Brn_No = "";
            _RepShow = _RepShow.Save();
            VarGeneral.RepData = _RepShow.RepData;
            if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
            {
                FrmReportsViewer frmHold = new FrmReportsViewer();
                frmHold.Tag = LangArEn;
                frmHold.Repvalue = "VacRepHold";
                VarGeneral.vTitle = ((LangArEn == 0) ? "قائمة بالإجازات التي تنتظر الموافقة" : "List of leaves awaiting approval");
                //frmHold.MdiParent = this;
                //childmin();
                frmHold.ShowDialog();
            }
        }
        private void buttonItem_Transactions_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmTreatment()))
            {
                FrmTreatment frm = new FrmTreatment();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Commentary_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCommentary()))
            {
                FrmCommentary frm = new FrmCommentary();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_PassPortForm_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmPassportForm()))
            {
                FrmPassportForm frm = new FrmPassportForm();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Dept_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmDept()))
            {
                FrmDept frm = new FrmDept();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Projects_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmPRoject()))
            {
                FrmPRoject frm = new FrmPRoject();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Gur_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmSponser()))
            {
                FrmSponser frm = new FrmSponser();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Nation_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmNation()))
            {
                FrmNation frm = new FrmNation();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Contract_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmContract()))
            {
                FrmContract frm = new FrmContract();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Vac_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmVacType()))
            {
                FrmVacType frm = new FrmVacType();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_City_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCity()))
            {
                FrmCity frm = new FrmCity();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Religen_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmReligions()))
            {
                FrmReligions frm = new FrmReligions();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Cars_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCar()))
            {
                FrmCar frm = new FrmCar();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Add_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmAdd()))
            {
                FrmAdd frm = new FrmAdd();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Dis_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmDiscount()))
            {
                FrmDiscount frm = new FrmDiscount();
                frm.Tag = LangArEn;
                VarGeneral.FlagDis = true;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_VacOp_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmVacation()))
            {
                FrmVacation frm = new FrmVacation();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Tickit_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmTicket()))
            {
                FrmTicket frm = new FrmTicket();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Advanc_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmAdvances()))
            {
                FrmAdvances frm = new FrmAdvances();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_CallPhone_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCallPhone()))
            {
                FrmCallPhone frm = new FrmCallPhone();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Rewar_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRewards()))
            {
                FrmRewards frm = new FrmRewards();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_AutizRep_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmRepAuthorization()))
            {
                FrmRepAuthorization frm = new FrmRepAuthorization();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_Secretariats_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmSecretariats()))
            {
                FrmSecretariats frm = new FrmSecretariats();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_VisaGoBack_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new Frmvisa()))
            {
                Frmvisa frm = new Frmvisa();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_EndServic_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmEndService()))
            {
                FrmEndService frm = new FrmEndService();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void buttonItem_UpdateDoc_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmUpdateDoc()))
            {
                FrmUpdateDoc frm = new FrmUpdateDoc();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void warningBox_CloseClick(object sender, EventArgs e)
        {
            if (txtCount.Value > 0)
            {
                panelWarning.Visible = false;
            }
        }
        private void ribbonButton1_Click(object sender, EventArgs e)
        {
            ProShared.DroBoxSync.Frm_PrinterShow f = new  ProShared. DroBoxSync.Frm_PrinterShow(1);
            //f.MdiParent = this;
            //childmin();
            showChild(f);
        }
        private void labelItem_TotPurReturn_Click(object sender, EventArgs e)
        {
        }
        private void buttonItem_Megration_Click(object sender, EventArgs e)
        {
            megration f = new megration();
            //f.MdiParent = this;
            //childmin();
            showChild(f);
        }
        private void radialMenuItem_NewDataBase_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_NewDataBase";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_ChangeDataBase_DoubleClick(object sender, EventArgs e)
        {
        }
        private void radialMenuItem_ChangeDataBase_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_ChangeDataBase";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void radialMenuItem_DeleteDataBase_Click(object sender, EventArgs e)
        {
            RadialMenuItem item = new RadialMenuItem();
            item.Name = "radialMenuItem_DeleteDataBase";
            radialMenu_Setting_ItemClick(item, e);
        }
        private void Button_language_Click(object sender, EventArgs e)
        {
            if (Button_language.Text == "Arabic Language")
            {
                LangChange(0);
                VarGeneral.currentintlanguage = 0;
           
            }
            else
            { LangChange(1);VarGeneral.currentintlanguage = 1; }
        }
        private void buttonItem33_Click(object sender, EventArgs e)
        {
            try
            {
             ProShared.   DBUdate.DbUpdates.updateeverything();
                MessageBox.Show("تم تحديث قاعدة البيانات بنجاح");
            }
            catch (Exception ex)
            {
                MessageBox.Show("تعذر تحديث قاعدة البيانات الرجاء ارفاق صورة من الاسبشن وارسالها الى    الى القسم البرمجي" + Environment.NewLine + ex.Message);
            }
        }
        private void ribbonButton1_Click_1(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCarTypS()))
            {
                FrmCarTypS frm = new FrmCarTypS();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void ribbonButton2_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmCarS()))
            {
                FrmCarS frm = new FrmCarS();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void panel9_Paint(object sender, PaintEventArgs e)
        {
        }
        private void buttonItem_invSetting_Click(object sender, EventArgs e)
        {
        }
        private void bar2_ItemClick(object sender, EventArgs e)
        {
        }
        private void Color_Button_Click(object sender, EventArgs e)
        {
           //if(!IsFormOpen(new FrmColor()))
            {
                FrmColor frm = new FrmColor();
                frm.Tag = LangArEn;
                frm.TopMost = true;
                //frm.MdiParent = this;
                //childmin();
                showChild(frm);
            }
        }
        private void mainmenu_ItemClick(object sender, EventArgs e)
        {
        }
        private void expandablePanel3_VisibleChanged(object sender, EventArgs e)
        {
            if (expandablePanel3.Visible == true)
            {
                init();
            }
            else
            {
                termination();
            }
        }
        private void label7_Click(object sender, EventArgs e)
        {
        }
        private void Frm_Main_KeyDown_1(object sender, KeyEventArgs e)
        {
        }
        List<Form> Activlist = new List<Form>();
        private void Frm_Main_ControlAdded(object sender, ControlEventArgs e)
        {
        }
        private void mdimx(object sender, FormClosedEventArgs e)
        {
            Form f = (Form)sender;
            Activlist.Remove(f);
            if (Activlist.Count == 0)
            {
                if (kkk == true) { expandablePanel3.Visible = true; expandablePanel3.BringToFront(); }
            }
            else
            {
                Activlist[0].Activate(); if (kkk == true) { expandablePanel3.Visible = false; expandablePanel3.SendToBack(); }
                Activlist[0].WindowState = FormWindowState.Maximized;
                this.LayoutMdi(MdiLayout.ArrangeIcons);
                this.LayoutMdi(MdiLayout.TileHorizontal);
            }
            Refresh();
        }
        private void Frm_Main_MdiChildActivate(object sender, EventArgs e)
        {
            //{
            //    Form f = ActiveMdiChild;
            //    if (f != null)
            //    {
            //        if (kkk == true)
            //        {
            //            expandablePanel3.SendToBack();
            //            f.BringToFront();
            //        }
            //        if (!Activlist.Contains(f))
            //        {
            //            f.StartPosition = FormStartPosition.CenterParent;
            //            if (f.WindowState == FormWindowState.Normal)
            //            {
            //                f.WindowState = FormWindowState.Minimized;
            //                f.WindowState = FormWindowState.Maximized;
            //            }
            //            Activlist.Add(f);f.FormClosed += mdimx;f.Activated += activatedevent; f.Deactivate += Rechils; }
            //        else
            //        {
            //        }
            //    }
            //}
        }
        private void activatedevent(object sender, EventArgs e)
        {
            Form f = (Form)sender;
            if (f.WindowState == FormWindowState.Normal || f.WindowState == FormWindowState.Minimized)
            {
                f.StartPosition = FormStartPosition.CenterParent;
                f.Activated -= activatedevent; f.Deactivate -= Rechils;
                if (f.WindowState == FormWindowState.Normal) f.WindowState = FormWindowState.Minimized;
                f.WindowState = FormWindowState.Maximized;
                f.Activated += activatedevent; f.Deactivate += Rechils;
            }
        }
        private void Rechils(object sender, EventArgs e)
        {
            Form f = (Form)sender; int k = 0;
            if (f.WindowState == FormWindowState.Minimized)
            {
                foreach (Form r in MdiChildren)
                {
                    if (r.WindowState != FormWindowState.Minimized) k = 1;
                }
                if (k == 0)
                {
                    if (kkk == true) { expandablePanel3.Visible = true; expandablePanel3.BringToFront(); }
                }
            }
        }
        private void mdiWindowListItem1_SubItemsChanged(object sender, CollectionChangeEventArgs e)
        {
        }
        private void buttonItem34_SubItemsChanged(object sender, CollectionChangeEventArgs e)
        {
            if (buttonItem34.SubItems.Count == 0)
            {
                if (kkk == true)
                    expandablePanel3.Visible = true; expandablePanel3.BringToFront();
            }
        }
        private void mdiWindowListItem1_Click(object sender, EventArgs e)
        {
        }
        private void buttonItem34_CheckedChanged(object sender, EventArgs e)
        {
        }
        private void tabControl1_ControlRemoved(object sender, ControlEventArgs e)
        {
            if (tabControl1.TabPages.Count == 0)
            {
                if (kkk == true) { expandablePanel3.BringToFront(); }
            }
        }
        private void tabControl1_TabPaintBorder(object sender, JacksiroKe.MdiTabCtrl.TabControl.TabPaintEventArgs e)
        {
        }
        private void tabControl1_TabPaintBackground(object sender, JacksiroKe.MdiTabCtrl.TabControl.TabPaintEventArgs e)
        {
            Form fc = (tabControl1.SelectedForm as Form);
            try
            {
                fc.Controls.Find("FlxInv", true).ToList<Control>()[0].Focus();
            }
            catch { }
        }
        private void tabControl1_TabIndexChanged(object sender, EventArgs e)
        {
        }
        private void tabControl1_TabPressed(object sender, JacksiroKe.MdiTabCtrl.TabControl.KeyHandledEventArgs e)
        {
        }
        private void tabControl1_F4Pressed(object sender, JacksiroKe.MdiTabCtrl.TabControl.KeyHandledEventArgs e)
        {
        }
        private void tabControl1_SelectedTabChanged(object sender, EventArgs e)
        {
            string s = ((Form)tabControl1.SelectedForm).Name;
            //      if (q.Count() > 0)
            try
            {
                int af = pargetindex(s);
                if (af != -1)
                {
                    parameterws fs = par[af];
                    VarGeneral
                       ._IsPOS = fs.pos;
                    VarGeneral.InvTyp = fs.intyp;
                    VarGeneral.InvType = fs.invtype;
                    VarGeneral.StockOnly = fs.StockOnly;
                    VarGeneral.vTitle = fs.vtitle;
                    VarGeneral.AccTyp = fs.AccTyp;
                    VarGeneral.vTabAutoAlarm = fs.vTabAutoAlarm;
                }
            }
            catch { }
        }
#pragma warning disable CS0414 // The field 'Frm_Main.sks' is assigned but its value is never used
        int sks = 1;
#pragma warning restore CS0414 // The field 'Frm_Main.sks' is assigned but its value is never used
        private void tabControl1_Validated(object sender, EventArgs e)
        {
        }
        private void Frm_Main_CursorChanged(object sender, EventArgs e)
        {
        }

        private void ribbonButton64_Click(object sender, EventArgs e)
        {
            FrmTransDate frm = new FrmTransDate();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            frm.ShowDialog();
        }

        private void ribbonButton1_Click_2(object sender, EventArgs e)
        {
          

        }

        private void ribbonButton2_Click_1(object sender, EventArgs e)
        {
            FRInvTotals frm = new FRInvTotals();
            frm.Tag = LangArEn;
            showChild(frm);
        }

        private void ribbonButton2_Click_2(object sender, EventArgs e)
        {
            FRInVatRep frm = new FRInVatRep();
            frm.WindowState = FormWindowState.Normal;
            frm.Show();
        }

        private void ribbonCheckBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (ribbonCheckBox1.Checked == true)
            {
                {
                    FrmReportsViewer.TypeOfReporting = 1;
                    File.WriteAllText(Application.StartupPath + "\\Script\\fastdll.dll", "Fastreport On");
                   

                }
            }
            else
            { FrmReportsViewer.TypeOfReporting = 0;
                File.Delete(Application.StartupPath + "\\Script\\fastdll.dll");
            }

        }

        private void ribbonButton3_Click(object sender, EventArgs e)
        {
            AboutBox1 frm = new AboutBox1();
            frm.ShowDialog();
        }

        private void ribbonCheckBox2_Click(object sender, EventArgs e)
        {

        }

        private void ribbonCheckBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (ribbonCheckBox2.Checked == true)
            {
                {     File.WriteAllText(Application.StartupPath + "\\Script\\deloption.dll", "Delete On");

                  
                }
            }
            else
            {
             
                File.Delete(Application.StartupPath + "\\Script\\deloption.dll");
         
            }


        }

        private void ribbonButton4_Click(object sender, EventArgs e)
        {
            FormInvoicesDataViewre frm = new FormInvoicesDataViewre();
            frm.ShowDialog();
        }

        private void ribbonButton5_Click(object sender, EventArgs e)
        {
            FMInvPrintSetup frm = new FMInvPrintSetup(1);
            frm.Tag = LangArEn;
            frm.TopMost = true;
            frm.ShowDialog();
        }

        private void buttonItem35_Click(object sender, EventArgs e)
        {
            frmItemNoWizard frm = new frmItemNoWizard();
            frm.ShowDialog();
        }
    }
}
