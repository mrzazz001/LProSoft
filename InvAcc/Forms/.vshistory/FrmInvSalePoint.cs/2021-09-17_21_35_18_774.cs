using C1.Win.C1FlexGrid;
using DevComponents.DotNetBar;
using DevComponents.DotNetBar.Controls;
using DevComponents.DotNetBar.Metro;
using DevComponents.DotNetBar.Ribbon;
using DevComponents.DotNetBar.SuperGrid;
using DevComponents.DotNetBar.SuperGrid.Style;
using DevComponents.Editors;
using DevExpress.XtraBars;
using Framework.Data;
using InputKey;
using InvAcc.GeneralM;
using InvAcc.Stock_Data;
using Library.RepShow;
using Microsoft.Win32;
using SSSDateTime.Date;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Printing;
using System.IO;
using System.IO.Ports;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using TFG;
namespace InvAcc.Forms
{
    public partial class FrmInvSalePoint : Form
    {
        public class ColumnDictinary_ORDERACC
        {
            public string ATxt1_D = string.Empty;
            public string ATag1_D = string.Empty;
            public string ATxt1_C = string.Empty;
            public string ATag1_C = string.Empty;
            public string ATxt2_D = string.Empty;
            public string ATag2_D = string.Empty;
            public string ATxt2_C = string.Empty;
            public string ATag2_C = string.Empty;
            public string ATxt3_D = string.Empty;
            public string ATag3_D = string.Empty;
            public string ATxt3_C = string.Empty;
            public string ATag3_C = string.Empty;
            public string ATxt5_D = string.Empty;
            public string ATag5_D = string.Empty;
            public string ATxt5_C = string.Empty;
            public string ATag5_C = string.Empty;
            public string ATxt6_D = string.Empty;
            public string ATag6_D = string.Empty;
            public string ATxt6_C = string.Empty;
            public string ATag6_C = string.Empty;
            public string ATxt7_C = string.Empty;
            public string ATag7_C = string.Empty;
            public ColumnDictinary_ORDERACC(string aTxt1_D, string aTag1_D, string aTxt1_C, string aTag1_C, string aTxt2_D, string aTag2_D, string aTxt2_C, string aTag2_C, string aTxt3_D, string aTag3_D, string aTxt3_C, string aTag3_C, string aTxt5_D, string aTag5_D, string aTxt5_C, string aTag5_C, string aTxt6_D, string aTag6_D, string aTxt6_C, string aTag6_C, string aTxt7_C, string aTag7_C)
            {
                ATxt1_D = aTxt1_D;
                ATag1_D = aTag1_D;
                ATxt1_C = aTxt1_C;
                ATag1_C = aTag1_C;
                ATxt2_D = aTxt2_D;
                ATag2_D = aTag2_D;
                ATxt2_C = aTxt2_C;
                ATag2_C = aTag2_C;
                ATxt3_D = aTxt3_D;
                ATag3_D = aTag3_D;
                ATxt3_C = aTxt3_C;
                ATag3_C = aTag3_C;
                ATxt5_D = aTxt5_D;
                ATag5_D = aTag5_D;
                ATxt5_C = aTxt5_C;
                ATag5_C = aTag5_C;
                ATxt6_D = aTxt6_D;
                ATag6_D = aTag6_D;
                ATxt6_C = aTxt6_C;
                ATag6_C = aTag6_C;
                ATxt7_C = aTxt7_C;
                ATag7_C = aTag7_C;
            }
        }
        internal void loadsss()
        {
            FrmInvSalePoint_Load(null, null);
            textBox_Barcode.Focus();
        }
        public class ColumnDictinary
        {
            public string AText = string.Empty;
            public string EText = string.Empty;
            public bool IfDefault = false;
            public string Format = string.Empty;
            public ColumnDictinary(string aText, string eText, bool ifDefault, string format)
            {
                AText = aText;
                EText = eText;
                IfDefault = ifDefault;
                Format = format;
            }
        }
        internal void loads()
        {
            frRep.switchButtonItem_IsReturn = switchButtonItem_IsReturn;
            frRep.LangArEn = LangArEn;
            frRep.permission = permission;
            textBox_Barcode.Focus();
        }
        // private IContainer components = null;
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData.ToString().Contains("Control") && !keyData.ToString().ToLower().Contains("delete") && keyData.ToString().Contains("Alt"))
            {
                try
                {
                    VarGeneral.Print_set_Gen_Stat = true;
                    FrmReportsViewer.IsSettingOnly = true;
                    if (textBox_ID.Text != string.Empty && State == FormState.Saved)
                    {

                        buttonItem_Print_Click(null, null);
                        VarGeneral.Print_set_Gen_Stat = false;
                    }
                    else
                    {

                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Repvalue = "InvSal";
                        frm.RepCashier = "InvoiceCachier";
                        frm.Repvalue = "InvSalWtr";
                        frm.RepCashier = "InvoiceCachierWaiter";

                        frm.Repvalue = "InvSal";
                        frm.RepCashier = "InvoiceCachier";
                        frm.Repvalue = "InvSalWtr";
                        frm.RepCashier = "InvoiceCachierWaiter";
                        //ADDADD




                        frm.Tag = LangArEn;
                        frm.ShowDialog();
                    }
                    FrmReportsViewer.IsSettingOnly = false;
                }
                catch
                {
                    VarGeneral.Print_set_Gen_Stat = false;
                }


            }
            return base.ProcessCmdKey(ref msg, keyData);
        }


        // public int VarGeneral.InvTyp = 1, VarGeneral.InvTypRt=-1;
        private void netResize1_AfterControlResize(object sender, Softgroup.NetResize.AfterControlResizeEventArgs e)
        {
            if (e.Control.Name.Contains("ribbonBar_Tasks"))
            {
                ribbonBar_Tasks.Font = new Font("Tahoma", 8F);
                ribbonBar1.BackgroundStyle.BackColor = Color.Gainsboro;
                ribbonBar1.BackgroundStyle.BackColor2 = Color.Gainsboro;
            }
            if (e.Control.GetType() == typeof(Label))
            {
                Label c = (e.Control as Label); if ((c.BackColor != System.Drawing.Color.FromArgb(((int)(((byte)(192)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))))) && (c.BackColor != System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(0)))))) && (c.BackColor != System.Drawing.Color.SteelBlue))
                    c.BackColor = Color.Transparent; Size cc = c.PreferredSize;
                c.AutoSize = false;
                c.Size = cc;
                //  e.Control.Font= new System.Drawing.Font("Tahoma",(float) (c-0.5));
            }
        }
        internal GroupBox groupBox1;
        internal Label Label26;
        private DoubleInput txtDueAmount;
        private GroupBox groupBox2;
        internal Label label8;
        private DoubleInput txtTotalAm;
        private DoubleInput txtDiscountVal;
        private DoubleInput txtDiscountP;
        internal Label label3;
        private DoubleInput txtDiscountValLoc;
        private DoubleInput txtTotalAmLoc;
        private DoubleInput txtDueAmountLoc;
        internal Label label9;
        internal Label label17;
        private ButtonItem buttonItem11;
        private SuperTabControl superTabControl_Main1;
        private ButtonItem buttonItem6;
        private DoubleInput txtTotalQ;
        private MetroTileItem metroTileItem1;
        private PictureBox pictureBox_Cash;
        private PictureBox pictureBox_NetWord;
        protected LabelItem labelItem6;
        private PictureBox pictureBox_Credit;
        private RibbonBar ribbonBar_Tasks;
        private Button button_0;
        private Button button_2;
        private Button button_1;
        private Button button_6;
        private Button button_5;
        private Button button_8;
        private Button button_7;
        private Button button_3;
        private Button button_4;
        private Button button_9;
        private DoubleInput txtInvCost;
        private C1FlexGrid FlxInv;
        private ComboBoxEx CmbLegate;
        internal TextBox textBox_ID;
        internal Label label7;
        internal Label Label2;
        internal Label Label1;
        protected SuperGridControl DGV_Main;
        private PanelEx panelEx3;
        private RibbonBar ribbonBar_DGV;
        private SuperTabControl superTabControl_DGV;
        protected TextBoxItem textBox_search;
        protected ButtonItem Button_ExportTable2;
        protected ButtonItem Button_PrintTable;
        private Panel panel1;
        private PanelEx panelEx2;
        private RibbonBar ribbonBar1;
        private Panel PanelCOntainer;
        private SuperTabItem superTabItem_items;
        private SuperTabItem superTabItem_Pay;
        private SuperTabItem superTabItem_Detiles;
        private SuperTabItem superTabItem_Note;
        private SaveFileDialog saveFileDialog1;
        private ImageList imageList1;
        internal PrintPreviewDialog prnt_prev;
        private PrintDocument prnt_doc;
        private OpenFileDialog openFileDialog1;
        protected ContextMenuStrip contextMenuStrip1;
        protected ContextMenuStrip contextMenuStrip2;
        protected ToolStripMenuItem ToolStripMenuItem_Det;
        protected ToolStripMenuItem ToolStripMenuItem_Rep;
        private Timer timerInfoBallon;
        private DoubleInput textBox1;
        private DoubleInput textBox2;
        private C1FlexGrid FlxDat;
        private DoubleInput txtCustRep;
        private TextBox txtItemName;
        private DoubleInput txtCustNet;
        private TextBoxX txtRef;
        private MaskedTextBox txtTime;
        private MaskedTextBox txtGDate;
        private MaskedTextBox txtHDate;
        private ComboBoxEx CmbInvSide;
        internal TextBox textBox_Sequenc;
        internal Label label29;
        private GalleryContainer galleryContainer1;
        protected ButtonItem ButOption;
        private TextBoxX textBox_Barcode;
        private ButtonX button_SrchMnd;
        private SwitchButtonItem switchButtonItem_OrderSts;
        private ToolStripMenuItem ToolStripMenuItem_TransSales;
        private ToolStripMenuItem ToolStripMenuItem_ProveOrder;
        private ToolStripSeparator toolStripSeparator1;
        private ToolStripSeparator toolStripSeparator_1;
        private ToolStripSeparator toolStripSeparator_2;
        private ToolStripMenuItem ToolStripMenuItem_RemoveOrder;
        private ToolStripMenuItem ToolStripMenuItem_PrintOrder;
        private ToolStripSeparator toolStripSeparator_3;
        private ToolStripMenuItem ToolStripMenuItem_ProveOrderBack;
        private ToolStripSeparator toolStripSeparator2;
        protected ButtonItem buttonItem_RemoveInvWaiter;
        private Timer timer_HoldOrders;
        protected ButtonItem buttonItem_RefreshList;
        private ExpandableSplitter expandableSplitter1;
        public SwitchButtonItem switchButtonItem_IsReturn;
        private DoubleInput txtTotTax;
        private DoubleInput txtTotTaxLoc;
        private SuperTabItem superTabItem_Gaids;
        private C1FlexGrid FlxInvToCopy;
        private ButtonX button_SrchCustPoints;
        private DoubleInput txtDiscoundPointsLoc;
        private DoubleInput txtDiscoundPoints;
        internal Label label43;
        private ButtonX button_SrchInvNoBarcod;
        private FrmInvSalePoint_Branch frmBranch = new FrmInvSalePoint_Branch();
        private bool vQtyGraid = false;
        private bool vPriceGraid = false;
        private bool vDisGraid = false;
        private bool vTotGraid = false;
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.vTax' is assigned but its value is never used
        private bool vTax = false;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.vTax' is assigned but its value is never used
#pragma warning disable CS0169 // The field 'FrmInvSalePoint._Bm' is never used
        private BindingManagerBase _Bm;
#pragma warning restore CS0169 // The field 'FrmInvSalePoint._Bm' is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.vChk' is assigned but its value is never used
        private bool vChk = false;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.vChk' is assigned but its value is never used
        private int orderNo_activate = 0;
        private int ControlNo = 0;
        private int PageSize = 10;
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.PageSizeDet' is assigned but its value is never used
        private int PageSizeDet = 10;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.PageSizeDet' is assigned but its value is never used
        private int CurrentPageIndex = 1;
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.CurrentPageIndexItmDet' is assigned but its value is never used
        private int CurrentPageIndexItmDet = 1;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.CurrentPageIndexItmDet' is assigned but its value is never used
        private int TotalPage = 0;
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.TotalPageDet' is assigned but its value is never used
        private int TotalPageDet = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.TotalPageDet' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.col' is assigned but its value is never used
        private int col = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.col' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.colW' is assigned but its value is never used
        private int colW = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.colW' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.row' is assigned but its value is never used
        private int row = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.row' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.rowH' is assigned but its value is never used
        private int rowH = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.rowH' is assigned but its value is never used
        private DataTable vUnitA = new DataTable();
        private DataTable vUnitE = new DataTable();
        private int RowSel = 0;
        private string oldUnit = string.Empty;
        private string oldItemName = string.Empty;
        private double RateValue = 1.0;
        private int DefPack = 0;
        private double Pack = 0.0;
        private double PriceLoc = 0.0;
        private ScriptNumber ScriptNumber1 = new ScriptNumber();
        private List<int> ItemDetRemoved = new List<int>();
        public Dictionary<string, string> columns_Nams_Sums = new Dictionary<string, string>();
        public Dictionary<string, ColumnDictinary> columns_Names_visible = new Dictionary<string, ColumnDictinary>();
        public Dictionary<string, ColumnDictinary> columns_Names_visible2 = new Dictionary<string, ColumnDictinary>();
        public Dictionary<string, ColumnDictinary> columns_Names_visible_Waiter = new Dictionary<string, ColumnDictinary>();
        private HijriGreg.HijriGregDates n = new HijriGreg.HijriGregDates();
        private string UnitAOld = string.Empty;
        private string UnitEOld = string.Empty;
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.PriceOld' is assigned but its value is never used
        private double PriceOld = 0.0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.PriceOld' is assigned but its value is never used
        private int HoldOrderHold = 0;
        public static int LangArEn = 0;
        public string DocType = string.Empty;
        private T_SYSSETTING _SysSetting = new T_SYSSETTING();
        private List<T_SYSSETTING> listSysSetting = new List<T_SYSSETTING>();
        private T_INVSETTING _InvSetting = new T_INVSETTING();
        private List<T_INVSETTING> listInvSetting = new List<T_INVSETTING>();
        private T_STKSQTY _StksQty = new T_STKSQTY();
        private List<T_STKSQTY> listStkQty = new List<T_STKSQTY>();
        private T_GDHEAD _GdHeadCostTax = new T_GDHEAD();
        private List<T_GDHEAD> listGdHeadCostTax = new List<T_GDHEAD>();
        private List<T_GDDET> listGdDetCostTax = new List<T_GDDET>();
        private T_GDHEAD _GdHeadCostDis = new T_GDHEAD();
        private List<T_GDHEAD> listGdHeadCostDis = new List<T_GDHEAD>();
        private List<T_GDDET> listGdDetCostDis = new List<T_GDDET>();
        private T_GDHEAD _GdHead = new T_GDHEAD();
        private List<T_GDHEAD> listGdHead = new List<T_GDHEAD>();
        private T_GDDET _GdDet = new T_GDDET();
        private List<T_GDDET> listGdDet = new List<T_GDDET>();
        private List<T_QTYEXP> listQtyExp = new List<T_QTYEXP>();
        private T_QTYEXP _QtyExp = new T_QTYEXP();
        private T_Unit _Unit = new T_Unit();
        private List<T_Unit> listUnit = new List<T_Unit>();
        private T_Item _Items = new T_Item();
        private List<T_Item> listItems = new List<T_Item>();
        private T_Store _Store = new T_Store();
        private List<T_Store> listStore = new List<T_Store>();
        private List<T_Curency> listCurency = new List<T_Curency>();
        private T_Curency _Curency = new T_Curency();
        private List<T_GdAuto> listGdAuto = new List<T_GdAuto>();
        private T_GdAuto _GdAuto = new T_GdAuto();
        private T_INVDET _InvDetRet = new T_INVDET();
        private T_INVDET _InvDet = new T_INVDET();
        private T_GDHEAD _GdHeadCostComm = new T_GDHEAD();
        private List<T_GDHEAD> listGdHeadCostComm = new List<T_GDHEAD>();
        private List<T_GDDET> listGdDetCostComm = new List<T_GDDET>();
        private T_INVHED data_this;
        private T_STKSQTY data_this_stkQ;
        private List<T_INVDET> LData_This;
        private T_INVHED data_thisRe;
        private List<T_INVDET> LData_ThisRe;
        private T_INVHED data_this_ORDER1;
        private List<T_INVDET> LData_This_ORDER1;
        private T_INVHED data_this_ORDER2;
        private List<T_INVDET> LData_This_ORDER2;
        private T_INVHED data_this_ORDER3;
        private List<T_INVDET> LData_This_ORDER3;
        private T_INVHED data_this_ORDER4;
        private List<T_INVDET> LData_This_ORDER4;
        private T_INVHED data_this_ORDER5;
        private List<T_INVDET> LData_This_ORDER5;
        public Dictionary<string, ColumnDictinary_ORDERACC> ORDER_ACC = new Dictionary<string, ColumnDictinary_ORDERACC>();
        public bool ifCheckData = false;
        public long TimeFinish = 0L;
        public long TimeStart = 0L;
        public TextBox textBox_Type = new TextBox();
        public List<string> pkeys = new List<string>();
        public bool canUpdate = true;
        protected bool CanInsert = true;
        public FormState statex;
        public ViewState ViewState = ViewState.Deiles;
        public string tableName = string.Empty;
        protected bool ifModify = true;
        public List<Control> controls;
        public Control codeControl = new Control();
        public bool CanEdit = true;
        protected bool ifOkDelete;
        private int iiRntP = 0;
        private int _page = 1;
        private bool ifAutoOrderColumn = true;
        private Stock_DataDataContext dbInstance;
        private Rate_DataDataContext dbInstanceRate;
        private Stock_DataDataContext dbInstanceReturn;
        private T_User permission = new T_User();
        public bool DateSync = false;
        private List<string> _StorePr = new List<string>();
        private bool isPrintSts = false;
        public Dictionary<int, List<T_SINVDET>> vSINVDIT = new Dictionary<int, List<T_SINVDET>>();
        private string DefUnitAx = string.Empty;
        private double Balance_Qty = -1.0;
        private double Balance_Price = -1.0;
        public string ItmMainParameter = string.Empty;
        private int _RowIndex = 0;
        private Dictionary<string, ColumnDictinary> Dir_ButSearch = new Dictionary<string, ColumnDictinary>();
        private int _stsClick = 0;
        private T_INVHED _DataThisORDERS = new T_INVHED();
        private C1FlexGrid GraidORDER1 = new C1FlexGrid();
        private C1FlexGrid GraidORDER2 = new C1FlexGrid();
        private C1FlexGrid GraidORDER3 = new C1FlexGrid();
        private C1FlexGrid GraidORDER4 = new C1FlexGrid();
        private C1FlexGrid GraidORDER5 = new C1FlexGrid();
        private bool _orderLocal = false;
 
        //private ButtonX button_Draft;
        private GroupBox groupBox3;
        // private ButtonX button_Draft;
        private ControlContainerItem controlContainerItem1;
        private Panel HP_TypeOfPayment;
        private TableLayoutPanel tableLayoutPanel1;
        private CheckBoxX checkBox_Credit;
        private CheckBoxX checkBox_NetWork;
        private CheckBoxX checkBox_Chash;
       
        internal Label label45;
        internal Label label46;
        private Softgroup.NetResize.NetResize netResize1;
        private AlertCustom m_AlertOnLoad = null;
        public T_INVHED DataThis
        {
            get
            {
                return data_this;
            }
            set
            {
                data_this = value;
                SetData(data_this);
            }
        }
        public T_STKSQTY DataThis_stkQ
        {
            get
            {
                return data_this_stkQ;
            }
            set
            {
                data_this_stkQ = value;
            }
        }
        public List<T_INVDET> LDataThis
        {
            get
            {
                return LData_This;
            }
            set
            {
                LData_This = value;
            }
        }
        public T_INVHED DataThisRe
        {
            get
            {
                return data_thisRe;
            }
            set
            {
                data_thisRe = value;
                SetDataRt(data_thisRe);
            }
        }
        public List<T_INVDET> LDataThisRe
        {
            get
            {
                return LData_ThisRe;
            }
            set
            {
                LData_ThisRe = value;
            }
        }
        public T_INVHED DataThis_ORDER1
        {
            get
            {
                return data_this_ORDER1;
            }
            set
            {
                data_this_ORDER1 = value;
                SetData(data_this_ORDER1);
            }
        }
        public List<T_INVDET> LDataThis_ORDER1
        {
            get
            {
                return LData_This_ORDER1;
            }
            set
            {
                LData_This_ORDER1 = value;
            }
        }
        public T_INVHED DataThis_ORDER2
        {
            get
            {
                return data_this_ORDER2;
            }
            set
            {
                data_this_ORDER2 = value;
                SetData(data_this_ORDER2);
            }
        }
        public List<T_INVDET> LDataThis_ORDER2
        {
            get
            {
                return LData_This_ORDER2;
            }
            set
            {
                LData_This_ORDER2 = value;
            }
        }
        public T_INVHED DataThis_ORDER3
        {
            get
            {
                return data_this_ORDER3;
            }
            set
            {
                data_this_ORDER3 = value;
                SetData(data_this_ORDER3);
            }
        }
        public List<T_INVDET> LDataThis_ORDER3
        {
            get
            {
                return LData_This_ORDER3;
            }
            set
            {
                LData_This_ORDER3 = value;
            }
        }
        public T_INVHED DataThis_ORDER4
        {
            get
            {
                return data_this_ORDER4;
            }
            set
            {
                data_this_ORDER4 = value;
                SetData(data_this_ORDER4);
            }
        }
        public List<T_INVDET> LDataThis_ORDER4
        {
            get
            {
                return LData_This_ORDER4;
            }
            set
            {
                LData_This_ORDER4 = value;
            }
        }
        public T_INVHED DataThis_ORDER5
        {
            get
            {
                return data_this_ORDER5;
            }
            set
            {
                data_this_ORDER5 = value;
                SetData(data_this_ORDER5);
            }
        }
        public List<T_INVDET> LDataThis_ORDER5
        {
            get
            {
                return LData_This_ORDER5;
            }
            set
            {
                LData_This_ORDER5 = value;
            }
        }
        public List<string> PKeys
        {
            get
            {
                return pkeys;
            }
            set
            {
                pkeys = value;
            }
        }
        protected bool CanUpdate
        {
            get
            {   return canUpdate;
            }
            set
            {
                canUpdate = value;
            }
        }
        public FormState State
        {
            get
            {
                return statex;
            }
            set
            {
                statex = value;
            }
        }
        public string TableName
        {
            get
            {
                return tableName;
            }
            set
            {
                tableName = value;
            }
        }
        public bool IfAdd
        {
            set
            {
                 puBar1.Button_Add.Visibility = (value ? DevExpress.XtraBars.BarItemVisibility.Always : DevExpress.XtraBars.BarItemVisibility.Never);
            }
        }
        public bool IfDelete
        {
            set
            {
                puBar1.Button_Delete.Visibility = (value?DevExpress.XtraBars.BarItemVisibility.Always:DevExpress.XtraBars.BarItemVisibility.Never);
                superTabControl_Main1.Refresh();
            }
        }
        public bool IfSave
        {
            set
            {
                 puBar1.Button_Save.Visibility =(value? DevExpress.XtraBars.BarItemVisibility.Always: DevExpress.XtraBars.BarItemVisibility.Never);
            }
        }
        public bool IfClose
        {
            set
            {
                 puBar1.Button_Close.Visibility = (value ? DevExpress.XtraBars.BarItemVisibility.Always : DevExpress.XtraBars.BarItemVisibility.Never);
            }
        }
        public bool SetReadOnly
        {
            set
            {
                if (value)
                {
                    State = FormState.Saved;
                }
                 puBar1.Button_Save.Enabled = !value;
                if (State == FormState.New)
                {
                    button_AddToTable.Visible = !value;
                }
                else
                {
                    button_AddToTable.Visible = value;
                }
            }
        }
        private Stock_DataDataContext db
        {
            get
            {
                if (dbInstance == null)
                {
                    dbInstance = new Stock_DataDataContext(VarGeneral.BranchCS);
                }
                return dbInstance;
            }
        }
        private Rate_DataDataContext dbc
        {
            get
            {
                if (dbInstanceRate == null)
                {
                    dbInstanceRate = new Rate_DataDataContext(VarGeneral.BranchRt);
                }
                return dbInstanceRate;
            }
        }
        private Stock_DataDataContext dbReturn
        {
            get
            {
                if (dbInstanceReturn == null)
                {
                    dbInstanceReturn = new Stock_DataDataContext(VarGeneral.BranchCS);
                }
                return dbInstanceReturn;
            }
        }
        public T_User Permmission
        {
            get
            {
                return permission;
            }
            set
            {
                if (value != null && value.UsrNo != string.Empty)
                {
                    permission = value;
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 1))
                    {
                        IfAdd = false;
                    }
                    else
                    {
                        IfAdd = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 2))
                    {
                        CanEdit = false;
                    }
                    else
                    {
                        CanEdit = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 3))
                    {
                        IfDelete = false;
                    }
                    else
                    {
                        IfDelete = true;
                    }
                    if (!VarGeneral.TString.ChkStatShow(value.InvStr, 4))
                    {
                        switchButtonItem_IsReturn.Visible = false;
                    }
                    else
                    {
                        switchButtonItem_IsReturn.Visible = true;
                    }
                }
            }
        }


        protected bool Check()
        {
            if (!ifCheckData)
            {
                return true;
            }
            return true;
        }
        public void FillHDGV(IEnumerable<T_INVHED> new_data_enum)
        {
            bool contextMenuSet = false;
            if (contextMenuStrip1.Items.Count > 0)
            {
                contextMenuSet = true;
            }
            for (int i = 0; i < DGV_Main.PrimaryGrid.Columns.Count; i++)
            {
                if (columns_Names_visible_Waiter.ContainsKey(DGV_Main.PrimaryGrid.Columns[i].Name))
                {
                    DGV_Main.PrimaryGrid.Columns[i].AutoSizeMode = ColumnAutoSizeMode.None;
                    DGV_Main.PrimaryGrid.Columns[i].MinimumWidth = 90;
                    DGV_Main.PrimaryGrid.Columns[i].Visible = columns_Names_visible_Waiter[DGV_Main.PrimaryGrid.Columns[i].Name].IfDefault;
                    DGV_Main.PrimaryGrid.Columns[i].HeaderText = ((LangArEn == 0) ? columns_Names_visible_Waiter[DGV_Main.PrimaryGrid.Columns[i].Name].AText : columns_Names_visible_Waiter[DGV_Main.PrimaryGrid.Columns[i].Name].EText);
                    if (!contextMenuSet)
                    {
                        ToolStripMenuItem item = new ToolStripMenuItem();
                        item.Checked = columns_Names_visible_Waiter[DGV_Main.PrimaryGrid.Columns[i].Name].IfDefault;
                        item.CheckOnClick = true;
                        item.Name = DGV_Main.PrimaryGrid.Columns[i].Name;
                        item.Text = DGV_Main.PrimaryGrid.Columns[i].HeaderText;
                        item.CheckedChanged += item_Click;
                        contextMenuStrip1.Items.Add(item);
                    }
                    else
                    {
                        DGV_Main.PrimaryGrid.Columns[i].Visible = (contextMenuStrip1.Items[DGV_Main.PrimaryGrid.Columns[i].Name] as ToolStripMenuItem).Checked;
                    }
                }
                else
                {
                    DGV_Main.PrimaryGrid.Columns[i].Visible = false;
                }
            }
            DGV_Main.PrimaryGrid.DataSource = new_data_enum.ToList();
            DGV_Main.PrimaryGrid.DataMember = "T_INVHED";
        }
        public void FillHDGVQ(IQueryable new_data_enum)
        {
            SetReadOnly = true;
            DGV_Main.PrimaryGrid.DataSource = new_data_enum;
            DGV_Main.PrimaryGrid.DataMember = "T_INVHED";
        }
        private void item_Click(object sender, EventArgs e)
        {
            string name = (sender as ToolStripMenuItem).Name;
            try
            {
                string NameExsist = DGV_Main.PrimaryGrid.Columns[name].Name;
            }
            catch
            {
                DGV_Main.PrimaryGrid.Columns.Add(new GridColumn(name));
                DGV_Main.PrimaryGrid.Columns[name].AutoSizeMode = ColumnAutoSizeMode.None;
                DGV_Main.PrimaryGrid.Columns[name].MinimumWidth = 100;
                DGV_Main.PrimaryGrid.Columns[name].HeaderText = ((LangArEn == 0) ? columns_Names_visible_Waiter[name].AText : columns_Names_visible_Waiter[name].EText);
            }
            DGV_Main.PrimaryGrid.Columns[name].Visible = (sender as ToolStripMenuItem).Checked;
            for (int i = 0; i < DGV_Main.PrimaryGrid.Rows.Count; i++)
            {
                DGV_Main.PrimaryGrid.Rows[i].GridPanel.CheckBoxes = true;
            }
            try
            {
                DGV_Main.PrimaryGrid.SetSelectedCells(1, 0, 1, 1, selected: true);
            }
            catch
            {
            }
        }
        protected bool ContinueIfEditOrNew()
        {
            if (State == FormState.Edit || State == FormState.New)
            {
                if (MessageBox.Show((LangArEn == 0) ? "تم تعديل السجل الحالي دون حفظ التغييرات . هل تريد المتابعة؟" : "Not saved the changes, do you really want to continue?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) != DialogResult.Yes)
                {
                    return false;
                }
                return true;
            }
            return true;
        }
        public void Button_First_Click(object sender, EventArgs e)
        {
            if (ContinueIfEditOrNew())
            {
              puBar1.   TextBox_Index.EditValue= string.Concat(1);
                UpdateVcr();
            }
        }
        public void Button_Prevouse_Click(object sender, EventArgs e)
        {
            if (ContinueIfEditOrNew())
            {
                int index = 0;
                try
                {
                    index = Convert.ToInt32(puBar1.   TextBox_Index.EditValue.ToString());
                }
                catch
                {
                }
                if (index > 1)
                {
                    puBar1.   TextBox_Index.EditValue = string.Concat(index - 1);
                }
                UpdateVcr();
            }
        }
        public void Button_Next_Click(object sender, EventArgs e)
        {
            if (ContinueIfEditOrNew())
            {
                int index = 0;
                int count = 0;
                try
                {
                    index = Convert.ToInt32(puBar1.   TextBox_Index.EditValue);
                }
                catch
                {
                }
                try
                {
                    count = Convert.ToInt32(Label_Count.Text);
                }
                catch
                {
                }
                if (index < count)
                {
                    puBar1.   TextBox_Index.EditValue = string.Concat(index + 1);
                }
                UpdateVcr();
            }
        }
        Label Label_Count = new Label();
        public void Button_Last_Click(object sender, EventArgs e)
        {
            if (ContinueIfEditOrNew())
            {
                puBar1.   TextBox_Index.EditValue = Label_Count.Text;
                UpdateVcr();
            }
        }
        private void UpdateVcr()
        {
            int vCount = 0;
            int vPosition = 0;
            try
            {
                vCount = int.Parse(Label_Count.Text);
            }
            catch
            {
                vCount = 0;
            }
            try
            {
                vPosition = int.Parse(puBar1.   TextBox_Index.EditValue.ToString());
            }
            catch
            {
                vPosition = 0;
            }
            if (vCount <= 1)
            {
                puBar1.Button_First.Enabled = false;
                puBar1.Button_Prev.Enabled = false;
                puBar1. Button_Next.Enabled = false;
                puBar1. Button_Last.Enabled = false;
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    puBar1. lable_Records.Caption = ((vCount == 0) ? "لايوجد سجلات" : "سجل واحد فقط");
                }
                else
                {
                    puBar1. lable_Records.Caption = ((vCount == 0) ? "No records" : "Only Record");
                }
                
                return;
            }
            if (vPosition == 1)
            {
                DevExpress.XtraBars.BarLargeButtonItem Button_First = puBar1.Button_First;
                bool enabled = (puBar1.Button_Prev.Enabled = false);
                puBar1.Button_First.Enabled = enabled;
                DevExpress.XtraBars.BarLargeButtonItem Button_Last = puBar1. Button_Last;
                enabled = (puBar1. Button_Next.Enabled = vCount > 1);
                puBar1. Button_Last.Enabled = enabled;
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    puBar1. lable_Records.Caption = "الأول من " + vCount + " سجلات";
                }
                else
                {
                    puBar1. lable_Records.Caption = "First of " + vCount + " records";
                }
                return;
            }
            if (vPosition == vCount)
            {
                puBar1. Button_Last.Enabled = false;
                puBar1. Button_Next.Enabled = false;
                DevExpress.XtraBars.BarLargeButtonItem Button_First2 = puBar1.Button_First;
                bool enabled = (puBar1.Button_Prev.Enabled = vCount > 1);
             Button_First2.Enabled = enabled;
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    puBar1. lable_Records.Caption = "الأخير من " + vCount + " سجلات";
                }
                else
                {
                    puBar1. lable_Records.Caption = "Last of " + vCount + " records";
                }
                return;
            }
            puBar1.Button_First.Enabled = true;
            puBar1.Button_Prev.Enabled = true;
            puBar1. Button_Next.Enabled = true;
            puBar1. Button_Last.Enabled = true;
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                puBar1. lable_Records.Caption = "السجل " + vPosition + " من " + vCount;
            }
            else
            {
                puBar1. lable_Records.Caption = "Record " + vPosition + " of " + vCount;
            }
        }
        public bool CheckNotificationMassage()
        {
            return false;
        }
        public void ViewDetails_Click(object sender, EventArgs e)
        {
            try
            {
                if (db.FillInvHead_2(21, string.Empty).ToList().Count <= 0)
                {
                    expandableSplitter1.Expandable = false;
                    return;
                }
                expandableSplitter1.Expandable = true;
                DGV_Main.PrimaryGrid.DataSource = null;
                DGV_Main.PrimaryGrid.VirtualMode = false;
                ViewState = ViewState.Deiles;
            }
            catch
            {
            }
        }
        public void ViewTable_Click(object sender, EventArgs e)
        {
            try
            {
                if (db.FillInvHead_2(21, string.Empty).ToList().Count <= 0)
                {
                    expandableSplitter1.Expandable = false;
                    return;
                }
                expandableSplitter1.Expandable = true;
                ViewState = ViewState.Table;
            }
            catch
            {
            }
            Fill_DGV_Main();
            int index = -1;
            try
            {
                index = Convert.ToInt32(puBar1.   TextBox_Index.EditValue);
            }
            catch
            {
                index = -1;
            }
            index--;
            if (index < DGV_Main.PrimaryGrid.Rows.Count && index >= 0)
            {
                DGV_Main.PrimaryGrid.Rows[index].EnsureVisible();
            }
        }
        public void expandableSplitter1_Click(object sender, EventArgs e)
        {
            if (!switchButtonItem_IsReturn.Value)
            {
                if (expandableSplitter1.Expanded)
                {
                    VarGeneral.InvTyp = 21;
                    ViewTable_Click(sender, e);
                }
                else
                {
                    VarGeneral.InvTyp = 1;
                    ViewDetails_Click(sender, e);
                }
            }
        }
        private void Button_Edit_Click(object sender, EventArgs e)
        {
            if (CanEdit && State != FormState.Edit && State != FormState.New && !string.IsNullOrEmpty(textBox_ID.Text))
            {
                if (State != FormState.New)
                {
                    State = FormState.Edit;
                }
                ButOption.Tag = 0;
                SetReadOnly = false;
            }
        }
        public void buttonItem_Print_Click(object sender, EventArgs e)
        {
            try
            {
                VarGeneral.Print_set_Gen_Stat = false;
                if (textBox_ID.Text != string.Empty && State == FormState.Saved)
                {
                    _PrintInv(data_this.InvHed_ID, data_this.SalsManNo);
                }
            }
            catch
            {
                MessageBox.Show((LangArEn == 0) ? "لا توجد حقول للطباعة تأكد من إعدادات الطباعة" : "No printing fields make sure the print settings", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            VarGeneral.Print_set_Gen_Stat = false;
        }
        private int vStr(int vTy)
        {
            if (VarGeneral.InvTyp == 1)
            {
                if (VarGeneral._IsPOS)
                {
                    return 27;
                }
                return 1;
            }
            if (VarGeneral.InvTyp == 1)
            {
                return 1;
            }
            if (VarGeneral.InvTyp == 2)
            {
                return 5;
            }
            if (VarGeneral.InvTyp == 3)
            {
                return 3;
            }
            if (VarGeneral.InvTyp == 4)
            {
                return 7;
            }
            if (VarGeneral.InvTyp == 7)
            {
                return 9;
            }
            if (VarGeneral.InvTyp == 8)
            {
                return 11;
            }
            if (VarGeneral.InvTyp == 9)
            {
                return 13;
            }
            if (VarGeneral.InvTyp == 14)
            {
                return 15;
            }
            if (VarGeneral.InvTyp == 5)
            {
                return 17;
            }
            if (VarGeneral.InvTyp == 6)
            {
                return 19;
            }
            if (VarGeneral.InvTyp == 17)
            {
                return 21;
            }
            if (VarGeneral.InvTyp == 20)
            {
                return 23;
            }
            return 25;
        }
        private void _PrintInv(int _invHd, string _UserNo)
        {
            // if ((_InvSetting.InvpRINTERInfo.nTyp.Substring(0, 1) == "1" && !VarGeneral.TString.ChkStatShow(permission.StopBanner, 2)) || (_InvSetting.InvpRINTERInfo.nTyp.Substring(0, 1) == "0" && VarGeneral.TString.ChkStatShow(permission.StopBanner, 2)))
            {
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = "T_INVDET LEFT OUTER JOIN T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Curency ON T_INVHED.CurTyp = T_Curency.Curency_ID LEFT OUTER JOIN T_CstTbl ON T_INVHED.InvCstNo = T_CstTbl.Cst_ID LEFT OUTER JOIN T_Mndob ON T_INVHED.MndNo = T_Mndob.Mnd_ID LEFT OUTER JOIN T_Items ON T_INVDET.ItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                string vInvH = " T_INVHED.InvHed_ID, T_INVHED.InvId as vID, T_INVHED.InvNo, T_INVHED.InvTyp, T_INVHED.InvCashPay, T_INVHED.CusVenNo,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Arb_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNm,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Eng_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNmE, T_INVHED.CusVenAdd, T_INVHED.CusVenTel, T_INVHED.Remark, T_INVHED.HDat, T_INVHED.GDat, T_INVHED.MndNo, T_INVHED.SalsManNo, T_INVHED.SalsManNam, T_INVHED.InvTot, T_INVHED.InvDisPrs, ((case when IsDisUse1 = 1 then T_INVHED.InvValGaidDis else T_INVHED.InvDisVal end) + T_INVHED.DesPointsValue) as InvDisVal,T_INVHED.InvDisVal as InvDisValOnly,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints, T_INVHED.InvNet, T_INVHED.InvNetLocCur, T_INVHED.CashPayLocCur, T_INVHED.IfRet, T_INVHED.CashPay, T_INVHED.InvTotLocCur, T_INVHED.InvDisValLocCur, T_INVHED.GadeNo, T_INVHED.GadeId, T_INVHED.RetNo, T_INVHED.RetId, T_INVHED.InvCashPayNm, T_INVHED.InvCost, T_INVHED.CustPri, T_INVHED.ArbTaf, T_INVHED.ToStore, T_INVHED.InvCash, T_INVHED.CurTyp, T_INVHED.EstDat,case when DATEDIFF(day, GETDATE(), EstDat) > 0 Then DATEDIFF(day, GETDATE(), EstDat) WHEN DATEDIFF(day, GETDATE(), InvCashPayNm) > 0 THEN DATEDIFF(day, GETDATE(), InvCashPayNm) Else '0' END as EstDatNote, T_INVHED.InvCstNo, T_INVHED.IfDel, T_INVHED.RefNo, T_INVHED.ToStoreNm, T_INVHED.EngTaf, T_INVHED.IfTrans, T_INVHED.InvQty, T_INVHED.CustNet, T_INVHED.CustRep, T_INVHED.InvWight_T, T_INVHED.IfPrint, T_INVHED.LTim, T_INVHED.DATE_CREATED, T_INVHED.MODIFIED_BY, T_INVHED.CreditPay, T_INVHED.DATE_MODIFIED, T_INVHED.CREATED_BY, T_INVHED.CreditPayLocCur, T_INVHED.NetworkPay, T_INVHED.NetworkPayLocCur, T_INVHED.MndExtrnal, T_INVHED.CompanyID, T_INVHED.InvAddCost, T_INVHED.InvAddCostExtrnal, T_INVHED.InvAddCostExtrnalLoc, T_INVHED.IsExtrnalGaid, T_INVHED.ExtrnalCostGaidID, T_INVHED.InvAddCostLoc, T_INVHED.CommMnd_Inv, T_INVHED.Puyaid, T_INVHED.Remming,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.PersonalNm from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as PersonalNm,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.City from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as City,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Email from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Email,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Mobile from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Mobile,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Telphone1 from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Telphone1,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select vColStr1 from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CustAge,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Telphone2 from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Telphone2,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Fax from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Fax,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.zipCod from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as zipCod,T_SYSSETTING.LineGiftlNameA,T_SYSSETTING.LineGiftlNameE,T_Curency.Arb_Des as CurrnceyNm,T_Curency.Eng_Des as CurrnceyNmE,(select max(gdDes)from T_GDDET where gdID = T_INVHED.GadeId )as gdDes, (T_INVDET.Amount - (case when T_INVHED.IsTaxLines = 1 then (case when T_INVHED.IsTaxByTotal = 1 then (case when (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) > 0 then ((Abs(T_INVDET.Qty) *  T_INVDET.Price) - case when (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) > 0 then (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) else 0 end )* T_INVDET.ItmTax / 100   else 0 end) else (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) end) else 0 end )) as TotBeforeTax,(select invGdADesc from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as invGdADesc,(select invGdEDesc from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as invGdEDesc,(select T_CATEGORY.CAT_No from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CAT_No,(select T_CATEGORY.Arb_Des from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CatNmA,(select T_CATEGORY.Eng_Des from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CatNmE,(case when (select t.BarCod1 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit1 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod1 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit1 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt ))  when (select t.BarCod2 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit2 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod2 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit2 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod3 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit3 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod3 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit3 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod4 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit4 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod4 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit4 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod5 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit5 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod5 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit5 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) else T_Items.Itm_No  end) as ItmBarcod";
                string Fields = " Abs(T_INVDET.Qty) as QtyAbs , T_INVDET.InvDet_ID,T_INVHED.tailor1,T_INVHED.tailor2,T_INVHED.tailor3,T_INVHED.tailor4,T_INVHED.tailor5,T_INVHED.tailor6,T_INVHED.tailor7,T_INVHED.tailor8,T_INVHED.tailor9,T_INVHED.tailor10,T_INVHED.tailor11,T_INVHED.tailor12,T_INVHED.tailor13,T_INVHED.tailor14,T_INVHED.tailor15,T_INVHED.tailor16,T_INVHED.tailor17,T_INVHED.tailor18,T_INVHED.tailor19,T_INVHED.tailor20,T_INVHED.InvImg, T_INVDET.InvNo, T_INVDET.InvId, T_INVDET.InvSer, T_INVDET.ItmNo, T_INVDET.Cost, T_INVDET.Qty, T_INVDET.ItmUnt, T_INVDET.ItmDes,T_INVDET.ItmDesE , T_INVDET.ItmUntE, T_INVDET.ItmUntPak, T_INVDET.StoreNo, T_INVDET.Price, T_INVDET.Amount, T_INVDET.RealQty, T_INVDET.ItmTyp,T_INVDET.ItmDis, (Abs(T_INVDET.Qty) *  T_INVDET.Price) * (T_INVDET.ItmDis / 100) as ItmDisVal, T_INVDET.DatExper, T_INVDET.itmInvDsc,ItmIndex," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.LineGiftSts, vStr(VarGeneral.InvTyp)) ? " T_INVDET.ItmWight " : " 0 as ItmWight") + ", T_INVDET.ItmWight_T, T_INVDET.ItmAddCost, T_INVDET.RunCod, T_INVDET.LineDetails ,T_INVDET.Serial_Key, " + vInvH + ", T_Items.* , T_CstTbl.Arb_Des as CstTbl_Arb_Des , T_CstTbl.Eng_Des as CstTbl_Eng_Des , T_Mndob.Arb_Des as Mndob_Arb_Des , T_Mndob.Eng_Des as Mndob_Eng_Des,T_SYSSETTING.LogImg,(select max(T_AccDef.TaxNo) from T_AccDef where T_AccDef.AccDef_No = T_SYSSETTING.TaxAcc) as TaxAcc,T_SYSSETTING.TaxNoteInv,case when T_INVHED.IsTaxLines = 1 then (case when T_INVHED.IsTaxByTotal = 1 then (case when (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) > 0 then ((Abs(T_INVDET.Qty) *  T_INVDET.Price) - case when (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) > 0 then (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) else 0 end )* T_INVDET.ItmTax / 100   else 0 end) else (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) end) else 0 end as TaxValue ,(select InvNamA from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as InvNamA,(select InvNamE from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as InvNamE,(select T_Store.Arb_Des from T_Store where T_Store.Stor_ID = T_INVDET.StoreNo) as StoreNmA,(select T_Store.Eng_Des from T_Store where T_Store.Stor_ID = T_INVDET.StoreNo) as StoreNmE,(select defPrn from T_INVSETTING where CatID = (select ItmCat from T_Items where Itm_No = T_INVDET.ItmNo) ) as defPrn,case when T_INVHED.CusVenNo = '' THEN '0' ELSE (SELECT Sum(T_GDDET.gdValue) FROM T_GDHEAD INNER JOIN  T_GDDET ON T_GDHEAD.gdhead_ID = T_GDDET.gdID where T_GDDET.AccNo = T_INVHED.CusVenNo and T_GDHEAD.gdLok = 0 and (select T_AccDef.AccCat from T_AccDef where T_AccDef.AccDef_No = T_INVHED.CusVenNo) = '4') END as Balanc,T_INVDET.ItmTax,T_INVHED.InvAddTax,T_INVHED.InvAddTaxlLoc,T_INVHED.TaxGaidID,T_INVHED.IsTaxUse,T_INVHED.IsTaxLines,IsTaxByTotal,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.TaxNo from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as TaxCustNo,T_INVHED.OrderTyp," + ((data_this.IsTaxLines.Value && !VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 65)) ? " T_INVHED.InvTotLocCur - T_INVHED.InvAddTax as TotWithTaxPoint " : " T_INVHED.InvTotLocCur as TotWithTaxPoint") + " ,T_INVHED.InvTotLocCur - T_INVHED.InvDisVal as TotBeforeDisVal,T_INVHED.IsTaxByNet,T_INVHED.TaxByNetValue," + (data_this.IsTaxUse.Value ? " T_INVHED.InvNetLocCur - T_INVHED.InvAddTax as NetWithoutTax " : " T_INVHED.InvNetLocCur as NetWithoutTax");
                VarGeneral.HeaderRep[0] = Text;
                VarGeneral.HeaderRep[1] = string.Empty;
                VarGeneral.HeaderRep[2] = string.Empty;
                _RepShow.Rule = " where T_INVHED.InvHed_ID = " + _invHd;
                if (!string.IsNullOrEmpty(Fields))
                {
                    _RepShow.Fields = Fields;
                    try
                    {
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData = _RepShow.RepData;
                        _RepShow = new RepShow();
                        _RepShow.Rule = " WHERE T_Users.UsrNo = '" + _UserNo + "'";
                        _RepShow.Tables = " T_Branch INNER JOIN T_Users ON T_Branch.Branch_no = T_Users.Brn ";
                        _RepShow.Fields = " T_Users.UsrNamA ,T_Branch.Branch_Name ,T_Users.UsrNamE ,T_Branch.Branch_NameE ,T_Users.UsrImg ";
                        try
                        {
                            VarGeneral.RepShowStock_Rat = "Rate";
                            _RepShow = _RepShow.Save();
                            VarGeneral.RepShowStock_Rat = string.Empty;
                        }
                        catch (Exception ex2)
                        {
                            VarGeneral.RepShowStock_Rat = string.Empty;
                            MessageBox.Show(ex2.Message);
                        }
                        _RepShow.RepData.Tables[0].Merge(VarGeneral.RepData.Tables[0]);
                        VarGeneral.RepData = _RepShow.RepData;
                        try
                        {
                            for (int i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                            {
                                if (string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[i]["LogImg"].ToString()))
                                {
                                    VarGeneral.RepData.Tables[0].Rows[i]["LogImg"] = VarGeneral.RepData.Tables[0].Rows[VarGeneral.RepData.Tables[0].Rows.Count - 1]["LogImg"];
                                    VarGeneral.RepData.Tables[0].Rows[i]["LTim"] = VarGeneral.RepData.Tables[0].Rows[VarGeneral.RepData.Tables[0].Rows.Count - 1]["LTim"];
                                }
                            }
                        }
                        catch
                        {
                        }
                        try
                        {
                            if (VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 15))
                            {
                                _RepShow = new RepShow();
                                _RepShow.Tables = "T_SINVDET LEFT OUTER JOIN T_INVHED ON T_SINVDET.SInvIdHEAD = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Curency ON T_INVHED.CurTyp = T_Curency.Curency_ID LEFT OUTER JOIN T_CstTbl ON T_INVHED.InvCstNo = T_CstTbl.Cst_ID LEFT OUTER JOIN T_Mndob ON T_INVHED.MndNo = T_Mndob.Mnd_ID LEFT OUTER JOIN T_Items ON T_SINVDET.SItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                                string vInvH2 = " T_INVHED.InvHed_ID, T_INVHED.InvId as vID, T_INVHED.InvNo, T_INVHED.InvTyp, T_INVHED.InvCashPay, T_INVHED.CusVenNo,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Arb_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNm,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Eng_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNmE, T_INVHED.CusVenAdd, T_INVHED.CusVenTel, T_INVHED.Remark, T_INVHED.HDat, T_INVHED.GDat, T_INVHED.MndNo, T_INVHED.SalsManNo, T_INVHED.SalsManNam, T_INVHED.InvTot, T_INVHED.InvDisPrs, ((case when IsDisUse1 = 1 then T_INVHED.InvValGaidDis else T_INVHED.InvDisVal end) + T_INVHED.DesPointsValue) as InvDisVal,T_INVHED.InvDisVal as InvDisValOnly,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints, T_INVHED.InvNet, T_INVHED.InvNetLocCur, T_INVHED.CashPayLocCur, T_INVHED.IfRet, T_INVHED.CashPay, T_INVHED.InvTotLocCur, T_INVHED.InvDisValLocCur, T_INVHED.GadeNo, T_INVHED.GadeId, T_INVHED.RetNo, T_INVHED.RetId, T_INVHED.InvCashPayNm, T_INVHED.InvCost, T_INVHED.CustPri, T_INVHED.ArbTaf, T_INVHED.ToStore, T_INVHED.InvCash, T_INVHED.CurTyp, T_INVHED.EstDat,case when DATEDIFF(day, GETDATE(), EstDat) > 0 Then DATEDIFF(day, GETDATE(), EstDat) WHEN DATEDIFF(day, GETDATE(), InvCashPayNm) > 0 THEN DATEDIFF(day, GETDATE(), InvCashPayNm) Else '0' END as EstDatNote, T_INVHED.InvCstNo, T_INVHED.IfDel, T_INVHED.RefNo, T_INVHED.ToStoreNm, T_INVHED.EngTaf, T_INVHED.IfTrans, T_INVHED.InvQty, T_INVHED.CustNet, T_INVHED.CustRep, T_INVHED.InvWight_T, T_INVHED.IfPrint, T_INVHED.LTim, T_INVHED.DATE_CREATED, T_INVHED.MODIFIED_BY, T_INVHED.CreditPay, T_INVHED.DATE_MODIFIED, T_INVHED.CREATED_BY, T_INVHED.CreditPayLocCur, T_INVHED.NetworkPay, T_INVHED.NetworkPayLocCur, T_INVHED.MndExtrnal, T_INVHED.CompanyID, T_INVHED.InvAddCost, T_INVHED.InvAddCostExtrnal, T_INVHED.InvAddCostExtrnalLoc, T_INVHED.IsExtrnalGaid, T_INVHED.ExtrnalCostGaidID, T_INVHED.InvAddCostLoc, T_INVHED.CommMnd_Inv, T_INVHED.Puyaid, T_INVHED.Remming,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.PersonalNm from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as PersonalNm,T_SYSSETTING.LineGiftlNameA,T_SYSSETTING.LineGiftlNameE,T_Curency.Arb_Des as CurrnceyNm,T_Curency.Eng_Des as CurrnceyNmE,(select max(gdDes)from T_GDDET where gdID = T_INVHED.GadeId )as gdDes, (T_INVDET.Amount - (case when T_INVHED.IsTaxLines = 1 then (case when T_INVHED.IsTaxByTotal = 1 then (case when (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) > 0 then ((Abs(T_INVDET.Qty) *  T_INVDET.Price) - case when (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) > 0 then (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) else 0 end )* T_INVDET.ItmTax / 100   else 0 end) else (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) end) else 0 end )) as TotBeforeTax,(select invGdADesc from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as invGdADesc,(select invGdEDesc from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as invGdEDesc,(select T_CATEGORY.CAT_No from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CAT_No,(select T_CATEGORY.Arb_Des from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CatNmA,(select T_CATEGORY.Eng_Des from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CatNmE,(case when (select t.BarCod1 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit1 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod1 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit1 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt ))  when (select t.BarCod2 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit2 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod2 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit2 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod3 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit3 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod3 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit3 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod4 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit4 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod4 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit4 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod5 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit5 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod5 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit5 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) else T_Items.Itm_No  end) as ItmBarcod";
                                _RepShow.Fields = " Abs(T_SINVDET.SQty) as QtyAbs , SInvDet_ID as InvId , SInvNo as InvNo, SInvId as InvDet_ID, SInvSer as InvSer,SItmNo as ItmNo, SCost as Cost, SQty as Qty, SItmDes as ItmDes, SItmUnt as ItmUnt, SItmDesE as ItmDesE, SItmUntE as ItmUntE, SItmUntPak as ItmUntPak, SStoreNo as StoreNo, (SPrice * 0) as Price, (SAmount * 0) as Amount, SRealQty as RealQty, SitmInvDsc as itmInvDsc, SDatExper as DatExper, SItmDis as ItmDis, SItmTyp as ItmTyp,SItmIndex as ItmIndex, SItmWight_T as ItmWight_T, SItmWight as ItmWight , " + vInvH2 + " , T_Items.* , T_CstTbl.Arb_Des as CstTbl_Arb_Des , T_CstTbl.Eng_Des as CstTbl_Eng_Des , T_Mndob.Arb_Des as Mndob_Arb_Des , T_Mndob.Eng_Des as Mndob_Eng_Des,T_SYSSETTING.LogImg,(select max(T_AccDef.TaxNo) from T_AccDef where T_AccDef.AccDef_No = T_SYSSETTING.TaxAcc) as TaxAcc,T_SYSSETTING.TaxNoteInv,case when T_INVHED.IsTaxLines = 1 then (case when T_INVHED.IsTaxByTotal = 1 then (case when (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) > 0 then ((Abs(T_INVDET.Qty) *  T_INVDET.Price) - case when (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) > 0 then (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) else 0 end )* T_INVDET.ItmTax / 100   else 0 end) else (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) end) else 0 end as TaxValue";
                                _RepShow.Rule = " where T_INVHED.InvHed_ID = " + _invHd;
                                _RepShow = _RepShow.Save();
                                VarGeneral.RepData.Tables[0].Merge(_RepShow.RepData.Tables[0]);
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch (Exception ex2)
                    {
                        MessageBox.Show(ex2.Message);
                    }
                    if (VarGeneral.RepData.Tables[0].Rows.Count != 0)
                    {
                        try
                        {
                            FrmReportsViewer frm = new FrmReportsViewer();
                            FrmReportsViewer.QRCodeData = Utilites.GetWQRCodeData(DataThis);

                            frm.Repvalue = "InvSal";
                            frm.RepCashier = "InvoiceCachier";
                            frm.Repvalue = "InvSalWtr";
                            frm.RepCashier = "InvoiceCachierWaiter";

                            frm.Tag = LangArEn;
                            if (checkBoxItem_BarCode.Checked)
                            {
                                frm.BarcodSts = true;
                            }
                            else
                            {
                                frm.BarcodSts = false;
                            }
                            if (_InvSetting.InvpRINTERInfo.nTyp.Substring(1, 1) == "1")
                            {
                                frm.Repvalue = "InvSal";
                            }
                            else
                            {

                                frm.RepCashier = "InvoiceCachier";
                            }
                            if (puBar1.ChkA4Cahir.Checked)
                            {
                                if (frm.Repvalue == "InvSal")
                                {

                                    frm.RepCashier = "InvoiceCachier";
                                }
                                else
                                {
                                    frm.Repvalue = "InvSal";
                                }
                                VarGeneral.PrintingSettingGen = new PrintDialog();
                                VarGeneral.prnt_doc_Gen = new PrintDocument(); VarGeneral.PrintingSettingGen.UseEXDialog = true;
                                if (VarGeneral.PrintingSettingGen.ShowDialog() != DialogResult.OK)
                                {
                                    return;
                                }
                                VarGeneral.prnt_doc_Gen.PrinterSettings = VarGeneral.PrintingSettingGen.PrinterSettings;
                                VarGeneral.Print_set_Gen_Stat = true;
                            }
                            VarGeneral.CostCenterlbl = label15.Text.Replace(" :", string.Empty);
                            VarGeneral.Mndoblbl = label18.Text.Replace(" :", string.Empty);
                            VarGeneral.vTitle = Text;
                            if (_InvSetting.InvpRINTERInfo.nTyp.Substring(2, 1) == "1" || checkBoxItem_BarCode.Checked)
                            {
                                frm._Proceess();
                            }
                            else
                            {
                                frm.TopMost = true;
                                frm.ShowDialog();
                            }
                        }
                        catch (Exception error)
                        {
                            VarGeneral.DebLog.writeLog("buttonItem_Print_Click:", error, enable: true);
                            MessageBox.Show(error.Message);
                        }
                    }
                }
            }
            //else
            //{
            //    PrintSet();
            //    prnt_doc.Print();
            //}
            VarGeneral.IsCashCredit = true;
        }
        private void prnt_doc_PrintPage(object sender, PrintPageEventArgs e)
        {
            if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
            {
                return;
            }
            try
            {
                foreach (DataRow r in VarGeneral.RepData.Tables[0].Rows)
                {
                    for (int i = 0; i < r.ItemArray.Count(); i++)
                    {
                        if (r[i].GetType() == typeof(double))
                        {
                            r[i] = Math.Round(double.Parse(r[i].ToString()), VarGeneral.DecimalNo);

                        }

                    }

                }
            }
            catch { }
            List<T_mInvPrint> listmInvPrint = new List<T_mInvPrint>();
            T_mInvPrint _mInvPrint = new T_mInvPrint();
            listmInvPrint = (switchButtonItem_IsReturn.Value ? (from item in db.T_mInvPrints
                                                                where item.repTyp == (int?)3
                                                                where item.repNum == (int?)3
                                                                where item.IsPrint == (int?)1
                                                                select item).ToList() : (from item in db.T_mInvPrints
                                                                                         where item.repTyp == (int?)1
                                                                                         where item.repNum == (int?)3
                                                                                         where item.IsPrint == (int?)1
                                                                                         select item).ToList());
            if (listmInvPrint.Count == 0)
            {
                return;
            }
            e.PageSettings.Margins.Bottom = Convert.ToInt32(_InvSetting.InvpRINTERInfo.hAs);
            e.PageSettings.Margins.Top = Convert.ToInt32(_InvSetting.InvpRINTERInfo.hAl);
            e.PageSettings.Margins.Left = Convert.ToInt32(_InvSetting.InvpRINTERInfo.hYs);
            e.PageSettings.Margins.Right = Convert.ToInt32(_InvSetting.InvpRINTERInfo.hYm);
            e.PageSettings.PrinterSettings.Copies = short.Parse(_InvSetting.InvpRINTERInfo.DefLines.Value.ToString());
            double _isRows = 0.0;
            float _Row = 0f;
            double _PageLine = _InvSetting.InvpRINTERInfo.lnPg.Value;
            double _LineSp = _InvSetting.InvpRINTERInfo.lnSpc.Value;
            int _PageCount = Convert.ToInt32((double)VarGeneral.RepData.Tables[0].Rows.Count / _PageLine);
            double _VPage = (double)VarGeneral.RepData.Tables[0].Rows.Count / _PageLine;
            StringFormat strformat = new StringFormat((StringFormatFlags)0, 1);
            if (_VPage - (double)_PageCount != 0.0)
            {
                _PageCount++;
            }
            for (int iiRnt = iiRntP; iiRnt < VarGeneral.RepData.Tables[0].Rows.Count; iiRnt++)
            {
                for (int iiCnt = 0; iiCnt < listmInvPrint.Count; iiCnt++)
                {
                    _mInvPrint = listmInvPrint[iiCnt];
                    if (_mInvPrint.pField == "Table.LogImg")
                    {
                        try
                        {
                            FrmReportsViewer.QRCodeData = Utilites.GetWQRCodeData(DataThis);
                            //  if (VarGeneral.RepData.Tables[0].Rows[iiRnt][_mInvPrint.pField] != null)
                            {
                                e.Graphics.DrawImage(byteArrayToImage(Utilites.qrcodeimage()), (int)_mInvPrint.vRow, (int)_mInvPrint.vCol, 50f, 50f);

                            }
                        }
                        catch (Exception error4)
                        {
                            VarGeneral.DebLog.writeLog("Print QRCODE:", error4, enable: true);
                        }
                        continue;

                    }


                    if (!(_mInvPrint.vFont != "0") || _mInvPrint.vSize.Value == 0)
                    {
                        continue;
                    }
                    strformat.FormatFlags = StringFormatFlags.DirectionRightToLeft;
                    if (_mInvPrint.vEt.Value == 0)
                    {
                        strformat.Alignment = StringAlignment.Near;
                    }
                    else if (_mInvPrint.vEt.Value == 1)
                    {
                        strformat.Alignment = StringAlignment.Far;
                    }
                    else if (_mInvPrint.vEt.Value == 2)
                    {
                        strformat.Alignment = StringAlignment.Center;
                    }
                    if (_mInvPrint.uChr == "mm")
                    {
                        e.Graphics.PageUnit = GraphicsUnit.Millimeter;
                    }
                    else if (_mInvPrint.uChr == "doc")
                    {
                        e.Graphics.PageUnit = GraphicsUnit.Document;
                    }
                    else if (_mInvPrint.uChr == "in")
                    {
                        e.Graphics.PageUnit = GraphicsUnit.Inch;
                    }
                    else if (_mInvPrint.uChr == "point")
                    {
                        e.Graphics.PageUnit = GraphicsUnit.Point;
                    }
                    else if (_mInvPrint.uChr == "pixel")
                    {
                        e.Graphics.PageUnit = GraphicsUnit.Pixel;
                    }
                    Font _font = new Font(_mInvPrint.vFont, _mInvPrint.vSize.Value, e.Graphics.PageUnit);
                    if (_mInvPrint.vBold.Value == 1)
                    {
                        _font = new Font(_mInvPrint.vFont, _mInvPrint.vSize.Value, FontStyle.Bold, e.Graphics.PageUnit);
                    }
                    _Row = ((_mInvPrint.IsPrntHd.Value != 1) ? ((float)_mInvPrint.vRow.Value) : ((float)_mInvPrint.vRow.Value + (float)_isRows));
                    string strfiled = string.Empty;
                    strfiled = ((!(_mInvPrint.pField == "PageNo")) ? VarGeneral.TString.TEmpty_Stock(string.Concat(VarGeneral.RepData.Tables[0].Rows[iiRnt][_mInvPrint.pField])) : (_page + " / " + _PageCount));
                    Point loc = new Point(50, 50);
                    if (_mInvPrint.pField == "InvImg")
                    {
                        try
                        {
                            if (File.Exists(Application.StartupPath + "\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "Loc.txt"))
                            {
                                FileInfo file = new FileInfo(Application.StartupPath + "\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "Loc.txt");
                                FileStream fsToRead = file.Open(FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                                StreamReader sr = new StreamReader(fsToRead);
                                string[] script = sr.ReadToEnd().Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                                sr.Close();
                                loc = new Point(int.Parse(script[0]), int.Parse(script[1]));
                            }
                        }
                        catch
                        {
                            new Point(50, 50);
                        }
                    }
                    if (_mInvPrint.IsPrntHd == 1)
                    {
                        if (_mInvPrint.pField == "ItmNo")
                        {
                            StringFormat stringFormat = new StringFormat();
                            stringFormat.Alignment = StringAlignment.Far;
                            StringFormat format = stringFormat;
                            e.Graphics.DrawString(strfiled, _font, Brushes.Black, _mInvPrint.vCol.Value, _Row, format);
                        }
                        else if (_mInvPrint.pField == "InvImg")
                        {
                            try
                            {
                                if (VarGeneral.RepData.Tables[0].Rows[iiRnt][_mInvPrint.pField] != null)
                                {
                                    e.Graphics.DrawImage(byteArrayToImage(data_this.InvImg.ToArray()), _mInvPrint.vCol.Value, _Row, loc.X, loc.Y);
                                }
                            }
                            catch (Exception error4)
                            {
                                VarGeneral.DebLog.writeLog("Print ImageInv:", error4, enable: true);
                            }
                        }
                        else
                        {
                            e.Graphics.DrawString(strfiled, _font, Brushes.Black, _mInvPrint.vCol.Value, _Row, strformat);
                        }
                        continue;
                    }
                    int? nTyp = _mInvPrint.nTyp;
                    if (nTyp.Value == 0 && nTyp.HasValue && _isRows == 0.0)
                    {
                        if (_mInvPrint.pField == "InvImg")
                        {
                            try
                            {
                                if (VarGeneral.RepData.Tables[0].Rows[iiRnt][_mInvPrint.pField] != null)
                                {
                                    e.Graphics.DrawImage(byteArrayToImage(data_this.InvImg.ToArray()), _mInvPrint.vCol.Value, _Row, loc.X, loc.Y);
                                }
                            }
                            catch (Exception error4)
                            {
                                VarGeneral.DebLog.writeLog("Print ImageInv:", error4, enable: true);
                            }
                        }
                        else
                        {
                            e.Graphics.DrawString(strfiled, _font, Brushes.Black, _mInvPrint.vCol.Value, _Row, strformat);
                        }
                    }
                    else if (_mInvPrint.nTyp == 1 && _page == 1)
                    {
                        if (_mInvPrint.pField == "InvImg")
                        {
                            try
                            {
                                if (VarGeneral.RepData.Tables[0].Rows[iiRnt][_mInvPrint.pField] != null)
                                {
                                    e.Graphics.DrawImage(byteArrayToImage(data_this.InvImg.ToArray()), _mInvPrint.vCol.Value, _Row, loc.X, loc.Y);
                                }
                            }
                            catch (Exception error4)
                            {
                                VarGeneral.DebLog.writeLog("Print ImageInv:", error4, enable: true);
                            }
                        }
                        else
                        {
                            e.Graphics.DrawString(strfiled, _font, Brushes.Black, _mInvPrint.vCol.Value, _Row, strformat);
                        }
                    }
                    else
                    {
                        if (_mInvPrint.nTyp != 2 || _page != _PageCount)
                        {
                            continue;
                        }
                        if (_mInvPrint.pField == "InvImg")
                        {
                            try
                            {
                                if (VarGeneral.RepData.Tables[0].Rows[iiRnt][_mInvPrint.pField] != null)
                                {
                                    e.Graphics.DrawImage(byteArrayToImage(data_this.InvImg.ToArray()), _mInvPrint.vCol.Value, _Row, loc.X, loc.Y);
                                }
                            }
                            catch (Exception error4)
                            {
                                VarGeneral.DebLog.writeLog("Print ImageInv:", error4, enable: true);
                            }
                        }
                        else
                        {
                            e.Graphics.DrawString(strfiled, _font, Brushes.Black, _mInvPrint.vCol.Value, _Row, strformat);
                        }
                    }
                }
                _isRows += _InvSetting.InvpRINTERInfo.lnSpc.Value;
                if ((double)(iiRnt + 1) >= (double)_page * _PageLine)
                {
                    _page++;
                    _isRows = 0.0;
                    iiRntP = iiRnt + 1;
                    if (_page <= _PageCount)
                    {
                        e.HasMorePages = true;
                        return;
                    }
                }
            }
            e.HasMorePages = false;
        }
        public Image byteArrayToImage(byte[] byteArrayIn)
        {
            try
            {
                MemoryStream ms = new MemoryStream(byteArrayIn);
                return Image.FromStream(ms);
            }
            catch
            {
                return null;
            }
        }
        private void prnt_doc_BeginPrint(object sender, PrintEventArgs e)
        {
            if (!(textBox_ID.Text != string.Empty))
            {
                return;
            }
            RepShow _RepShow = new RepShow();
            _RepShow.Tables = "T_INVDET LEFT OUTER JOIN T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Curency ON T_INVHED.CurTyp = T_Curency.Curency_ID LEFT OUTER JOIN T_CstTbl ON T_INVHED.InvCstNo = T_CstTbl.Cst_ID LEFT OUTER JOIN T_Mndob ON T_INVHED.MndNo = T_Mndob.Mnd_ID LEFT OUTER JOIN T_Items ON T_INVDET.ItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
            string vInvH = " T_INVHED.InvHed_ID, T_INVHED.InvId as vID, T_INVHED.InvNo, T_INVHED.CusVenMob as Mobile1,T_INVHED.InvTyp, T_INVHED.InvCashPay, T_INVHED.CusVenNo,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Arb_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNm,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Eng_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNmE, T_INVHED.CusVenAdd, T_INVHED.CusVenTel, T_INVHED.Remark, T_INVHED.HDat, T_INVHED.GDat, T_INVHED.MndNo, T_INVHED.SalsManNo, T_INVHED.SalsManNam, T_INVHED.InvTot, T_INVHED.InvDisPrs, ((case when IsDisUse1 = 1 then T_INVHED.InvValGaidDis else T_INVHED.InvDisVal end) + T_INVHED.DesPointsValue) as InvDisVal,T_INVHED.InvDisVal as InvDisValOnly,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints, T_INVHED.InvNet, T_INVHED.InvNetLocCur, T_INVHED.CashPayLocCur, T_INVHED.IfRet, T_INVHED.CashPay, T_INVHED.InvTotLocCur, T_INVHED.InvDisValLocCur, T_INVHED.GadeNo, T_INVHED.GadeId, T_INVHED.RetNo, T_INVHED.RetId, T_INVHED.InvCashPayNm, T_INVHED.InvCost, T_INVHED.CustPri, T_INVHED.ArbTaf, T_INVHED.ToStore, T_INVHED.InvCash, T_INVHED.CurTyp, T_INVHED.EstDat,case when DATEDIFF(day, GETDATE(), EstDat) > 0 Then DATEDIFF(day, GETDATE(), EstDat) WHEN DATEDIFF(day, GETDATE(), InvCashPayNm) > 0 THEN DATEDIFF(day, GETDATE(), InvCashPayNm) Else '0' END as EstDatNote, T_INVHED.InvCstNo, T_INVHED.IfDel, T_INVHED.RefNo, T_INVHED.ToStoreNm, T_INVHED.EngTaf, T_INVHED.IfTrans, T_INVHED.InvQty, T_INVHED.CustNet, T_INVHED.CustRep, T_INVHED.InvWight_T, T_INVHED.IfPrint, T_INVHED.LTim, T_INVHED.DATE_CREATED, T_INVHED.MODIFIED_BY, T_INVHED.CreditPay, T_INVHED.DATE_MODIFIED, T_INVHED.CREATED_BY, T_INVHED.CreditPayLocCur, T_INVHED.NetworkPay, T_INVHED.NetworkPayLocCur, T_INVHED.MndExtrnal, T_INVHED.CompanyID, T_INVHED.InvAddCost, T_INVHED.InvAddCostExtrnal, T_INVHED.InvAddCostExtrnalLoc, T_INVHED.IsExtrnalGaid, T_INVHED.ExtrnalCostGaidID, T_INVHED.InvAddCostLoc, T_INVHED.CommMnd_Inv, T_INVHED.Puyaid, T_INVHED.Remming,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.PersonalNm from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as PersonalNm,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.City from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as City,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Email from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Email,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Mobile from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Mobile,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Telphone1 from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Telphone1,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select vColStr1 from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CustAge,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Telphone2 from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Telphone2,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Fax from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Fax,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.zipCod from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as zipCod,T_SYSSETTING.LineGiftlNameA,T_SYSSETTING.LineGiftlNameE,T_Curency.Arb_Des as CurrnceyNm,T_Curency.Eng_Des as CurrnceyNmE,(select max(gdDes)from T_GDDET where gdID = T_INVHED.GadeId )as gdDes, (T_INVDET.Amount - (case when T_INVHED.IsTaxLines = 1 then (case when T_INVHED.IsTaxByTotal = 1 then (case when (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) > 0 then ((Abs(T_INVDET.Qty) *  T_INVDET.Price) - case when (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) > 0 then (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) else 0 end )* T_INVDET.ItmTax / 100   else 0 end) else (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) end) else 0 end )) as TotBeforeTax,(select invGdADesc from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as invGdADesc,(select invGdEDesc from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as invGdEDesc,(select T_CATEGORY.CAT_No from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CAT_No,(select T_CATEGORY.Arb_Des from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CatNmA,(select T_CATEGORY.Eng_Des from T_CATEGORY where T_CATEGORY.CAT_ID = T_Items.ItmCat) as CatNmE,(case when (select t.BarCod1 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit1 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod1 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit1 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt ))  when (select t.BarCod2 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit2 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod2 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit2 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod3 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit3 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod3 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit3 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod4 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit4 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod4 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit4 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) when (select t.BarCod5 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit5 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) != '' then (select t.BarCod5 from T_Items t where t.Itm_No = T_INVDET.ItmNo and t.Unit5 = (select max(e.Unit_ID) from T_Unit e where e.Arb_Des = T_INVDET.ItmUnt )) else T_Items.Itm_No  end) as ItmBarcod";
            string Fields = " Abs(T_INVDET.Qty) as QtyAbs , T_INVDET.InvDet_ID,T_INVHED.tailor1,T_INVHED.tailor2,T_INVHED.tailor3,T_INVHED.tailor4,T_INVHED.tailor5,T_INVHED.tailor6,T_INVHED.tailor7,T_INVHED.tailor8,T_INVHED.tailor9,T_INVHED.tailor10,T_INVHED.tailor11,T_INVHED.tailor12,T_INVHED.tailor13,T_INVHED.tailor14,T_INVHED.tailor15,T_INVHED.tailor16,T_INVHED.tailor17,T_INVHED.tailor18,T_INVHED.tailor19,T_INVHED.tailor20,T_INVHED.InvImg, T_INVDET.InvNo, T_INVDET.InvId, T_INVDET.InvSer, T_INVDET.ItmNo, T_INVDET.Cost, T_INVDET.Qty, T_INVDET.ItmUnt, T_INVDET.ItmDes,T_INVDET.ItmDesE , T_INVDET.ItmUntE, T_INVDET.ItmUntPak, T_INVDET.StoreNo, T_INVDET.Price, T_INVDET.Amount, T_INVDET.RealQty, T_INVDET.ItmTyp,T_INVDET.ItmDis, (Abs(T_INVDET.Qty) *  T_INVDET.Price) * (T_INVDET.ItmDis / 100) as ItmDisVal, T_INVDET.DatExper, T_INVDET.itmInvDsc,ItmIndex," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.LineGiftSts, vStr(VarGeneral.InvTyp)) ? " T_INVDET.ItmWight " : " 0 as ItmWight") + ", T_INVDET.ItmWight_T, T_INVDET.ItmAddCost, T_INVDET.RunCod, T_INVDET.LineDetails ,T_INVDET.Serial_Key, " + vInvH + ", T_Items.* , T_CstTbl.Arb_Des as CstTbl_Arb_Des , T_CstTbl.Eng_Des as CstTbl_Eng_Des , T_Mndob.Arb_Des as Mndob_Arb_Des , T_Mndob.Eng_Des as Mndob_Eng_Des,T_SYSSETTING.LogImg,(select max(T_AccDef.TaxNo) from T_AccDef where T_AccDef.AccDef_No = T_SYSSETTING.TaxAcc) as TaxAcc,T_SYSSETTING.TaxNoteInv,case when T_INVHED.IsTaxLines = 1 then (case when T_INVHED.IsTaxByTotal = 1 then (case when (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) > 0 then ((Abs(T_INVDET.Qty) *  T_INVDET.Price) - case when (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) > 0 then (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) else 0 end )* T_INVDET.ItmTax / 100   else 0 end) else (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) end) else 0 end as TaxValue ,(select InvNamA from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as InvNamA,(select InvNamE from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as InvNamE,(select T_Store.Arb_Des from T_Store where T_Store.Stor_ID = T_INVDET.StoreNo) as StoreNmA,(select T_Store.Eng_Des from T_Store where T_Store.Stor_ID = T_INVDET.StoreNo) as StoreNmE,(select defPrn from T_INVSETTING where CatID = (select ItmCat from T_Items where Itm_No = T_INVDET.ItmNo) ) as defPrn,case when T_INVHED.CusVenNo = '' THEN '0' ELSE (SELECT Sum(T_GDDET.gdValue) FROM T_GDHEAD INNER JOIN  T_GDDET ON T_GDHEAD.gdhead_ID = T_GDDET.gdID where T_GDDET.AccNo = T_INVHED.CusVenNo and T_GDHEAD.gdLok = 0 and (select T_AccDef.AccCat from T_AccDef where T_AccDef.AccDef_No = T_INVHED.CusVenNo) = '4') END as Balanc,T_INVDET.ItmTax,T_INVHED.InvAddTax,T_INVHED.InvAddTaxlLoc,T_INVHED.TaxGaidID,T_INVHED.IsTaxUse,T_INVHED.IsTaxLines,IsTaxByTotal,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.TaxNo from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as TaxCustNo,T_INVHED.OrderTyp," + ((data_this.IsTaxLines.Value && !VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 65)) ? " T_INVHED.InvTotLocCur - T_INVHED.InvAddTax as TotWithTaxPoint " : " T_INVHED.InvTotLocCur as TotWithTaxPoint") + " ,T_INVHED.InvTotLocCur - T_INVHED.InvDisVal as TotBeforeDisVal,T_INVHED.IsTaxByNet,T_INVHED.TaxByNetValue," + (data_this.IsTaxUse.Value ? " T_INVHED.InvNetLocCur - T_INVHED.InvAddTax as NetWithoutTax " : " T_INVHED.InvNetLocCur as NetWithoutTax");
            VarGeneral.HeaderRep[0] = Text;
            VarGeneral.HeaderRep[1] = string.Empty;
            VarGeneral.HeaderRep[2] = string.Empty;
            _RepShow.Rule = " where T_INVHED.InvHed_ID = " + data_this.InvHed_ID;
            if (string.IsNullOrEmpty(Fields))
            {
                return;
            }
            _RepShow.Fields = Fields;
            try
            {
                _RepShow = _RepShow.Save();
                VarGeneral.RepData = _RepShow.RepData;
                _RepShow = new RepShow();
                _RepShow.Rule = " WHERE T_Users.UsrNo = '" + data_this.SalsManNo + "'";
                _RepShow.Tables = " T_Branch INNER JOIN T_Users ON T_Branch.Branch_no = T_Users.Brn ";
                _RepShow.Fields = " T_Users.UsrNamA ,T_Branch.Branch_Name ,T_Users.UsrNamE ,T_Branch.Branch_NameE ,T_Users.UsrImg ";
                try
                {
                    VarGeneral.RepShowStock_Rat = "Rate";
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepShowStock_Rat = string.Empty;
                }
                catch (Exception ex2)
                {
                    VarGeneral.RepShowStock_Rat = string.Empty;
                    MessageBox.Show(ex2.Message);
                }
                try
                {
                    for (int i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                    {
                        if (string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[i]["LogImg"].ToString()))
                        {
                            VarGeneral.RepData.Tables[0].Rows[i]["LogImg"] = VarGeneral.RepData.Tables[0].Rows[VarGeneral.RepData.Tables[0].Rows.Count - 1]["LogImg"];
                            VarGeneral.RepData.Tables[0].Rows[i]["LTim"] = VarGeneral.RepData.Tables[0].Rows[VarGeneral.RepData.Tables[0].Rows.Count - 1]["LTim"];
                        }
                    }
                }
                catch
                {
                }
                try
                {
                    for (int i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                    {
                        try
                        {
                            VarGeneral.RepData.Tables[0].Rows[i]["SalsManNam"] = _RepShow.RepData.Tables[0].Rows[0][(LangArEn == 0) ? "UsrNamA" : "UsrNamE"];
                        }
                        catch
                        {
                        }
                        try
                        {
                            VarGeneral.RepData.Tables[0].Rows[i]["Mobile"] = (VarGeneral.RepData.Tables[0].Rows[i]["Mobile"].ToString() == "" ? VarGeneral.RepData.Tables[0].Rows[i]["Mobile1"] : VarGeneral.RepData.Tables[0].Rows[i]["Mobile"]);
                        }
                        catch
                        {
                        }

                    }

                }
                catch
                {
                }
                try
                {
                    if (VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 15))
                    {
                        _RepShow = new RepShow();
                        _RepShow.Rule = string.Empty;
                        _RepShow.Tables = "T_SINVDET LEFT OUTER JOIN T_INVHED ON T_SINVDET.SInvIdHEAD = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Curency ON T_INVHED.CurTyp = T_Curency.Curency_ID LEFT OUTER JOIN T_CstTbl ON T_INVHED.InvCstNo = T_CstTbl.Cst_ID LEFT OUTER JOIN T_Mndob ON T_INVHED.MndNo = T_Mndob.Mnd_ID LEFT OUTER JOIN T_Items ON T_SINVDET.SItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                        string vInvH2 = " T_INVHED.InvHed_ID, T_INVHED.InvId, T_INVHED.InvNo, T_INVHED.InvTyp, T_INVHED.InvCashPay, T_INVHED.CusVenNo,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE " + ((LangArEn == 0) ? "(select T_AccDef.Arb_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo)" : "(select T_AccDef.Eng_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo)") + " END as CusVenNm, T_INVHED.CusVenAdd, T_INVHED.CusVenTel, T_INVHED.Remark, T_INVHED.HDat, T_INVHED.GDat, T_INVHED.MndNo, T_INVHED.SalsManNo, T_INVHED.SalsManNam, T_INVHED.InvTot, T_INVHED.InvDisPrs, ((case when IsDisUse1 = 1 then T_INVHED.InvValGaidDis else T_INVHED.InvDisVal end) + T_INVHED.DesPointsValue) as InvDisVal,T_INVHED.InvDisVal as InvDisValOnly,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints, T_INVHED.InvNet, T_INVHED.InvNetLocCur, T_INVHED.CashPayLocCur, T_INVHED.IfRet, T_INVHED.CashPay, T_INVHED.InvTotLocCur, T_INVHED.InvDisValLocCur, T_INVHED.GadeNo, T_INVHED.GadeId, T_INVHED.RetNo, T_INVHED.RetId, T_INVHED.InvCashPayNm, T_INVHED.InvCost, T_INVHED.CustPri, T_INVHED.ArbTaf, T_INVHED.ToStore, T_INVHED.InvCash, T_INVHED.CurTyp, T_INVHED.EstDat, T_INVHED.InvCstNo, T_INVHED.IfDel, T_INVHED.RefNo, T_INVHED.ToStoreNm, T_INVHED.EngTaf, T_INVHED.IfTrans, T_INVHED.InvQty, T_INVHED.CustNet, T_INVHED.CustRep, T_INVHED.InvWight_T, T_INVHED.IfPrint, T_INVHED.LTim, T_INVHED.DATE_CREATED, T_INVHED.MODIFIED_BY, T_INVHED.CreditPay, T_INVHED.DATE_MODIFIED, T_INVHED.CREATED_BY, T_INVHED.CreditPayLocCur, T_INVHED.NetworkPay, T_INVHED.NetworkPayLocCur, T_INVHED.MndExtrnal, T_INVHED.CompanyID, T_INVHED.InvAddCost, T_INVHED.InvAddCostExtrnal, T_INVHED.InvAddCostExtrnalLoc, T_INVHED.IsExtrnalGaid, T_INVHED.ExtrnalCostGaidID, T_INVHED.InvAddCostLoc, T_INVHED.CommMnd_Inv, T_INVHED.Puyaid, T_INVHED.Remming,(select InvNamA from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as InvNamA,(select InvNamE from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as InvNamE ,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Mobile from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Mobile";
                        _RepShow.Fields = " Abs(T_SINVDET.SQty) as QtyAbs , SInvDet_ID as InvId, SInvNo as InvNo, SInvId as InvDet_ID, SInvSer as InvSer,SItmNo as ItmNo, SCost as Cost, SQty as Qty, SItmDes as ItmDes, SItmUnt as ItmUnt, SItmDesE as ItmDesE, SItmUntE as ItmUntE, SItmUntPak as ItmUntPak, SStoreNo as StoreNo, (SPrice * 0) as Price, (SAmount * 0) as Amount, SRealQty as RealQty, SitmInvDsc as itmInvDsc, SDatExper as DatExper, SItmDis as ItmDis, SItmTyp as ItmTyp,SItmIndex as ItmIndex, SItmWight_T as ItmWight_T, SItmWight as ItmWight , " + vInvH2 + " , T_Items.* , T_CstTbl.Arb_Des as CstTbl_Arb_Des , T_CstTbl.Eng_Des as CstTbl_Eng_Des , T_Mndob.Arb_Des as Mndob_Arb_Des , T_Mndob.Eng_Des as Mndob_Eng_Des,T_SYSSETTING.LogImg,(select max(T_AccDef.TaxNo) from T_AccDef where T_AccDef.AccDef_No = T_SYSSETTING.TaxAcc) as TaxAcc,T_SYSSETTING.TaxNoteInv,case when T_INVHED.IsTaxLines = 1 then (case when T_INVHED.IsTaxByTotal = 1 then (case when (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) > 0 then ((Abs(T_INVDET.Qty) *  T_INVDET.Price) - case when (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) > 0 then (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) else 0 end )* T_INVDET.ItmTax / 100   else 0 end) else (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) end) else 0 end as TaxValue";
                        _RepShow.Rule = " where T_INVHED.InvHed_ID = " + data_this.InvHed_ID;
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData.Tables[0].Merge(_RepShow.RepData.Tables[0]);
                    }
                }
                catch
                {
                }
                iiRntP = 0;
                _page = 1;
            }
            catch (Exception ex2)
            {
                MessageBox.Show(ex2.Message);
            }
        }
        private void PrintSet()
        {
            string _PrinterName = prnt_doc.PrinterSettings.PrinterName;
            prnt_doc.PrinterSettings.PrinterName = _InvSetting.defPrn;
            if (!prnt_doc.PrinterSettings.IsValid)
            {
                prnt_doc.PrinterSettings.PrinterName = _PrinterName;
            }
            if (_InvSetting.Orientation == 1)
            {
                prnt_doc.PrinterSettings.DefaultPageSettings.Landscape = false;
            }
            else
            {
                prnt_doc.PrinterSettings.DefaultPageSettings.Landscape = true;
            }
        }
        private void Button_Close_Click(object sender, EventArgs e)
        {
            Close();
        }
        private void textBox_ID_Click(object sender, EventArgs e)
        {
            textBox_ID.SelectAll();
        }
        private void textBox_ID_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsNumber(e.KeyChar) & (e.KeyChar != '\b'))
            {
                e.Handled = true;
            }
        }
      Controls.POS.POS_ItemsPanel poS_ItemsPanel1;
        public FrmInvSalePoint()
        {
            InitializeComponent();
            button14.Click += Butdton_41;
            button20.Click += adsfasdfasd;
            flxinitate();
            poS_ItemsPanel1 = new Controls.POS.POS_ItemsPanel();
            poS_ItemsPanel1.Dock = DockStyle.Fill;
            PanelCOntainer.Controls.Add(poS_ItemsPanel1);
            puBar1.printersetting.ItemClick += PrinterSettings_ItemClick;
            txtTotTax.ValueChanged += TaxChanged_Changed;
            if (ButOption == null) ButOption = new ButtonItem();
            poS_ItemsPanel1.Product_Click += product_Click;
          //  poS_ItemsPanel1.OpenCasher_Click += button_openCasheir2;
            this.switchButtonItem_IsReturn = new DevComponents.DotNetBar.SwitchButtonItem();
            this.switchButtonItem_IsReturn.ButtonHeight = 44;
            this.switchButtonItem_IsReturn.ButtonWidth = 90;
            this.switchButtonItem_IsReturn.Name = "switchButtonItem_IsReturn";
            this.switchButtonItem_IsReturn.OffText = "مبيعات";
            this.switchButtonItem_IsReturn.OnText = "مرتجعات";
            this.switchButtonItem_IsReturn.Stretch = true;
            this.switchButtonItem_IsReturn.SwitchWidth = 25;
            this.switchButtonItem_IsReturn.ValueChanged += new System.EventHandler(this.switchButtonItem_IsReturn_ValueChanged);
            // 
            HP_CustDetails.Height += 40;
            textBox_ID.KeyPress += textBox_ID_KeyPress;
            switchButton_PointActiv.Click += Button_Edit_Click;
            textBox_ID.Click += Button_Edit_Click;
            textBox1.Click += Button_Edit_Click;
            textBox2.Click += Button_Edit_Click;
            textBox_Type.Click += Button_Edit_Click;
            txtAddress.Click += Button_Edit_Click;
            txtCustName.Click += Button_Edit_Click;
            txtCustNet.Click += Button_Edit_Click;
            txtCustNo.Click += Button_Edit_Click;
            textBox_WaiterName.Click += Button_Edit_Click;
            txtDebit1.Click += Button_Edit_Click;
            txtDebit2.Click += Button_Edit_Click;
            txtDebit3.Click += Button_Edit_Click;
            txtCredit1.Click += Button_Edit_Click;
            txtCredit2.Click += Button_Edit_Click;
            txtCredit3.Click += Button_Edit_Click;
            txtDebit1.Click += Button_Edit_Click;
            txtDebit2.Click += Button_Edit_Click;
            txtDebit3.Click += Button_Edit_Click;
            txtCredit1.Click += Button_Edit_Click;
            txtCredit2.Click += Button_Edit_Click;
            txtCredit3.Click += Button_Edit_Click;
            txtCustRep.Click += Button_Edit_Click;
            txtDiscountP.Click += Button_Edit_Click;
            txtDiscountVal.Click += Button_Edit_Click;
            txtDiscountValLoc.Click += Button_Edit_Click;
            txtDiscoundPoints.Click += Button_Edit_Click;
            txtDiscoundPointsLoc.Click += Button_Edit_Click;
            txtDueAmount.Click += Button_Edit_Click;
            txtDueAmountLoc.Click += Button_Edit_Click;
            txtGDate.Click += Button_Edit_Click;
            txtHDate.Click += Button_Edit_Click;
            txtInvCost.Click += Button_Edit_Click;
            txtItemName.Click += Button_Edit_Click;
            txtDueDate.Click += Button_Edit_Click;
            switchButton_TaxLines.ButtonWidth = 100;
            switchButton_Tax.Click += Button_Edit_Click;
            checkBox_CostGaidTax.Click += Button_Edit_Click;
            switchButton_TaxLines.Click += Button_Edit_Click;
            switchButton_TaxLines.ValueChanged += switchButton_TaxLines_ValueChanged;
            switchButton_TaxByTotal.Click += Button_Edit_Click;
            switchButton_TaxByTotal.ValueChanged += switchButton_TaxLines_ValueChanged;
            switchButton_TaxByNet.Click += Button_Edit_Click;
            switchButton_TaxByNet.ValueChanged += switchButton_TaxLines_ValueChanged;
            switchButton_TaxByNet.ValueChanged += switchButton_TaxByNet_ValueChanged;
            textBoxItem_TaxByNetValue.KeyPress += textBoxItem_TaxByNetValue_KeyPress;
            textBoxItem_TaxByNetValue.LostFocus += textBoxItem_TaxByNetValue_LostFocus;
            textBoxItem_TaxByNetValue.GotFocus += Button_Edit_Click;
            txtRef.Click += Button_Edit_Click;
            CmbInvSide.Click += Button_Edit_Click;
            txtRemark.Click += Button_Edit_Click;
            txtTele.Click += Button_Edit_Click;
            txtTime.Click += Button_Edit_Click;
            txtTotalAm.Click += Button_Edit_Click;
            txtTotalAmLoc.Click += Button_Edit_Click;
            txtTotalQ.Click += Button_Edit_Click;
            switchButton_Dis.Click += Button_Edit_Click;
            checkBox_GaidDis.Click += Button_Edit_Click;
            txtDebit6.ButtonCustomClick += txtDebit6_ButtonCustomClick;
            txtCredit6.ButtonCustomClick += txtCredit6_ButtonCustomClick;
            checkBox_GaidDis.CheckedChanged += checkBox_GaidDis_CheckedChanged;
            switchButton_Dis.ValueChanged += switchButton_Dis_ValueChanged;
            switchButton_BankComm.Click += Button_Edit_Click;
            checkBox_GaidBankComm.Click += Button_Edit_Click;
            txtCredit7.ButtonCustomClick += txtCredit7_ButtonCustomClick;
            checkBox_GaidBankComm.CheckedChanged += checkBox_GaidBankComm_CheckedChanged;
            switchButton_BankComm.ValueChanged += switchButton_BankComm_ValueChanged;
            CmbCostC.Click += Button_Edit_Click;
            CmbCurr.Click += Button_Edit_Click;
            checkBox_Chash.Click += Button_Edit_Click;
            checkBox_Credit.Click += Button_Edit_Click;
            checkBox_NetWork.Click += Button_Edit_Click;
            CmbInvPrice.Click += Button_Edit_Click;
            CmbLegate.Click += Button_Edit_Click;
            txtPaymentLoc.Click += Button_Edit_Click;
            doubleInput_CreditLoc.Click += Button_Edit_Click;
            doubleInput_NetWorkLoc.Click += Button_Edit_Click;
            txtPayment.Click += Button_Edit_Click;
            txtSteel.Click += Button_Edit_Click;
            ToolStripMenuItem_Det.Click += ToolStripMenuItem_Det_Click;
            Button_ExportTable2.Click += Button_ExportTable2_Click;
            textBox_search.InputTextChanged += TextBox_Search_InputTextChanged;
            textBox_search.ButtonCustomClick += TextBox_Search_ButtonCustomClick;
            puBar1.   TextBox_Index.EditValueChanged +=   TextBox_Index_InputTextChanged;
             puBar1.Button_Close.ItemClick += Button_Close_Click;
            puBar1.Button_First.ItemClick +=Button_First_Click;
            puBar1.Button_Prev.ItemClick += Button_Prevouse_Click;
            puBar1. Button_Next.ItemClick += Button_Next_Click;
            puBar1. Button_Last.ItemClick += Button_Last_Click;
             puBar1.Button_Add.ItemClick += Button_Add_Click;
            puBar1.Button_Search.ItemClick += Button_Search_Click;
            puBar1.Button_Delete.ItemClick += Button_Delete_Click;
             puBar1.Button_Save.ItemClick += Button_Save_Click;
            expandableSplitter1.Click += expandableSplitter1_Click;
            puBar1.   TextBox_Index.EditValueChanged +=   TextBox_Index_InputTextChanged;
            DGV_Main.PrimaryGrid.CheckBoxes = true;
            DGV_Main.PrimaryGrid.ShowCheckBox = true;
            DGV_Main.PrimaryGrid.ShowTreeButton = true;
            DGV_Main.PrimaryGrid.ShowTreeButtons = true;
            DGV_Main.PrimaryGrid.ShowTreeLines = true;
            DGV_Main.PrimaryGrid.ShowRowGridIndex = true;
            DGV_Main.PrimaryGrid.RowHeaderWidth = 25;
            DGV_Main.DataBindingComplete += DGV_Main_DataBindingComplete;
            DGV_Main.CellClick += DGV_Main_CellClick;
            DGV_Main.CellDoubleClick += DGV_Main_CellDoubleClick;
            DGV_Main.GetCellStyle += DGV_MainGetCellStyle;
            DGV_Main.MouseDown += DGV_Main_MouseDown;
            DGV_Main.AfterCheck += DGV_Main_AfterCheck;
            textBox_ID.TextChanged += textBox_ID_TextChanged;
            textBox_ID.Click += textBox_ID_Click;
            txtHDate.Leave += txtHDate_Leave;
            txtGDate.Leave += txtGDate_Leave;
            txtTime.Leave += txtTime_Leave;
            button_SrchCustNo.Click += button_SrchCustNo_Click;
            CmbCurr.SelectedIndexChanged += CmbCurr_SelectedIndexChanged;
            checkBox_Chash.CheckedChanged += checkBox_Chash_CheckedChanged;
            checkBox_NetWork.CheckedChanged += checkBox_NetWork_CheckedChanged;
            FlxInv.Click += FlxInv_Click;
            FlxInv.AfterEdit += FlxInv_AfterEdit;
            FlxInv.BeforeEdit += FlxInv_BeforeEdit;
            FlxInv.KeyDown += FlxInv_KeyDown;
            FlxInv.MouseDown += FlxInv_MouseDown;
            FlxInv.RowColChange += FlxInv_RowColChange;
            FlxInv.SelChange += FlxInv_SelChange;
            FlxDat.DoubleClick += FlxDat_DoubleClick;
            FlxDat.KeyDown += FlxDat_KeyDown;
            FlxDat.Leave += FlxDat_Leave;
            txtDiscountP.Leave += txtDiscountP_Leave;
            txtDiscountVal.Leave += txtDiscountVal_Leave;
            buttonItem_Print.Click += buttonItem_Print_Click;
            puBar1.buttonItem_Print.ItemClick += buttonItem_Print_Click;
            Button_PrintTable.Click += Button_Print_Click;
            txtDueAmountLoc.ValueChanged += txtDueAmountLoc_ValueChanged;
            txtRemark.ButtonCustomClick += txtRemark_ButtonCustomClick;
            txtDebit1.ButtonCustomClick += txtDebit1_ButtonCustomClick;
            txtDebit2.ButtonCustomClick += txtDebit2_ButtonCustomClick;
            txtDebit3.ButtonCustomClick += txtDebit3_ButtonCustomClick;
            txtDebit5.ButtonCustomClick += txtDebit5_ButtonCustomClick;
            txtCredit1.ButtonCustomClick += txtCredit1_ButtonCustomClick;
            txtCredit2.ButtonCustomClick += txtCredit2_ButtonCustomClick;
            txtCredit3.ButtonCustomClick += txtCredit3_ButtonCustomClick;
            txtCredit5.ButtonCustomClick += txtCredit5_ButtonCustomClick;
            button_CustD5.Click += button_CustD5_Click;
            button_CustC5.Click += button_CustC5_Click;
            txtCustNo.TextChanged += txtCustNo_TextChanged;
            txtPaymentLoc.Leave += txtPaymentLoc_Leave;
            doubleInput_CreditLoc.Leave += doubleInput_CreditLoc_Leave;
            doubleInput_NetWorkLoc.Leave += doubleInput_NetWorkLoc_Leave;
            if (VarGeneral.SSSLev == "B" || VarGeneral.SSSLev == "F" || VarGeneral.SSSLev == "S" || VarGeneral.SSSLev == "C")
            {
                CmbCostC.Visible = false;
                label15.Visible = false;
                if (VarGeneral.SSSLev == "F")
                {
                    CmbInvSide.Visible = false;
                    switchButton_PointActiv.Visible = false;
                    button_SrchCustPoints.Visible = false;
                    txtDiscoundPointsLoc.Visible = false;
                    txtDiscoundPoints.Visible = false;
                    label43.Visible = false;
                }
            }
            else
            {
                CmbCostC.Visible = true;
                label15.Visible = true;
                checkBoxItem_BarCode.Visible = true;
            }
            try
            {
                if (VarGeneral.SSSLev == "B" || VarGeneral.SSSLev == "F")
                {
                    RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                    try
                    {
                        object q = hKey.GetValue("vCoCe");
                        if (string.IsNullOrEmpty(q.ToString()))
                        {
                            hKey.CreateSubKey("vCoCe");
                            hKey.SetValue("vCoCe", "0");
                        }
                    }
                    catch
                    {
                        hKey.CreateSubKey("vCoCe");
                        hKey.SetValue("vCoCe", "0");
                    }
                    long regval = long.Parse(hKey.GetValue("vCoCe").ToString());
                    if (regval == 1)
                    {
                        CmbCostC.Visible = true;
                        label15.Visible = true;
                    }
                    else
                    {
                        CmbCostC.Visible = false;
                        label15.Visible = false;
                    }
                }
            }
            catch
            {
            }
            GraidORDER1.Rows.Count = 1;
            GraidORDER2.Rows.Count = 1;
            GraidORDER3.Rows.Count = 1;
            GraidORDER4.Rows.Count = 1;
            GraidORDER5.Rows.Count = 1;
            ORDER_ACC.Add("ORDER_1", new ColumnDictinary_ORDERACC(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty));
            ORDER_ACC.Add("ORDER_2", new ColumnDictinary_ORDERACC(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty));
            ORDER_ACC.Add("ORDER_3", new ColumnDictinary_ORDERACC(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty));
            ORDER_ACC.Add("ORDER_4", new ColumnDictinary_ORDERACC(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty));
            ORDER_ACC.Add("ORDER_5", new ColumnDictinary_ORDERACC(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty));
            if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49))
            {
                doubleInput_Rate.DisplayFormat = VarGeneral.DicemalMask;
                txtDiscountVal.DisplayFormat = VarGeneral.DicemalMask;
                txtDiscountP.DisplayFormat = VarGeneral.DicemalMask;
                txtTotalAmLoc.DisplayFormat = VarGeneral.DicemalMask;
                txtDueAmountLoc.DisplayFormat = VarGeneral.DicemalMask;
                txtDiscountValLoc.DisplayFormat = VarGeneral.DicemalMask;
                txtDiscoundPoints.DisplayFormat = VarGeneral.DicemalMask;
                txtDiscoundPointsLoc.DisplayFormat = VarGeneral.DicemalMask;
                txtPointCount.DisplayFormat = VarGeneral.DicemalMask;
                txtTotalAm.DisplayFormat = VarGeneral.DicemalMask;
                txtDueAmount.DisplayFormat = VarGeneral.DicemalMask;
                txtTotalQ.DisplayFormat = VarGeneral.DicemalMask;
                txtPaymentLoc.DisplayFormat = VarGeneral.DicemalMask;
                doubleInput_CreditLoc.DisplayFormat = VarGeneral.DicemalMask;
                doubleInput_NetWorkLoc.DisplayFormat = VarGeneral.DicemalMask;
                doubleInput_LostOrWin.DisplayFormat = VarGeneral.DicemalMask;
                txtPayment.DisplayFormat = VarGeneral.DicemalMask;
                txtSteel.DisplayFormat = VarGeneral.DicemalMask;
                txtTotTax.DisplayFormat = VarGeneral.DicemalMask;
                txtTotTaxLoc.DisplayFormat = VarGeneral.DicemalMask;
                txtTotDis.DisplayFormat = VarGeneral.DicemalMask;
                txtTotDisLoc.DisplayFormat = VarGeneral.DicemalMask;
                txtTotBankComm.DisplayFormat = VarGeneral.DicemalMask;
                txtTotBankCommLoc.DisplayFormat = VarGeneral.DicemalMask;
                //FlxInv.Cols[40].Width = 40;
                try
                {
                    FlxInv.Cols[8].Format = VarGeneral.DicimalNN;
                    FlxInv.Cols[9].Format = VarGeneral.DicimalNN;
                    FlxInv.Cols[10].Format = VarGeneral.DicimalNN;
                    FlxInv.Cols[11].Format = VarGeneral.DicimalNN;
                    FlxInv.Cols[12].Format = VarGeneral.DicimalNN;
                    FlxInv.Cols[38].Format = VarGeneral.DicimalNN;
                    FlxInv.Cols[31].Format = VarGeneral.DicimalNN;
                    dataGridView_ItemDet.Cols[8].Format = VarGeneral.DicimalNN;
                    dataGridView_ItemDet.Cols[9].Format = VarGeneral.DicimalNN;
                    dataGridView_ItemDet.Cols[10].Format = VarGeneral.DicimalNN;
                    dataGridView_ItemDet.Cols[11].Format = VarGeneral.DicimalNN;
                    dataGridView_ItemDet.Cols[12].Format = VarGeneral.DicimalNN;
                    dataGridView_ItemDet.Cols[38].Format = VarGeneral.DicimalNN;
                }
                catch
                {
                }
            }
            try
            {
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll")))
                {
                    FlxInv.Cols[36].DataType = typeof(double);
                    if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49))
                    {
                        FlxInv.Cols[36].Format = VarGeneral.DicimalNN;
                    }
                    else
                    {
                        FlxInv.Cols[36].Format = "N2";
                    }
                }
            }
            catch
            {
            }
            try
            {
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll")))
                {
                    FlxInv.Cols[36].DataType = typeof(double);
                    if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49))
                    {
                        FlxInv.Cols[36].Format = VarGeneral.DicimalNN;
                    }
                    else
                    {
                        FlxInv.Cols[36].Format = "N2";
                    }
                }
            }
            catch
            {
            }
            if (!Frm_Main.activflag)
            {
                this.Enabled = false;
            }
        }

        private void Butdton_41(object sender, EventArgs e)
        {
            HP_Delegator.BringToFront();
        }
        private void adsfasdfasd(object sender,EventArgs e)
        { HP_Main.BringToFront(); }

        private void PrinterSettings_ItemClick(object sender, ItemClickEventArgs e)
        {
            FrmPrinters frm = new
                FrmPrinters();
            TopMost = false;

            frm.ShowDialog();
            TopMost = true;

        }

        private void TaxChanged_Changed(object sender, EventArgs e)
        {
            Loc_TotTax.Text = txtTotTax.Value.ToString() + "  (SR) ";
        }

        private void button_openCasheir2(object sender, Controls.ItemEventArg e)
        {
            button_openCasheir_Click(null, null);
        }

        private void txtDebit5_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 5;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtDebit5.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit5.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtDebit5.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtDebit5.Text = string.Empty;
                    txtDebit5.Tag = string.Empty;
                }
            }
            catch
            {
                txtDebit5.Text = string.Empty;
                txtDebit5.Tag = string.Empty;
            }
        }
        private void txtCredit5_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 5;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtCredit5.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit5.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtCredit5.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtCredit5.Text = string.Empty;
                    txtCredit5.Tag = string.Empty;
                }
            }
            catch
            {
                txtCredit5.Text = string.Empty;
                txtCredit5.Tag = string.Empty;
            }
        }
        private void button_CustC5_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCustNo.Text))
            {
                Button_Edit_Click(sender, e);
                txtCredit5.Tag = txtCustNo.Text;
                txtCredit5.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(txtCustNo.Text).Arb_Des : db.SelectAccRootByCode(txtCustNo.Text).Eng_Des);
            }
        }
        private void button_CustD5_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCustNo.Text))
            {
                Button_Edit_Click(sender, e);
                txtDebit5.Tag = txtCustNo.Text;
                txtDebit5.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(txtCustNo.Text).Arb_Des : db.SelectAccRootByCode(txtCustNo.Text).Eng_Des);
            }
        }
        private void txtDebit6_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 5;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtDebit6.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit6.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtDebit6.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtDebit6.Text = string.Empty;
                    txtDebit6.Tag = string.Empty;
                }
            }
            catch
            {
                txtDebit6.Text = string.Empty;
                txtDebit6.Tag = string.Empty;
            }
        }
        private void txtCredit6_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 5;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtCredit6.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit6.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtCredit6.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtCredit6.Text = string.Empty;
                    txtCredit6.Tag = string.Empty;
                }
            }
            catch
            {
                txtCredit6.Text = string.Empty;
                txtCredit6.Tag = string.Empty;
            }
        }
        private void txtCredit7_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 5;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtCredit7.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit7.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtCredit7.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtCredit7.Text = string.Empty;
                    txtCredit7.Tag = string.Empty;
                }
            }
            catch
            {
                txtCredit7.Text = string.Empty;
                txtCredit7.Tag = string.Empty;
            }
        }
        public void Button_Search_Click(object sender, EventArgs e)
        {
            try
            {
                FrmCustSearch frm = new FrmCustSearch();
                frm.vTy_ = 7;
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    textBox_ID.Text = frm.SerachNo.ToString();
                }
            }
            catch
            {
            }
        }
        public void ReorderColumns()
        {
            if (!ifAutoOrderColumn)
            {
                return;
            }
            int i = 0;
            foreach (string item in columns_Names_visible.Keys)
            {
                try
                {
                    DGV_Main.PrimaryGrid.Columns[item].DisplayIndex = i;
                }
                catch
                {
                }
                i++;
            }
        }
        public void DGV_Main_ColumnResized(object sender, GridColumnEventArgs e)
        {
            if (ViewState == ViewState.Deiles)
            {
                return;
            }
            foreach (KeyValuePair<string, string> item in columns_Nams_Sums)
            {
                TextBox textBox = new TextBox();
                textBox.Visible = DGV_Main.PrimaryGrid.Columns[item.Key].IsOnScreen;
                textBox.Text = item.Value;
                textBox.Location = new Point(DGV_Main.PrimaryGrid.Columns[item.Key].Bounds.X, 3);
                textBox.Size = new Size(DGV_Main.PrimaryGrid.Columns[item.Key].Width, 20);
            }
        }
        private void DGV_Main_DataBindingComplete(object sender, GridDataBindingCompleteEventArgs e)
        {
            ReorderColumns();
            DGV_Main_ColumnResized(new object(), new GridColumnEventArgs(new GridPanel(), new GridColumn()));
            GridPanel panel = e.GridPanel;
            switch (panel.DataMember)
            {
                case "T_INVHED":
                    PropHIOfferPanel(panel);
                    break;
                case "Line":
                    PropLOfferPanel(panel);
                    break;
            }
        }
        public void Clear()
        {
            if (State == FormState.New && State != FormState.cancel)
            {
                return;
            }

            State = FormState.New;
            data_this = new T_INVHED();
            data_thisRe = new T_INVHED();
            _GdHead = new T_GDHEAD();
            State = FormState.New;
            text_Mobile.Text = string.Empty;
            for (int i = 0; i < controls.Count; i++)
            {
                if (controls[i].GetType() == typeof(DateTimePicker))
                {
                    int? calendr = VarGeneral.Settings_Sys.Calendr;
                    if (calendr.Value == 0 && calendr.HasValue)
                    {
                        (controls[i] as DateTimePicker).Value = Convert.ToDateTime(n.GDateNow());
                    }
                    else
                    {
                        (controls[i] as DateTimePicker).Text = n.HDateNow();
                    }
                }
                else if (controls[i].GetType() == typeof(CheckBox))
                {
                    (controls[i] as CheckBox).Checked = false;
                }
                else if (controls[i].GetType() == typeof(PictureBox))
                {
                    (controls[i] as PictureBox).Image = null;
                }
                else
                {
                    if (controls[i].Name == codeControl.Name)
                    {
                        continue;
                    }
                    if (controls[i].GetType() == typeof(DoubleInput))
                    {
                        (controls[i] as DoubleInput).Value = 0.0;
                    }
                    else if (controls[i].GetType() == typeof(IntegerInput))
                    {
                        (controls[i] as IntegerInput).Value = 0;
                    }
                    else if (controls[i].GetType() == typeof(TextBox) || controls[i].GetType() == typeof(TextBoxX) || controls[i].GetType() == typeof(MaskedTextBox))
                    {
                        controls[i].Text = string.Empty;
                    }
                    else if (controls[i].GetType() == typeof(CheckBox))
                    {
                        (controls[i] as CheckBox).Checked = false;
                    }
                    else if (controls[i].GetType() == typeof(RadioButton))
                    {
                        (controls[i] as RadioButton).Checked = false;
                    }
                    else if (controls[i].GetType() == typeof(ComboBox))
                    {
                        (controls[i] as ComboBox).SelectedIndex = 0;
                    }
                    else if (controls[i].GetType() == typeof(ComboBoxEx))
                    {
                        try
                        {
                            (controls[i] as ComboBoxEx).SelectedIndex = 0;
                        }
                        catch
                        {
                        }
                    }
                }
            }
            checkBox_Credit.Checked = false;
            checkBox_Chash.Checked = true;
            txtDebit1.Text = string.Empty;
            txtDebit2.Text = string.Empty;
            txtDebit3.Text = string.Empty;
            txtCredit1.Text = string.Empty;
            txtCredit2.Text = string.Empty;
            txtCredit3.Text = string.Empty;
            FlxInv.Rows.Count = 1;
            FlxStkQty.Clear(ClearFlags.Content, 1, 1, 1, 1);
            ItemDetRemoved = new List<int>();
            try
            {
                dataGridView_ItemDet.Clear(ClearFlags.Content, 1, 1, dataGridView_ItemDet.Rows.Count - 1, 34);
            }
            catch
            {
            }
            dataGridView_ItemDet.Rows.Count = 1;
            dataGridView_ItemDet.Visible = false;
            label_Due.Text = string.Empty;
            ButOption.Tag = 0;
            CmbInvSide.SelectedIndex = 0;
            superTabControl_Info.SelectedTabIndex = 0;
            try
            {
                CmbCurr.SelectedValue = int.Parse(VarGeneral.Settings_Sys.ImportIp.ToString());
            }
            catch
            {
            }
            CmbCurr_SelectedIndexChanged(null, null);
            textBox_Usr.Text = ((LangArEn == 0) ? VarGeneral.UserNameA : VarGeneral.UserNameE);
            switch_InSide.ValueChanged -= switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged -= switch_OutSide_ValueChanged;
            button_SrchTable.Enabled = true;
            switch_Dilevry.Enabled = true;
            switch_OutSide.Enabled = true;
            button_SrchWaiter.Enabled = true;
            button_AddToTable.Enabled = true;
            frRep.buttonItem_MoveTables.Enabled = true;
            switch_Dilevry.Value = false;
            switch_InSide.Value = false;
            if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 59))
            {
                switch_InSide.Value = true;
                switch_InSide_ValueChanged(null, null);
            }
            else
            {
                switch_OutSide.Value = true;
                switch_OutSide_ValueChanged(null, null);
            }
            switch_InSide.ValueChanged += switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged += switch_OutSide_ValueChanged;
            textBox_Driver.Tag = string.Empty;
            txtTable.Tag = string.Empty;
            TableTyp();
            _GdHeadCostTax = new T_GDHEAD();
            try
            {
                switchButton_Tax.Value = VarGeneral.TString.ChkStatShow(_InvSetting.TaxOptions, 4);
            }
            catch
            {
                switchButton_Tax.Value = true;
            }
            try
            {
                switchButton_TaxLines.Value = VarGeneral.TString.ChkStatShow(_InvSetting.TaxOptions, 5);
            }
            catch
            {
                switchButton_TaxLines.Value = true;
            }
            try
            {
                switchButton_TaxByTotal.Value = VarGeneral.TString.ChkStatShow(_InvSetting.TaxOptions, 6);
            }
            catch
            {
                switchButton_TaxByTotal.Value = false;
            }
            try
            {
                switchButton_TaxByNet.Value = VarGeneral.TString.ChkStatShow(_InvSetting.TaxOptions, 7);
            }
            catch
            {
                switchButton_TaxByNet.Value = false;
            }
            try
            {
                textBoxItem_TaxByNetValue.Text = (VarGeneral.TString.ChkStatShow(_InvSetting.TaxOptions, 2) ? VarGeneral.Settings_Sys.DefPurchaesTax.Value : VarGeneral.Settings_Sys.DefSalesTax.Value).ToString();
            }
            catch
            {
                textBoxItem_TaxByNetValue.Text = "0";
            }
            checkBox_CostGaidTax.Checked = false;
            txtDebit5.Tag = string.Empty;
            txtCredit5.Tag = string.Empty;
            _GdHeadCostDis = new T_GDHEAD();
            pricel = 0; PriceOld = 0; lastprice = 0;
            without = 0;

            if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 57))
            {
                switchButton_Dis.Value = true;
            }
            else
            {
                switchButton_Dis.Value = false;
            }
            checkBox_GaidDis.Checked = false;
            txtDebit6.Tag = string.Empty;
            txtCredit6.Tag = string.Empty;
            _GdHeadCostComm = new T_GDHEAD();
            checkBox_GaidBankComm.Checked = false;
            txtCredit7.Tag = string.Empty;
            txtPointCount.Value = 0.0;
            switchButton_PointActiv.Value = false;
            SetReadOnly = false;
        }
        private void InvModeChanged()
        {
            if (checkBox_Credit.Checked)
            {
                pictureBox_Cash.Visible = false;
                pictureBox_NetWord.Visible = false;
                doubleInput_CreditLoc.IsInputReadOnly = false;
                label6.Text = ((LangArEn == 0) ? "مدفوع :" : "Cash :");
                txtDueDate.Enabled = true;
                if (!textBox_ID.Focus())
                {
                    txtCustNo.Focus();
                }
            }
            else if (checkBox_NetWork.Checked)
            {
                pictureBox_Cash.Visible = false;
                pictureBox_Credit.Visible = false;
                doubleInput_CreditLoc.IsInputReadOnly = true;
                label6.Text = ((LangArEn == 0) ? "نقــدا\u064c :" : "Cash :");
                txtDueDate.Enabled = false;
            }
            else
            {
                pictureBox_NetWord.Visible = false;
                pictureBox_Credit.Visible = false;
                doubleInput_CreditLoc.IsInputReadOnly = true;
                label6.Text = ((LangArEn == 0) ? "نقــدا\u064c :" : "Paid :");
                txtDueDate.Enabled = false;
            }
            txtDueAmountLoc_ValueChanged(null, null);
            checkBox_CostGaidTax_CheckedChanged(null, null);
            if (File.Exists(Application.StartupPath + "\\Script\\SecriptGlasses.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptGlasses.dll")))
            {
                if (checkBox_Credit.Checked)
                {
                    switchButton_PointActiv.Visible = true;
                }
                else
                {
                    switchButton_PointActiv.Visible = false;
                }
            }
        }
        private void checkBox_Chash_CheckedChanged(object sender, EventArgs e)
        {
            button18.BackColor = Color.White;
            button17.BackColor = Color.White;
            InvModeChanged();
            button16.BackColor = Color.Green;

        }
        private void checkBox_Credit_CheckedChanged(object sender, EventArgs e)
        {
            button18.BackColor = Color.White;
            button16.BackColor = Color.White;
            InvModeChanged();
            button17.BackColor = Color.Green;
        }
        private void checkBox_NetWork_CheckedChanged(object sender, EventArgs e)
        {
            button18.BackColor = Color.Green;
            button16.BackColor = Color.White;
            InvModeChanged();
            button17.BackColor = Color.White;
        }
        private void button_SrchCustNo_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
            if (State == FormState.Saved)
            {
                return;
            }
            FrmCustSearch frm = new FrmCustSearch();
            frm.vTy_ = 0;
            frm.Tag = LangArEn;
            if (CmbInvSide.SelectedIndex <= 1)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 4;
            }
            else if (CmbInvSide.SelectedIndex == 2)
            {
                VarGeneral.SFrmTyp = "T_AccDef2";
                VarGeneral.AccTyp = 4;
            }
            else
            {
                VarGeneral.SFrmTyp = "T_AccDef_Suppliers";
                VarGeneral.AccTyp = 5;
            }
            frm.TopMost = true;
            frm.ShowDialog();
            if (frm.SerachNo != string.Empty)
            {
                T_AccDef h = db.StockAccDefWithOutBalance(frm.Serach_No);
                txtCustNo.Text = frm.Serach_No;
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    txtCustName.Text = h.Arb_Des;
                }
                else
                {
                    txtCustName.Text = h.Eng_Des;
                }
                txtAddress.Text = h.Adders ?? string.Empty;
                txtTele.Text = h.Telphone1 ?? string.Empty;
                text_Mobile.Text = h.Mobile;
                try
                {
                    if (h.MaxDisCust.Value > 0.0 && h.vColNum1.Value == 1.0)
                    {
                        txtDiscountP.Value = h.MaxDisCust.Value;
                        txtDiscountP_Leave(sender, e);
                    }
                }
                catch
                {
                }
                if (CmbInvSide.SelectedIndex == 0)
                {
                    try
                    {
                        if (db.StockAccDefWithOutBalance(frm.Serach_No).Mnd.HasValue)
                        {
                            int? mnd_Typ = db.StockAccDefWithOutBalance(frm.Serach_No).T_Mndob.Mnd_Typ;
                            if (mnd_Typ.Value == 0 && mnd_Typ.HasValue)
                            {
                                CmbInvSide.SelectedIndex = 0;
                                CmbLegate.SelectedValue = db.StockAccDefWithOutBalance(frm.Serach_No).Mnd;
                            }
                            else
                            {
                                CmbInvSide.SelectedIndex = 1;
                                CmbLegate.SelectedValue = db.StockAccDefWithOutBalance(frm.Serach_No).Mnd;
                            }
                        }
                    }
                    catch
                    {
                        CmbLegate.SelectedIndex = 0;
                    }
                }
                try
                {
                    txtCustRep.Value = db.StockAccDef(frm.Serach_No).Balance.Value;
                }
                catch
                {
                    txtCustRep.Value = 0.0;
                }
                txtDebit2.Text = txtCustName.Text;
                txtDebit2.Tag = txtCustNo.Text;
                if (checkBox_CostGaidTax.Checked && VarGeneral.SSSTyp != 0)
                {
                    if (checkBox_Chash.Checked)
                    {
                        if (_InvSetting.TaxCredit.Trim() == "***")
                        {
                            txtCredit5.Tag = txtCustNo.Text;
                            txtCredit5.Text = txtCustName.Text;
                        }
                        if (_InvSetting.TaxDebit.Trim() == "***")
                        {
                            txtDebit5.Tag = txtCustNo.Text;
                            txtDebit5.Text = txtCustName.Text;
                        }
                    }
                    else
                    {
                        if (_InvSetting.TaxCreditCredit.Trim() == "***")
                        {
                            txtCredit5.Tag = txtCustNo.Text;
                            txtCredit5.Text = txtCustName.Text;
                        }
                        if (_InvSetting.TaxDebitCredit.Trim() == "***")
                        {
                            txtDebit5.Tag = txtCustNo.Text;
                            txtDebit5.Text = txtCustName.Text;
                        }
                    }
                }
                if (!string.IsNullOrEmpty(txtCustNo.Text))
                {
                    switchButton_PointActiv.Value = VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 69);
                }
            }
            else
            {
                txtCustNo.Text = string.Empty;
                txtCustName.Text = string.Empty;
                txtAddress.Text = string.Empty;
                txtCustRep.Value = 0.0;
                txtDebit2.Text = string.Empty;
                txtDebit2.Tag = string.Empty;
                switchButton_PointActiv.Value = false;
            }
        }
        private void ArbEng()
        {
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                LangArEn = 0;
                FlxInv.Cols[1].Caption = "رمز الصنف";
                FlxInv.Cols[2].Visible = true;
                FlxInv.Cols[3].Visible = false;
                FlxInv.Cols[4].Visible = false;
                FlxInv.Cols[5].Visible = false;
                FlxInv.Cols[6].Caption = "مستودع";
                FlxInv.Cols[7].Caption = "الكمية";
                FlxInv.Cols[8].Caption = "السعر";
                FlxInv.Cols[9].Caption = "خصم %";
                FlxInv.Cols[9].Visible = VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 8);
                FlxInv.Cols[27].Caption = "تاريخ الصلاحية";
                FlxInv.Cols[38].Caption = "الأجمالي";
                FlxInv.Cols[35].Caption = "رقم التصنيع";
                FlxInv.Cols[36].Caption = VarGeneral.Settings_Sys.LineDetailNameA;
                FlxInv.Cols[31].Caption = "ضريبة %";
                FlxInv.Cols[33].Caption = VarGeneral.Settings_Sys.LineGiftlNameA;
                FlxInv.Cols[33].Visible = VarGeneral.TString.ChkStatShow(_SysSetting.LineGiftSts, 26);
                FlxStkQty.Cols[0].Caption = "المستودع";
                FlxStkQty.Cols[1].Caption = "الكمية المتاحة";
                FlxStkQty.Cols[2].Caption = "المستودع";
                FlxDat.Cols[0].Caption = "تاريخ الصلاحية";
                FlxDat.Cols[1].Caption = "الكمية";
                FlxDat.Cols[2].Caption = "رقم التصنيع";
                dataGridView_ItemDet.Cols[1].Caption = "رمز الصنف";
                dataGridView_ItemDet.Cols[2].Visible = true;
                dataGridView_ItemDet.Cols[3].Visible = true;
                dataGridView_ItemDet.Cols[4].Visible = false;
                dataGridView_ItemDet.Cols[5].Visible = false;
                dataGridView_ItemDet.Cols[6].Caption = "مستودع";
                dataGridView_ItemDet.Cols[7].Caption = "الكمية";
                dataGridView_ItemDet.Cols[8].Caption = "السعر";
            }
            else
            {
                LangArEn = 1;
                FlxInv.Cols[1].Caption = "Item Code";
                FlxInv.Cols[2].Visible = false;
                FlxInv.Cols[3].Visible = false;
                FlxInv.Cols[4].Visible = true;
                FlxInv.Cols[5].Visible = false;
                FlxInv.Cols[6].Caption = "Store";
                FlxInv.Cols[7].Caption = "Quantity";
                FlxInv.Cols[8].Caption = "Price";
                FlxInv.Cols[9].Caption = "Dis %";
                FlxInv.Cols[9].Visible = VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 8);
                FlxInv.Cols[27].Caption = "Validity Date";
                FlxInv.Cols[38].Caption = "Totel";
                FlxInv.Cols[35].Caption = "Make No";
                FlxInv.Cols[36].Caption = VarGeneral.Settings_Sys.LineDetailNameE;
                FlxInv.Cols[31].Caption = "Tax %";
                FlxInv.Cols[33].Caption = VarGeneral.Settings_Sys.LineGiftlNameE;
                FlxInv.Cols[33].Visible = VarGeneral.TString.ChkStatShow(_SysSetting.LineGiftSts, 26);
                FlxStkQty.Cols[0].Caption = "Store";
                FlxStkQty.Cols[1].Caption = "Quantity";
                FlxStkQty.Cols[2].Caption = "Store";
                FlxDat.Cols[0].Caption = "Expir Date";
                FlxDat.Cols[1].Caption = "Quantity";
                FlxDat.Cols[2].Caption = "Make No";
                dataGridView_ItemDet.Cols[1].Caption = "Item Code";
                dataGridView_ItemDet.Cols[2].Visible = false;
                dataGridView_ItemDet.Cols[3].Visible = false;
                dataGridView_ItemDet.Cols[4].Visible = true;
                dataGridView_ItemDet.Cols[5].Visible = true;
                dataGridView_ItemDet.Cols[6].Caption = "Store";
                dataGridView_ItemDet.Cols[7].Caption = "Quantity";
                dataGridView_ItemDet.Cols[8].Caption = "Price";
            }
            try
            {
                if (FlxInv.Cols[9].Visible)
                {
                    FlxInv.Cols[9].Visible = !VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 15);
                }
            }
            catch
            {
            }
            try
            {
                txtDiscountVal.IsInputReadOnly = VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 16);
                txtDiscountP.IsInputReadOnly = VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 16);
            }
            catch
            {
            }
            if (!VarGeneral.TString.ChkStatShow(_InvSetting.TaxOptions, 0))
            {
                FlxInv.Cols[31].Visible = false;
            }
            RibunButtons();
            FlxInv.Cols[6].Visible = false;
            FlxInv.Cols[9].Visible = false;
            FlxInv.Cols[31].Visible = false;
         //   FlxInv.Cols[40].Width = 40;
            FlxInv.Cols[38].Width = 55;
        }
        private void DGV_MainGetCellStyle(object sender, GridGetCellStyleEventArgs e)
        {
            GridPanel panel = e.GridPanel;
            if (panel.DataMember.Equals("HISale") && e.GridCell.GridColumn.Name.Equals("Date"))
            {
                DateTime dt = default(DateTime);
                dt = Convert.ToDateTime(e.GridCell.Value);
            }
        }
        private void ADD_Controls()
        {
            try
            {
                controls = new List<Control>();
                controls.Add(textBox_ID);
                controls.Add(textBox_Sequenc);
                codeControl = textBox_ID;
                controls.Add(textBox_Type);
                controls.Add(textBox1);
                controls.Add(textBox2);
                controls.Add(txtAddress);
                controls.Add(txtCustName);
                controls.Add(txtCustNet);
                controls.Add(txtCustNo);
                controls.Add(textBox_WaiterName);
                controls.Add(txtCustRep);
                controls.Add(txtDiscountP);
                controls.Add(txtDiscountVal);
                controls.Add(txtDiscountValLoc);
                controls.Add(txtDiscoundPoints);
                controls.Add(txtDiscoundPointsLoc);
                controls.Add(txtPointCount);
                controls.Add(txtDueAmount);
                controls.Add(txtDueAmountLoc);
                controls.Add(txtGDate);
                controls.Add(txtHDate);
                controls.Add(txtInvCost);
                controls.Add(txtItemName);
                controls.Add(txtLCost);
                controls.Add(txtLPrice);
                controls.Add(txtRef);
                controls.Add(CmbInvSide);
                controls.Add(txtRemark);
                controls.Add(txtTele);
                controls.Add(txtTime);
                controls.Add(txtTotalAm);
                controls.Add(txtTotalAmLoc);
                controls.Add(txtTotalQ);
                controls.Add(txtUnit);
                controls.Add(txtVCost);
                controls.Add(txtVSerial);
                controls.Add(txtUnit);
                controls.Add(txtLPrice);
                controls.Add(CmbCostC);
                controls.Add(CmbCurr);
                controls.Add(checkBox_Chash);
                controls.Add(checkBox_NetWork);
                controls.Add(CmbInvPrice);
                controls.Add(CmbLegate);
                controls.Add(textBox_Usr);
                controls.Add(doubleInput_LostOrWin);
                controls.Add(doubleInput_Rate);
                controls.Add(txtPaymentLoc);
                controls.Add(doubleInput_NetWorkLoc);
                controls.Add(doubleInput_CreditLoc);
                controls.Add(txtPayment);
                controls.Add(txtSteel);
                controls.Add(txtPayment);
                controls.Add(txtPersons);
                controls.Add(txtTable);
                controls.Add(txtDueDate);
                controls.Add(txtTotTax);
                controls.Add(txtTotTaxLoc);
                controls.Add(txtDebit5);
                controls.Add(txtCredit5);
                controls.Add(switchButton_Tax);
                controls.Add(checkBox_CostGaidTax);
                controls.Add(txtTotDis);
                controls.Add(txtTotDisLoc);
                controls.Add(txtDebit6);
                controls.Add(txtCredit6);
                controls.Add(switchButton_Dis);
                controls.Add(checkBox_GaidDis);
                controls.Add(txtTotBankComm);
                controls.Add(txtTotBankCommLoc);
                controls.Add(txtCredit7);
                controls.Add(switchButton_BankComm);
                controls.Add(checkBox_GaidBankComm);
                controls.Add(switchButton_PointActiv);
            }
            catch (SqlException)
            {
            }
        }
        private void Button_Delete_Click(object sender, EventArgs e)
        {
            if (!puBar1.Button_Delete.Enabled || puBar1.Button_Delete.Visibility == DevExpress.XtraBars.BarItemVisibility.Never || State != 0)
            {
                ifOkDelete = false;
                return;
            }
            if (data_this.RoomSts.Value)
            {
                MessageBox.Show((LangArEn == 0) ? "يجب تفريغ الطاولة قبل عملية حذف الفاتورة" : "You must unload the table before the process of deleting bill", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                ifOkDelete = false;
                return;
            }
            string Code = "???";
            if (codeControl != null)
            {
                Code = codeControl.Text;
            }
            if (Code == string.Empty)
            {
                ifOkDelete = false;
                return;
            }
            if (MessageBox.Show("هل أنت متاكد من حذف السجل [" + Code + "]؟ \n Are you sure that you want to delete the record [" + Code + "]?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                ifOkDelete = true;
            }
            else
            {
                ifOkDelete = false;
            }
            if (data_this == null || data_this.InvNo == 0.ToString() || !ifOkDelete)
            {
                return;
            }
            if (data_this.IfRet == 1)
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكن حذف الفاتورة . لانه مرتجع" : "You can not delete your invoice . because it discards", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                ifOkDelete = false;
                return;
            }
            data_this = db.StockInvHead(VarGeneral.InvTyp, DataThis.InvNo);
            IDatabase db_ = Database.GetDatabase(VarGeneral.BranchCS);
            try
            {
                db_ = Database.GetDatabase(VarGeneral.BranchCS);
                try
                {
                    db.ExecuteCommand("update T_INVHED set DeleteDate = '" + n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd") + "',DeleteTime = '" + DateTime.Now.ToString("HH:mm") + "' where InvHed_ID=" + data_this.InvHed_ID);
                }
                catch
                {
                }
                db_.ClearParameters();
                db_.AddParameter("InvHed_ID", DbType.Int32, data_this.InvHed_ID);
                if (CmbInvSide.SelectedIndex > 0)
                {
                    if (CmbInvSide.SelectedIndex == 1)
                    {
                        for (int i = 0; i < data_this.T_INVDETs.Count; i++)
                        {
                            db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + " + (0.0 - data_this.T_INVDETs[i].RealQty.Value) + "\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_INVDET ON T_Items.Itm_No = T_INVDET.ItmNo\r\n\t\t                                          where InvDet_ID = " + data_this.T_INVDETs[i].InvDet_ID + " and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = " + data_this.MndNo.Value + " ;");
                        }
                    }
                    else
                    {
                        for (int i = 0; i < data_this.T_INVDETs.Count; i++)
                        {
                            db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + " + (0.0 - data_this.T_INVDETs[i].RealQty.Value) + "\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_INVDET ON T_Items.Itm_No = T_INVDET.ItmNo\r\n\t\t                                          where InvDet_ID = " + data_this.T_INVDETs[i].InvDet_ID + " and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = '" + data_this.CusVenNo + "' ;");
                        }
                    }
                }
                else
                {
                    try
                    {
                        for (int i = 0; i < data_this.T_INVDETs.Count; i++)
                        {
                            if (data_this.T_INVDETs[i].ItmTyp.Value == 2)
                            {
                                for (int iicnt = 0; iicnt < data_this.T_INVDETs[i].T_SINVDETs.Count; iicnt++)
                                {
                                    db.ExecuteCommand(" UPDATE T_Items SET T_Items.OpenQty = T_Items.OpenQty - " + data_this.T_INVDETs[i].T_SINVDETs[iicnt].SRealQty + " From T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) Left Join T_INVDET ON (T_SINVDET.SInvId = T_INVDET.InvDet_ID) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) where (InvHed_ID = " + data_this.InvHed_ID + ") and (SInvDet_ID = " + data_this.T_INVDETs[i].T_SINVDETs[iicnt].SInvDet_ID + ")");
                                    db.ExecuteCommand(" UPDATE T_STKSQTY SET T_STKSQTY.stkQty = T_STKSQTY.stkQty - " + data_this.T_INVDETs[i].T_SINVDETs[iicnt].SRealQty + " From T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) Left Join T_INVDET ON (T_SINVDET.SInvId = T_INVDET.InvDet_ID) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) where (InvHed_ID = " + data_this.InvHed_ID + ") and (SInvDet_ID = " + data_this.T_INVDETs[i].T_SINVDETs[iicnt].SInvDet_ID + ")");
                                    db.ExecuteCommand(" UPDATE T_QTYEXP SET T_QTYEXP.stkQty = T_QTYEXP.stkQty - " + data_this.T_INVDETs[i].T_SINVDETs[iicnt].SRealQty + " From T_SINVDET Left Join T_QTYEXP ON (T_SINVDET.SItmNo = T_QTYEXP.itmNo) Left Join T_STKSQTY ON (T_SINVDET.SItmNo = T_STKSQTY.itmNo) Left Join T_Items ON (T_SINVDET.SItmNo = T_Items.Itm_No) Left Join T_INVDET ON (T_SINVDET.SInvId = T_INVDET.InvDet_ID) Left Join T_INVHED ON (T_INVDET.InvId = T_INVHED.InvHed_ID) where (InvHed_ID = " + data_this.InvHed_ID + ") and (SInvDet_ID = " + data_this.T_INVDETs[i].T_SINVDETs[iicnt].SInvDet_ID + ")");
                                }
                            }
                        }
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("Button_Delete_Click:", error, enable: true);
                        MessageBox.Show(error.Message);
                        return;
                    }
                }
                db_.ExecuteNonQuery(storedProcedure: true, "S_T_INVHED_DELETE");
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("gdhead_ID", DbType.Int32, _GdHead.gdhead_ID);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDHEAD_DELETE");
                db_.EndTransaction();
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("gdhead_ID", DbType.Int32, _GdHeadCostTax.gdhead_ID);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDHEAD_DELETE");
                db_.EndTransaction();
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("gdhead_ID", DbType.Int32, _GdHeadCostDis.gdhead_ID);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDHEAD_DELETE");
                db_.EndTransaction();
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("gdhead_ID", DbType.Int32, _GdHeadCostComm.gdhead_ID);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDHEAD_DELETE");
                db_.EndTransaction();
            }
            catch (SqlException)
            {
                data_this = db.StockInvHead(VarGeneral.InvTyp, DataThis.InvNo);
                return;
            }
            catch (Exception)
            {
                data_this = db.StockInvHead(VarGeneral.InvTyp, DataThis.InvNo);
                return;
            }
            Clear();
            RefreshPKeys();
            textBox_ID.Text = PKeys.LastOrDefault();
        }
        private void Button_Add_Click(object sender, EventArgs e)
        {
            ChkPriceIncludeTax.Checked = VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 83);
            chkPriceIncludeTax_ValueChanged(null, null);
            //   chkPriceIncludeTax.Enabled = true;
            if (puBar1.Button_Add.Visibility == DevExpress.XtraBars.BarItemVisibility.Never || ! puBar1.Button_Add.Enabled || (State == FormState.Edit && MessageBox.Show((LangArEn == 0) ? "تم تعديل السجل الحالي دون حفظ التغييرات . هل تريد المتابعة؟" : "Not saved the changes, do you really want to continue?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) != DialogResult.Yes))
            {
                return;
            }
            Clear(); button_Draft.Enabled = true;
            txtGDate.Text = n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd");
            txtHDate.Text = n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd");
            txtTime.Text = DateTime.Now.ToString("HH:mm");
            GetInvSetting();
            textBox_ID.Text = db.MaxInvheadNo.ToString();
            if (!switchButtonItem_IsReturn.Value)
            {
                textBox_Sequenc.Text = db.MaxInvheadNoSequence.ToString();
            }
            State = FormState.New;
            AutoGaidAcc();
            if (VarGeneral.SSSTyp != 0)
            {
                if (_InvSetting.autoTaxGaid.Value)
                {
                    checkBox_CostGaidTax.Checked = true;
                }
                if (_InvSetting.autoDisGaid.Value)
                {
                    checkBox_GaidDis.Checked = true;
                }
            }
            try
            {
                if (VarGeneral.TString.ChkStatShow(_InvSetting.CommOptions, 0) && superTabItem_LocalComm.Visible)
                {
                    switchButton_BankComm.Value = true;
                }
                else
                {
                    switchButton_BankComm.Value = false;
                }
            }
            catch
            {
            }
        }
        private void AutoGaidAcc()
        {
            if (!switchButtonItem_IsReturn.Value)
            {
                if (dbc.Get_PermissionID(VarGeneral.UserID).CreateGaid == 1 && VarGeneral.SSSTyp != 0)
                {
                    T_User vUsr = dbc.Get_PermissionID(VarGeneral.UserID);
                    if (string.IsNullOrEmpty(txtCredit2.Text))
                    {
                        txtCredit2.Tag = ((vUsr.CreaditAccNo_C.Trim() != "***") ? vUsr.CreaditAccNo_C.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtCredit2.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtCredit2.Text = string.Empty;
                        }
                    }
                    if (string.IsNullOrEmpty(txtDebit2.Text))
                    {
                        txtDebit2.Tag = ((vUsr.CreaditAccNo_D.Trim() != "***") ? vUsr.CreaditAccNo_D.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtDebit2.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtDebit2.Text = string.Empty;
                        }
                    }
                    if (string.IsNullOrEmpty(txtCredit3.Text))
                    {
                        txtCredit3.Tag = ((vUsr.NetworkAccNo_C.Trim() != "***") ? vUsr.NetworkAccNo_C.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtCredit3.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtCredit3.Text = string.Empty;
                        }
                    }
                    if (string.IsNullOrEmpty(txtDebit3.Text))
                    {
                        txtDebit3.Tag = ((vUsr.NetworkAccNo_D.Trim() != "***") ? vUsr.NetworkAccNo_D.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtDebit3.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtDebit3.Text = string.Empty;
                        }
                    }
                    if (string.IsNullOrEmpty(txtCredit1.Text))
                    {
                        txtCredit1.Tag = ((vUsr.CashAccNo_C.Trim() != "***") ? vUsr.CashAccNo_C.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtCredit1.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtCredit1.Text = string.Empty;
                        }
                    }
                    if (!string.IsNullOrEmpty(txtDebit1.Text))
                    {
                        return;
                    }
                    txtDebit1.Tag = ((vUsr.CashAccNo_D.Trim() != "***") ? vUsr.CashAccNo_D.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtDebit1.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtDebit1.Text = string.Empty;
                    }
                    return;
                }
                int num;
                if (VarGeneral.SSSTyp != 0)
                {
                    int? createGaid = dbc.Get_PermissionID(VarGeneral.UserID).CreateGaid;
                    num = ((createGaid.GetValueOrDefault() != 0 || !createGaid.HasValue || (!(VarGeneral.SSSLev == "B") && !(VarGeneral.SSSLev == "F"))) ? 1 : 0);
                }
                else
                {
                    num = 0;
                }
                if (num == 0)
                {
                    if (string.IsNullOrEmpty(txtCredit2.Text))
                    {
                        txtCredit2.Tag = ((_InvSetting.AccCredit4.Trim() != "***") ? _InvSetting.AccCredit4.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtCredit2.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtCredit2.Text = string.Empty;
                        }
                    }
                    if (string.IsNullOrEmpty(txtDebit2.Text))
                    {
                        txtDebit2.Tag = ((_InvSetting.AccDebit4.Trim() != "***") ? _InvSetting.AccDebit4.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtDebit2.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtDebit2.Text = string.Empty;
                        }
                    }
                    if (string.IsNullOrEmpty(txtCredit3.Text))
                    {
                        txtCredit3.Tag = ((_InvSetting.AccCredit4.Trim() != "***") ? _InvSetting.AccCredit4.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtCredit3.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtCredit3.Text = string.Empty;
                        }
                    }
                    if (string.IsNullOrEmpty(txtDebit3.Text))
                    {
                        txtDebit3.Tag = ((_InvSetting.AccDebit4.Trim() != "***") ? _InvSetting.AccDebit4.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtDebit3.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtDebit3.Text = string.Empty;
                        }
                    }
                    if (string.IsNullOrEmpty(txtCredit1.Text))
                    {
                        txtCredit1.Tag = ((_InvSetting.AccCredit3.Trim() != "***") ? _InvSetting.AccCredit3.Trim() : string.Empty);
                        if (!string.IsNullOrEmpty(txtCredit1.Tag.ToString()))
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Arb_Des;
                            }
                            else
                            {
                                txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Eng_Des;
                            }
                        }
                        else
                        {
                            txtCredit1.Text = string.Empty;
                        }
                    }
                    if (!string.IsNullOrEmpty(txtDebit1.Text))
                    {
                        return;
                    }
                    txtDebit1.Tag = ((_InvSetting.AccDebit3.Trim() != "***") ? _InvSetting.AccDebit3.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtDebit1.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtDebit1.Text = string.Empty;
                    }
                }
                else
                {
                    int? createGaid = dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp;
                    if (createGaid.Value == 0 && createGaid.HasValue && VarGeneral.SSSLev != "F" && VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 26))
                    {
                        AutoGaidAccAdmin();
                    }
                }
            }
            else if (dbc.Get_PermissionID(VarGeneral.UserID).CreateGaid == 1 && VarGeneral.SSSTyp != 0)
            {
                T_User vUsr = dbc.Get_PermissionID(VarGeneral.UserID);
                if (string.IsNullOrEmpty(txtCredit2.Text))
                {
                    txtCredit2.Tag = ((vUsr.CreaditAccNo_C_R.Trim() != "***") ? vUsr.CreaditAccNo_C_R.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtCredit2.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtCredit2.Text = string.Empty;
                    }
                }
                if (string.IsNullOrEmpty(txtDebit2.Text))
                {
                    txtDebit2.Tag = ((vUsr.CreaditAccNo_D_R.Trim() != "***") ? vUsr.CreaditAccNo_D_R.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtDebit2.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtDebit2.Text = string.Empty;
                    }
                }
                if (string.IsNullOrEmpty(txtCredit3.Text))
                {
                    txtCredit3.Tag = ((vUsr.NetworkAccNo_C_R.Trim() != "***") ? vUsr.NetworkAccNo_C_R.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtCredit3.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtCredit3.Text = string.Empty;
                    }
                }
                if (string.IsNullOrEmpty(txtDebit3.Text))
                {
                    txtDebit3.Tag = ((vUsr.NetworkAccNo_D_R.Trim() != "***") ? vUsr.NetworkAccNo_D_R.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtDebit3.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtDebit3.Text = string.Empty;
                    }
                }
                if (string.IsNullOrEmpty(txtCredit1.Text))
                {
                    txtCredit1.Tag = ((vUsr.CashAccNo_C_R.Trim() != "***") ? vUsr.CashAccNo_C_R.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtCredit1.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtCredit1.Text = string.Empty;
                    }
                }
                if (!string.IsNullOrEmpty(txtDebit1.Text))
                {
                    return;
                }
                txtDebit1.Tag = ((vUsr.CashAccNo_D_R.Trim() != "***") ? vUsr.CashAccNo_D_R.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit1.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit1.Text = string.Empty;
                }
            }
            else
            {
                if (VarGeneral.SSSTyp != 0)
                {
                    return;
                }
                if (string.IsNullOrEmpty(txtCredit2.Text))
                {
                    txtCredit2.Tag = ((_InvSetting.AccCredit4.Trim() != "***") ? _InvSetting.AccCredit4.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtCredit2.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtCredit2.Text = string.Empty;
                    }
                }
                if (string.IsNullOrEmpty(txtDebit2.Text))
                {
                    txtDebit2.Tag = ((_InvSetting.AccDebit4.Trim() != "***") ? _InvSetting.AccDebit4.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtDebit2.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtDebit2.Text = string.Empty;
                    }
                }
                if (string.IsNullOrEmpty(txtCredit3.Text))
                {
                    txtCredit3.Tag = ((_InvSetting.AccCredit4.Trim() != "***") ? _InvSetting.AccCredit4.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtCredit3.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtCredit3.Text = string.Empty;
                    }
                }
                if (string.IsNullOrEmpty(txtDebit3.Text))
                {
                    txtDebit3.Tag = ((_InvSetting.AccDebit4.Trim() != "***") ? _InvSetting.AccDebit4.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtDebit3.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtDebit3.Text = string.Empty;
                    }
                }
                if (string.IsNullOrEmpty(txtCredit1.Text))
                {
                    txtCredit1.Tag = ((_InvSetting.AccCredit3.Trim() != "***") ? _InvSetting.AccCredit3.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtCredit1.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtCredit1.Text = string.Empty;
                    }
                }
                if (!string.IsNullOrEmpty(txtDebit1.Text))
                {
                    return;
                }
                txtDebit1.Tag = ((_InvSetting.AccDebit3.Trim() != "***") ? _InvSetting.AccDebit3.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit1.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit1.Text = string.Empty;
                }
            }
        }
        private void AutoGaidAccAdmin()
        {
            if (_InvSetting.InvSetting.Substring(1, 1) == "1" && VarGeneral.SSSTyp != 0)
            {
                txtCredit2.Tag = ((_InvSetting.AccCredit1.Trim() != "***") ? _InvSetting.AccCredit1.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtCredit2.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtCredit2.Text = string.Empty;
                }
                txtDebit2.Tag = ((_InvSetting.AccDebit1.Trim() != "***") ? _InvSetting.AccDebit1.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit2.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit2.Text = string.Empty;
                }
                txtCredit3.Tag = ((_InvSetting.AccCredit2.Trim() != "***") ? _InvSetting.AccCredit2.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtCredit3.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtCredit3.Text = string.Empty;
                }
                txtDebit3.Tag = ((_InvSetting.AccDebit2.Trim() != "***") ? _InvSetting.AccDebit2.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit3.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit3.Text = string.Empty;
                }
                txtCredit1.Tag = ((_InvSetting.AccCredit0.Trim() != "***") ? _InvSetting.AccCredit0.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtCredit1.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtCredit1.Text = string.Empty;
                }
                txtDebit1.Tag = ((_InvSetting.AccDebit0.Trim() != "***") ? _InvSetting.AccDebit0.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit1.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit1.Text = string.Empty;
                }
            }
            else
            {
                if (VarGeneral.SSSTyp != 0)
                {
                    return;
                }
                txtCredit2.Tag = ((_InvSetting.AccCredit4.Trim() != "***") ? _InvSetting.AccCredit4.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtCredit2.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtCredit2.Text = db.SelectAccRootByCode(txtCredit2.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtCredit2.Text = string.Empty;
                }
                txtDebit2.Tag = ((_InvSetting.AccDebit4.Trim() != "***") ? _InvSetting.AccDebit4.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit2.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit2.Text = db.SelectAccRootByCode(txtDebit2.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit2.Text = string.Empty;
                }
                txtCredit3.Tag = ((_InvSetting.AccCredit4.Trim() != "***") ? _InvSetting.AccCredit4.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtCredit3.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtCredit3.Text = db.SelectAccRootByCode(txtCredit3.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtCredit3.Text = string.Empty;
                }
                txtDebit3.Tag = ((_InvSetting.AccDebit4.Trim() != "***") ? _InvSetting.AccDebit4.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit3.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit3.Text = db.SelectAccRootByCode(txtDebit3.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit3.Text = string.Empty;
                }
                txtCredit1.Tag = ((_InvSetting.AccCredit3.Trim() != "***") ? _InvSetting.AccCredit3.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtCredit1.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtCredit1.Text = db.SelectAccRootByCode(txtCredit1.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtCredit1.Text = string.Empty;
                }
                txtDebit1.Tag = ((_InvSetting.AccDebit3.Trim() != "***") ? _InvSetting.AccDebit3.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit1.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit1.Text = db.SelectAccRootByCode(txtDebit1.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit1.Text = string.Empty;
                }
            }
        }
        public void RefreshPKeys()
        {
            PKeys.Clear();
            var qkeys = from item in db.T_INVHEDs
                        where item.InvTyp == (int?)VarGeneral.InvTyp
                        where item.IfDel == (int?)0
                        where item.SalsManNo == VarGeneral.UserNo
                        where item.PaymentOrderTyp == (int?)0
                        where (!switchButtonItem_IsReturn.Value) ? (item.InvId.HasValue && item.InvId > (double?)0.0) : true
                        where (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 25)) ? (item.InvCashPay.Value == 0 || item.InvCashPay.Value == 2) : true
                        select new
                        {
                            Code = item.InvNo + string.Empty
                        };
            int count = 0;
            foreach (var item2 in qkeys)
            {
                count++;
                PKeys.Add(item2.Code);
            }
            Label_Count.Text = string.Concat(count);
            UpdateVcr();
        }
        public void Fill_DGV_Main()
        {
            DGV_Main.PrimaryGrid.VirtualMode = true;
            Stock_DataDataContext db = new Stock_DataDataContext(VarGeneral.BranchCS);
            List<T_INVHED> list = new List<T_INVHED>();
            try
            {
                string vFileds = " select T_INVHED.InvHed_ID,T_INVHED.InvId,T_INVHED.InvNo,T_INVHED.InvTyp,T_INVHED.CusVenNo,T_INVHED.InvCashPay,T_INVHED.CusVenNm,T_INVHED.CusVenAdd,T_INVHED.CusVenTel,T_INVHED.Remark,T_INVHED.HDat,T_INVHED.GDat,T_INVHED.MndNo,T_INVHED.SalsManNo,T_INVHED.SalsManNam,T_INVHED.InvTot,T_INVHED.InvTotLocCur,T_INVHED.InvDisPrs,T_INVHED.InvDisVal,T_INVHED.InvDisValLocCur,T_INVHED.InvNet,T_INVHED.CashPay,T_INVHED.InvNetLocCur,T_INVHED.CashPayLocCur,T_INVHED.IfRet,T_INVHED.GadeNo,T_INVHED.GadeId,T_INVHED.IfDel,T_INVHED.RetNo,T_INVHED.RetId,T_INVHED.InvCashPayNm,T_INVHED.InvCstNo,T_INVHED.RefNo,T_INVHED.InvCost,T_INVHED.EstDat,T_INVHED.CustPri,T_INVHED.CurTyp,T_INVHED.InvCash,T_INVHED.ToStore,T_INVHED.ToStoreNm,T_INVHED.InvQty,T_INVHED.IfTrans,T_INVHED.CustNet,T_INVHED.CustRep,T_INVHED.InvWight_T,T_INVHED.IfPrint,T_INVHED.LTim,T_INVHED.CREATED_BY,\r\n                                 T_INVHED.DATE_CREATED,T_INVHED.MODIFIED_BY,T_INVHED.DATE_MODIFIED,T_INVHED.CreditPay,T_INVHED.NetworkPay,T_INVHED.NetworkPayLocCur,T_INVHED.CommMnd_Inv,T_INVHED.MndExtrnal,T_INVHED.CompanyID,T_INVHED.CreditPayLocCur,T_INVHED.InvAddCost,T_INVHED.InvAddCostLoc,T_INVHED.InvAddCostExtrnal,T_INVHED.InvAddCostExtrnalLoc,T_INVHED.IsExtrnalGaid,T_INVHED.ExtrnalCostGaidID,T_INVHED.Puyaid,T_INVHED.Remming,T_INVHED.RoomNo,T_INVHED.OrderTyp,T_INVHED.chauffeurNo,T_INVHED.RoomSts,T_INVHED.RoomPerson,T_INVHED.ServiceValue,T_INVHED.Sts,T_INVHED.PaymentOrderTyp,T_INVHED.AdminLock,T_INVHED.DeleteDate,T_INVHED.DeleteTime,T_INVHED.UserNew,T_INVHED.IfEnter,T_INVHED.InvAddTax,T_INVHED.InvAddTaxlLoc,T_INVHED.IsTaxGaid,T_INVHED.TaxGaidID,T_INVHED.IsTaxUse,T_INVHED.InvValGaidDis,T_INVHED.InvValGaidDislLoc,T_INVHED.IsDisGaid,T_INVHED.DisGaidID1,T_INVHED.IsDisUse1,T_INVHED.InvComm,T_INVHED.InvCommLoc,T_INVHED.IsCommGaid,T_INVHED.IsCommUse,T_INVHED.CommGaidID,\r\n                                 T_INVHED.IsTaxLines,T_INVHED.IsTaxByTotal,T_INVHED.IsTaxByNet,T_INVHED.TaxByNetValue,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints,T_INVHED.tailor1,T_INVHED.tailor2,T_INVHED.tailor4,T_INVHED.tailor3,T_INVHED.tailor5,T_INVHED.tailor6,T_INVHED.tailor7,T_INVHED.tailor8,T_INVHED.tailor9,T_INVHED.tailor10,T_INVHED.tailor12,T_INVHED.tailor11,T_INVHED.tailor13,T_INVHED.tailor14,T_INVHED.tailor15,T_INVHED.tailor16,T_INVHED.tailor17,T_INVHED.tailor18,T_INVHED.tailor19,T_INVHED.tailor20,T_INVHED.InvImg\r\n                                 ,(case when " + LangArEn + " = 0 then T_Waiter.Arb_Des else T_Waiter.Eng_Des end) as ArbTaf,(CONVERT(varchar(200), T_Rooms.RomeNo) + ' || ' + (case when T_Rooms.Type = 1 then (case when " + LangArEn + " = 0 then 'طاولات العوائل' else 'Families Tables' end) else case when T_Rooms.Type = 2 then (case when " + LangArEn + " = 0 then 'طاولات الشباب' else 'Boys Tables' end) else case when T_Rooms.Type = 3 then (case when " + LangArEn + " = 0 then 'طاولات خارجية' else 'Extrnal Tables' end) else (case when " + LangArEn + " = 0 then 'طاولات أخرى' else 'Other Tables' end) end end end)) as EngTaf";
                list = db.ExecuteQuery<T_INVHED>(vFileds + " from T_INVHED left JOIN T_Rooms ON T_INVHED.RoomNo = T_Rooms.ID INNER JOIN T_Waiter ON T_Rooms.waiterNo = T_Waiter.waiter_ID where T_INVHED.InvTyp = 21 and IfDel = 0 and T_INVHED.AdminLock = " + (switchButtonItem_OrderSts.Value ? 1 : 0) + " and T_INVHED.RoomNo != '' and T_Rooms.waiterNo != '' order by T_INVHED.InvHed_ID", new object[0]).ToList();
            }
            catch
            {
            }
            DGV_Main.PrimaryGrid.VirtualRowCount = list.Count;
            if (DGV_Main.PrimaryGrid.Columns.Count == 0)
            {
                foreach (KeyValuePair<string, ColumnDictinary> item in columns_Names_visible_Waiter)
                {
                    DGV_Main.PrimaryGrid.Columns.Add(new GridColumn(item.Key));
                }
            }
            FillHDGV(list);
        }
        protected override void OnParentRightToLeftChanged(EventArgs e)
        {
            ComponentResourceManager resources = new ComponentResourceManager(typeof(FrmInvSalePoint));
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                SSSLanguage.Language.ChangeLanguage("ar-SA", this, resources);
                LangArEn = 0;
            }
            else
            {
                SSSLanguage.Language.ChangeLanguage("en", this, resources);
                LangArEn = 1;
            }
            ArbEng();
            FillCombo();
            try
            {
                if (data_this != null)
                {
                    SetData(data_this);
                }
            }
            catch
            {
            }
        }
        private void RibunButtons()
        {
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                puBar1.Button_First.Caption = "الأول";
                puBar1. Button_Last.Caption = "الأخير";
                puBar1. Button_Next.Caption = "التالي";
                puBar1.Button_Prev.Caption = "السابق";
                 puBar1.Button_Add.Caption = "جديد";
                 puBar1.Button_Close.Caption = "اغلاق";
                puBar1.Button_Delete.Caption = "حذف";
                 puBar1.Button_Save.Caption = "حفظ";
                puBar1.Button_Search.Caption = "بحث";
                puBar1.Button_First.Tag = "السجل الاول";
                puBar1. Button_Last.Tag = "السجل الاخير";
                puBar1. Button_Next.Tag = "السجل التالي";
                puBar1.Button_Prev.Tag = "السجل السابق";
                 puBar1.Button_Add.Tag = "F1";
                 puBar1.Button_Close.Tag = "Esc";
                puBar1.Button_Delete.Tag = "F3";
                //      puBar1.Button_Save.Tooltip = "F2";
                // puBar1.Button_Search.t = "F4";
                Button_PrintTable.Text = "عــرض";
                Button_PrintTable.Tooltip = "F5";
                buttonItem_Print.Text = ((_InvSetting.InvpRINTERInfo.nTyp.Substring(2, 1) == "1") ? "طباعة" : "عــرض");

                puBar1.buttonItem_Print.Caption= ((_InvSetting.InvpRINTERInfo.nTyp.Substring(2, 1) == "1") ? "طباعة" : "عــرض");

                // buttonItem_Print.Tooltip = "F5";
                Button_ExportTable2.Text = "تصدير";
                Button_ExportTable2.Tooltip = "F10";
                DGV_Main.PrimaryGrid.GroupByRow.Text = "الطلبات المحلية";
                Label1.Text = "رقم الفاتورة :";
                Label2.Text = "التاريــــــــخ :";
                label7.Text = "رقم المرجع :";
                label19.Text = "العملــــــــة :";
                label18.Text = "المنـــــدوب :";
                label4.Text = "حساب العميــل :";
                label10.Text = "اسم العميـــــل :";
                label13.Text = "عنوان العميل :";
                label15.Text = "مركز التكلفـــــة :";
                label5.Text = "السعر المعتمــد :";
                label12.Text = "هاتف :";
                label8.Text = "نسبة الخصم";
                Label26.Text = "قيمة الخصم";
                label17.Text = "قيمة الفاتـــورة :";
                label9.Text = "صافي الفاتورة :";
                label3.Text = "بالريــال";
                superTabItem_items.Text = "م.الصنف";
                superTabItem_Pay.Text = "الدفع";
                superTabItem_Note.Text = "ملاحظة";
                superTabItem_Detiles.Text = "تفاصيل";
                txtRemark.WatermarkText = "ملاحظات الفاتورة";
                label6.Text = "نقــدا\u064c :";
                label11.Text = "آجــل :";
                label14.Text = "شبكة :";
                checkBox_Chash.Text = "نقـــدي";
                checkBox_Credit.Text = "أجـــل";
                button_Bac.Text = "مسج";
            //    button_Space.Text = "Space";
                button_DeleteLine.Text = "حذف السطر";
                switch_Dilevry.OffText = "طلب توصيل";
                switch_Dilevry.OnText = "طلب توصيل";
                switch_InSide.OffText = "محلــي";
                switch_InSide.OnText = "محلــي";
                switch_OutSide.OffText = "سفـــري";
                switch_OutSide.OnText = "سفـــري";
                txtDebit1.WatermarkText = "--------";
                txtDebit2.WatermarkText = "--------";
                txtDebit3.WatermarkText = "--------";
                txtCredit1.WatermarkText = "--------";
                txtCredit2.WatermarkText = "--------";
                txtCredit3.WatermarkText = "--------";
                button_openCasheir.Text = "فك الدرج";
                //buttonItem_Default.Text = "جــديد";
                //buttonItem_Order1.Text = "الطلـــب 1";
                //buttonItem_Order2.Text = "الطلـــب 2";
                //buttonItem_Order3.Text = "الطلـــب 3";
                //buttonItem_Order4.Text = "الطلـــب 4";
                //buttonItem_Order5.Text = "الطلـــب 5";
                //buttonItem_Order1_Print.Text = "طباعـــة";
                //buttonItem_Order2_Print.Text = "طباعـــة";
                //buttonItem_Order3_Print.Text = "طباعـــة";
                //buttonItem_Order4_Print.Text = "طباعـــة";
                //buttonItem_Order5_Print.Text = "طباعـــة";
                //buttonItem_Order1_Del.Text = "حـــــذف";
                //buttonItem_Order2_Del.Text = "حـــــذف";
                //buttonItem_Order3_Del.Text = "حـــــذف";
                //buttonItem_Order4_Del.Text = "حـــــذف";
                //buttonItem_Order5_Del.Text = "حـــــذف";
                //buttonItem_SaveOrder.Text = "تعلــيق";
                frRep.LRenum.Text = "اعادة تسلسل فواتير الصندوق";
                frRep.LCLOSE.Text = "إقفال الصندوق ";
                frRep.Lmovment.Text = "تقرير حركة صنف";
                frRep.LSRPL.Text = "تقرير فواتير البائع";
                button_SrchCustADD.Tooltip = "إضافة عميل";
                frRep.buttonItem_AlarmLocalOrder.Text = "عدد الطلبات المحلية المعتمدة  ";
                frRep.buttonItem_TableInfo.Text = "حــول الطــاولات";
                button_AddToTable.Text = "توجيه إلى";
                frRep.buttonItem_MoveTables.Text = "تحويل الطلبات بين الطاولات";
                switchButton_Tax.OffText = "غير معتمد";
                switchButton_Tax.OnText = "معتمد";
                superTabItem_Tax.Text = "ضريبة";
                superTabItem_Dis.Text = "خصم";
                superTabItem_Gaids.Text = "سندات";
                switchButton_Dis.OffText = "+ السطــور";
                switchButton_Dis.OnText = "+ السطــور";
                superTabItem_LocalComm.Text = "ع. بنكية";
                switchButton_BankComm.OffText = "عدم احتساب";
                switchButton_BankComm.OnText = "احتســـاب";
                switchButton_TaxLines.OnText = "سطور الضريبة";
                switchButton_TaxLines.OffText = "سطور الضريبة";
                switchButton_TaxByTotal.OnText = "إجمالي سطر";
                switchButton_TaxByTotal.OffText = "إجمالي سطر";
                switchButton_TaxByNet.OffText = "صافي";
                switchButton_TaxByNet.OffText = "صافي";
                switchButton_PointActiv.OffText = "النقاط";
                switchButton_PointActiv.OnText = "النقاط";
                button_SrchInvNoBarcod.Text = "بحث";
            }
            else
            {
                puBar1.Button_First.Caption = "First";
                puBar1. Button_Last.Caption = "Last";
                puBar1. Button_Next.Caption = "Next";
                puBar1.Button_Prev.Caption = "Previous";
                 puBar1.Button_Add.Caption = "New";
                 puBar1.Button_Close.Caption = "Close";
                puBar1.Button_Delete.Caption = "Delete";
                 puBar1.Button_Save.Caption = "Save";
                puBar1.Button_Search.Caption = "Search";
                puBar1.Button_First.Tag = "First Record";
                puBar1. Button_Last.Tag = "Last Record";
                puBar1. Button_Next.Tag = "Next Record";
                puBar1.Button_Prev.Tag = "Previous Record";
                 puBar1.Button_Add.Tag = "F1";
                 puBar1.Button_Close.Tag = "Esc";
                puBar1.Button_Delete.Tag = "F3";
                //   puBar1.Button_Save.Tooltip = "F2";
                //  puBar1.Button_Search.Tooltip = "F4";
                Button_PrintTable.Text = "Show";
                Button_PrintTable.Tooltip = "F5";
                buttonItem_Print.Text = ((_InvSetting.InvpRINTERInfo.nTyp.Substring(2, 1) == "1") ? "Print" : "Show");
                puBar1.buttonItem_Print.Caption = ((_InvSetting.InvpRINTERInfo.nTyp.Substring(2, 1) == "1") ? "Print" : "Show");

                // buttonItem_Print.Tooltip = "F5";
                Button_ExportTable2.Text = "Export";
                Button_ExportTable2.Tooltip = "F10";
                DGV_Main.PrimaryGrid.GroupByRow.Text = "Local Orders";
                Label1.Text = "Invoice No :";
                Label2.Text = "Date :";
                label7.Text = "Ref No :";
                label19.Text = "Currncy :";
                label18.Text = "Delegate :";
                label4.Text = "Cust Acc :";
                label10.Text = "Cust Name :";
                label13.Text = "Cust Address :";
                label15.Text = "Cost Center :";
                label5.Text = "Price Now : ";
                label12.Text = "Tel :";
                label8.Text = "Discount %";
                Label26.Text = "Dis value";
                label17.Text = "Invoice value :";
                label9.Text = "Invoice Net :";
                label3.Text = "Riyal";
                superTabItem_items.Text = "Item Info";
                superTabItem_Pay.Text = "Paid";
                superTabItem_Note.Text = "Note";
                superTabItem_Detiles.Text = "Details";
                txtRemark.WatermarkText = "Notes";
                label6.Text = "Cash :";
                label11.Text = "Credit :";
                label14.Text = "NetWork :";
                checkBox_Chash.Text = "Cach";
                checkBox_Credit.Text = "Credit";
                labelD1.Text = "Debtor :";
                labelD2.Text = "Debtor :";
                labelD3.Text = "Debtor :";
                labelC1.Text = "Creditor :";
                labelC2.Text = "Creditor :";
                labelC3.Text = "Creditor :";
                button_Bac.Text = "Clear";
                //button_Space.Text = "Space";
                button_DeleteLine.Text = "DELETE LINE";

                switch_Dilevry.OffText = "Delivery";
                switch_Dilevry.OnText = "Delivery";
                switch_InSide.OffText = "Local";
                switch_InSide.OnText = "Local";
                switch_OutSide.OffText = "Take Away";
                switch_OutSide.OnText = "Take Away";
                superTabItem_OrderType.Text = "Order Type";
                buttonX_GaidCash.Text = "Cash";
                buttonX_GaidCredit.Text = "Credit";
                buttonX_GaidNetwork.Text = "Network";
                txtDebit1.WatermarkText = "--------";
                txtDebit2.WatermarkText = "--------";
                txtDebit3.WatermarkText = "--------";
                txtCredit1.WatermarkText = "--------";
                txtCredit2.WatermarkText = "--------";
                txtCredit3.WatermarkText = "--------";
                button_openCasheir.Text = "Open Stairs";
                //buttonItem_Default.Text = "NEW";
                //buttonItem_Order1.Text = "ORDER 1";
                //buttonItem_Order2.Text = "ORDER 2";
                //buttonItem_Order3.Text = "ORDER 3";
                //buttonItem_Order4.Text = "ORDER 4";
                //buttonItem_Order5.Text = "ORDER 5";
                //buttonItem_Order1_Print.Text = "Print";
                //buttonItem_Order2_Print.Text = "Print";
                //buttonItem_Order3_Print.Text = "Print";
                //buttonItem_Order4_Print.Text = "Print";
                //buttonItem_Order5_Print.Text = "Print";
                //buttonItem_Order1_Del.Text = "Delete";
                //buttonItem_Order2_Del.Text = "Delete";
                //buttonItem_Order3_Del.Text = "Delete";
                //buttonItem_Order4_Del.Text = "Delete";
                //buttonItem_Order5_Del.Text = "Delete";
                //buttonItem_SaveOrder.Text = "Hold Inv";
                frRep.LRenum.Text = "Re numbering cashier boxes";
                frRep.LCLOSE.Text = "Fund Closure";
                frRep.Lmovment.Text = "Item Movement Report";
                frRep.LSRPL.Text = "Seller Bills Report";
                button_SrchCustADD.Tooltip = "Add Customer";
                ToolStripMenuItem_TransSales.Text = "Use a Order and delete it";
                ToolStripMenuItem_ProveOrder.Text = "Approval a Order";
                ToolStripMenuItem_ProveOrderBack.Text = "Un approval a Order";
                ToolStripMenuItem_RemoveOrder.Text = "Delete a Order";
                ToolStripMenuItem_PrintOrder.Text = "Print a Order";
                button_Back.Text = "Back";
                buttonItem_RemoveInvWaiter.Text = "Remove All Orders";
                frRep.buttonItem_AlarmLocalOrder.Text = "Local Orders Approvaled  ";
                frRep.buttonItem_TableInfo.Text = "about Tables";
                button_AddToTable.Text = "Forward to";
                frRep.buttonItem_MoveTables.Text = "Transfer Orders Between Tables";
                switchButton_Tax.OffText = "certified";
                switchButton_Tax.OnText = "un certified";
                switchButton_Dis.OffText = "+ Lines";
                switchButton_Dis.OnText = "+ Lines";
                superTabItem_Tax.Text = "Tax";
                superTabItem_Dis.Text = "Dis";
                superTabItem_Gaids.Text = "Bonds";
                superTabItem_LocalComm.Text = "BankCom";
                switchButton_BankComm.OffText = "Not issuing";
                switchButton_BankComm.OnText = "issuing";
                switchButton_TaxLines.OnText = "Tax Lines";
                switchButton_TaxLines.OffText = "Tax Lines";
                switchButton_TaxByTotal.OnText = "Line Tot";
                switchButton_TaxByTotal.OffText = "Line Tot";
                switchButton_TaxByNet.OffText = "Net";
                switchButton_TaxByNet.OffText = "Net";
                switchButton_PointActiv.OffText = "Points";
                switchButton_PointActiv.OnText = "Points";
                button_SrchInvNoBarcod.Text = "Find";
            }
            TableTyp();
        }
        FrmPOSREP frRep = new FrmPOSREP();
        public void closeds()
        {
            Close();
        }
        private void FrmInvSalePoint_Load(object sender, EventArgs e)
        {
            try
            {
              
               
                ComponentResourceManager resources = new ComponentResourceManager(typeof(FrmInvSalePoint));
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    SSSLanguage.Language.ChangeLanguage("ar-SA", this, resources);
                    LangArEn = 0;
                }
                else
                {
                    SSSLanguage.Language.ChangeLanguage("en", this, resources);
                    LangArEn = 1;
                }
                ADD_Controls();
                Permmission = dbc.Get_PermissionID(VarGeneral.UserID);
                _StorePr = permission.StorePrmission.Split(',').ToList();
                int? createGaid;
                try
                {
                    createGaid = permission.CreateGaid;
                    if (createGaid.Value == 0 && createGaid.HasValue)
                    {
                        frRep.buttonItem_RelayBox.Enabled = false;
                    }
                    else
                    {
                        frRep.buttonItem_RelayBox.Enabled = true;
                    }
                }
                catch
                {
                }
                ChkPriceIncludeTax.Checked= VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 83);
                if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 75))
                {
                    label43.Visible = false;
                    txtDiscoundPoints.Visible = false;
                    txtDiscoundPointsLoc.Visible = false;
                    button_SrchCustPoints.Visible = false;
                    switchButton_PointActiv.Visible = false;
                }
                if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 53) && !DateSync)
                {
                    FrmTransDateSync frm = new FrmTransDateSync();
                    frm.Tag = LangArEn;
                    frm.TopMost = true;
                    frm.ShowDialog();
                }
                DateSync = true;
                if (columns_Names_visible_Waiter.Count == 0)
                {
                    columns_Names_visible_Waiter.Add("InvNo", new ColumnDictinary("رقم الطلب", "Order No", ifDefault: true, string.Empty));
                    columns_Names_visible_Waiter.Add("ArbTaf", new ColumnDictinary("إسم النادل", "Waiter Name", ifDefault: true, string.Empty));
                    columns_Names_visible_Waiter.Add("EngTaf", new ColumnDictinary("الطاولة", "Table", ifDefault: true, string.Empty));
                    columns_Names_visible_Waiter.Add("RoomPerson", new ColumnDictinary("عدد الكراسي", "Chairs", ifDefault: true, string.Empty));
                    columns_Names_visible_Waiter.Add("InvNetLocCur", new ColumnDictinary("صافي الفاتورة", "Invoice Net", ifDefault: true, string.Empty));
                    columns_Names_visible_Waiter.Add("HDat", new ColumnDictinary("التاريخ الهجري", "Date Hijri", ifDefault: true, string.Empty));
                    columns_Names_visible_Waiter.Add("GDat", new ColumnDictinary("التاريخ الميلادي", "Date Gregorian", ifDefault: true, string.Empty));
                    columns_Names_visible_Waiter.Add("Remark", new ColumnDictinary("الملاحظات", "Note", ifDefault: true, string.Empty));
                }
                if (columns_Names_visible.Count == 0)
                {
                    columns_Names_visible.Add("InvNo", new ColumnDictinary("رقم الفاتورة", "Invoice No", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("CusVenNm", new ColumnDictinary("إسم العميل", "Customer Name", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("SalsManNo", new ColumnDictinary("رقم البائع", "SalsMan No", ifDefault: false, string.Empty));
                    columns_Names_visible.Add("HDat", new ColumnDictinary("التاريخ الهجري", "Date Hijri", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("GDat", new ColumnDictinary("التاريخ الميلادي", "Date Gregorian", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("InvTotLocCur", new ColumnDictinary("إجمالي الفاتورة", "Invoice Total", ifDefault: false, string.Empty));
                    columns_Names_visible.Add("InvNetLocCur", new ColumnDictinary("صافي الفاتورة", "Invoice Net", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("InvQty", new ColumnDictinary("إجمالي الكمية", "Quantity Total", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("RefNo", new ColumnDictinary("رقم المرجع", "Refrence No", ifDefault: false, string.Empty));
                    columns_Names_visible.Add("InvDisValLocCur", new ColumnDictinary("الخصم قيمة", "Discount value", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("GadeNo", new ColumnDictinary("رقم القيد المحاسبي", "Gaid No", ifDefault: false, string.Empty));
                    columns_Names_visible.Add("CusVenMob", new ColumnDictinary("الجوال", "Mobile", ifDefault: true, string.Empty));
                }
                else
                {
                    Clear();
                    textBox_ID.Text = string.Empty;
                    puBar1.   TextBox_Index.EditValue = string.Empty;
                }
                if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 25))
                {
                    checkBox_Credit.Visible = false;
                }
                if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 72))
                {



                    poS_ItemsPanel1.Visible = false; DetailsPanel.Dock = DockStyle.Fill;

                }
                else
                {
                    DetailsPanel.Dock = DockStyle.Left;
                    poS_ItemsPanel1.Dock = DockStyle.Fill;
                    poS_ItemsPanel1.BringToFront();

                }
                FillCat();
                FillCombo();
                GetInvSetting();
                ArbEng();
                RefreshPKeys();
                listUnit = new List<T_Unit>();
                listStore = new List<T_Store>();
                listUnit = db.FillUnit_2(string.Empty).ToList();
                listStore = db.FillStore_2(string.Empty).ToList();
                FlxStkQty.Rows.Count = listStore.Count + 1;
                string Co = string.Empty;
                for (int iiCnt = 0; iiCnt < listStore.Count; iiCnt++)
                {
                    _Store = listStore[iiCnt];
                    FlxStkQty.SetData(iiCnt + 1, 0, _Store.Stor_ID.ToString());
                    FlxStkQty.SetData(iiCnt + 1, 2, ((LangArEn == 0) ? _Store.Arb_Des : _Store.Eng_Des).ToString());
                    Co = ((!(Co != string.Empty)) ? _Store.Stor_ID.ToString() : (Co + "|" + _Store.Stor_ID));
                }
                FlxInv.Cols[6].ComboList = Co;
                createGaid = _SysSetting.Calendr;
                if (createGaid.Value == 0 && createGaid.HasValue)
                {
                    txtGDate.BringToFront();
                }
                else
                {
                    txtHDate.BringToFront();
                }
                try
                {
                    label_Curr.Text = CmbCurr.Text;
                }
                catch
                {
                }
                if (VarGeneral.vDemo)
                {
                    IfDelete = false;
                }
                try
                {
                    if (VarGeneral.TString.ChkStatShow(permission.SetStr, 48))
                    {
                        checkBoxItem_BarCode.Enabled = false;
                    }
                }
                catch
                {
                    checkBoxItem_BarCode.Enabled = true;
                }
                //  Program.min();
                checkBoxItem_BarCode_CheckedChanged(null, null);
                if (_InvSetting.InvSetting.Substring(1, 1) == "0")
                {
                    txtDebit1.ButtonCustom.Enabled = false;
                    txtDebit2.ButtonCustom.Enabled = false;
                    txtDebit3.ButtonCustom.Enabled = false;
                    txtCredit1.ButtonCustom.Enabled = false;
                    txtCredit2.ButtonCustom.Enabled = false;
                    txtCredit3.ButtonCustom.Enabled = false;
                }
                if (VarGeneral.SSSTyp == 0)
                {
                    if (VarGeneral.SSSLev == "M")
                    {
                        label4.Visible = false;
                        txtCustNo.Visible = false;
                        button_SrchCustNo.Visible = false;
                        txtDebit1.Visible = false;
                        txtDebit2.Visible = false;
                        txtDebit3.Visible = false;
                        txtCredit1.Visible = false;
                        txtCredit2.Visible = false;
                        txtCredit3.Visible = false;
                        buttonX_GaidCash.Visible = false;
                        buttonX_GaidCredit.Visible = false;
                        buttonX_GaidNetwork.Visible = false;
                        labelD1.Visible = false;
                        labelD2.Visible = false;
                        labelD3.Visible = false;
                        labelC1.Visible = false;
                        labelC2.Visible = false;
                        labelC3.Visible = false;
                    }
                    txtDebit5.Visible = false;
                    button_CustD5.Visible = false;
                    txtCredit5.Visible = false;
                    button_CustC5.Visible = false;
                    checkBox_CostGaidTax.Visible = false;
                    label35.Visible = false;
                    label34.Visible = false;
                    txtDebit6.Visible = false;
                    label31.Visible = false;
                    txtCredit6.Visible = false;
                    label37.Visible = false;
                    checkBox_GaidDis.Visible = false;
                    label35.Visible = false;
                    label34.Visible = false;
                    txtCredit7.Visible = false;
                    checkBox_GaidBankComm.Visible = false;
                    label41.Visible = false;
                }
                label24.Visible = false;
                label23.Visible = false;
                label22.Visible = false;
                label25.Visible = false;
                label32.Visible = false;
                txtVCost.Visible = false;
                txtUnit.Visible = false;
                txtLCost.Visible = false;
                txtLPrice.Visible = false;
                txtVSerial.Visible = false;
                label28.Visible = false;
                doubleInput_LostOrWin.Visible = false;
                label_Curr.Visible = false;
                if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 67))
                {
                    txtRemark.ButtonCustom2.Visible = false;
                }
                try
                {
                    textBox_ID.ReadOnly = true;
                    if (!VarGeneral.TString.ChkStatShow(permission.SetStr, 43))
                    {
                        textBox_ID.Enabled = false;
                    }
                }
                catch
                {
                }
                UpdateVcr();
                if (VarGeneral.SSSLev == "R" || VarGeneral.SSSLev == "C" || VarGeneral.SSSLev == "H")
                {
                    frRep.buttonItem_TableInfo.Visible = true;
                    frRep.buttonItem_MoveTables.Visible = true;
                    superTabStripORDER.Visible = true;
                    labelTableTyp.Visible = true;
                    TableTyp();
                    expandableSplitter1.Visible = true;
                    frRep.buttonItem_AlarmLocalOrder.Visible = true;
                }
                try
                {
                    button_openCasheir.Enabled = VarGeneral.TString.ChkStatShow(permission.SetStr, 50);
                }
                catch
                {
                }
                try
                {
                    if (_InvSetting.InvpRINTERInfo.nTyp.Substring(0, 1) == "0")
                    {
                        //buttonItem_Order1_Print.Visible = false;
                        //buttonItem_Order2_Print.Visible = false;
                        //buttonItem_Order3_Print.Visible = false;
                        //buttonItem_Order4_Print.Visible = false;
                        //buttonItem_Order5_Print.Visible = false;
                    }
                }
                catch
                {
                }
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptWaterPackages.dll"))
                {
                    label4.Text = ((LangArEn == 0) ? "حساب الســائق :" : "Driver Acc :");
                    label10.Text = ((LangArEn == 0) ? "اسم الســــائق :" : "Driver Name :");
                    label13.Text = ((LangArEn == 0) ? "عنوان السائق :" : "Driver Add :");
                    label15.Text = ((LangArEn == 0) ? "السيارة : " : "Car :");
                    label18.Text = ((LangArEn == 0) ? "العميــــل :" : "Customer :");
                    CmbInvSide.Visible = false;
                    switchButton_PointActiv.Visible = false;
                    button_SrchCustPoints.Visible = false;
                    txtDiscoundPointsLoc.Visible = false;
                    txtDiscoundPoints.Visible = false;
                    label43.Visible = false;
                }
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptGlasses.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptGlasses.dll")))
                {
                    switchButton_PointActiv.OffText = ((LangArEn == 0) ? "غير جاهز" : "UnReady");
                    switchButton_PointActiv.OnText = ((LangArEn == 0) ? "جاهز" : "Ready");
                }
                if (VarGeneral.vDemo)
                {
                    frRep.buttonItem_MoveTables.Visible = false;
                }
                ChangeWindowSize();
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("Load:", error, enable: true);
                MessageBox.Show(error.Message);
            }
            try
            {
                if (_InvSetting.InvpRINTERInfo.nTyp.Substring(1, 1) == "1")
                {
                    puBar1.ChkA4Cahir.Caption = "Csh";
                }
                else
                {
                    puBar1.ChkA4Cahir.Caption = "A4";
                }
                if (VarGeneral.TString.ChkStatShow(Permmission.PeaperTyp, 0))
                {
                    puBar1.ChkA4Cahir.Checked = true;
                }
            }
            catch
            {
            }
            if (File.Exists(Application.StartupPath + "\\Script\\SecriptCustBarcode.dll"))
            {
                txtCustNo.ReadOnly = false;
            }
            else
            {
                txtCustNo.ReadOnly = true;
            }
            textBox_Barcode.Focus();
            checkoversaved();
            HP_Main.BringToFront();
            if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 85))
            {
                //    switchButton_Lock.Visible = false;
            }
            frRep.switchButtonItem_IsReturn = switchButtonItem_IsReturn;
            frRep.LangArEn = LangArEn;
            frRep.permission = permission;
            textBox_Barcode.Focus();

        }

        private void product_Click(object sender, Controls.ItemEventArg e)
        {
            
            item_CellClick(e.item_No);
        }

        private void ChangeWindowSize()
        {
            //if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 27))
            //{
            //    base.MaximizeBox = true;
            //    base.WindowState = FormWindowState.Maximized;
            //    if (VarGeneral.CurrentLang.ToString() == "0" ||VarGeneral.CurrentLang.ToString() == "")
            //    {
            //        btnPrevPage.Text = "سابق";
            //        btnNxtPage.Text = "تالي";
            //        buttonItem_BestSeller.Text = "أكثر مبيعا\u064c";
            //    }
            //    else
            //    {
            //        btnPrevPage.Text = "Prev";
            //        btnNxtPage.Text = "Next";
            //        buttonItem_BestSeller.Text = "Best Seller";
            //    }
            //}
            //else
            //{
            //    base.WindowState = FormWindowState.Normal;
            //    btnPrevPage.Text = "";
            //    btnNxtPage.Text = "";
            //    buttonItem_BestSeller.Text = "";
            //}
        }
#pragma warning disable CS0169 // The field 'FrmInvSalePoint.CatList' is never used
        List<T_CATEGORY> CatList;
#pragma warning restore CS0169 // The field 'FrmInvSalePoint.CatList' is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.CatPagePosition' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.catPageSize' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.catNoOFpages' is assigned but its value is never used
        int catNoOFpages = 0, catPageSize = 0, CatPagePosition = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.catNoOFpages' is assigned but its value is never used
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.catPageSize' is assigned but its value is never used
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.CatPagePosition' is assigned but its value is never used
        List<List<T_CATEGORY>> CatPagesLists = new List<List<T_CATEGORY>>();
        void setpage() { }
        private void FillCat()
        {
            try
            {
                Stock_DataDataContext dbc = new Stock_DataDataContext(VarGeneral.BranchCS);
                FillCombo();
            }
            catch (Exception error2)
            {
                VarGeneral.DebLog.writeLog("FillCatErrorr:", error2, enable: true);
            }
        }
        private void ItemsMainSetting()
        {


        }
        private void Button_ExportTable2_Click(object sender, EventArgs e)
        {
            try
            {
                ExportExcel.ExportToExcel(DGV_Main, "تقرير الطلبات المحلية");
            }
            catch
            {
            }
        }
        private void TextBox_Search_ButtonCustomClick(object sender, EventArgs e)
        {
            textBox_search.Text = string.Empty;
        }
        private void DGV_Main_AfterCheck(object sender, GridAfterCheckEventArgs e)
        {
            DGV_Main.PrimaryGrid.VirtualMode = false;
            GridRow crow = e.Item as GridRow;
            if (crow != null && crow.Checked)
            {
                GridPanel panel = new GridPanel();
                var q = db.StockInvHead(VarGeneral.InvTyp, crow.Cells["InvNo"].Value.ToString()).T_INVDETs.Select((T_INVDET item) => new
                {
                    item.ItmNo,
                    item.ItmDes,
                    item.ItmDesE,
                    item.ItmUnt,
                    item.ItmUntE,
                    item.StoreNo,
                    item.Cost,
                    item.Qty,
                    item.Price,
                    item.ItmDis,
                    item.Amount
                });
                panel.DataSource = q.ToList();
                panel.DataMember = "Line";
                crow.Rows.Add(panel);
                crow.SuperGrid.DataBindingComplete += DGV_Main_DataBindingComplete;
                panel.EnsureVisible(center: true);
            }
            else
            {
                crow?.Rows.Clear();
            }
        }
        private void PropHIOfferPanel(GridPanel panel)
        {
            DGV_Main.PrimaryGrid.UseAlternateRowStyle = true;
            DGV_Main.PrimaryGrid.DefaultVisualStyles.AlternateRowCellStyles.Default.Background.Color1 = Color.SkyBlue;
            panel.FrozenColumnCount = 1;
            panel.Columns[0].GroupBoxEffects = GroupBoxEffects.None;
            foreach (GridColumn column in panel.Columns)
            {
                column.ColumnSortMode = ColumnSortMode.Multiple;
            }
            panel.ColumnHeader.RowHeight = 40;
            for (int i = 0; i < panel.Columns.Count; i++)
            {
                DGV_Main.PrimaryGrid.Columns[i].CellStyles.Default.Alignment = Alignment.MiddleCenter;
                DGV_Main.PrimaryGrid.Columns[i].Visible = false;
            }
            int _width = DGV_Main.Width / 8;
            panel.Columns["InvNo"].Width = _width - 35;
            panel.Columns["InvNo"].Visible = columns_Names_visible_Waiter["InvNo"].IfDefault;
            panel.Columns["ArbTaf"].Width = _width + 150;
            panel.Columns["ArbTaf"].Visible = columns_Names_visible_Waiter["ArbTaf"].IfDefault;
            panel.Columns["EngTaf"].Width = _width - 50;
            panel.Columns["EngTaf"].Visible = columns_Names_visible_Waiter["EngTaf"].IfDefault;
            panel.Columns["RoomPerson"].Width = _width - 150;
            panel.Columns["RoomPerson"].Visible = columns_Names_visible_Waiter["RoomPerson"].IfDefault;
            panel.Columns["InvNetLocCur"].Width = _width - 50;
            panel.Columns["InvNetLocCur"].Visible = columns_Names_visible_Waiter["InvNetLocCur"].IfDefault;
            panel.Columns["HDat"].Width = _width - 100;
            panel.Columns["HDat"].Visible = columns_Names_visible_Waiter["HDat"].IfDefault;
            panel.Columns["GDat"].Width = _width - 100;
            panel.Columns["GDat"].Visible = columns_Names_visible_Waiter["GDat"].IfDefault;
            panel.Columns["Remark"].Width = _width + 200;
            panel.Columns["Remark"].Visible = columns_Names_visible_Waiter["Remark"].IfDefault;
        }
        private void PropLOfferPanel(GridPanel panel)
        {
            panel.ColumnAutoSizeMode = ColumnAutoSizeMode.DisplayedCells;
            panel.Columns["ItmNo"].HeaderText = ((LangArEn == 0) ? "رقم الصنف" : "Item No");
            panel.Columns["ItmDes"].HeaderText = ((LangArEn == 0) ? "الوصف " : "Description");
            panel.Columns["ItmDesE"].HeaderText = ((LangArEn == 0) ? "الوصف" : "Description");
            panel.Columns["ItmUnt"].HeaderText = ((LangArEn == 0) ? "الوحدة" : "Unit");
            panel.Columns["ItmUntE"].HeaderText = ((LangArEn == 0) ? "الوحدة" : "Unit");
            panel.Columns["StoreNo"].HeaderText = ((LangArEn == 0) ? "المستودع" : "Store");
            panel.Columns["Qty"].HeaderText = ((LangArEn == 0) ? "الكمية" : "Qrt.");
            panel.Columns["Cost"].HeaderText = ((LangArEn == 0) ? "التكلفة" : "Cost");
            panel.Columns["Price"].HeaderText = ((LangArEn == 0) ? "السعر" : "Price");
            panel.Columns["ItmDis"].HeaderText = ((LangArEn == 0) ? "الخصم" : "Discount");
            panel.Columns["Amount"].HeaderText = ((LangArEn == 0) ? "الاجمالي" : "Total");
            panel.Footer.Text = ((LangArEn == 0) ? "عدد الأسطر: " : "Lines Count: ") + panel.Rows.Count;
            panel.ReadOnly = true;
            panel.ShowRowDirtyMarker = true;
            panel.ColumnHeader.RowHeight = 30;
            for (int i = 0; i < panel.Columns.Count; i++)
            {
                panel.Columns[i].AutoSizeMode = ColumnAutoSizeMode.AllCells;
            }
            panel.Columns[1].Width = 160;
            panel.Columns[2].Width = 300;
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                panel.Columns["ItmDesE"].Visible = false;
                panel.Columns["ItmUntE"].Visible = false;
                panel.Columns["ItmDes"].Visible = true;
                panel.Columns["ItmUnt"].Visible = true;
            }
            else
            {
                panel.Columns["ItmDes"].Visible = false;
                panel.Columns["ItmUnt"].Visible = false;
                panel.Columns["ItmDesE"].Visible = true;
                panel.Columns["ItmUntE"].Visible = true;
            }
            panel.DefaultVisualStyles.CaptionStyles.Default.Alignment = Alignment.MiddleCenter;
            panel.DefaultVisualStyles.CellStyles.Default.Alignment = Alignment.MiddleCenter;
            panel.GroupByRow.Visible = false;
            panel.AllowEdit = false;
            panel.CheckBoxes = false;
            panel.ShowCheckBox = false;
            panel.ShowRowGridIndex = true;
        }
        private void DateTimePicker_Search_From_ValueChanged(object sender, EventArgs e)
        {
            Fill_DGV_Main();
        }
        private void TextBox_Search_InputTextChanged(object sender)
        {

            Fill_DGV_Main();
        }
        private void Button_Save_Click(object sender, EventArgs e)
        {
            try
            {
                textBox_ID.Focus();
                bool SmsMobile = false;
                VarGeneral.EmptyTablePrint = false;
                T_INVHED newData = new T_INVHED();
                if (State == FormState.New)
                {
                    SmsMobile = true;
                    if (!button_SrchTable.Enabled && button_Back.Visible && !switchButtonItem_IsReturn.Value)
                    {
                        newData = db.StockInvHead(21, data_thisRe.InvNo);
                        if (newData == null || string.IsNullOrEmpty(newData.InvNo))
                        {
                            MessageBox.Show((LangArEn == 0) ? "لقد تم استخدام هذا الطلب او تمت ازالته من قبل مستخدم اخر" : "This request has been used or removed by another user", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            button_Back_Click(sender, e);
                            return;
                        }
                    }
                }
                if (SaveData())
                {
                    if (newData != null && !string.IsNullOrEmpty(newData.InvNo))
                    {
                        VarGeneral.EmptyTablePrint = true;
                        List<string> myData = (from myRow in VarGeneral.RepData.Tables[0].AsEnumerable()
                                               select myRow.Field<string>("InvNo")).Distinct().ToList();
                        for (int i = 0; i < myData.Count; i++)
                        {
                            T_INVHED _Data = db.StockInvHead(21, myData[i]);
                            RemoveOrder(_Data, _typOption: true);
                        }
                    }
                    try
                    {
                        if (checkBoxItem_BarCode.Checked && orderNo_activate > 0)
                        {
                            if (orderNo_activate == 1)
                            {
                                data_this_ORDER1 = new T_INVHED();
                                //labelItem_OrderCust1.Text = "";
                                ORDER_ACC["ORDER_1"].ATxt1_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag1_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt1_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag1_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt2_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag2_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt2_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag2_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt3_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag3_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt3_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag3_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt5_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag5_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt5_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag5_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt6_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag6_D = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt6_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag6_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATxt7_C = string.Empty;
                                ORDER_ACC["ORDER_1"].ATag7_C = string.Empty;
                                GraidORDER1.Rows.Count = 0;
                            }
                            else if (orderNo_activate == 2)
                            {
                                data_this_ORDER2 = new T_INVHED();
                                //labelItem_OrderCust2.Text = "";
                                ORDER_ACC["ORDER_2"].ATxt1_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag1_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt1_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag1_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt2_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag2_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt2_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag2_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt3_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag3_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt3_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag3_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt5_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag5_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt5_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag5_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt6_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag6_D = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt6_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag6_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATxt7_C = string.Empty;
                                ORDER_ACC["ORDER_2"].ATag7_C = string.Empty;
                                GraidORDER2.Rows.Count = 0;
                            }
                            else if (orderNo_activate == 3)
                            {
                                data_this_ORDER3 = new T_INVHED();
                                //labelItem_OrderCust3.Text = "";
                                ORDER_ACC["ORDER_3"].ATxt1_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag1_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt1_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag1_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt2_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag2_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt2_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag2_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt3_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag3_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt3_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag3_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt5_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag5_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt5_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag5_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt6_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag6_D = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt6_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag6_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATxt7_C = string.Empty;
                                ORDER_ACC["ORDER_3"].ATag7_C = string.Empty;
                                GraidORDER3.Rows.Count = 0;
                            }
                            else if (orderNo_activate == 4)
                            {
                                data_this_ORDER4 = new T_INVHED();
                                //labelItem_OrderCust4.Text = "";
                                ORDER_ACC["ORDER_4"].ATxt1_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag1_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt1_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag1_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt2_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag2_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt2_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag2_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt3_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag3_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt3_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag3_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt5_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag5_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt5_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag5_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt6_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag6_D = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt6_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag6_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATxt7_C = string.Empty;
                                ORDER_ACC["ORDER_4"].ATag7_C = string.Empty;
                                GraidORDER4.Rows.Count = 0;
                            }
                            else if (orderNo_activate == 5)
                            {
                                data_this_ORDER5 = new T_INVHED();
                                //labelItem_OrderCust5.Text = "";
                                ORDER_ACC["ORDER_5"].ATxt1_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag1_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt1_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag1_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt2_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag2_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt2_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag2_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt3_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag3_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt3_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag3_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt5_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag5_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt5_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag5_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt6_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag6_D = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt6_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag6_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATxt7_C = string.Empty;
                                ORDER_ACC["ORDER_5"].ATag7_C = string.Empty;
                                GraidORDER5.Rows.Count = 0;
                            }
                        }
                    }
                    catch
                    {
                    }
                    //buttonItem_SaveOrder_VisibleChanged(sender, e);
                    if (isPrintSts)
                    {
                        _PrintInv(data_this.InvHed_ID, data_this.SalsManNo);
                    }
                    State = FormState.Saved;
                    RefreshPKeys();
                    puBar1.   TextBox_Index.EditValue = string.Concat(PKeys.IndexOf(data_this.InvNo ?? string.Empty) + 1);
                    SetReadOnly = true;
                    try
                    {
                        if (SmsMobile && VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 39) && !string.IsNullOrEmpty(data_this.CusVenNo) && !string.IsNullOrEmpty(db.StockAccDefWithOutBalance(data_this.CusVenNo).Mobile))
                        {
                            if (!string.IsNullOrEmpty(VarGeneral.Settings_Sys.smsUserName) && !string.IsNullOrEmpty(VarGeneral.Settings_Sys.smsPass) && !string.IsNullOrEmpty(VarGeneral.Settings_Sys.smsSenderName.Trim()))
                            {
                                if (!SendMobileMessage(db.StockAccDefWithOutBalance(data_this.CusVenNo).Mobile))
                                {
                                    MessageBox.Show((LangArEn == 0) ? "لم يتم ارسال رسالة نصية الى جوال العميل . يرجى التأكد من صحة بيانات إعدادات الرسائل النصية" : "SMS Message was not sent to the Cust . Please make sure the settings information is correct.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                                }
                            }
                            else
                            {
                                MessageBox.Show((LangArEn == 0) ? "لم يتم ارسال رسالة نصية الى جوال العميل . يرجى التأكد من صحة بيانات إعدادات الرسائل النصية" : "SMS Message was not sent to the Cust . Please make sure the settings information is correct.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            }
                        }
                    }
                    catch (Exception)
                    {
                        MessageBox.Show((LangArEn == 0) ? "لم يتم ارسال رسالة نصية الى جوال العميل . يرجى التأكد من صحة بيانات إعدادات الرسائل النصية" : "SMS Message was not sent to the Cust . Please make sure the settings information is correct.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    }
                    checkBoxItem_BarCode_CheckedChanged(null, null);
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("Button_Save_Click:", error, enable: true);
                MessageBox.Show(error.Message);
            }
            ChkPriceIncludeTax.Checked= VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 83);
            chkPriceIncludeTax_ValueChanged(null, null);

            VarGeneral.EmptyTablePrint = false;
        }
        private bool SendMobileMessage(string _Moile)
        {
            try
            {
                string msgTxt = string.Empty;
                try
                {
                    if (int.Parse(_SysSetting.Seting.Substring(40, 1)) == 0)
                    {
                        msgTxt = _SysSetting.smsMessage1 ?? string.Empty;
                    }
                    else if (int.Parse(_SysSetting.Seting.Substring(40, 1)) == 1)
                    {
                        msgTxt = _SysSetting.smsMessage2 ?? string.Empty;
                    }
                    else if (int.Parse(_SysSetting.Seting.Substring(40, 1)) == 2)
                    {
                        msgTxt = _SysSetting.smsMessage3 ?? string.Empty;
                    }
                    else if (int.Parse(_SysSetting.Seting.Substring(40, 1)) == 3)
                    {
                        msgTxt = _SysSetting.smsMessage4 ?? string.Empty;
                    }
                }
                catch
                {
                    msgTxt = _SysSetting.smsMessage1 ?? string.Empty;
                }
                if (string.IsNullOrEmpty(msgTxt))
                {
                    return false;
                }
                Regex regex = new Regex("^\\d{10}$");
                Match match = regex.Match(_Moile);
                if (!match.Success)
                {
                    _Moile = string.Empty;
                    MessageBox.Show((LangArEn == 0) ? "لم يتم ارسال رسالة نصية الى جوال المدير . يرجى التأكد من صحة بيانات إعدادات الرسائل النصية" : "SMS Message was not sent to the Boss . Please make sure the settings information is correct.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
                if (!_Moile.StartsWith("05"))
                {
                    _Moile = string.Empty;
                    MessageBox.Show((LangArEn == 0) ? "لم يتم ارسال رسالة نصية الى جوال المدير . يرجى التأكد من صحة بيانات إعدادات الرسائل النصية" : "SMS Message was not sent to the Boss . Please make sure the settings information is correct.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
                string M_Value = "966" + _Moile.Substring(1);
                string t = SendMessage(VarGeneral.Settings_Sys.smsUserName, VarGeneral.Settings_Sys.smsPass, ConvertToUnicode(msgTxt), VarGeneral.Settings_Sys.smsSenderName.Trim(), M_Value);
                ShowResult(t);
                if (t != "1")
                {
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                MessageBox.Show((LangArEn == 0) ? "لم يتم ارسال رسالة نصية الى جوال المدير . يرجى التأكد من صحة بيانات إعدادات الرسائل النصية" : "SMS Message was not sent to the Boss . Please make sure the settings information is correct.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return false;
            }
        }
        public string SendMessage(string username, string password, string msg, string sender, string numbers)
        {
            HttpWebRequest req = (HttpWebRequest)WebRequest.Create("http://www.mobily.ws/api/msgSend.php");
            req.Method = "POST";
            req.ContentType = "application/x-www-form-urlencoded";
            string SenderList = string.Empty;
            string postData = "mobile=" + username + "&password=" + password + "&numbers=" + (string.IsNullOrEmpty(SenderList) ? numbers : (SenderList + "," + numbers)) + "&sender=" + sender + "&msg=" + msg + "&applicationType=61";
            req.ContentLength = postData.Length;
            StreamWriter stOut = new StreamWriter(req.GetRequestStream(), Encoding.ASCII);
            stOut.Write(postData);
            stOut.Close();
            StreamReader stIn = new StreamReader(req.GetResponse().GetResponseStream());
            string strResponse = stIn.ReadToEnd();
            stIn.Close();
            return strResponse;
        }
        private void ShowResult(string res)
        {
            switch (res)
            {
                case "1":
                    break;
                case "2":
                    MessageBox.Show("إن رصيدك لدى برو سوفت قد إنتهى ولم يعد به أي رسائل. (لحل المشكلة قم بشحن رصيدك من الرسائل لدى برو سوفت. لشحن رصيدك إتبع تعليمات شحن الرصيد)");
                    break;
                case "3":
                    MessageBox.Show("إن رصيدك الحالي لا يكفي لإتمام عملية الإرسال. (لحل المشكلة قم بشحن رصيدك من الرسائل لدى برو سوفت. لشحن رصيدك إتبع تعليمات شحن الرصيد");
                    break;
                case "4":
                    MessageBox.Show("إن إسم المستخدم الذي إستخدمته للدخول إلى حساب الرسائل غير صحيح (تأكد من أن إسم المستخدم الذي إستخدمته هو نفسه الذي تستخدمه عند دخولك إلى موقع برو سوفت).");
                    break;
                case "5":
                    MessageBox.Show("هناك خطأ في كلمة المرور (تأكد من أن كلمة المرور التي تم إستخدامها هي نفسها التي تستخدمها عند دخولك موقع برو سوفت,إذا نسيت كلمة المرور إضغط على رابط نسيت كلمة المرور لتصلك رسالة على جوالك برقم المرور الخاص بك)");
                    break;
                case "6":
                    MessageBox.Show("إن صفحة الإرسال لاتجيب في الوقت الحالي (قد يكون هناك طلب كبير على الصفحة أو توقف مؤقت للصفحة فقط حاول مرة أخرى أو تواصل مع الدعم الفني إذا إستمر الخطأ)");
                    break;
                case "12":
                    MessageBox.Show("إن حسابك بحاجة إلى تحديث يرجى مراجعة الدعم الفني");
                    break;
                case "13":
                    MessageBox.Show("إن إسم المرسل الذي إستخدمته في هذه الرسالة لم يتم قبوله. (يرجى إرسال الرسالة بإسم مرسل آخر أو تعريف إسم المرسل لدى برو سوفت)");
                    break;
                case "14":
                    MessageBox.Show("إن إسم المرسل الذي إستخدمته غير معرف لدى برو سوفت. (يمكنك تعريف إسم المرسل من خلال صفحة إضافة إسم مرسل)");
                    break;
                case "15":
                    MessageBox.Show("يوجد رقم جوال خاطئ في الأرقام التي قمت بالإرسال لها. (تأكد من صحة الأرقام التي تريد الإرسال لها وأنها بالصيغة الدولية)");
                    break;
                case "16":
                    MessageBox.Show("الرسالة التي قمت بإرسالها لا تحتوي على إسم مرسل. (أدخل إسم مرسل عند إرسالك الرسالة)");
                    break;
                case "17":
                    MessageBox.Show("لم يتم ارسال نص الرسالة. الرجاء التأكد من ارسال نص الرسالة والتأكد من تحويل الرسالة الى يوني كود (الرجاء التأكد من استخدام الدالة()");
                    break;
                case "18":
                    MessageBox.Show("الارسال متوقف حاليا");
                    break;
                case "19":
                    MessageBox.Show("applicationType غير موجودة في الرابط");
                    break;
                case "-1":
                    MessageBox.Show("لم يتم التواصل مع خادم (Server) الإرسال برو سوفت بنجاح. (قد يكون هناك محاولات إرسال كثيرة تمت معا , أو قد يكون هناك عطل مؤقت طرأ على الخادم إذا إستمرت المشكلة يرجى التواصل مع الدعم الفني)");
                    break;
                case "-2":
                    MessageBox.Show("لم يتم الربط مع قاعدة البيانات (Database) التي تحتوي على حسابك وبياناتك لدى برو سوفت. (قد يكون هناك محاولات إرسال كثيرة تمت معا , أو قد يكون هناك عطل مؤقت طرأ على الخادم إذا إستمرت المشكلة يرجى التواصل مع الدعم الفني)");
                    break;
                default:
                    MessageBox.Show(res.ToString());
                    break;
            }
        }
        private string ConvertToUnicode(string val)
        {
            string msg2 = string.Empty;
            for (int i = 0; i < val.Length; i++)
            {
                msg2 += convertToUnicode(Convert.ToChar(val.Substring(i, 1)));
            }
            return msg2;
        }
        private string convertToUnicode(char ch)
        {
            UnicodeEncoding class1 = new UnicodeEncoding();
            byte[] msg = class1.GetBytes(Convert.ToString(ch));
            return fourDigits(msg[1] + msg[0].ToString("X"));
        }
        private string fourDigits(string val)
        {
            string result = string.Empty;
            switch (val.Length)
            {
                case 1:
                    result = "000" + val;
                    break;
                case 2:
                    result = "00" + val;
                    break;
                case 3:
                    result = "0" + val;
                    break;
                case 4:
                    result = val;
                    break;
            }
            return result;
        }
        public void TextBox_Index_InputTextChanged(object sender,EventArgs e)
        {
            int index = 0;
            try
            {
                index = Convert.ToInt32(puBar1.   TextBox_Index.EditValue);
            }
            catch
            {
            }
            if (index <= PKeys.Count && index > 0)
            {
                textBox_ID.Text = PKeys[index - 1];
            }
        }
        private void GetInvSetting()
        {
            _InvSetting = new T_INVSETTING();
            _SysSetting = new T_SYSSETTING();
            _GdAuto = new T_GdAuto();
            _InvSetting = db.StockInvSetting(VarGeneral.UserID, VarGeneral.InvTyp);
            _SysSetting = db.SystemSettingStock();
            _GdAuto = db.GdAutoStock();
        }
        private void textBox_ID_TextChanged(object sender, EventArgs e)
        {
            this.checkBox_Credit.CheckedChanging -= (this.checkBox_Credit_CheckedChanging);


            string no = string.Empty;
            try
            {
                no = textBox_ID.Text;
            }
            catch
            {
            }
            try
            {
                T_INVHED newData = new T_INVHED();
                try
                {
                    List<string> c = pkeys.Where((string g) => g == no).ToList();
                    newData = ((c.Count <= 0) ? new T_INVHED() : db.StockInvHead(VarGeneral.InvTyp, no));
                }
                catch (Exception error)
                {
                    VarGeneral.DebLog.writeLog("TextChanged_BarcodNo:", error, enable: true);
                }
                if (newData == null || string.IsNullOrEmpty(newData.InvNo))
                {
                    if (puBar1.Button_Add.Visibility==DevExpress.XtraBars.BarItemVisibility.Never || ! puBar1.Button_Add.Enabled)
                    {
                        textBox_ID.TextChanged -= textBox_ID_TextChanged;
                        try
                        {
                            textBox_ID.Text = data_this.InvNo;
                        }
                        catch
                        {
                        }
                        textBox_ID.TextChanged += textBox_ID_TextChanged;
                        return;
                    }
                    Clear();
                    txtGDate.Text = n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd");
                    txtHDate.Text = n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd");
                    txtTime.Text = DateTime.Now.ToString("HH:mm");
                    FlxInv.Rows.Count = 1;
                    if (!switchButtonItem_IsReturn.Value)
                    {
                        textBox_Sequenc.Text = db.MaxInvheadNoSequence.ToString();
                    }
                    State = FormState.New;
                    AutoGaidAcc();
                    puBar1.   TextBox_Index.EditValueChanged -= TextBox_Index_InputTextChanged;
                    puBar1.   TextBox_Index.EditValue = string.Concat(PKeys.Count + 1);
                    puBar1.   TextBox_Index.EditValueChanged +=   TextBox_Index_InputTextChanged;
                }
                else
                {
                    DataThis = newData;
                    int indexA = PKeys.IndexOf(newData.InvNo ?? string.Empty);
                    indexA++;
                    puBar1.   TextBox_Index.EditValueChanged -=   TextBox_Index_InputTextChanged;
                    puBar1.   TextBox_Index.EditValue = string.Concat(indexA);
                    puBar1.   TextBox_Index.EditValueChanged +=   TextBox_Index_InputTextChanged;
                }
            }
            catch
            {
            }
            FlxDat.Visible = false;
            UpdateVcr();
            this.checkBox_Credit.CheckedChanging += (this.checkBox_Credit_CheckedChanging);

        }
        private void lijsadf(object sender, CheckBoxXChangeEventArgs e)
        {
            throw new NotImplementedException();
        }
        private void Button_Filter_Click(object sender, EventArgs e)
        {
            Fill_DGV_Main();
        }
        private void DGV_Main_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                GridElement item = DGV_Main.GetElementAt(e.Location);
                if (item is GridColumnHeader)
                {
                    GridColumnHeader gch = (GridColumnHeader)item;
                    GridColumn column = null;
                    HeaderArea area = gch.GetHitArea(e.Location, ref column);
                    contextMenuStrip1.Show(Control.MousePosition);
                }
                else if (item.Visible)
                {
                    contextMenuStrip2.Show(Control.MousePosition);
                }
            }
        }
        private void ToolStripMenuItem_Det_Click(object sender, EventArgs e)
        {
            int rowIndex = Convert.ToInt32(DGV_Main.PrimaryGrid.Tag);
            puBar1.   TextBox_Index.EditValue = string.Concat(rowIndex + 1);
            expandableSplitter1.Expanded = true;
            ViewDetails_Click(sender, e);
        }
        private void DGV_Main_CellMouseDown(object sender, GridCellMouseEventArgs e)
        {
            DGV_Main.PrimaryGrid.Tag = e.GridCell.RowIndex;
        }
        private void DGV_Main_CellDoubleClick(object sender, GridCellDoubleClickEventArgs e)
        {
            if (switchButtonItem_OrderSts.Value)
            {
                ToolStripMenuItem_TransSales_Click(sender, e);
            }
        }
        private void DGV_Main_CellClick(object sender, GridCellClickEventArgs e)
        {
            DGV_Main.PrimaryGrid.Tag = e.GridCell.RowIndex;
        }
        private void txtHDate_Leave(object sender, EventArgs e)
        {
            try
            {
                if (VarGeneral.CheckDate(txtHDate.Text))
                {
                    txtHDate.Text = Convert.ToDateTime(txtHDate.Text).ToString("yyyy/MM/dd");
                    txtHDate.Text = n.FormatHijri(txtHDate.Text, "yyyy/MM/dd");
                    if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 77))
                    {
                        txtGDate.Text = n.HijriToGreg(txtHDate.Text, "yyyy/MM/dd");
                    }
                }
                else
                {
                    txtHDate.Text = n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd");
                }
            }
            catch
            {
                txtHDate.Text = string.Empty;
            }
        }
        private void txtGDate_Leave(object sender, EventArgs e)
        {
            try
            {
                if (VarGeneral.CheckDate(txtGDate.Text))
                {
                    txtGDate.Text = Convert.ToDateTime(txtGDate.Text).ToString("yyyy/MM/dd");
                    txtGDate.Text = n.FormatGreg(txtGDate.Text, "yyyy/MM/dd");
                    if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 77))
                    {
                        txtHDate.Text = n.GregToHijri(txtGDate.Text, "yyyy/MM/dd");
                    }
                }
                else
                {
                    txtGDate.Text = n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd");
                }
            }
            catch
            {
                txtGDate.Text = string.Empty;
            }
        }
        private void Frm_KeyPress(object sender, KeyPressEventArgs e)
        {
        }
        private void Frm_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Enter))
            {
                {
                    SendKeys.Send("{Tab}");
                }
            }
            if (e.KeyCode == Keys.F1 &&  puBar1.Button_Add.Enabled && puBar1.Button_Add.Visibility == DevExpress.XtraBars.BarItemVisibility.Always)
            {
                Button_Add_Click(sender, e);
            }
            else if (e.KeyCode == Keys.F2 &&  puBar1.Button_Save.Enabled &&  puBar1.Button_Save.Visibility==DevExpress.XtraBars.BarItemVisibility.Always && State != 0)
            {
                Button_Save_Click(sender, e);
            }
            else if (e.KeyCode == Keys.F3 && puBar1.Button_Delete.Enabled && puBar1.Button_Add.Visibility != DevExpress.XtraBars.BarItemVisibility.Never && State == FormState.Saved)
            {
                Button_Delete_Click(sender, e);
            }
            else if (e.KeyCode == Keys.F4 && puBar1.Button_Search.Enabled && puBar1.Button_Search.Visibility==BarItemVisibility.Always)
            {
               Button_Search_Click(sender, e);
            }
            else if (e.KeyCode == Keys.F10 && Button_ExportTable2.Enabled && Button_ExportTable2.Visible && !expandableSplitter1.Expanded)
            {
                Button_ExportTable2_Click(sender, e);
            }
            else if (e.KeyCode == Keys.F5)
            {
                if (expandableSplitter1.Expanded && buttonItem_Print.Enabled && buttonItem_Print.Visible && State == FormState.Saved)
                {
                    buttonItem_Print_Click(sender, e);
                }
                else if (Button_PrintTable.Enabled && Button_PrintTable.Visible && !expandableSplitter1.Expanded)
                {
                    Button_Print_Click(sender, e);
                }
            }
            else if (e.KeyCode == Keys.F9)
            {
                if (button_openCasheir.Enabled)
                {
                    button_openCasheir_Click(sender, e);
                }
            }
            else if (e.KeyCode == Keys.Escape)
            {
                if (State == FormState.Saved)
                {
                    Close();
                    return;
                }
                if (State != FormState.New)
                {
                    textBox_ID_TextChanged(sender, e);
                    return;
                }
                try
                {
                    if (int.Parse(Label_Count.Text) > 0 && !checkBoxItem_BarCode.Checked)
                    {
                        Button_Last_Click(sender, e);
                    }
                    else
                    {
                        Close();
                    }
                }
                catch
                {
                    Close();
                }
            }
            else if (VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 6))
            {
                if (e.KeyCode == Keys.ControlKey)
                {
                    label24.Visible = true;
                    label23.Visible = true;
                    label22.Visible = true;
                    label25.Visible = true;
                    txtVCost.Visible = true;
                    txtUnit.Visible = true;
                    txtLCost.Visible = true;
                    txtLPrice.Visible = true;
                    label28.Visible = true;
                    doubleInput_LostOrWin.Visible = true;
                    label_Curr.Visible = true;
                    dataGridView_ItemDet.Visible = false;
                }
                else if (e.KeyCode == Keys.Alt)
                {
                    label24.Visible = true;
                    label23.Visible = true;
                    label22.Visible = true;
                    label25.Visible = true;
                    txtVCost.Visible = true;
                    txtUnit.Visible = true;
                    txtLCost.Visible = true;
                    txtLPrice.Visible = true;
                    label28.Visible = true;
                    doubleInput_LostOrWin.Visible = true;
                    label_Curr.Visible = true;
                    dataGridView_ItemDet.Visible = false;
                }
            }
        }
        private bool ChkBarCod(string BarCod)
        {
            DefPack = 0;
            T_Item _ItmBarCod = new T_Item();
            listItems = db.FillItemBarCode_2(BarCod).ToList();
            for (int iiCnt = 0; iiCnt < listItems.Count; iiCnt++)
            {
                _ItmBarCod = listItems[iiCnt];
                if (BarCod == _ItmBarCod.BarCod1)
                {
                    _Items = _ItmBarCod;
                    DefPack = 1;
                    return true;
                }
                if (BarCod == _ItmBarCod.BarCod2)
                {
                    _Items = _ItmBarCod;
                    DefPack = 2;
                    return true;
                }
                if (BarCod == _ItmBarCod.BarCod3)
                {
                    _Items = _ItmBarCod;
                    DefPack = 3;
                    return true;
                }
                if (BarCod == _ItmBarCod.BarCod4)
                {
                    _Items = _ItmBarCod;
                    DefPack = 4;
                    return true;
                }
                if (BarCod == _ItmBarCod.BarCod5)
                {
                    _Items = _ItmBarCod;
                    DefPack = 5;
                    return true;
                }
            }
            try
            {
                if (VarGeneral.Settings_Sys.IsActiveBalance.Value && !string.IsNullOrEmpty(BarCod))
                {
                    _ItmBarCod = new T_Item();
                    listItems = db.FillItemBarCode_2(BarCod.Substring(VarGeneral.Settings_Sys.BarcodFrom.Value - 1, VarGeneral.Settings_Sys.BarcodTo.Value)).ToList();
                    if (listItems.Count > 0 && listItems[0].IsBalance.Value)
                    {
                        try
                        {
                            if (VarGeneral.Settings_Sys.BalanceType.Value == 0 || VarGeneral.Settings_Sys.BalanceType.Value == 2)
                            {
                                string QtyStr = string.Empty;
                                int _Loop = 0;
                                for (int i = VarGeneral.Settings_Sys.WightFrom.Value - 1; i < BarCod.Length; i++)
                                {
                                    _Loop++;
                                    try
                                    {
                                        QtyStr += BarCod.Substring(i, 1);
                                        if (_Loop >= VarGeneral.Settings_Sys.WightTo.Value)
                                        {
                                            break;
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }
                                try
                                {
                                    if (double.Parse(QtyStr) > 0.0 && VarGeneral.Settings_Sys.WightQ.Value.ToString().Length <= QtyStr.Length)
                                    {
                                        QtyStr = QtyStr.Substring(0, VarGeneral.Settings_Sys.WightQ.Value) + "." + QtyStr.Substring(VarGeneral.Settings_Sys.WightQ.Value);
                                    }
                                }
                                catch
                                {
                                }
                                if (!string.IsNullOrEmpty(QtyStr))
                                {
                                    Balance_Qty = double.Parse(Math.Round(double.Parse(QtyStr), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                                }
                            }
                        }
                        catch
                        {
                            Balance_Qty = -1.0;
                        }
                        try
                        {
                            if (VarGeneral.Settings_Sys.BalanceType.Value == 1 || VarGeneral.Settings_Sys.BalanceType.Value == 2)
                            {
                                string PriceStr = string.Empty;
                                int _Loop = 0;
                                for (int i = VarGeneral.Settings_Sys.PriceFrom.Value - 1; i < BarCod.Length; i++)
                                {
                                    _Loop++;
                                    try
                                    {
                                        PriceStr += BarCod.Substring(i, 1);
                                        if (_Loop >= VarGeneral.Settings_Sys.PriceTo.Value)
                                        {
                                            break;
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }
                                try
                                {
                                    if (double.Parse(PriceStr) > 0.0 && VarGeneral.Settings_Sys.PriceQ.Value.ToString().Length <= PriceStr.Length)
                                    {
                                        PriceStr = PriceStr.Substring(0, VarGeneral.Settings_Sys.PriceQ.Value) + "." + PriceStr.Substring(VarGeneral.Settings_Sys.PriceQ.Value);
                                    }
                                }
                                catch
                                {
                                }
                                if (!string.IsNullOrEmpty(PriceStr))
                                {
                                    Balance_Price = double.Parse(Math.Round(double.Parse(PriceStr), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                                }
                            }
                        }
                        catch
                        {
                            Balance_Price = -1.0;
                        }
                        for (int iiCnt = 0; iiCnt < listItems.Count; iiCnt++)
                        {
                            _ItmBarCod = listItems[iiCnt];
                            if (BarCod.Substring(VarGeneral.Settings_Sys.BarcodFrom.Value - 1, VarGeneral.Settings_Sys.BarcodTo.Value) == _ItmBarCod.BarCod1)
                            {
                                _Items = _ItmBarCod;
                                DefPack = 1;
                                return true;
                            }
                            if (BarCod.Substring(VarGeneral.Settings_Sys.BarcodFrom.Value - 1, VarGeneral.Settings_Sys.BarcodTo.Value) == _ItmBarCod.BarCod2)
                            {
                                _Items = _ItmBarCod;
                                DefPack = 2;
                                return true;
                            }
                            if (BarCod.Substring(VarGeneral.Settings_Sys.BarcodFrom.Value - 1, VarGeneral.Settings_Sys.BarcodTo.Value) == _ItmBarCod.BarCod3)
                            {
                                _Items = _ItmBarCod;
                                DefPack = 3;
                                return true;
                            }
                            if (BarCod.Substring(VarGeneral.Settings_Sys.BarcodFrom.Value - 1, VarGeneral.Settings_Sys.BarcodTo.Value) == _ItmBarCod.BarCod4)
                            {
                                _Items = _ItmBarCod;
                                DefPack = 4;
                                return true;
                            }
                            if (BarCod.Substring(VarGeneral.Settings_Sys.BarcodFrom.Value - 1, VarGeneral.Settings_Sys.BarcodTo.Value) == _ItmBarCod.BarCod5)
                            {
                                _Items = _ItmBarCod;
                                DefPack = 5;
                                return true;
                            }
                        }
                    }
                }
            }
            catch
            {
            }
            Balance_Qty = -1.0;
            Balance_Price = -1.0;
            return false;
        }
        private void txtTime_Leave(object sender, EventArgs e)
        {
            try
            {
                if (VarGeneral.CheckTime(txtTime.Text))
                {
                    txtTime.Text = TimeSpan.Parse(txtTime.Text).ToString();
                }
                else
                {
                    txtTime.Text = DateTime.Now.ToString("HH:mm");
                }
            }
            catch
            {
                txtTime.Text = DateTime.Now.ToString("HH:mm");
            }
        }
        private void FrmInvSalePoint_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.ControlKey)
            {
                label24.Visible = false;
                label23.Visible = false;
                label22.Visible = false;
                label25.Visible = false;
                label32.Visible = false;
                txtVCost.Visible = false;
                txtUnit.Visible = false;
                txtLCost.Visible = false;
                txtLPrice.Visible = false;
                txtVSerial.Visible = false;
                label28.Visible = false;
                doubleInput_LostOrWin.Visible = false;
                label_Curr.Visible = false;
            }
            else if (e.KeyCode == Keys.Alt)
            {
                label24.Visible = false;
                label23.Visible = false;
                label22.Visible = false;
                label25.Visible = false;
                label32.Visible = false;
                txtVCost.Visible = false;
                txtUnit.Visible = false;
                txtLCost.Visible = false;
                txtLPrice.Visible = false;
                txtVSerial.Visible = false;
                label28.Visible = false;
                doubleInput_LostOrWin.Visible = false;
                label_Curr.Visible = false;
            }
        }
        private void FlxInv_Click(object sender, EventArgs e)
        {
            //   chkPriceIncludeTax.Enabled = false;
            Button_Edit_Click(sender, e);
            ControlNo = 0;
            CheckSts(ControlNo);
            try
            {
                if (FlxInv.Row <= 0)
                {
                    return;
                }
                int vRowIndex = FlxInv.Row;
                if (FlxInv.Rows[vRowIndex].Height != 33)
                {
                    return;
                }
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll")) || File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll")))
                {
                    try
                    {
                        string vNewNo = InputDialog.mostrar(((LangArEn == 0) ? "أدخل " : "Enter ") + FlxInv.Cols[36].Caption, Text);
                        if (Program.sIsNumeric(vNewNo) && double.Parse(VarGeneral.TString.TEmpty(vNewNo)) >= 0.0)
                        {
                            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                            {
                                FlxInv.Row = vRowIndex;
                                FlxInv.RowSel = vRowIndex;
                                FlxInv.Col = 2;
                                FlxInv.ColSel = 2;
                                FlxInv.SetData(vRowIndex, 2, string.Empty);
                                FlxInv.SetData(vRowIndex, 2, vNewNo);
                                try
                                {
                                    FlxInv.SetData(vRowIndex - 1, 36, FlxInv.GetData(vRowIndex, 2).ToString());
                                    FlxInv_AfterEdit(null, new RowColEventArgs(vRowIndex - 1, 9));
                                }
                                catch
                                {
                                }
                            }
                            else
                            {
                                FlxInv.Row = vRowIndex;
                                FlxInv.RowSel = vRowIndex;
                                FlxInv.Col = 4;
                                FlxInv.ColSel = 4;
                                FlxInv.SetData(vRowIndex, 4, string.Empty);
                                FlxInv.SetData(vRowIndex, 4, vNewNo);
                                try
                                {
                                    FlxInv.SetData(vRowIndex - 1, 36, FlxInv.GetData(vRowIndex, 4).ToString());
                                    FlxInv_AfterEdit(null, new RowColEventArgs(vRowIndex - 1, 9));
                                }
                                catch
                                {
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show((LangArEn == 0) ? "يرجى التأكد من صحة الرقم . والمحاولة مجددا" : "Please confirm the number . and try again", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        }
                    }
                    catch
                    {
                    }
                    return;
                }
                FrmInvDetNoteSrch frm = new FrmInvDetNoteSrch();
                frm.Tag = LangArEn;
                try
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        frm.textbox_Detailes.Text = FlxInv.GetData(vRowIndex, 2).ToString() ?? string.Empty;
                    }
                    else
                    {
                        frm.textbox_Detailes.Text = FlxInv.GetData(vRowIndex, 4).ToString() ?? string.Empty;
                    }
                }
                catch
                {
                    frm.textbox_Detailes.Text = string.Empty;
                }
                frm.TopMost = true;
                frm.ShowDialog();
                if (!(frm.SerachNo != string.Empty))
                {
                    return;
                }
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    FlxInv.Row = vRowIndex;
                    FlxInv.RowSel = vRowIndex;
                    FlxInv.Col = 2;
                    FlxInv.ColSel = 2;
                    FlxInv.SetData(vRowIndex, 2, string.Empty);
                    FlxInv.SetData(vRowIndex, 2, FlxInv.GetData(vRowIndex, 2).ToString() + frm.SerachNo);
                    try
                    {
                        FlxInv.SetData(vRowIndex - 1, 36, FlxInv.GetData(vRowIndex, 2).ToString());
                    }
                    catch
                    {
                    }
                }
                else
                {
                    FlxInv.Row = vRowIndex;
                    FlxInv.RowSel = vRowIndex;
                    FlxInv.Col = 4;
                    FlxInv.ColSel = 4;
                    FlxInv.SetData(vRowIndex, 4, string.Empty);
                    FlxInv.SetData(vRowIndex, 4, FlxInv.GetData(vRowIndex, 4).ToString() + frm.SerachNo);
                    try
                    {
                        FlxInv.SetData(vRowIndex - 1, 36, FlxInv.GetData(vRowIndex, 4).ToString());
                    }
                    catch
                    {
                    }
                }
                try
                {
                    if (!(VarGeneral.SSSLev != "R") || !(VarGeneral.SSSLev != "C") || !(VarGeneral.SSSLev != "H") || FlxInv.Rows[vRowIndex].Height != 33 || !File.Exists(Application.StartupPath + "\\Script\\SecriptCeramic.dll"))
                    {
                        return;
                    }
                    try
                    {
                        if (string.IsNullOrEmpty(string.Concat(FlxInv.GetData(vRowIndex - 1, 36))) || string.IsNullOrEmpty(_Items.SecriptCeramic) || string.IsNullOrEmpty(_Items.SecriptCeramicCombo))
                        {
                            return;
                        }
                        int z = -1;
                        for (int i = 0; i < _Items.SecriptCeramic.Length; i++)
                        {
                            if (_Items.SecriptCeramic.Substring(i, 1) == ".")
                            {
                                z = i;
                                break;
                            }
                        }
                        if (z < 0)
                        {
                            return;
                        }
                        string cc = _Items.SecriptCeramic.Substring(z + 1);
                        if (!string.IsNullOrEmpty(cc))
                        {
                            string Zer_ = string.Empty;
                            for (int i = 0; i < cc.Length; i++)
                            {
                                Zer_ += "0";
                            }
                            int val_ = int.Parse("1" + Zer_);
                            FlxInv.SetData(vRowIndex - 1, 7, Math.Round(double.Parse(FlxInv.GetData(vRowIndex - 1, 36).ToString()) * (((_Items.SecriptCeramicCombo == "0") ? _Items.Pack1.Value : ((_Items.SecriptCeramicCombo == "1") ? _Items.Pack2.Value : ((_Items.SecriptCeramicCombo == "2") ? _Items.Pack3.Value : ((_Items.SecriptCeramicCombo == "3") ? _Items.Pack4.Value : _Items.Pack5.Value)))) / (double)val_), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                            FlxInv_AfterEdit(null, new RowColEventArgs(vRowIndex - 1, 7));
                        }
                    }
                    catch
                    {
                    }
                }
                catch
                {
                }
            }
            catch
            {
            }
        }
        private void FillComboMnd()
        {
            try
            {
                CmbLegate.DataSource = null;
            }
            catch
            {
            }
            try
            {
                CmbLegate.Items.Clear();
            }
            catch
            {
            }
            int _CmbIndex = CmbLegate.SelectedIndex;
            if (CmbInvSide.SelectedIndex <= 0)
            {
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    List<T_Mndob> listMnd = new List<T_Mndob>(db.T_Mndobs.Where((T_Mndob item) => item.Mnd_Typ == (int?)0).ToList());
                    listMnd.Insert(0, new T_Mndob());
                    CmbLegate.DataSource = listMnd;
                    CmbLegate.DisplayMember = "Arb_Des";
                    CmbLegate.ValueMember = "Mnd_ID";
                }
                else
                {
                    List<T_Mndob> listMnd = new List<T_Mndob>(db.T_Mndobs.Where((T_Mndob item) => item.Mnd_Typ == (int?)0).ToList());
                    listMnd.Insert(0, new T_Mndob());
                    CmbLegate.DataSource = listMnd;
                    CmbLegate.DisplayMember = "Eng_Des";
                    CmbLegate.ValueMember = "Mnd_ID";
                }
            }
            else
            {
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    List<T_Mndob> listMnd = new List<T_Mndob>(db.T_Mndobs.Where((T_Mndob item) => item.Mnd_Typ == (int?)((CmbInvSide.SelectedIndex == 1) ? 1 : 0)).ToList());
                    listMnd.Insert(0, new T_Mndob());
                    CmbLegate.DataSource = listMnd;
                    CmbLegate.DisplayMember = "Arb_Des";
                    CmbLegate.ValueMember = "Mnd_ID";
                }
                else
                {
                    List<T_Mndob> listMnd = new List<T_Mndob>(db.T_Mndobs.Where((T_Mndob item) => item.Mnd_Typ == (int?)((CmbInvSide.SelectedIndex == 1) ? 1 : 0)).ToList());
                    listMnd.Insert(0, new T_Mndob());
                    CmbLegate.DataSource = listMnd;
                    CmbLegate.DisplayMember = "Eng_Des";
                    CmbLegate.ValueMember = "Mnd_ID";
                }
                FlxInv.Rows.Count = 1;
                FlxStkQty.Clear(ClearFlags.Content, 1, 1, 1, 1);
                ItemDetRemoved = new List<int>();
                try
                {
                    dataGridView_ItemDet.Clear(ClearFlags.Content, 1, 1, dataGridView_ItemDet.Rows.Count - 1, 34);
                }
                catch
                {
                }
                dataGridView_ItemDet.Rows.Count = 1;
                dataGridView_ItemDet.Visible = false;
                GetInvTot();
                ItemsMainSetting();
            }
            CmbLegate.SelectedIndex = _CmbIndex;
            if (CmbInvSide.SelectedIndex == 2)
            {
                label4.Text = ((LangArEn == 0) ? "حساب العميــل :" : "Cust Account :");
            }
            else if (CmbInvSide.SelectedIndex == 3)
            {
                label4.Text = ((LangArEn == 0) ? "حساب المــورد :" : "Suppl Account :");
            }
            else
            {
                label4.Text = ((LangArEn == 0) ? "حساب العميــل :" : "Cust Account :");
            }
        }
        private void FillCombo()
        {
            int _CmbIndex = CmbInvPrice.SelectedIndex;
            CmbInvPrice.Items.Clear();
            CmbInvSide.Items.Clear();
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                CmbInvPrice.Items.Add("الأفتراضي");
                CmbInvPrice.Items.Add("سعر الجملة");
                CmbInvPrice.Items.Add("سعر الموزع");
                CmbInvPrice.Items.Add("سعر المندوب");
                CmbInvPrice.Items.Add("سعر التجزئة");
                CmbInvPrice.Items.Add("سعر آخر");
            }
            else
            {
                CmbInvPrice.Items.Add("Default");
                CmbInvPrice.Items.Add("Wholesale price");
                CmbInvPrice.Items.Add("Distributor price");
                CmbInvPrice.Items.Add("Legates Price");
                CmbInvPrice.Items.Add("Retail price");
                CmbInvPrice.Items.Add("Other price");
            }
            CmbInvPrice.SelectedIndex = _CmbIndex;
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                CmbInvSide.Items.Add("--- خيارات صرف البضاعة ---");
                CmbInvSide.Items.Add("مندوب خارجي");
                CmbInvSide.Items.Add("عميل");
                CmbInvSide.Items.Add("مورد");
            }
            else
            {
                CmbInvSide.Items.Add("--- Goods Disbursed ---");
                CmbInvSide.Items.Add("External delegates");
                CmbInvSide.Items.Add("Customer");
                CmbInvSide.Items.Add("Supplier");
            }
            CmbInvSide.SelectedIndex = 0;
            _CmbIndex = CmbCurr.SelectedIndex;
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                List<T_Curency> listAccCat = new List<T_Curency>(db.T_Curencies.Select((T_Curency item) => item).ToList());
                CmbCurr.DataSource = listAccCat;
                CmbCurr.DisplayMember = "Arb_Des";
                CmbCurr.ValueMember = "Curency_ID";
            }
            else
            {
                List<T_Curency> listCurr = new List<T_Curency>(db.T_Curencies.Select((T_Curency item) => item).ToList());
                CmbCurr.DataSource = listCurr;
                CmbCurr.DisplayMember = "Eng_Des";
                CmbCurr.ValueMember = "Curency_ID";
            }
            CmbCurr.SelectedIndex = _CmbIndex;
            _CmbIndex = CmbCostC.SelectedIndex;
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                List<T_CstTbl> listCs = new List<T_CstTbl>(db.T_CstTbls.Select((T_CstTbl item) => item).ToList());
                CmbCostC.DataSource = listCs;
                CmbCostC.DisplayMember = "Arb_Des";
                CmbCostC.ValueMember = "Cst_ID";
            }
            else
            {
                List<T_CstTbl> listCs = new List<T_CstTbl>(db.T_CstTbls.Select((T_CstTbl item) => item).ToList());
                CmbCostC.DataSource = listCs;
                CmbCostC.DisplayMember = "Eng_Des";
                CmbCostC.ValueMember = "Cst_ID";
            }
            CmbCostC.SelectedIndex = _CmbIndex;
            FillComboMnd();
        }
        public void SetData(T_INVHED value)
        {
            switch_InSide.ValueChanged -= switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged -= switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged -= switch_Dilevry_ValueChanged;
            try
            {
                try
                {
                    dataGridView_ItemDet.Clear(ClearFlags.Content, 1, 1, dataGridView_ItemDet.Rows.Count - 1, 34);
                }
                catch
                {
                }
                dataGridView_ItemDet.Rows.Count = 1;
                dataGridView_ItemDet.Visible = false;
                State = FormState.Saved;
               puBar1.Button_Save.Enabled = false;
                textBox_ID.Tag = value.InvHed_ID;
                text_Mobile.Text = (value.CusVenMob!=null?value.CusVenMob:"");
                if (!switchButtonItem_IsReturn.Value)
                {
                    textBox_Sequenc.Text = value.InvId.Value.ToString();
                }
                txtCustNo.Text = value.CusVenNo.ToString();
                button_AddToTable.Visible = false;
                try
                {
                    if (!string.IsNullOrEmpty(value.CusVenNo))
                    {
                        txtCustName.Text = ((LangArEn == 0) ? db.StockAccDefWithOutBalance(value.CusVenNo).Arb_Des : db.StockAccDefWithOutBalance(value.CusVenNo).Eng_Des);
                    }
                    else
                    {
                        txtCustName.Text = value.CusVenNm.ToString();
                    }
                }
                catch
                {
                    txtCustName.Text = value.CusVenNm.ToString();
                }
                try
                {
                    if (value.RoomNo > 1 && value.RoomSts.Value)
                    {
                        if (value.T_Room.waiterNo.HasValue)
                        {
                            textBox_WaiterName.Text = ((LangArEn == 0) ? db.StockWaiterID(value.T_Room.waiterNo.Value).Arb_Des : db.StockWaiterID(value.T_Room.waiterNo.Value).Eng_Des);
                            textBox_WaiterName.Tag = value.T_Room.waiterNo.Value.ToString();
                        }
                        else
                        {
                            textBox_WaiterName.Tag = string.Empty;
                            textBox_WaiterName.Text = string.Empty;
                        }
                    }
                    else
                    {
                        textBox_WaiterName.Tag = string.Empty;
                        textBox_WaiterName.Text = string.Empty;
                    }
                }
                catch
                {
                    textBox_WaiterName.Tag = string.Empty;
                    textBox_WaiterName.Text = string.Empty;
                }
                if (VarGeneral.SSSLev == "M")
                {
                    txtCustNo.Text = string.Empty;
                }
                txtAddress.Text = value.CusVenAdd;
                txtTele.Text = value.CusVenTel;
                txtRemark.Text = value.Remark;
                txtDiscountP.Value = value.InvDisPrs.Value;
                txtDiscountVal.Value = value.InvDisVal.Value;
                txtDiscountValLoc.Value = value.InvDisValLocCur.Value;
                txtDiscoundPoints.Value = value.DesPointsValue.Value;
                txtDiscoundPointsLoc.Value = value.DesPointsValueLocCur.Value;
                txtPointCount.Value = value.PointsCount.Value;
                try
                {
                    switchButton_PointActiv.Value = value.IsPoints.Value;
                }
                catch
                {
                    switchButton_PointActiv.Value = false;
                }
                txtDueAmount.Value = value.InvNet.Value;
                txtDueAmountLoc.Value = value.InvNetLocCur.Value;
                try
                {
                    if (VarGeneral.CheckDate(value.GDat))
                    {
                        txtGDate.Text = Convert.ToDateTime(value.GDat).ToString("yyyy/MM/dd");
                    }
                    else
                    {
                        txtGDate.Text = n.FormatGreg(value.GDat, "yyyy/MM/dd");
                    }
                }
                catch
                {
                    txtGDate.Text = value.GDat;
                }
                try
                {
                    if (VarGeneral.CheckDate(value.HDat))
                    {
                        txtHDate.Text = Convert.ToDateTime(value.HDat).ToString("yyyy/MM/dd");
                    }
                    else
                    {
                        txtHDate.Text = n.FormatHijri(value.HDat, "yyyy/MM/dd");
                    }
                }
                catch
                {
                    txtHDate.Text = value.HDat;
                }
                if (VarGeneral.CheckDate(value.EstDat))
                {
                    txtDueDate.Text = Convert.ToDateTime(value.EstDat).ToString("yyyy/MM/dd");
                }
                else
                {
                    txtDueDate.Text = string.Empty;
                }
                txtDueDate_Leave(null, null);
                txtRef.Text = value.RefNo;
                CmbInvSide.SelectedIndex = value.PaymentOrderTyp.GetValueOrDefault();
                FillComboMnd();
                if (VarGeneral.CheckTime(value.LTim))
                {
                    txtTime.Text = value.LTim;
                }
                txtTotalAm.Value = value.InvTot.Value;
                txtTotalAmLoc.Value = value.InvTotLocCur.Value;
                txtTotalQ.Value = value.InvQty.Value;
                txtCustNet.Value = value.CustNet.Value;
                txtCustRep.Value = value.CustRep.Value;
                for (int iiCnt = 0; iiCnt < CmbCostC.Items.Count; iiCnt++)
                {
                    CmbCostC.SelectedIndex = iiCnt;
                    if (CmbCostC.SelectedValue != null && CmbCostC.SelectedValue.ToString() == value.InvCstNo.Value.ToString())
                    {
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < CmbCurr.Items.Count; iiCnt++)
                {
                    CmbCurr.SelectedIndex = iiCnt;
                    if (CmbCurr.SelectedValue != null && CmbCurr.SelectedValue.ToString() == value.CurTyp.Value.ToString())
                    {
                        break;
                    }
                }
                if (CmbCurr.SelectedIndex != -1)
                {
                    RateValue = db.StockCurencyID(int.Parse(CmbCurr.SelectedValue.ToString())).Rate.Value;
                }
                if (value.MndNo.HasValue)
                {
                    CmbLegate.SelectedValue = value.MndNo;
                }
                else
                {
                    CmbLegate.SelectedIndex = 0;
                }
                if (value.CustPri.HasValue)
                {
                    CmbInvPrice.SelectedIndex = value.CustPri.Value;
                }
                if (value.InvCashPay.HasValue)
                {
                    int? invCashPay = value.InvCashPay;
                    if (invCashPay.Value == 0 && invCashPay.HasValue)
                    {
                        checkBox_Chash.Checked = true;
                    }
                    else if (value.InvCashPay == 1)
                    {
                        checkBox_Credit.Checked = true;
                    }
                    else
                    {
                        checkBox_NetWork.Checked = true;
                    }
                }
                checkBox_Chash.CheckedChanged -= checkBox_Chash_CheckedChanged;
                if (checkBox_Credit.Checked)
                {
                    checkBox_Chash.Checked = false;
                }
                else
                {
                    checkBox_Chash.Checked = true;
                }
                checkBox_Chash.CheckedChanged += checkBox_Chash_CheckedChanged;
                textBox_Usr.Text = ((LangArEn == 0) ? dbc.RateUsr(value.SalsManNo).UsrNamA : dbc.RateUsr(value.SalsManNo).UsrNamE);
                txtPaymentLoc.Value = value.CashPayLocCur.Value;
                doubleInput_NetWorkLoc.Value = value.NetworkPayLocCur.Value;
                doubleInput_CreditLoc.Value = value.CreditPayLocCur.Value;
                txtPayment.Value = value.Puyaid.Value;
                txtSteel.Value = value.Remming.Value;
                LDataThis = new BindingList<T_INVDET>(value.T_INVDETs).ToList();
                txtDebit1.Text = string.Empty;
                txtDebit2.Text = string.Empty;
                txtDebit3.Text = string.Empty;
                txtCredit1.Text = string.Empty;
                txtCredit2.Text = string.Empty;
                txtCredit3.Text = string.Empty;
                if (value.GadeId.HasValue)
                {
                    listGdHead = db.StockGdHeadid((int)value.GadeId.Value);
                    if (listGdHead.Count != 0)
                    {
                        _GdHead = listGdHead[0];
                        listGdDet = _GdHead.T_GDDETs.ToList();
                        for (int i = 0; i < listGdDet.Count; i++)
                        {
                            if (listGdDet[i].Lin == 1)
                            {
                                if (listGdDet[i].gdValue > 0.0)
                                {
                                    txtDebit1.Tag = listGdDet[i].AccNo;
                                    txtDebit1.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                                }
                                else
                                {
                                    txtCredit1.Tag = listGdDet[i].AccNo;
                                    txtCredit1.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                                }
                            }
                            else if (listGdDet[i].Lin == 2)
                            {
                                if (listGdDet[i].gdValue > 0.0)
                                {
                                    txtDebit2.Tag = listGdDet[i].AccNo;
                                    txtDebit2.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                                }
                                else
                                {
                                    txtCredit2.Tag = listGdDet[i].AccNo;
                                    txtCredit2.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                                }
                            }
                            else if (listGdDet[i].gdValue > 0.0)
                            {
                                txtDebit3.Tag = listGdDet[i].AccNo;
                                txtDebit3.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                            }
                            else
                            {
                                txtCredit3.Tag = listGdDet[i].AccNo;
                                txtCredit3.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                            }
                        }
                    }
                    else
                    {
                        _GdHead = new T_GDHEAD();
                    }
                }
                if (value.OrderTyp.HasValue)
                {
                    int? invCashPay = value.OrderTyp;
                    if (invCashPay.Value == 0 && invCashPay.HasValue)
                    {
                        switch_InSide_ValueChanged(null, null);
                    }
                    else if (value.OrderTyp == 1)
                    {
                        switch_OutSide_ValueChanged(null, null);
                    }
                    else
                    {
                        switch_Dilevry_ValueChanged(null, null);
                    }
                }
                if (value.RoomNo.HasValue)
                {
                    txtTable.Tag = value.RoomNo.Value;
                    txtTable.Value = int.Parse(db.StockRommID(value.RoomNo.Value).RomeNo.ToString());
                }
                else
                {
                    txtTable.Tag = "1";
                    txtTable.Value = 0;
                }
                txtPersons.Value = value.RoomPerson.Value;
                if (value.chauffeurNo.HasValue)
                {
                    textBox_Driver.Tag = value.chauffeurNo;
                    string text3 = (textBox_Driver.Text = (textBox_Driver.Text = ((LangArEn == 0) ? db.StockDriv(value.chauffeurNo.Value.ToString()).Arb_Des : db.StockDriv(value.chauffeurNo.Value.ToString()).Eng_Des)));
                }
                else
                {
                    textBox_Driver.Tag = string.Empty;
                    textBox_Driver.Text = string.Empty;
                }
                txtDebit5.Text = string.Empty;
                txtCredit5.Text = string.Empty;
                txtTotTax.Value = value.InvAddTax.Value;
                txtTotTaxLoc.Value = value.InvAddTaxlLoc.Value;
                switchButton_Tax.ValueChanged -= switchButton_Tax_ValueChanged;
                if (value.IsTaxUse.Value)
                {
                    switchButton_Tax.Value = true;
                }
                else
                {
                    switchButton_Tax.Value = false;
                }
                switchButton_Tax.ValueChanged += switchButton_Tax_ValueChanged;
                switchButton_TaxLines.ValueChanged -= switchButton_TaxLines_ValueChanged;
                if (value.IsTaxLines.Value)
                {
                    switchButton_TaxLines.Value = true;
                }
                else
                {
                    switchButton_TaxLines.Value = false;
                }
                if (value.IsTaxByTotal.Value)
                {
                    switchButton_TaxByTotal.Value = true;
                }
                else
                {
                    switchButton_TaxByTotal.Value = false;
                }
                if (value.IsTaxByNet.Value)
                {
                    switchButton_TaxByNet.Value = true;
                }
                else
                {
                    switchButton_TaxByNet.Value = false;
                }
                textBoxItem_TaxByNetValue.Text = value.TaxByNetValue.Value.ToString();
                switchButton_TaxLines.ValueChanged += switchButton_TaxLines_ValueChanged;
                if (value.IsTaxGaid.HasValue)
                {
                    checkBox_CostGaidTax.Checked = value.IsTaxGaid.Value;
                }
                else
                {
                    checkBox_CostGaidTax_CheckedChanged(null, null);
                }
                if (value.TaxGaidID.HasValue)
                {
                    listGdHeadCostTax = db.StockGdHeadid((int)value.TaxGaidID.Value);
                    if (listGdHeadCostTax.Count != 0)
                    {
                        _GdHeadCostTax = listGdHeadCostTax[0];
                        listGdDetCostTax = _GdHeadCostTax.T_GDDETs.ToList();
                        for (int i = 0; i < listGdDetCostTax.Count; i++)
                        {
                            if (listGdDetCostTax[i].gdValue > 0.0)
                            {
                                txtDebit5.Tag = listGdDetCostTax[i].AccNo;
                                txtDebit5.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostTax[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostTax[i].AccNo).Eng_Des);
                            }
                            else
                            {
                                txtCredit5.Tag = listGdDetCostTax[i].AccNo;
                                txtCredit5.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostTax[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostTax[i].AccNo).Eng_Des);
                            }
                        }
                    }
                    else
                    {
                        _GdHeadCostTax = new T_GDHEAD();
                    }
                }
                txtDebit6.Text = string.Empty;
                txtCredit6.Text = string.Empty;
                txtTotDis.Value = value.InvValGaidDis.Value;
                txtTotDisLoc.Value = value.InvValGaidDislLoc.Value;
                switchButton_Dis.ValueChanged -= switchButton_Dis_ValueChanged;
                if (value.IsDisUse1.Value)
                {
                    switchButton_Dis.Value = true;
                }
                else
                {
                    switchButton_Dis.Value = false;
                }
                switchButton_Dis.ValueChanged += switchButton_Dis_ValueChanged;
                if (value.IsDisGaid.HasValue)
                {
                    checkBox_GaidDis.Checked = value.IsDisGaid.Value;
                }
                else
                {
                    checkBox_GaidDis_CheckedChanged(null, null);
                }
                if (value.DisGaidID1.HasValue)
                {
                    listGdHeadCostDis = db.StockGdHeadid((int)value.DisGaidID1.Value);
                    if (listGdHeadCostDis.Count != 0)
                    {
                        _GdHeadCostDis = listGdHeadCostDis[0];
                        listGdDetCostDis = _GdHeadCostDis.T_GDDETs.ToList();
                        for (int i = 0; i < listGdDetCostDis.Count; i++)
                        {
                            if (listGdDetCostDis[i].gdValue > 0.0)
                            {
                                txtDebit6.Tag = listGdDetCostDis[i].AccNo;
                                txtDebit6.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostDis[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostDis[i].AccNo).Eng_Des);
                            }
                            else
                            {
                                txtCredit6.Tag = listGdDetCostDis[i].AccNo;
                                txtCredit6.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostDis[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostDis[i].AccNo).Eng_Des);
                            }
                        }
                    }
                    else
                    {
                        _GdHeadCostDis = new T_GDHEAD();
                    }
                }
                txtCredit7.Text = string.Empty;
                txtTotBankComm.Value = value.InvComm.Value;
                txtTotBankCommLoc.Value = value.InvCommLoc.Value;
                switchButton_BankComm.ValueChanged -= switchButton_BankComm_ValueChanged;
                if (value.IsCommUse.Value)
                {
                    switchButton_BankComm.Value = true;
                }
                else
                {
                    switchButton_BankComm.Value = false;
                }
                switchButton_BankComm.ValueChanged += switchButton_BankComm_ValueChanged;
                if (value.IsCommGaid.HasValue)
                {
                    checkBox_GaidBankComm.Checked = value.IsCommGaid.Value;
                }
                else
                {
                    checkBox_GaidBankComm_CheckedChanged(null, null);
                }
                if (value.CommGaidID.HasValue)
                {
                    listGdHeadCostComm = db.StockGdHeadid((int)value.CommGaidID.Value);
                    if (listGdHeadCostComm.Count != 0)
                    {
                        _GdHeadCostComm = listGdHeadCostComm[0];
                        listGdDetCostComm = _GdHeadCostComm.T_GDDETs.ToList();
                        for (int i = 0; i < listGdDetCostComm.Count; i++)
                        {
                            if (listGdDetCostComm[i].gdValue < 0.0)
                            {
                                txtCredit7.Tag = listGdDetCostComm[i].AccNo;
                                txtCredit7.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostComm[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostComm[i].AccNo).Eng_Des);
                            }
                        }
                    }
                    else
                    {
                        _GdHeadCostComm = new T_GDHEAD();
                    }
                }
                try
                {
                    if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 62))
                    {
                        doubleInput_LostOrWin.Value = value.InvNetLocCur.Value - Math.Abs(value.InvCost.Value);
                    }
                    else
                    {
                        doubleInput_LostOrWin.Value = value.InvNetLocCur.Value - Math.Abs(value.InvCost.Value) - txtTotTax.Value;
                    }
                }
                catch
                {
                    doubleInput_LostOrWin.Value = 0.0;
                }
                SetLines(LDataThis);
                CmbInvSide_SelectedIndexChanged(null, null);
                TableTyp();
                try
                {
                    if (checkBox_Credit.Checked)
                    {
                        if (string.IsNullOrEmpty(txtDebit2.Text))
                        {
                            txtDebit2.Tag = txtDebit3.Tag;
                            txtDebit2.Text = txtDebit3.Text;
                            txtCredit2.Tag = txtCredit3.Tag;
                            txtCredit2.Text = txtCredit3.Text;
                        }
                        else
                        {
                            txtDebit3.Tag = txtDebit2.Tag;
                            txtDebit3.Text = txtDebit2.Text;
                            txtCredit3.Tag = txtCredit2.Tag;
                            txtCredit3.Text = txtCredit2.Text;
                        }
                    }
                }
                catch
                {
                }
                AutoGaidAcc();
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("SetData:", error, enable: true);
                MessageBox.Show(error.Message);
            }
            switch_InSide.ValueChanged += switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged += switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged += switch_Dilevry_ValueChanged;
            if (VarGeneral.Settings_Sys.IsCustomerDisplay.Value)
            {
                CustomerDisplayData(txtDueAmountLoc.Value, 0.0);
            }
        }
        private double Profit()
        {
            double InvCost = 0.0;
            for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
            {
                try
                {
                    InvCost += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 10)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12))));
                }
                catch
                {
                }
            }
            try
            {
                return txtDueAmountLoc.Value - InvCost;
            }
            catch
            {
                return 0.0;
            }
        }
        public void SetLines(List<T_INVDET> listDet)
        {
            try
            {
                FlxInv.Rows.Count = 1;
                FlxInv.Rows.Count = listDet.Count * 2 + 1;
                try
                {
                    List<T_INVDET> CheckOfferTypData = listDet.Where((T_INVDET g) => g.OfferTyp.HasValue).ToList();
                    if (CheckOfferTypData.Count > 0)
                    {
                        int GetDataCount = CheckOfferTypData.Where((T_INVDET g) => g.OfferTyp.Value == 1).ToList().Count;
                        if (GetDataCount > 0)
                        {
                            FlxInv.Rows.Count -= GetDataCount;
                        }
                    }
                }
                catch
                {
                }
                FlxInv.Cols[27].Visible = false;
                FlxInv.Cols[35].Visible = false;
                int i = 0;
                for (int iiCnt = 1; iiCnt <= FlxInv.Rows.Count; iiCnt += 2)
                {
                    if (i >= listDet.Count)
                    {
                        break;
                    }
                    _InvDet = listDet[i];
                    FlxInv.Rows[iiCnt].Height = 35;
                    int Ser = _InvDet.InvSer.GetValueOrDefault();
                    FlxInv.SetData(iiCnt, 0, Ser.ToString());
                    FlxInv.SetData(iiCnt, 1, _InvDet.ItmNo.Trim());
                    FlxInv.SetData(iiCnt, 2, _InvDet.ItmDes.ToString());
                    FlxInv.SetData(iiCnt, 3, _InvDet.ItmUnt.ToString());
                    FlxInv.SetData(iiCnt, 4, _InvDet.ItmDesE.ToString());
                    FlxInv.SetData(iiCnt, 5, _InvDet.ItmUntE.ToString());
                    FlxInv.SetData(iiCnt, 6, _InvDet.StoreNo.Value);
                    FlxInv.SetData(iiCnt, 7, Math.Abs((decimal)_InvDet.Qty.Value));
                    FlxInv.SetData(iiCnt, 8, _InvDet.Price.Value);
                    FlxInv.SetData(iiCnt, 9, _InvDet.ItmDis);
                    FlxInv.SetData(iiCnt, 10, _InvDet.Cost.Value);
                    FlxInv.SetData(iiCnt, 11, _InvDet.ItmUntPak.Value);
                    FlxInv.SetData(iiCnt, 12, Math.Abs((decimal)_InvDet.RealQty.Value));
                    FlxInv.SetData(iiCnt, 13, _InvDet.itmInvDsc.Value);
                    FlxInv.SetData(iiCnt, 14, _InvDet.Cost.Value);
                    FlxInv.SetData(iiCnt, 15, _InvDet.ItmDes.ToString());
                    FlxInv.SetData(iiCnt, 16, _InvDet.Cost.Value);
                    FlxInv.SetData(iiCnt, 18, _InvDet.T_Item.DefultUnit.Value);
                    FlxInv.SetData(iiCnt, 19, _InvDet.T_Item.Price1.Value);
                    FlxInv.SetData(iiCnt, 20, _InvDet.T_Item.Price2.Value);
                    FlxInv.SetData(iiCnt, 21, _InvDet.T_Item.Price3.Value);
                    FlxInv.SetData(iiCnt, 22, _InvDet.T_Item.Price4.Value);
                    FlxInv.SetData(iiCnt, 23, _InvDet.T_Item.Price5.Value);
                    FlxInv.SetData(iiCnt, 25, _InvDet.InvDet_ID);
                    FlxInv.SetData(iiCnt, 27, _InvDet.DatExper ?? string.Empty);
                    if ((_InvDet.DatExper ?? string.Empty) != string.Empty || (_InvDet.RunCod ?? string.Empty) != string.Empty)
                    {
                        FlxInv.Cols[27].Visible = true;
                        FlxInv.Cols[35].Visible = true;
                        FlxInv.SetData(iiCnt, 28, 1);
                    }
                    try
                    {
                        FlxInv.SetData(iiCnt, 33, (_InvDet.ItmWight.Value != 0.0) ? true : false);
                    }
                    catch
                    {
                        FlxInv.SetData(iiCnt, 33, false);
                    }
                    FlxInv.SetData(iiCnt, 32, _InvDet.ItmTyp.Value);
                    FlxInv.SetData(iiCnt, 38, _InvDet.Amount.Value);
                    FlxInv.SetData(iiCnt, 35, _InvDet.RunCod.Trim());
                    FlxInv.SetData(iiCnt, 36, _InvDet.LineDetails.Trim());
                    FlxInv.SetData(iiCnt, 31, _InvDet.ItmTax.Value);
                    try
                    {
                        FlxInv.SetData(iiCnt, 39, _InvDet.OfferTyp);
                        try
                        {
                            if (int.Parse(FlxInv.GetData(iiCnt, 39).ToString()) == 1)
                            {
                                FlxInv.Rows[iiCnt].StyleNew.BackColor = Color.Gainsboro;
                                FlxInv.Rows[iiCnt].AllowEditing = false;
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch
                    {
                    }
                    listStkQty = (from t in db.T_STKSQTies
                                  where t.storeNo == (int?)_InvDet.StoreNo.Value
                                  where t.itmNo == _InvDet.ItmNo.Trim()
                                  select t).ToList();
                    if (listStkQty.Count != 0)
                    {
                        _StksQty = listStkQty[0];
                        FlxInv.SetData(iiCnt, 24, _InvDet.RealQty.Value + _StksQty.stkQty.Value);
                    }
                    if (FlxInv.Rows[iiCnt].StyleNew.BackColor != Color.Gainsboro)
                    {
                        FlxInv.Rows[iiCnt + 1].AllowEditing = false;
                        FlxInv.Rows[iiCnt + 1].StyleNew.BackColor = Color.White;
                        FlxInv.Rows[iiCnt + 1].Height = 33;
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            FlxInv.SetData(iiCnt + 1, 2, _InvDet.LineDetails);
                        }
                        else
                        {
                            FlxInv.SetData(iiCnt + 1, 4, _InvDet.LineDetails);
                        }
                        if (!VarGeneral.TString.ChkStatShow(_SysSetting.LineDetailSts, 26))
                        {
                            FlxInv.Rows[iiCnt + 1].Visible = false;
                        }
                    }
                    else
                    {
                        iiCnt--;
                    }
                    i++;
                }
            }
            catch
            {
                MessageBox.Show((LangArEn == 0) ? "حدث خطأ أثناء تعبئة الأسطر ." : "An error occurred while filling lines .", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }
        public void SetLinesDET(List<T_SINVDET> listDet, int vRow)
        {
            try
            {
                dataGridView_ItemDet.Rows.Count = listDet.Count + 1;
                dataGridView_ItemDet.Cols[27].Visible = false;
                for (int iiCnt = 1; iiCnt <= listDet.Count; iiCnt++)
                {
                    T_SINVDET _SInvDet = listDet[iiCnt - 1];
                    int Ser = _SInvDet.SInvSer.GetValueOrDefault();
                    dataGridView_ItemDet.SetData(iiCnt, 0, Ser.ToString());
                    dataGridView_ItemDet.SetData(iiCnt, 1, _SInvDet.SItmNo.Trim());
                    dataGridView_ItemDet.SetData(iiCnt, 2, _SInvDet.SItmDes.ToString());
                    dataGridView_ItemDet.SetData(iiCnt, 3, _SInvDet.SItmUnt.ToString());
                    dataGridView_ItemDet.SetData(iiCnt, 4, _SInvDet.SItmDesE.ToString());
                    dataGridView_ItemDet.SetData(iiCnt, 5, _SInvDet.SItmUntE.ToString());
                    dataGridView_ItemDet.SetData(iiCnt, 6, _SInvDet.SStoreNo.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 7, Math.Abs((decimal)_SInvDet.SQty.Value));
                    dataGridView_ItemDet.SetData(iiCnt, 8, _SInvDet.SPrice.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 9, _SInvDet.SItmDis);
                    dataGridView_ItemDet.SetData(iiCnt, 10, _SInvDet.SCost.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 11, _SInvDet.SItmUntPak.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 12, Math.Abs((decimal)_SInvDet.SRealQty.Value));
                    dataGridView_ItemDet.SetData(iiCnt, 13, _SInvDet.SitmInvDsc.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 14, _SInvDet.SCost.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 15, _SInvDet.SItmDes.ToString());
                    dataGridView_ItemDet.SetData(iiCnt, 16, _SInvDet.SCost.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 18, _SInvDet.T_Item.DefultUnit.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 19, _SInvDet.T_Item.Price1.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 20, _SInvDet.T_Item.Price2.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 21, _SInvDet.T_Item.Price3.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 22, _SInvDet.T_Item.Price4.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 23, _SInvDet.T_Item.Price5.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 25, _SInvDet.SInvDet_ID);
                    dataGridView_ItemDet.SetData(iiCnt, 27, _SInvDet.SDatExper ?? string.Empty);
                    dataGridView_ItemDet.SetData(iiCnt, 32, _SInvDet.SItmTyp.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 31, _SInvDet.SAmount.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 29, _SInvDet.SQtyDef.Value);
                    dataGridView_ItemDet.SetData(iiCnt, 17, _SInvDet.SPriceDef.Value);
                    listStkQty = (from t in db.T_STKSQTies
                                  where t.storeNo == (int?)_SInvDet.SStoreNo.Value
                                  where t.itmNo == _SInvDet.SItmNo.Trim()
                                  select t).ToList();
                    if (listStkQty.Count != 0)
                    {
                        _StksQty = listStkQty[0];
                        dataGridView_ItemDet.SetData(iiCnt, 24, _SInvDet.SRealQty.Value + _StksQty.stkQty.Value);
                    }
                }
                if (State == FormState.Saved)
                {
                    return;
                }
                double InvCost = 0.0;
                for (int i = 1; i < dataGridView_ItemDet.Rows.Count; i++)
                {
                    try
                    {
                        dataGridView_ItemDet.SetData(i, 7, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 29)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(vRow, 7)))));
                        dataGridView_ItemDet.SetData(i, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 17)))));
                        dataGridView_ItemDet.SetData(i, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 11)))));
                        InvCost += double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 10)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 12))));
                    }
                    catch
                    {
                    }
                }
                FlxInv.SetData(vRow, 10, InvCost);
            }
            catch
            {
                MessageBox.Show((LangArEn == 0) ? "حدث خطأ أثناء تعبئة الأسطر الفرعية ." : "An error occurred while filling lines .", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }
        public void SetDataRt(T_INVHED value)
        {
            switch_InSide.ValueChanged -= switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged -= switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged -= switch_Dilevry_ValueChanged;
            try
            {
                txtCustNo.Text = value.CusVenNo.ToString();
                try
                {
                    if (!string.IsNullOrEmpty(value.CusVenNo))
                    {
                        txtCustName.Text = ((LangArEn == 0) ? db.StockAccDefWithOutBalance(value.CusVenNo).Arb_Des : db.StockAccDefWithOutBalance(value.CusVenNo).Eng_Des);
                    }
                    else
                    {
                        txtCustName.Text = value.CusVenNm.ToString();
                    }
                }
                catch
                {
                    txtCustName.Text = value.CusVenNm.ToString();
                }
                if (VarGeneral.SSSLev == "M")
                {
                    txtCustNo.Text = string.Empty;
                }
                txtAddress.Text = value.CusVenAdd;
                txtTele.Text = value.CusVenTel;
                txtRemark.Text = value.Remark;
                txtDiscountP.Value = value.InvDisPrs.Value;
                txtDiscountVal.Value = value.InvDisVal.Value;
                txtDiscountValLoc.Value = value.InvDisValLocCur.Value;
                txtDiscoundPoints.Value = value.DesPointsValue.Value;
                txtDiscoundPointsLoc.Value = value.DesPointsValueLocCur.Value;
                txtPointCount.Value = value.PointsCount.Value;
                try
                {
                    switchButton_PointActiv.Value = value.IsPoints.Value;
                }
                catch
                {
                    switchButton_PointActiv.Value = false;
                }
                txtDueAmount.Value = value.InvNet.Value;
                txtDueAmountLoc.Value = value.InvNetLocCur.Value;
                if (VarGeneral.CheckDate(value.EstDat))
                {
                    txtDueDate.Text = Convert.ToDateTime(value.EstDat).ToString("yyyy/MM/dd");
                }
                else
                {
                    txtDueDate.Text = string.Empty;
                }
                txtDueDate_Leave(null, null);
                txtRef.Text = value.RefNo;
                CmbInvSide.SelectedIndex = value.PaymentOrderTyp.GetValueOrDefault();
                FillComboMnd();
                txtTotalAm.Value = value.InvTot.Value;
                txtTotalAmLoc.Value = value.InvTotLocCur.Value;
                txtTotalQ.Value = value.InvQty.Value;
                txtCustNet.Value = value.CustNet.Value;
                txtCustRep.Value = value.CustRep.Value;
                for (int iiCnt = 0; iiCnt < CmbCostC.Items.Count; iiCnt++)
                {
                    CmbCostC.SelectedIndex = iiCnt;
                    if (CmbCostC.SelectedValue != null && CmbCostC.SelectedValue.ToString() == value.InvCstNo.Value.ToString())
                    {
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < CmbCurr.Items.Count; iiCnt++)
                {
                    CmbCurr.SelectedIndex = iiCnt;
                    if (CmbCurr.SelectedValue != null && CmbCurr.SelectedValue.ToString() == value.CurTyp.Value.ToString())
                    {
                        break;
                    }
                }
                if (CmbCurr.SelectedIndex != -1)
                {
                    RateValue = db.StockCurencyID(int.Parse(CmbCurr.SelectedValue.ToString())).Rate.Value;
                }
                if (value.MndNo.HasValue)
                {
                    CmbLegate.SelectedValue = value.MndNo;
                }
                else
                {
                    CmbLegate.SelectedIndex = 0;
                }
                if (value.CustPri.HasValue)
                {
                    CmbInvPrice.SelectedIndex = value.CustPri.Value;
                }
                if (value.InvCashPay.HasValue)
                {
                    int? invCashPay = value.InvCashPay;
                    if (invCashPay.Value == 0 && invCashPay.HasValue)
                    {
                        checkBox_Chash.Checked = true;
                    }
                    else if (value.InvCashPay == 1)
                    {
                        checkBox_Credit.Checked = true;
                    }
                    else
                    {
                        checkBox_NetWork.Checked = true;
                    }
                }
                checkBox_Chash.CheckedChanged -= checkBox_Chash_CheckedChanged;
                if (checkBox_Credit.Checked)
                {
                    checkBox_Chash.Checked = false;
                }
                else
                {
                    checkBox_Chash.Checked = true;
                }
                checkBox_Chash.CheckedChanged += checkBox_Chash_CheckedChanged;
                textBox_Usr.Text = ((LangArEn == 0) ? dbc.RateUsr(value.SalsManNo).UsrNamA : dbc.RateUsr(value.SalsManNo).UsrNamE);
                txtPaymentLoc.Value = value.CashPayLocCur.Value;
                doubleInput_NetWorkLoc.Value = value.NetworkPayLocCur.Value;
                doubleInput_CreditLoc.Value = value.CreditPayLocCur.Value;
                txtPayment.Value = value.Puyaid.Value;
                txtSteel.Value = value.Remming.Value;
                LDataThis = new BindingList<T_INVDET>(value.T_INVDETs).ToList();
                txtDebit1.Text = string.Empty;
                txtDebit2.Text = string.Empty;
                txtDebit3.Text = string.Empty;
                txtCredit1.Text = string.Empty;
                txtCredit2.Text = string.Empty;
                txtCredit3.Text = string.Empty;
                if (value.GadeId.HasValue)
                {
                    listGdHead = db.StockGdHeadid((int)value.GadeId.Value);
                    if (listGdHead.Count != 0)
                    {
                        _GdHead = listGdHead[0];
                        listGdDet = _GdHead.T_GDDETs.ToList();
                        for (int i = 0; i < listGdDet.Count; i++)
                        {
                            if (listGdDet[i].Lin == 1)
                            {
                                if (listGdDet[i].gdValue > 0.0)
                                {
                                    txtDebit1.Tag = listGdDet[i].AccNo;
                                    txtDebit1.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                                }
                                else
                                {
                                    txtCredit1.Tag = listGdDet[i].AccNo;
                                    txtCredit1.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                                }
                            }
                            else if (listGdDet[i].Lin == 2)
                            {
                                if (listGdDet[i].gdValue > 0.0)
                                {
                                    txtDebit2.Tag = listGdDet[i].AccNo;
                                    txtDebit2.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                                }
                                else
                                {
                                    txtCredit2.Tag = listGdDet[i].AccNo;
                                    txtCredit2.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                                }
                            }
                            else if (listGdDet[i].gdValue > 0.0)
                            {
                                txtDebit3.Tag = listGdDet[i].AccNo;
                                txtDebit3.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                            }
                            else
                            {
                                txtCredit3.Tag = listGdDet[i].AccNo;
                                txtCredit3.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDet[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDet[i].AccNo).Eng_Des);
                            }
                        }
                    }
                    else
                    {
                        _GdHead = new T_GDHEAD();
                    }
                }
                if (value.OrderTyp.HasValue)
                {
                    int? invCashPay = value.OrderTyp;
                    if (invCashPay.Value == 0 && invCashPay.HasValue)
                    {
                        switch_InSide_ValueChanged(null, null);
                    }
                    else if (value.OrderTyp == 1)
                    {
                        switch_OutSide_ValueChanged(null, null);
                    }
                    else
                    {
                        switch_Dilevry_ValueChanged(null, null);
                    }
                }
                if (value.RoomNo.HasValue)
                {
                    txtTable.Tag = value.RoomNo.Value;
                    txtTable.Value = int.Parse(db.StockRommID(value.RoomNo.Value).RomeNo.ToString());
                }
                else
                {
                    txtTable.Tag = "1";
                    txtTable.Value = 0;
                }
                txtPersons.Value = value.RoomPerson.Value;
                if (value.chauffeurNo.HasValue)
                {
                    textBox_Driver.Tag = value.chauffeurNo;
                    string text3 = (textBox_Driver.Text = (textBox_Driver.Text = ((LangArEn == 0) ? db.StockDriv(value.chauffeurNo.Value.ToString()).Arb_Des : db.StockDriv(value.chauffeurNo.Value.ToString()).Eng_Des)));
                }
                else
                {
                    textBox_Driver.Tag = string.Empty;
                    textBox_Driver.Text = string.Empty;
                }
                LDataThisRe = new BindingList<T_INVDET>(value.T_INVDETs).ToList();
                txtDebit5.Text = string.Empty;
                txtCredit5.Text = string.Empty;
                txtTotTax.Value = value.InvAddTax.Value;
                txtTotTaxLoc.Value = value.InvAddTaxlLoc.Value;
                switchButton_Tax.ValueChanged -= switchButton_Tax_ValueChanged;
                if (value.IsTaxUse.Value)
                {
                    switchButton_Tax.Value = true;
                }
                else
                {
                    switchButton_Tax.Value = false;
                }
                switchButton_Tax.ValueChanged += switchButton_Tax_ValueChanged;
                switchButton_TaxLines.ValueChanged -= switchButton_TaxLines_ValueChanged;
                if (value.IsTaxLines.Value)
                {
                    switchButton_TaxLines.Value = true;
                }
                else
                {
                    switchButton_TaxLines.Value = false;
                }
                if (value.IsTaxByTotal.Value)
                {
                    switchButton_TaxByTotal.Value = true;
                }
                else
                {
                    switchButton_TaxByTotal.Value = false;
                }
                if (value.IsTaxByNet.Value)
                {
                    switchButton_TaxByNet.Value = true;
                }
                else
                {
                    switchButton_TaxByNet.Value = false;
                }
                textBoxItem_TaxByNetValue.Text = value.TaxByNetValue.Value.ToString();
                switchButton_TaxLines.ValueChanged += switchButton_TaxLines_ValueChanged;
                if (value.IsTaxGaid.HasValue)
                {
                    checkBox_CostGaidTax.Checked = value.IsTaxGaid.Value;
                }
                else
                {
                    checkBox_CostGaidTax_CheckedChanged(null, null);
                }
                if (value.TaxGaidID.HasValue)
                {
                    listGdHeadCostTax = db.StockGdHeadid((int)value.TaxGaidID.Value);
                    if (listGdHeadCostTax.Count != 0)
                    {
                        _GdHeadCostTax = listGdHeadCostTax[0];
                        listGdDetCostTax = _GdHeadCostTax.T_GDDETs.ToList();
                        for (int i = 0; i < listGdDetCostTax.Count; i++)
                        {
                            if (listGdDetCostTax[i].gdValue > 0.0)
                            {
                                txtDebit5.Tag = listGdDetCostTax[i].AccNo;
                                txtDebit5.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostTax[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostTax[i].AccNo).Eng_Des);
                            }
                            else
                            {
                                txtCredit5.Tag = listGdDetCostTax[i].AccNo;
                                txtCredit5.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostTax[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostTax[i].AccNo).Eng_Des);
                            }
                        }
                    }
                    else
                    {
                        _GdHeadCostTax = new T_GDHEAD();
                    }
                }
                txtDebit6.Text = string.Empty;
                txtCredit6.Text = string.Empty;
                txtTotDis.Value = value.InvValGaidDis.Value;
                txtTotDisLoc.Value = value.InvValGaidDislLoc.Value;
                switchButton_Dis.ValueChanged -= switchButton_Dis_ValueChanged;
                if (value.IsDisUse1.Value)
                {
                    switchButton_Dis.Value = true;
                }
                else
                {
                    switchButton_Dis.Value = false;
                }
                switchButton_Dis.ValueChanged += switchButton_Dis_ValueChanged;
                if (value.IsDisGaid.HasValue)
                {
                    checkBox_GaidDis.Checked = value.IsDisGaid.Value;
                }
                else
                {
                    checkBox_GaidDis_CheckedChanged(null, null);
                }
                if (value.DisGaidID1.HasValue)
                {
                    listGdHeadCostDis = db.StockGdHeadid((int)value.DisGaidID1.Value);
                    if (listGdHeadCostDis.Count != 0)
                    {
                        _GdHeadCostDis = listGdHeadCostDis[0];
                        listGdDetCostDis = _GdHeadCostDis.T_GDDETs.ToList();
                        for (int i = 0; i < listGdDetCostDis.Count; i++)
                        {
                            if (listGdDetCostDis[i].gdValue > 0.0)
                            {
                                txtDebit6.Tag = listGdDetCostDis[i].AccNo;
                                txtDebit6.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostDis[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostDis[i].AccNo).Eng_Des);
                            }
                            else
                            {
                                txtCredit6.Tag = listGdDetCostDis[i].AccNo;
                                txtCredit6.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostDis[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostDis[i].AccNo).Eng_Des);
                            }
                        }
                    }
                    else
                    {
                        _GdHeadCostDis = new T_GDHEAD();
                    }
                }
                txtCredit7.Text = string.Empty;
                txtTotBankComm.Value = value.InvComm.Value;
                txtTotBankCommLoc.Value = value.InvCommLoc.Value;
                switchButton_BankComm.ValueChanged -= switchButton_BankComm_ValueChanged;
                if (value.IsCommUse.Value)
                {
                    switchButton_BankComm.Value = true;
                }
                else
                {
                    switchButton_BankComm.Value = false;
                }
                switchButton_BankComm.ValueChanged += switchButton_BankComm_ValueChanged;
                if (value.IsCommGaid.HasValue)
                {
                    checkBox_GaidBankComm.Checked = value.IsCommGaid.Value;
                }
                else
                {
                    checkBox_GaidBankComm_CheckedChanged(null, null);
                }
                if (value.CommGaidID.HasValue)
                {
                    listGdHeadCostComm = db.StockGdHeadid((int)value.CommGaidID.Value);
                    if (listGdHeadCostComm.Count != 0)
                    {
                        _GdHeadCostComm = listGdHeadCostComm[0];
                        listGdDetCostComm = _GdHeadCostComm.T_GDDETs.ToList();
                        for (int i = 0; i < listGdDetCostComm.Count; i++)
                        {
                            if (listGdDetCostComm[i].gdValue < 0.0)
                            {
                                txtCredit7.Tag = listGdDetCostComm[i].AccNo;
                                txtCredit7.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(listGdDetCostComm[i].AccNo).Arb_Des : db.SelectAccRootByCode(listGdDetCostComm[i].AccNo).Eng_Des);
                            }
                        }
                    }
                    else
                    {
                        _GdHeadCostComm = new T_GDHEAD();
                    }
                }
                try
                {
                    if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 62))
                    {
                        doubleInput_LostOrWin.Value = value.InvNetLocCur.Value - Math.Abs(value.InvCost.Value);
                    }
                    else
                    {
                        doubleInput_LostOrWin.Value = value.InvNetLocCur.Value - Math.Abs(value.InvCost.Value) - txtTotTax.Value;
                    }
                }
                catch
                {
                    doubleInput_LostOrWin.Value = 0.0;
                }
                SetLinesRt(LDataThisRe);
                CmbInvSide_SelectedIndexChanged(null, null);
                TableTyp();
                try
                {
                    if (checkBox_Credit.Checked)
                    {
                        if (string.IsNullOrEmpty(txtDebit2.Text))
                        {
                            txtDebit2.Tag = txtDebit3.Tag;
                            txtDebit2.Text = txtDebit3.Text;
                            txtCredit2.Tag = txtCredit3.Tag;
                            txtCredit2.Text = txtCredit3.Text;
                        }
                        else
                        {
                            txtDebit3.Tag = txtDebit2.Tag;
                            txtDebit3.Text = txtDebit2.Text;
                            txtCredit3.Tag = txtCredit2.Tag;
                            txtCredit3.Text = txtCredit2.Text;
                        }
                    }
                }
                catch
                {
                }
                try
                {
                    if (value.RoomNo > 1 && value.RoomSts.Value)
                    {
                        if (value.T_Room.waiterNo.HasValue)
                        {
                            textBox_WaiterName.Text = ((LangArEn == 0) ? db.StockWaiterID(value.T_Room.waiterNo.Value).Arb_Des : db.StockWaiterID(value.T_Room.waiterNo.Value).Eng_Des);
                            textBox_WaiterName.Tag = value.T_Room.waiterNo.Value.ToString();
                        }
                        else
                        {
                            textBox_WaiterName.Tag = string.Empty;
                            textBox_WaiterName.Text = string.Empty;
                        }
                    }
                    else
                    {
                        textBox_WaiterName.Tag = string.Empty;
                        textBox_WaiterName.Text = string.Empty;
                    }
                }
                catch
                {
                    textBox_WaiterName.Tag = string.Empty;
                    textBox_WaiterName.Text = string.Empty;
                }
                AutoGaidAcc();
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("SetData:", error, enable: true);
                MessageBox.Show(error.Message);
            }
            switch_InSide.ValueChanged += switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged += switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged += switch_Dilevry_ValueChanged;
            GetInvTot();
        }
        public void SetLinesRt(List<T_INVDET> listDet)
        {
            try
            {
                if (_orderLocal)
                {
                    return;
                }
                FlxInv.Rows.Count = 1;
                FlxInv.Rows.Count = listDet.Count * 2 + 1;
                try
                {
                    List<T_INVDET> CheckOfferTypData = listDet.Where((T_INVDET g) => g.OfferTyp.HasValue).ToList();
                    if (CheckOfferTypData.Count > 0)
                    {
                        int GetDataCount = CheckOfferTypData.Where((T_INVDET g) => g.OfferTyp.Value == 1).ToList().Count;
                        if (GetDataCount > 0)
                        {
                            FlxInv.Rows.Count -= GetDataCount;
                        }
                    }
                }
                catch
                {
                }
                FlxInv.Cols[27].Visible = false;
                FlxInv.Cols[35].Visible = false;
                int i = 0;
                for (int iiCnt = 1; iiCnt <= FlxInv.Rows.Count; iiCnt += 2)
                {
                    if (i >= listDet.Count)
                    {
                        break;
                    }
                    _InvDet = listDet[i];
                    FlxInv.Rows[iiCnt].Height = 35;
                    int Ser = _InvDet.InvSer.GetValueOrDefault();
                    FlxInv.SetData(iiCnt, 0, Ser.ToString());
                    FlxInv.SetData(iiCnt, 1, _InvDet.ItmNo.Trim());
                    FlxInv.SetData(iiCnt, 2, _InvDet.ItmDes.ToString());
                    FlxInv.SetData(iiCnt, 3, _InvDet.ItmUnt.ToString());
                    FlxInv.SetData(iiCnt, 4, _InvDet.ItmDesE.ToString());
                    FlxInv.SetData(iiCnt, 5, _InvDet.ItmUntE.ToString());
                    FlxInv.SetData(iiCnt, 6, _InvDet.StoreNo.Value);
                    FlxInv.SetData(iiCnt, 7, Math.Abs((decimal)_InvDet.Qty.Value));
                    FlxInv.SetData(iiCnt, 8, _InvDet.Price.Value);
                    FlxInv.SetData(iiCnt, 9, _InvDet.ItmDis);
                    FlxInv.SetData(iiCnt, 10, _InvDet.Cost.Value);
                    FlxInv.SetData(iiCnt, 11, _InvDet.ItmUntPak.Value);
                    FlxInv.SetData(iiCnt, 12, Math.Abs((decimal)_InvDet.RealQty.Value));
                    FlxInv.SetData(iiCnt, 13, _InvDet.itmInvDsc.Value);
                    FlxInv.SetData(iiCnt, 14, _InvDet.Cost.Value);
                    FlxInv.SetData(iiCnt, 15, _InvDet.ItmDes.ToString());
                    FlxInv.SetData(iiCnt, 16, _InvDet.Cost.Value);
                    FlxInv.SetData(iiCnt, 18, _InvDet.T_Item.DefultUnit.Value);
                    FlxInv.SetData(iiCnt, 19, _InvDet.T_Item.Price1.Value);
                    FlxInv.SetData(iiCnt, 20, _InvDet.T_Item.Price2.Value);
                    FlxInv.SetData(iiCnt, 21, _InvDet.T_Item.Price3.Value);
                    FlxInv.SetData(iiCnt, 22, _InvDet.T_Item.Price4.Value);
                    FlxInv.SetData(iiCnt, 23, _InvDet.T_Item.Price5.Value);
                    FlxInv.SetData(iiCnt, 25, _InvDet.InvDet_ID);
                    FlxInv.SetData(iiCnt, 27, _InvDet.DatExper ?? string.Empty);
                    if ((_InvDet.DatExper ?? string.Empty) != string.Empty || (_InvDet.RunCod ?? string.Empty) != string.Empty)
                    {
                        FlxInv.Cols[27].Visible = true;
                        FlxInv.Cols[35].Visible = true;
                        FlxInv.SetData(iiCnt, 28, 1);
                    }
                    try
                    {
                        FlxInv.SetData(iiCnt, 33, (_InvDet.ItmWight.Value != 0.0) ? true : false);
                    }
                    catch
                    {
                        FlxInv.SetData(iiCnt, 33, false);
                    }
                    FlxInv.SetData(iiCnt, 32, _InvDet.ItmTyp.Value);
                    FlxInv.SetData(iiCnt, 38, _InvDet.Amount.Value);
                    FlxInv.SetData(iiCnt, 35, _InvDet.RunCod.Trim());
                    FlxInv.SetData(iiCnt, 36, _InvDet.LineDetails.Trim());
                    FlxInv.SetData(iiCnt, 31, _InvDet.ItmTax.Value);
                    listStkQty = (from t in db.T_STKSQTies
                                  where t.storeNo == (int?)_InvDet.StoreNo.Value
                                  where t.itmNo == _InvDet.ItmNo.Trim()
                                  select t).ToList();
                    if (listStkQty.Count != 0)
                    {
                        _StksQty = listStkQty[0];
                        FlxInv.SetData(iiCnt, 24, _InvDet.RealQty.Value + _StksQty.stkQty.Value);
                    }
                    if (FlxInv.Rows[iiCnt].StyleNew.BackColor != Color.Gainsboro)
                    {
                        FlxInv.Rows[iiCnt + 1].AllowEditing = false;
                        FlxInv.Rows[iiCnt + 1].StyleNew.BackColor = Color.White;
                        FlxInv.Rows[iiCnt + 1].Height = 33;
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            FlxInv.SetData(iiCnt + 1, 2, _InvDet.LineDetails);
                        }
                        else
                        {
                            FlxInv.SetData(iiCnt + 1, 4, _InvDet.LineDetails);
                        }
                        if (!VarGeneral.TString.ChkStatShow(_SysSetting.LineDetailSts, 26))
                        {
                            FlxInv.Rows[iiCnt + 1].Visible = false;
                        }
                    }
                    else
                    {
                        iiCnt--;
                    }
                    i++;
                }
            }
            catch
            {
                MessageBox.Show((LangArEn == 0) ? "حدث خطأ أثناء تعبئة الأسطر ." : "An error occurred while filling lines .", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }
        private bool ValidData()
        {
            if (textBox_ID.Text == "0" || textBox_ID.Text == string.Empty)
            {
                MessageBox.Show((LangArEn == 0) ? "لا يمكن الحفظ بدون رقم الفاتورة - السند" : "Can not save without the invoice number", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                textBox_ID.Focus();
                return false;
            }
            if (checkBox_Credit.Checked && txtCustNo.Text == string.Empty && VarGeneral.SSSLev != "M")
            {
                MessageBox.Show((LangArEn == 0) ? "لا يمكن حفظ فاتورة آجلة بدون رقم حساب العميل" : "Can not save without the customer's account number.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                txtCustNo.Focus();
                return false;
            }
            if (!VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 9) && (txtDueAmountLoc.Value == 0.0 || txtDueAmountLoc.Value == 0.0))
            {
                MessageBox.Show((LangArEn == 0) ? "لا يمكن الحفظ والصافي يساوي صفر" : "Can not save, and the total is equal to zero", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return false;
            }
            if (txtTotalQ.Value <= 0.0)
            {
                MessageBox.Show((LangArEn == 0) ? "يجب ان لا يكون الكمية فارغة . يرجى التأكد من وجود الأصناف في الفاتورة" : "We must not be empty value . Please make sure there are items in the bill.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return false;
            }
            if (CmbLegate.SelectedIndex <= 0 && CmbInvSide.SelectedIndex == 1)
            {
                MessageBox.Show((LangArEn == 0) ? "يجب تحديد المندوب الخارجي لهذه البضاعة قبل إتمام عملية الحفظ" : "You must specify the external representative of these goods ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                CmbLegate.Focus();
                return false;
            }
            if (CmbInvSide.SelectedIndex > 1 && txtCustNo.Text == string.Empty && VarGeneral.SSSLev != "M")
            {
                MessageBox.Show((LangArEn == 0) ? "يجب تحديد العميل / المورد لهذه البضاعة قبل إتمام عملية الحفظ" : "You must specify the Customer/Supplier of these goods ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                CmbLegate.Focus();
                return false;
            }
            if (VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 7) && CmbLegate.SelectedIndex == 0)
            {
                MessageBox.Show((LangArEn == 0) ? "يجب تحديد المندوب قبل إتمام عملية الحفظ" : "You must specify the delegate before the completion of the process of Save", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                CmbLegate.Focus();
                return false;
            }
            if (txtPaymentLoc.Value + doubleInput_NetWorkLoc.Value + doubleInput_CreditLoc.Value != (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value))
            {
                MessageBox.Show((LangArEn == 0) ? "يجب ان يكون مجموع المدفوعات النقدية والآجلة مساوية لصافي الفاتورة . يرجى التاكد من المدفوعات!" : "You must be the total cash payments and futures is equal to the net invoice . Please confirm the payments!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                superTabControl_Info.SelectedTabIndex = 1;
                txtPaymentLoc.Focus();
                return false;
            }
            if (!VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 9) && checkBox_Chash.Checked && txtPaymentLoc.Value <= 0.0 && doubleInput_NetWorkLoc.Value <= 0.0)
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكن الحفظ كفاتورة نقدية واجمالي المدفوعات النقدية أصغر من او يساوي الصفر " : "You can not save a bill in cash and total cash payments smaller than or equal to zero", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                superTabControl_Info.SelectedTabIndex = 1;
                txtPaymentLoc.Focus();
                return false;
            }
            if (checkBox_Credit.Checked && doubleInput_CreditLoc.Value <= 0.0 && doubleInput_NetWorkLoc.Value <= 0.0)
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكن الحفظ كفاتورة آجلة واجمالي المدفوعات الآجلة أصغر من او يساوي الصفر " : "You can not save a bill futures and futures total payments smaller than or equal to zero", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                superTabControl_Info.SelectedTabIndex = 1;
                doubleInput_CreditLoc.Focus();
                return false;
            }
            try
            {
                if (permission.MaxDiscountSals.Value > 0.0 && txtDiscountP.Value > permission.MaxDiscountSals.Value)
                {
                    MessageBox.Show((LangArEn == 0) ? "لقد تجاوزت نسبة الخصم المسموحة لك . يرجى تعديل نسبة الخصم والمحاولة مرة اخرى " : "Error in Discount % . check it and try again", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    txtDiscountP.Focus();
                    return false;
                }
            }
            catch
            {
            }
            for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
            {
                if (!(string.Concat(FlxInv.GetData(iiCnt, 1)) != string.Empty))
                {
                    continue;
                }
                for (int i = 1; i < 7; i++)
                {
                    if (string.Concat(FlxInv.GetData(iiCnt, i)) == string.Empty)
                    {
                        MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من تعبئة جميع البيانات المطلوبة" : "We must not be empty value . Please make sure there are items in the bill.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        FlxInv.Row = iiCnt;
                        FlxInv.Col = i;
                        FlxInv.Focus();
                        return false;
                    }
                }
                if (VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7))) == "0")
                {
                    MessageBox.Show((LangArEn == 0) ? "يجب ان لا يكون الكمية فارغة . يرجى التأكد من وجود الأصناف في الفاتورة" : "We must not be empty value . Please make sure there are items in the bill.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    FlxInv.Row = iiCnt;
                    FlxInv.Col = 7;
                    FlxInv.Focus();
                    return false;
                }
                if (_StorePr.Contains(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)) && State == FormState.New)
                {
                    MessageBox.Show((LangArEn == 0) ? ("تم حظر استخدام المستودع رقم  [ " + VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty) + " ] عن هذا المستخدم . يرجى مراجعة الصلاحيات  ") : (" The use of the repository has been blocked [" + VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty) + "] . please see User Permissions"), VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    FlxInv.Row = iiCnt;
                    FlxInv.Col = 6;
                    FlxInv.Focus();
                    return false;
                }
                if (FlxInv.Cols[27].Visible)
                {
                    if (!VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 7) && VarGeneral.CheckDate(string.Concat(FlxInv.GetData(iiCnt, 27))) && string.Concat(FlxInv.GetData(iiCnt, 35)) == string.Empty)
                    {
                        MessageBox.Show((LangArEn == 0) ? "لا يمكن حفظ تاريخ الصلاحية بدون رقم التصنيع . الرجاء مراجعة صلاحيات المستخدم" : "Can not save the expiration date without Make No . please see User Permissions", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        FlxInv.Row = iiCnt;
                        FlxInv.Col = 35;
                        FlxInv.Focus();
                        return false;
                    }
                    if (!VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 8) && !VarGeneral.CheckDate(string.Concat(FlxInv.GetData(iiCnt, 27))) && string.Concat(FlxInv.GetData(iiCnt, 35)) != string.Empty)
                    {
                        MessageBox.Show((LangArEn == 0) ? "لا يمكن حفظ رقم التصنيع بدون تاريخ الصلاحية . الرجاء مراجعة صلاحيات المستخدم" : "Can not save the Make No without expiration date . please see User Permissions", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        FlxInv.Row = iiCnt;
                        FlxInv.Col = 27;
                        FlxInv.Focus();
                        return false;
                    }
                }
                if (VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 12))
                {
                    try
                    {
                        if (txtDueAmountLoc.Value < txtInvCost.Value)
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن حفظ فاتورة صافي قيمتها أقل من قيمة التكلفة" : "The net invoice can not be saved less than the cost value", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            txtDueAmountLoc.Focus();
                            return false;
                        }
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("ValidData:", error, enable: true);
                        MessageBox.Show((LangArEn == 0) ? "لا يمكن حفظ فاتورة صافي قيمتها أقل من قيمة التكلفة" : "The net invoice can not be saved less than the cost value", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        txtDueAmountLoc.Focus();
                        return false;
                    }
                }
                if (CmbInvSide.SelectedIndex <= 0)
                {
                    continue;
                }
                if (State == FormState.Edit)
                {
                    double vC = 0.0;
                    if (CmbInvSide.SelectedIndex == 1)
                    {
                        try
                        {
                            vC = db.ExecuteQuery<double>(string.Concat("select sum(T_INVDET.RealQty) as x FROM T_INVHED Right JOIN T_INVDET ON T_INVHED.InvHed_ID = T_INVDET.InvId where T_INVHED.IfDel = 0 and T_INVDET.ItmNo = '", FlxInv.GetData(iiCnt, 1), "' and T_INVHED.InvHed_ID = '", data_this.InvHed_ID, "' and T_INVHED.MndNo = ", int.Parse(CmbLegate.SelectedValue.ToString()), " ;"), new object[0]).First() + 0.0;
                        }
                        catch
                        {
                            vC = 0.0;
                        }
                        if (!db.StockStoreMndInvSal(string.Concat(FlxInv.GetData(iiCnt, 1)), int.Parse(CmbLegate.SelectedValue.ToString()), double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), Math.Abs(vC)))
                        {
                            MessageBox.Show((LangArEn == 0) ? ("كمية الصنف المدخلة في السطر [ " + iiCnt + " ] أكبر من الكمية الفعلية الذي يمتلكه هذا المندوب ") : ("Amount of product was introduced in the line [" + iiCnt + "] is greater than the actual amount, which is owned by the delegate"), VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            FlxInv.Row = iiCnt;
                            FlxInv.Col = 1;
                            FlxInv.Focus();
                            return false;
                        }
                    }
                    else
                    {
                        try
                        {
                            vC = db.ExecuteQuery<double>(string.Concat("select sum(T_INVDET.RealQty) as x FROM T_INVHED Right JOIN T_INVDET ON T_INVHED.InvHed_ID = T_INVDET.InvId where T_INVHED.IfDel = 0 and T_INVDET.ItmNo = '", FlxInv.GetData(iiCnt, 1), "' and T_INVHED.InvHed_ID = '", data_this.InvHed_ID, "' and T_INVHED.CusVenNo = '", txtCustNo.Text, "' ;"), new object[0]).First() + 0.0;
                        }
                        catch
                        {
                            vC = 0.0;
                        }
                        if (!db.StockStoreCustInvSal(string.Concat(FlxInv.GetData(iiCnt, 1)), txtCustNo.Text, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), Math.Abs(vC)))
                        {
                            MessageBox.Show((LangArEn == 0) ? ("كمية الصنف المدخلة في السطر [ " + iiCnt + " ] أكبر من الكمية الفعلية الذي يمتلكه هذا العميل / المورد ") : ("Amount of product was introduced in the line [" + iiCnt + "] is greater than the actual amount, which is owned by the Cust / Supp"), VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            FlxInv.Row = iiCnt;
                            FlxInv.Col = 1;
                            FlxInv.Focus();
                            return false;
                        }
                    }
                }
                else if (CmbInvSide.SelectedIndex == 1)
                {
                    if (!db.StockStoreMndReturn(string.Concat(FlxInv.GetData(iiCnt, 1)), int.Parse(CmbLegate.SelectedValue.ToString()), double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), 0.0))
                    {
                        MessageBox.Show((LangArEn == 0) ? ("كمية الصنف المدخلة في السطر [ " + iiCnt + " ] أكبر من الكمية الفعلية الذي يمتلكه هذا المندوب ") : ("Amount of product was introduced in the line [" + iiCnt + "] is greater than the actual amount, which is owned by the delegate"), VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        FlxInv.Row = iiCnt;
                        FlxInv.Col = 1;
                        FlxInv.Focus();
                        return false;
                    }
                }
                else if (!db.StockStoreCustReturn(string.Concat(FlxInv.GetData(iiCnt, 1)), txtCustNo.Text, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), 0.0))
                {
                    MessageBox.Show((LangArEn == 0) ? ("كمية الصنف المدخلة في السطر [ " + iiCnt + " ] أكبر من الكمية الفعلية الذي يمتلكه هذا العميل / المورد ") : ("Amount of product was introduced in the line [" + iiCnt + "] is greater than the actual amount, which is owned by the Cust / Supp"), VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    FlxInv.Row = iiCnt;
                    FlxInv.Col = 1;
                    FlxInv.Focus();
                    return false;
                }
            }
            if (State == FormState.Edit)
            {
                T_INVHED newData = db.StockInvHead(VarGeneral.InvTyp, textBox_ID.Text);
                if ((!string.IsNullOrEmpty(newData.InvNo) || newData.InvHed_ID > 0) && newData.InvHed_ID != data_this.InvHed_ID)
                {
                    MessageBox.Show((LangArEn == 0) ? " رقم الفاتورة مكرر يرجى تغييره" : "Employee No It's a existing", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    textBox_ID.Focus();
                    return false;
                }
                if (data_this.PaymentOrderTyp.GetValueOrDefault() > 0 && CmbInvSide.SelectedIndex <= 0)
                {
                    MessageBox.Show((LangArEn == 0) ? "هذه فاتورة مبيعات صرف بضاعة ولايمكن تغييرها الى مبيعات \n دون تحديد جهة الصرف - مندوب - عميل - مورد" : "This is a commodity exchange sales invoice can not be changed to sales", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
                if (data_this.PaymentOrderTyp.GetValueOrDefault() <= 0 && CmbInvSide.SelectedIndex > 0)
                {
                    MessageBox.Show((LangArEn == 0) ? "هذه فاتورة مبيعات ولايمكن تغييرها الى مبيعات صرف بضاعة" : "These sales invoice can not be changed to a commodity exchange sales", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
            }
            if (checkBox_Credit.Checked && VarGeneral.SSSLev != "M")
            {
                List<T_AccDef> listAccDef = (from er in db.T_AccDefs
                                             where er.Lev == (int?)4
                                             where er.Sts == (int?)0
                                             where er.AccDef_No == txtCustNo.Text
                                             orderby er.AccDef_No
                                             select er).ToList();
                if (listAccDef.Count() <= 0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب المدين لا يعمل - موقوف " : "You can not complete the operation . This is because the debtor's account does not work - Suspended", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
                try
                {
                    listAccDef.First().Debit = db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.gdValue > 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault();
                }
                catch
                {
                    listAccDef.First().Debit = 0.0;
                }
                try
                {
                    listAccDef.First().Credit = Math.Abs(db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.gdValue < 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault());
                }
                catch
                {
                    listAccDef.First().Credit = 0.0;
                }
                try
                {
                    listAccDef.First().Balance = db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault();
                }
                catch
                {
                    listAccDef.First().Balance = 0.0;
                }
                T_AccDef _AccDef = listAccDef[0];
                if (_AccDef.Balance.Value + doubleInput_CreditLoc.Value >= _AccDef.MaxLemt.Value && (_AccDef.MaxLemt.Value != 0.0 || _AccDef.MaxLemt.Value != 0.0 || _AccDef.MaxLemt.Value != 0.0))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب العميل / المورد تخطى الحد الأعلى " : "You can not complete the operation . This is because the upper limit of the customer's / Supplier's account", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
                if (_AccDef.StopInvTyp == 1)
                {
                    if (checkBox_Chash.Checked)
                    {
                        MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب العميل غير مصرح له البيع بالنقدي " : "Can not complete the operation . This is because the customer's account is not authorized to Cash Sales", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return false;
                    }
                }
                else if (_AccDef.StopInvTyp == 2 && checkBox_Credit.Checked)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب العميل غير مصرح له البيع بالآجل " : "Can not complete the operation . This is because the customer's account is not authorized to Future Sales", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
            }
            if (dbc.Get_PermissionID(VarGeneral.UserID).CreateGaid == 1 && VarGeneral.SSSTyp != 0)
            {
                if (txtPaymentLoc.Value > 0.0 && string.IsNullOrEmpty(txtCredit1.Text))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف الدائن للقيد النقدي .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the creditor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (txtPaymentLoc.Value > 0.0 && string.IsNullOrEmpty(txtDebit1.Text))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف المدين للقيد النقدي .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the debtor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (doubleInput_CreditLoc.Value > 0.0 && string.IsNullOrEmpty(txtCredit2.Text))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف الدائن للقيد الآجل .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the creditor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (doubleInput_CreditLoc.Value > 0.0 && string.IsNullOrEmpty(txtDebit2.Text))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف المدين للقيد الآجل .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the debtor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (doubleInput_NetWorkLoc.Value > 0.0 && string.IsNullOrEmpty(txtCredit3.Text))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف الدائن للقيد الشبكة .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the creditor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (doubleInput_NetWorkLoc.Value > 0.0 && string.IsNullOrEmpty(txtDebit3.Text))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف المدين للقيد الشبكة .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the debtor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                try
                {
                    if (txtPaymentLoc.Value > 0.0)
                    {
                        List<T_AccDef> listAccDef = (from er in db.T_AccDefs
                                                     where er.Lev == (int?)4
                                                     where er.Sts == (int?)0
                                                     where er.AccDef_No == txtDebit1.Tag.ToString()
                                                     orderby er.AccDef_No
                                                     select er).ToList();
                        if (listAccDef.Count() <= 0)
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب المدين لا يعمل - موقوف " : "You can not complete the operation . This is because the debtor's account does not work - Suspended", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            return false;
                        }
                        try
                        {
                            listAccDef.First().Debit = db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.gdValue > 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault();
                        }
                        catch
                        {
                            listAccDef.First().Debit = 0.0;
                        }
                        try
                        {
                            listAccDef.First().Credit = Math.Abs(db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.gdValue < 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault());
                        }
                        catch
                        {
                            listAccDef.First().Credit = 0.0;
                        }
                        try
                        {
                            listAccDef.First().Balance = db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault();
                        }
                        catch
                        {
                            listAccDef.First().Balance = 0.0;
                        }
                        T_AccDef _AccDef = listAccDef[0];
                        if (_AccDef.Balance.Value + txtPaymentLoc.Value >= _AccDef.MaxLemt.Value && (_AccDef.MaxLemt.Value != 0.0 || _AccDef.MaxLemt.Value != 0.0 || _AccDef.MaxLemt.Value != 0.0))
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب العميل / المورد تخطى الحد الأعلى " : "You can not complete the operation . This is because the upper limit of the customer's / Supplier's account", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            return false;
                        }
                    }
                }
                catch
                {
                }
                try
                {
                    if (doubleInput_CreditLoc.Value > 0.0)
                    {
                        List<T_AccDef> listAccDef = (from er in db.T_AccDefs
                                                     where er.Lev == (int?)4
                                                     where er.Sts == (int?)0
                                                     where er.AccDef_No == txtDebit2.Tag.ToString()
                                                     orderby er.AccDef_No
                                                     select er).ToList();
                        if (listAccDef.Count() <= 0)
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب المدين لا يعمل - موقوف " : "You can not complete the operation . This is because the debtor's account does not work - Suspended", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            return false;
                        }
                        try
                        {
                            listAccDef.First().Debit = db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.gdValue > 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault();
                        }
                        catch
                        {
                            listAccDef.First().Debit = 0.0;
                        }
                        try
                        {
                            listAccDef.First().Credit = Math.Abs(db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.gdValue < 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault());
                        }
                        catch
                        {
                            listAccDef.First().Credit = 0.0;
                        }
                        try
                        {
                            listAccDef.First().Balance = db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault();
                        }
                        catch
                        {
                            listAccDef.First().Balance = 0.0;
                        }
                        T_AccDef _AccDef = listAccDef[0];
                        if (_AccDef.Balance.Value + doubleInput_CreditLoc.Value >= _AccDef.MaxLemt.Value && (_AccDef.MaxLemt.Value != 0.0 || _AccDef.MaxLemt.Value != 0.0 || _AccDef.MaxLemt.Value != 0.0))
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب العميل / المورد تخطى الحد الأعلى " : "You can not complete the operation . This is because the upper limit of the customer's / Supplier's account", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            return false;
                        }
                    }
                }
                catch
                {
                }
                try
                {
                    if (doubleInput_NetWorkLoc.Value > 0.0)
                    {
                        List<T_AccDef> listAccDef = (from er in db.T_AccDefs
                                                     where er.Lev == (int?)4
                                                     where er.Sts == (int?)0
                                                     where er.AccDef_No == txtDebit3.Tag.ToString()
                                                     orderby er.AccDef_No
                                                     select er).ToList();
                        if (listAccDef.Count() <= 0)
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب المدين لا يعمل - موقوف " : "You can not complete the operation . This is because the debtor's account does not work - Suspended", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            return false;
                        }
                        try
                        {
                            listAccDef.First().Debit = db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.gdValue > 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault();
                        }
                        catch
                        {
                            listAccDef.First().Debit = 0.0;
                        }
                        try
                        {
                            listAccDef.First().Credit = Math.Abs(db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.gdValue < 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault());
                        }
                        catch
                        {
                            listAccDef.First().Credit = 0.0;
                        }
                        try
                        {
                            listAccDef.First().Balance = db.ExecuteQuery<double>(" select sum(T_GDDET.gdValue) from T_GDDET INNER JOIN  T_GDHEAD ON T_GDDET.gdID = T_GDHEAD.gdhead_ID where T_GDHEAD.gdLok = 0 and T_GDDET.AccNo ='" + listAccDef.First().AccDef_No + "'", new object[0]).FirstOrDefault();
                        }
                        catch
                        {
                            listAccDef.First().Balance = 0.0;
                        }
                        T_AccDef _AccDef = listAccDef[0];
                        if (_AccDef.Balance.Value + doubleInput_NetWorkLoc.Value >= _AccDef.MaxLemt.Value && (_AccDef.MaxLemt.Value != 0.0 || _AccDef.MaxLemt.Value != 0.0 || _AccDef.MaxLemt.Value != 0.0))
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب العميل / المورد تخطى الحد الأعلى " : "You can not complete the operation . This is because the upper limit of the customer's / Supplier's account", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            return false;
                        }
                    }
                }
                catch
                {
                }
            }
            if (checkBox_CostGaidTax.Checked && txtTotTax.Value <= 0.0)
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكن انشاء سند محاسبي بقيمة الضريبة واجمالي الضريبة يساوي صفر" : "You can not set up an accounting support tax and the total tax is equal to zero.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                superTabControl_Info.SelectedTabIndex = 5;
                return false;
            }
            if (checkBox_GaidDis.Checked && txtTotDis.Value <= 0.0)
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكن انشاء سند محاسبي بقيمة الخصم واجمالي الخصم يساوي صفر" : "You can not set up an accounting support Discount and the total Discount is equal to zero.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                superTabControl_Info.SelectedTabIndex = 5;
                return false;
            }
            if (txtDiscoundPoints.Value > 0.0 && !string.IsNullOrEmpty(txtCustNo.Text) && switchButton_PointActiv.Value)
            {
                double totPoints = 0.0;
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = " T_INVDET LEFT OUTER JOIN T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Curency ON T_INVHED.CurTyp = T_Curency.Curency_ID LEFT OUTER JOIN T_CstTbl ON T_INVHED.InvCstNo = T_CstTbl.Cst_ID LEFT OUTER JOIN T_Mndob ON T_INVHED.MndNo = T_Mndob.Mnd_ID LEFT OUTER JOIN T_Items ON T_INVDET.ItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                _RepShow.Rule = " Where T_INVHED.InvTyp = 1  and  T_INVHED.IfDel != 1 and T_INVHED.IsPoints = 1 and CusVenNo = '" + txtCustNo.Text + "' and T_CATEGORY.TotalPurchaes > 0 and T_CATEGORY.TotalPoint > 0 " + ((State == FormState.Edit) ? (" and InvHed_ID != " + data_this.InvHed_ID) : " ") + " group by T_items.ItmCat";
                _RepShow.Fields = " sum (Round(T_InvDet.Amount,2)) as Amount,T_items.ItmCat ,case when  CONVERT(INT,(sum(Round(T_InvDet.Amount,2)) / (select T_CATEGORY.TotalPurchaes from T_CATEGORY where T_CATEGORY.CAT_ID = T_items.ItmCat))) * (select T_CATEGORY.TotalPoint from T_CATEGORY where T_CATEGORY.CAT_ID = T_items.ItmCat) > 0 then  CONVERT(INT,(sum(Round(T_InvDet.Amount,2)) / (select T_CATEGORY.TotalPurchaes from T_CATEGORY where T_CATEGORY.CAT_ID = T_items.ItmCat))) * (select T_CATEGORY.TotalPoint from T_CATEGORY where T_CATEGORY.CAT_ID = T_items.ItmCat) else 0 end as PointsCount ";
                try
                {
                    _RepShow = _RepShow.Save();
                    VarGeneral.RepData = _RepShow.RepData;
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                try
                {
                    totPoints = db.StockAccDefWithOutBalance(txtCustNo.Text).TotPoints.Value;
                }
                catch
                {
                    totPoints = 0.0;
                }
                if (VarGeneral.RepData.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                    {
                        if (double.Parse(VarGeneral.TString.TEmpty(VarGeneral.RepData.Tables[0].Rows[i][0].ToString())) > 0.0)
                        {
                            totPoints += double.Parse(VarGeneral.TString.TEmpty(VarGeneral.RepData.Tables[0].Rows[i][2].ToString()));
                        }
                    }
                }
                if (totPoints < txtPointCount.Value)
                {
                    MessageBox.Show((LangArEn == 0) ? "إجمالي قيمة خصم النقاط . أكبر من اجمالي النقاط المستحقة لهذا العميل " : "The total value of discount points . greater than the total points hosted by that client", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
            }
            if (!VarGeneral.CheckDate(txtGDate.Text))
            {
                txtGDate.Text = n.FormatGreg(VarGeneral.Gdate, "yyyy/MM/dd");
            }
            if (!VarGeneral.CheckDate(txtHDate.Text))
            {
                txtHDate.Text = n.FormatHijri(VarGeneral.Hdate, "yyyy/MM/dd");
            }
            if (VarGeneral.SSSLev != "M" && State == FormState.New)
            {
                T_AccDef q = db.StockAccDefWithOutBalance(txtCustNo.Text);
                if (q.StopInvTyp == 1)
                {
                    if (checkBox_Chash.Checked)
                    {
                        MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب العميل غير مصرح له البيع بالنقدي " : "Can not complete the operation . This is because the customer's account is not authorized to Cash Sales", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return false;
                    }
                }
                else if (q.StopInvTyp == 2 && checkBox_Credit.Checked)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . وذلك لأن حساب العميل غير مصرح له البيع بالآجل " : "Can not complete the operation . This is because the customer's account is not authorized to Future Sales", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
            }
            if (VarGeneral.SSSLev == "R" || VarGeneral.SSSLev == "C" || VarGeneral.SSSLev == "H")
            {
                if (switch_InSide.Value && txtTable.Value == 0 && State == FormState.New && !VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 36))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن الحفظ بدون تحديد رقم الطاولة" : "Can not save without Table No", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    txtTable.Focus();
                    return false;
                }
                if (switch_Dilevry.Value && txtCustName.Text == string.Empty)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن الحفظ بدون إسم العميل" : "Can not save without the customer's Name.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    txtCustNo.Focus();
                    return false;
                }
                if (switch_Dilevry.Value && textBox_Driver.Text == string.Empty)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن الحفظ بدون إسم السائق" : "Can not save without the Driver Name.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    textBox_Driver.Focus();
                    return false;
                }
            }
            try
            {
                if (VarGeneral.CheckDate(VarGeneral.Settings_Sys.AccCusDes.Trim()) && VarGeneral.CheckDate(VarGeneral.Settings_Sys.AccSupDes.Trim()))
                {
                    if (Convert.ToDateTime(n.FormatGreg(txtGDate.Text, "yyyy/MM/dd")) <= Convert.ToDateTime(VarGeneral.Settings_Sys.AccCusDes) && Convert.ToDateTime(n.FormatGreg(txtGDate.Text, "yyyy/MM/dd")) >= Convert.ToDateTime(VarGeneral.Settings_Sys.AccSupDes))
                    {
                        return true;
                    }
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . لقد تخطيت السنة المالية المحدد للنظام \n يرجى التواصل مع الإدارة لإتمام عملية الإقفال السنوية " : "We can not complete the operation . have you skip the fiscal year specified for the system", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                }
            }
            catch
            {
                MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . لقد تخطيت السنة المالية المحدد للنظام \n يرجى التواصل مع الإدارة لإتمام عملية الإقفال السنوية " : "We can not complete the operation . have you skip the fiscal year specified for the system", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return false;
            }
            if (false)
            {
#pragma warning disable CS0162 // Unreachable code detected
                Environment.Exit(0);
#pragma warning restore CS0162 // Unreachable code detected
                return false;
            }
            return true;
        }
        private bool CheckRemotDate()
        {
            try
            {
                if (VarGeneral.gUserName != "runsetting")
                {
                    bool User_Remotly = CheckUserIFRemote();
                    RegistryKey hKeyNew = Registry.CurrentUser.OpenSubKey("Software\\MrdHrdw\\ItIntel", writable: true);
                    RegistryKey hKey = Registry.CurrentUser.OpenSubKey("Software\\PRS AND PR Settings\\WinSystemOperation", writable: true);
                    long regval = 0L;
                    long regvalNew = 0L;
                    if (hKey != null)
                    {
                        try
                        {
                            object q = hKey.GetValue("vRemotly");
                            if (string.IsNullOrEmpty(q.ToString()))
                            {
                                hKey.CreateSubKey("vRemotly");
                                hKey.SetValue("vRemotly", "0");
                            }
                        }
                        catch
                        {
                            hKey.CreateSubKey("vRemotly");
                            hKey.SetValue("vRemotly", "0");
                        }
                        try
                        {
                            object t = hKeyNew.GetValue("vRemotly_New");
                            if (string.IsNullOrEmpty(t.ToString()))
                            {
                                hKeyNew.CreateSubKey("vRemotly_New");
                                hKeyNew.SetValue("vRemotly_New", "0");
                            }
                        }
                        catch
                        {
                            hKeyNew.CreateSubKey("vRemotly_New");
                            hKeyNew.SetValue("vRemotly_New", "0");
                        }
                        regval = long.Parse(hKey.GetValue("vRemotly").ToString());
                        regvalNew = long.Parse(hKeyNew.GetValue("vRemotly_New").ToString());
                    }
                    if (User_Remotly || regval == 1 || regvalNew == 1)
                    {
                        try
                        {
                            if (VarGeneral.vDemo)
                            {
                                return false;
                            }
                            try
                            {
                                if (Convert.ToDateTime(n.GregToHijri(hKeyNew.GetValue("vBackup_New").ToString(), "yyyy/MM/dd")) < Convert.ToDateTime(n.FormatHijri(txtHDate.Text, "yyyy/MM/dd")))
                                {
                                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . لقد تخطيت السنة المالية المحدد للنظام \n يرجى التواصل مع الإدارة لللإشتراك في خدمات النسخة " : "We can not complete the operation . have you skip the fiscal year specified for the system", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                                    return false;
                                }
                            }
                            catch
                            {
                                if (Convert.ToDateTime(n.FormatGreg(hKeyNew.GetValue("vBackup_New").ToString(), "yyyy/MM/dd")) < Convert.ToDateTime(n.FormatGreg(txtGDate.Text, "yyyy/MM/dd")))
                                {
                                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . لقد تخطيت السنة المالية المحدد للنظام \n يرجى التواصل مع الإدارة لللإشتراك في خدمات النسخة " : "We can not complete the operation . have you skip the fiscal year specified for the system", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                                    return false;
                                }
                            }
                        }
                        catch
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . لقد تخطيت السنة المالية المحدد للنظام \n يرجى التواصل مع الإدارة لللإشتراك في خدمات النسخة " : "We can not complete the operation . have you skip the fiscal year specified for the system", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            return false;
                        }
                    }
                }
            }
            catch
            {
                return false;
            }
            return true;
        }
        private bool CheckUserIFRemote()
        {
            try
            {
#pragma warning disable CS0162 // Unreachable code detected
                return false; if (SystemInformation.TerminalServerSession)
#pragma warning restore CS0162 // Unreachable code detected
                {
                    return true;
                }
                return false;
            }
            catch
            {
                return true;
            }
        }
        private bool UpdateTableNo()
        {
            if (data_this.RoomNo.HasValue)
            {
                if ((switch_Dilevry.Value || switch_OutSide.Value) && data_this.RoomNo.Value > 1 && data_this.OrderTyp.Value == 0 && data_this.RoomSts.Value)
                {
                    int vT = db.StockRommID(data_this.RoomNo.Value).RomeNo;
                    if (MessageBox.Show((LangArEn == 0) ? ("سيتم تفريغ الطاولة رقم [" + vT + "] المحجوز لهذه الفاتورة \n  هل تريد المتابعة ؟") : ("Are you sure that you want to delete the record [" + data_this.RoomNo.Value + "]?"), VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                    {
                        return false;
                    }
                    List<T_Room> newData = (from t in db.T_Rooms
                                            where t.ID == data_this.RoomNo.Value
                                            where t.RomeStatus.Value
                                            select t).ToList();
                    if (newData.Count > 0)
                    {
                        newData.First().RomeStatus = false;
                        newData.First().waiterNo = null;
                        db.Log = VarGeneral.DebugLog;
                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                    }
                }
                if (switch_InSide.Value && data_this.RoomSts.Value && data_this.RoomNo.Value == 1 && data_this.OrderTyp.Value != 0)
                {
                    if (txtTable.Value == 0)
                    {
                        MessageBox.Show((LangArEn == 0) ? "يرجى تحديد الطاولة قبل عملية الحفظ" : "Please Selected Table", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        txtTable.Focus();
                        return false;
                    }
                    List<T_Room> newData = (from t in db.T_Rooms
                                            where t.ID == int.Parse(txtTable.Tag.ToString())
                                            where !t.RomeStatus.Value
                                            select t).ToList();
                    if (newData.Count > 0)
                    {
                        newData.First().RomeStatus = true;
                        if (!string.IsNullOrEmpty(textBox_WaiterName.Text))
                        {
                            newData.First().waiterNo = int.Parse(textBox_WaiterName.Tag.ToString());
                        }
                        else
                        {
                            newData.First().waiterNo = null;
                        }
                        db.Log = VarGeneral.DebugLog;
                        db.SubmitChanges(ConflictMode.ContinueOnConflict);
                    }
                }
            }
            return true;
        }
        private bool SaveData()
        {
            Program.min();
            isPrintSts = false;
            FrmPayid frm = new FrmPayid(txtDueAmount.Value);
            frm.Tag = LangArEn;
            frm.PaidLoc = txtPayment.Value;
            frm.RimmingLoc = txtSteel.Value;
            frm.txtDebit3.Text = txtDebit3.Text;
            frm.txtDebit3.Tag = txtDebit3.Tag;
            if (State == FormState.Edit)
            {
                if (data_this.InvNetLocCur.HasValue)
                {
                    try
                    {
                        frm.Payment_Loc = txtPaymentLoc.Value;
                        frm.NetWork_Loc = doubleInput_NetWorkLoc.Value;
                        frm.Visa_Loc = doubleInput_CreditLoc.Value;
                        frm.txtTax.Value = txtTotTax.Value;
                        frm.txtTax.Tag = ((checkBox_CostGaidTax.Checked && txtTotTax.Value > 0.0) ? txtTotTax.Value : 0.0).ToString();
                    }
                    catch
                    {
                        frm.Payment_Loc = 0.0;
                        frm.NetWork_Loc = 0.0;
                        frm.Visa_Loc = 0.0;
                    }
                }
                else
                {
                    frm.Payment_Loc = 0.0;
                    frm.NetWork_Loc = 0.0;
                    frm.Visa_Loc = 0.0;
                    frm.txtTax.Value = txtTotTax.Value;
                    frm.txtTax.Tag = ((checkBox_CostGaidTax.Checked && txtTotTax.Value > 0.0) ? txtTotTax.Value : 0.0).ToString();
                }
            }
            else
            {
                frm.Payment_Loc = txtPaymentLoc.Value;
                frm.NetWork_Loc = doubleInput_NetWorkLoc.Value;
                frm.Visa_Loc = doubleInput_CreditLoc.Value;
                frm.txtTax.Value = txtTotTax.Value;
                frm.txtTax.Tag = ((checkBox_CostGaidTax.Checked && txtTotTax.Value > 0.0) ? txtTotTax.Value : 0.0).ToString();
            }
            frm.TopMost = true;
            frm.ShowDialog();
            isPrintSts = frm.IsPrint;
            txtDebit3.Text = frm.txtDebit3.Text;
            txtDebit3.Tag = frm.txtDebit3.Tag;
            try
            {
                CommCalculat();
            }
            catch
            {
            }
            string AccCrdt;
            string AccDbt;
            string AccCrdt_Credit;
            string AccDbt_Credit;
            string AccCrdt_NewtWork;
            string AccDbt_NetWork;
            string AccCrdt_Cost_Tax;
            string AccDbt_Cost_Tax;
            string AccCrdt_Cost_Dis;
            string AccDbt_Cost_Dis;
            string AccCrdt_Cost_Comm;
            string AccDbt_Cost_Comm;
            int num;
            if (frm.vSts_Op)
            {
                txtPaymentLoc.Value = frm.Payment_Loc;
                doubleInput_NetWorkLoc.Value = frm.NetWork_Loc;
                doubleInput_CreditLoc.Value = frm.Visa_Loc;
                txtPayment.Value = frm.PaidLoc;
                txtSteel.Value = frm.RimmingLoc;
                if (State == FormState.New)
                {
                    dbInstance = null;
                }
                if (!ValidData())
                {
                    return false;
                }
                string Acc0 = _GdAuto.Acc0.ToString();
                AccCrdt = string.Empty;
                AccDbt = string.Empty;
                AccCrdt_Credit = string.Empty;
                AccDbt_Credit = string.Empty;
                AccCrdt_NewtWork = string.Empty;
                AccDbt_NetWork = string.Empty;
                AccCrdt_Cost_Tax = string.Empty;
                AccDbt_Cost_Tax = string.Empty;
                try
                {
                    AccCrdt_Cost_Tax = txtCredit5.Tag.ToString();
                }
                catch
                {
                    AccCrdt_Cost_Tax = string.Empty;
                }
                try
                {
                    AccDbt_Cost_Tax = txtDebit5.Tag.ToString();
                }
                catch
                {
                    AccDbt_Cost_Tax = string.Empty;
                }
                if (checkBox_CostGaidTax.Checked && (string.IsNullOrEmpty(AccDbt_Cost_Tax) || string.IsNullOrEmpty(AccCrdt_Cost_Tax) || string.IsNullOrEmpty(txtDebit5.Text) || string.IsNullOrEmpty(txtCredit5.Text)))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة حسابات الدائن والمدين الخاص بقيمة الضريبة " : "You can not complete the operation .verify the accounts of the private creditor and the debtor for Tax Value", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 5;
                    return false;
                }
                AccCrdt_Cost_Dis = string.Empty;
                AccDbt_Cost_Dis = string.Empty;
                try
                {
                    AccCrdt_Cost_Dis = txtCredit6.Tag.ToString();
                }
                catch
                {
                    AccCrdt_Cost_Dis = string.Empty;
                }
                try
                {
                    AccDbt_Cost_Dis = txtDebit6.Tag.ToString();
                }
                catch
                {
                    AccDbt_Cost_Dis = string.Empty;
                }
                if (checkBox_GaidDis.Checked && (string.IsNullOrEmpty(AccDbt_Cost_Dis) || string.IsNullOrEmpty(AccCrdt_Cost_Dis) || string.IsNullOrEmpty(txtDebit6.Text) || string.IsNullOrEmpty(txtCredit6.Text)))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة حسابات الدائن والمدين الخاص بقيمة الخصم " : "You can not complete the operation .verify the accounts of the private creditor and the debtor for Discount Value", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 5;
                    return false;
                }
                if (!switchButtonItem_IsReturn.Value)
                {
                    CommCalculat();
                }
                if (checkBox_GaidBankComm.Checked && txtTotBankComm.Value <= 0.0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لايمكن انشاء سند محاسبي بقيمة العمولة واجمالي العمولة يساوي صفر" : "You can not set up an accounting support Commition and the total Commition is equal to zero.", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 5;
                    return false;
                }
                AccCrdt_Cost_Comm = string.Empty;
                AccDbt_Cost_Comm = string.Empty;
                try
                {
                    AccCrdt_Cost_Comm = txtCredit7.Tag.ToString();
                }
                catch
                {
                    AccCrdt_Cost_Comm = string.Empty;
                }
                try
                {
                    AccDbt_Cost_Comm = txtDebit3.Tag.ToString();
                }
                catch
                {
                    AccDbt_Cost_Comm = string.Empty;
                }
                if (checkBox_GaidBankComm.Checked && (string.IsNullOrEmpty(AccDbt_Cost_Comm) || string.IsNullOrEmpty(AccCrdt_Cost_Comm) || string.IsNullOrEmpty(txtDebit3.Text) || string.IsNullOrEmpty(txtCredit7.Text)))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة حسابات الدائن والمدين الخاص بقيمة العمولات البنكية " : "You can not complete the operation .verify the accounts of the private creditor and the debtor for Commition Value", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 5;
                    return false;
                }
                if (dbc.Get_PermissionID(VarGeneral.UserID).CreateGaid != 1 || dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp != 1)
                {
                    if (_InvSetting.InvSetting.Substring(1, 1) == "1")
                    {
                        int? userPointTyp = dbc.Get_PermissionID(VarGeneral.UserID).UserPointTyp;
                        if (userPointTyp.Value == 0 && userPointTyp.HasValue)
                        {
                            goto IL_07ac;
                        }
                    }
                    if (VarGeneral.SSSTyp != 0)
                    {
                        num = 1;
                        goto IL_07c1;
                    }
                }
                goto IL_07ac;
            }
            return false;
            IL_07c1:
            if (num == 0)
            {
                if (doubleInput_CreditLoc.Value > 0.0)
                {
                    AccCrdt_Credit = txtCredit2.Tag.ToString();
                    AccDbt_Credit = txtDebit2.Tag.ToString();
                }
                if (doubleInput_NetWorkLoc.Value > 0.0)
                {
                    AccCrdt_NewtWork = txtCredit3.Tag.ToString();
                    AccDbt_NetWork = txtDebit3.Tag.ToString();
                }
                if (txtPaymentLoc.Value > 0.0)
                {
                    AccCrdt = txtCredit1.Tag.ToString();
                    AccDbt = txtDebit1.Tag.ToString();
                }
                if (AccCrdt == string.Empty && txtPaymentLoc.Value > 0.0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف الدائن للقيد النقدي .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the creditor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (AccDbt == string.Empty && txtPaymentLoc.Value > 0.0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف المدين للقيد النقدي .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the debtor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (AccCrdt_Credit == string.Empty && doubleInput_CreditLoc.Value > 0.0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف الدائن للقيد الآجل .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the creditor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (AccDbt_Credit == string.Empty && doubleInput_CreditLoc.Value > 0.0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف المدين للقيد الآجل .  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the debtor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (AccCrdt_NewtWork == string.Empty && doubleInput_NetWorkLoc.Value > 0.0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف الدائن للقيد (شيك - شبكة).  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the creditor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
                if (AccDbt_NetWork == string.Empty && doubleInput_NetWorkLoc.Value > 0.0)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن إتمام العملية . تأكد من صحة الطرف المدين للقيد (شيك - شبكة).  تاكد من تعبئة الحسابات المطلوبة من شاشة تعيين نقاط البيع " : "You can not complete the operation . Make sure the debtor under the party . see set POS users Form", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    superTabControl_Info.SelectedTabIndex = 1;
                    return false;
                }
            }
            IDatabase db_ = Database.GetDatabase(VarGeneral.BranchCS);
            if (data_this.TaxGaidID.HasValue && !checkBox_CostGaidTax.Checked)
            {
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("gdhead_ID", DbType.Int32, _GdHeadCostTax.gdhead_ID);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDHEAD_DELETE");
                db_.EndTransaction();
                data_this.TaxGaidID = null;
            }
            if (data_this.DisGaidID1.HasValue && !checkBox_GaidDis.Checked)
            {
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("gdhead_ID", DbType.Int32, _GdHeadCostDis.gdhead_ID);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDHEAD_DELETE");
                db_.EndTransaction();
                data_this.DisGaidID1 = null;
            }
            if (data_this.CommGaidID.HasValue && !checkBox_GaidBankComm.Checked)
            {
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("gdhead_ID", DbType.Int32, _GdHeadCostComm.gdhead_ID);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDHEAD_DELETE");
                db_.EndTransaction();
                data_this.CommGaidID = null;
            }
            try
            {
                bool mndExtrnal = false;
                int mndNo = 0;
                try
                {
                    mndExtrnal = ((CmbInvSide.SelectedIndex > 0) ? true : false);
                }
                catch
                {
                    mndExtrnal = false;
                }
                try
                {
                    mndNo = ((CmbInvSide.SelectedIndex == 1) ? data_this.MndNo.Value : ((CmbInvSide.SelectedIndex > 1) ? int.Parse(txtCustNo.Text) : 0));
                }
                catch
                {
                    mndNo = 0;
                }
                int i;
                for (i = 0; i < ItemDetRemoved.Count; i++)
                {
                    try
                    {
                        List<T_SINVDET> q = db.T_SINVDETs.Where((T_SINVDET t) => t.SInvId == (int?)ItemDetRemoved[i]).ToList();
                        for (int iicnt = 0; iicnt < q.Count; iicnt++)
                        {
                            db_.ClearParameters();
                            db_.AddParameter("SInvDet_ID", DbType.Int32, q[iicnt].SInvDet_ID);
                            try
                            {
                                if (mndExtrnal && mndNo > 0 && !string.IsNullOrEmpty(mndNo.ToString()))
                                {
                                    if (CmbInvSide.SelectedIndex == 1)
                                    {
                                        db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + abs(" + q[iicnt].SRealQty.Value + ")\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_SINVDET ON T_Items.Itm_No = T_SINVDET.SItmNo\r\n\t\t                                          where SInvDet_ID = " + q[iicnt].SInvDet_ID + " and T_SINVDET.SItmTyp <> 3 and T_StoreMnd.MndNo = " + mndNo + " ;");
                                    }
                                    else
                                    {
                                        db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + abs(" + q[iicnt].SRealQty.Value + ")\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_SINVDET ON T_Items.Itm_No = T_SINVDET.SItmNo\r\n\t\t                                          where SInvDet_ID = " + q[iicnt].SInvDet_ID + " and T_SINVDET.SItmTyp <> 3 and T_StoreMnd.CusVenNo = '" + mndNo + "' ;");
                                    }
                                }
                            }
                            catch
                            {
                            }
                            db_.ExecuteNonQuery(storedProcedure: true, "S_T_SINVDET_DELETE");
                        }
                    }
                    catch
                    {
                        return false;
                    }
                }
                if (State == FormState.New)
                {
                    GetData();
                    try
                    {
                        if (switch_InSide.Value)
                        {
                            if (txtTable.Value == 0 || (!button_SrchTable.Enabled && button_Back.Visible && VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 44) && !switchButtonItem_IsReturn.Value))
                            {
                                data_this.RoomNo = 1;
                                data_this.RoomSts = false;
                            }
                            else
                            {
                                data_this.RoomNo = int.Parse(txtTable.Tag.ToString());
                                data_this.RoomSts = true;
                            }
                        }
                        else
                        {
                            data_this.RoomNo = 1;
                            data_this.RoomSts = false;
                        }
                        GetInvSetting();
                        textBox_ID.TextChanged -= textBox_ID_TextChanged;
                        T_INVHED newData = db.StockInvHead(VarGeneral.InvTyp, data_this.InvNo);
                        if (!string.IsNullOrEmpty(newData.InvNo) || newData.InvHed_ID > 0)
                        {
                            string max = string.Empty;
                            dbInstance = null;
                            max = db.MaxInvheadNo.ToString();
                            int maxSeq = 1;
                            maxSeq = db.MaxInvheadNoSequence;
                            MessageBox.Show("الرمز مستخدم من قبل.\n سيتم الحفظ برقم جديد [" + max + "]", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            textBox_ID.Text = max ?? string.Empty;
                            data_this.InvNo = max ?? string.Empty;
                            if (!switchButtonItem_IsReturn.Value)
                            {
                                textBox_Sequenc.Text = string.Concat(maxSeq);
                                data_this.InvId = maxSeq;
                            }
                        }
                        textBox_ID.TextChanged += textBox_ID_TextChanged;
                        data_this.IfRet = 0;
                        data_this.DATE_CREATED = DateTime.Now;
                        data_this.SalsManNo = VarGeneral.UserNumber;
                        data_this.UserNew = VarGeneral.UserNumber;
                        data_this.SalsManNam = string.Empty;
                        IDatabase dbHead = Database.GetDatabase(VarGeneral.BranchCS);
                        dbHead.ClearParameters();
                        dbHead.AddOutParameter("InvHed_ID", DbType.Int32);
                        dbHead.AddParameter("InvId", DbType.Double, data_this.InvId);
                        dbHead.AddParameter("InvNo", DbType.String, data_this.InvNo);
                        dbHead.AddParameter("InvTyp", DbType.Int32, data_this.InvTyp);
                        dbHead.AddParameter("InvCashPay", DbType.Int32, data_this.InvCashPay);
                        dbHead.AddParameter("CusVenNo", DbType.String, data_this.CusVenNo);
                        dbHead.AddParameter("CusVenNm", DbType.String, data_this.CusVenNm);
                        dbHead.AddParameter("CusVenAdd", DbType.String, data_this.CusVenAdd);
                        dbHead.AddParameter("CusVenTel", DbType.String, data_this.CusVenTel);
                        dbHead.AddParameter("Remark", DbType.String, data_this.Remark);
                        dbHead.AddParameter("HDat", DbType.String, data_this.HDat);
                        dbHead.AddParameter("GDat", DbType.String, data_this.GDat);
                        dbHead.AddParameter("MndNo", DbType.Int32, data_this.MndNo);
                        dbHead.AddParameter("SalsManNo", DbType.String, data_this.SalsManNo);
                        dbHead.AddParameter("SalsManNam", DbType.String, data_this.SalsManNam);
                        dbHead.AddParameter("InvTot", DbType.Double, data_this.InvTot);
                        dbHead.AddParameter("InvTotLocCur", DbType.Double, data_this.InvTotLocCur);
                        dbHead.AddParameter("InvDisPrs", DbType.Double, data_this.InvDisPrs);
                        dbHead.AddParameter("InvDisVal", DbType.Double, data_this.InvDisVal);
                        dbHead.AddParameter("InvDisValLocCur", DbType.Double, data_this.InvDisValLocCur);
                        dbHead.AddParameter("InvNet", DbType.Double, data_this.InvNet);
                        dbHead.AddParameter("InvNetLocCur", DbType.Double, data_this.InvNetLocCur);
                        dbHead.AddParameter("CashPay", DbType.Double, data_this.CashPay);
                        dbHead.AddParameter("CashPayLocCur", DbType.Double, data_this.CashPayLocCur);
                        dbHead.AddParameter("IfRet", DbType.Int32, data_this.IfRet);
                        dbHead.AddParameter("GadeNo", DbType.Double, data_this.GadeNo);
                        dbHead.AddParameter("GadeId", DbType.Double, data_this.GadeId);
                        dbHead.AddParameter("IfDel", DbType.Int32, data_this.IfDel);
                        dbHead.AddParameter("RetNo", DbType.String, data_this.RetNo);
                        dbHead.AddParameter("RetId", DbType.Double, data_this.RetId);
                        dbHead.AddParameter("InvCstNo", DbType.Int32, data_this.InvCstNo);
                        dbHead.AddParameter("InvCashPayNm", DbType.String, data_this.InvCashPayNm);
                        dbHead.AddParameter("RefNo", DbType.String, data_this.RefNo);
                        dbHead.AddParameter("InvCost", DbType.Int32, data_this.InvCost);
                        dbHead.AddParameter("EstDat", DbType.String, data_this.EstDat);
                        dbHead.AddParameter("CustPri", DbType.Int32, data_this.CustPri);
                        dbHead.AddParameter("ArbTaf", DbType.String, data_this.ArbTaf);
                        dbHead.AddParameter("CurTyp", DbType.Int32, data_this.CurTyp);
                        dbHead.AddParameter("InvCash", DbType.String, data_this.InvCash);
                        dbHead.AddParameter("ToStore", DbType.String, data_this.ToStore);
                        dbHead.AddParameter("ToStoreNm", DbType.String, data_this.ToStoreNm);
                        dbHead.AddParameter("InvQty", DbType.Double, data_this.InvQty);
                        dbHead.AddParameter("EngTaf", DbType.String, data_this.EngTaf);
                        dbHead.AddParameter("IfTrans", DbType.Int32, data_this.IfTrans);
                        dbHead.AddParameter("CustRep", DbType.Double, data_this.CustRep);
                        dbHead.AddParameter("CustNet", DbType.Double, data_this.CustNet);
                        dbHead.AddParameter("InvWight_T", DbType.Double, data_this.InvWight_T);
                        dbHead.AddParameter("IfPrint", DbType.Int32, data_this.IfPrint);
                        dbHead.AddParameter("LTim", DbType.String, data_this.LTim);
                        dbHead.AddParameter("CREATED_BY", DbType.String, data_this.CREATED_BY);
                        dbHead.AddParameter("DATE_CREATED", DbType.DateTime, data_this.DATE_CREATED);
                        dbHead.AddParameter("MODIFIED_BY", DbType.String, data_this.MODIFIED_BY);
                        dbHead.AddParameter("DATE_MODIFIED", DbType.DateTime, data_this.DATE_MODIFIED);
                        dbHead.AddParameter("CreditPay", DbType.Double, data_this.CreditPay);
                        dbHead.AddParameter("CreditPayLocCur", DbType.Double, data_this.CreditPayLocCur);
                        dbHead.AddParameter("NetworkPay", DbType.Double, data_this.NetworkPay);
                        dbHead.AddParameter("NetworkPayLocCur", DbType.Double, data_this.NetworkPayLocCur);
                        dbHead.AddParameter("CommMnd_Inv", DbType.Double, data_this.CommMnd_Inv);
                        dbHead.AddParameter("MndExtrnal", DbType.Boolean, data_this.MndExtrnal);
                        dbHead.AddParameter("CompanyID", DbType.Int32, data_this.CompanyID);
                        dbHead.AddParameter("InvAddCost", DbType.Double, data_this.InvAddCost);
                        dbHead.AddParameter("InvAddCostLoc", DbType.Double, data_this.InvAddCostLoc);
                        dbHead.AddParameter("InvAddCostExtrnal", DbType.Double, data_this.InvAddCostExtrnal);
                        dbHead.AddParameter("InvAddCostExtrnalLoc", DbType.Double, data_this.InvAddCostExtrnalLoc);
                        dbHead.AddParameter("IsExtrnalGaid", DbType.Boolean, data_this.IsExtrnalGaid);
                        dbHead.AddParameter("ExtrnalCostGaidID", DbType.Double, data_this.ExtrnalCostGaidID);
                        dbHead.AddParameter("Puyaid", DbType.Double, data_this.Puyaid);
                        dbHead.AddParameter("Remming", DbType.Double, data_this.Remming);
                        dbHead.AddParameter("RoomNo", DbType.Int32, data_this.RoomNo);
                        dbHead.AddParameter("OrderTyp", DbType.Int32, data_this.OrderTyp);
                        dbHead.AddParameter("RoomSts", DbType.Boolean, data_this.RoomSts);
                        dbHead.AddParameter("chauffeurNo", DbType.Int32, data_this.chauffeurNo);
                        dbHead.AddParameter("RoomPerson", DbType.Int32, data_this.RoomPerson);
                        dbHead.AddParameter("ServiceValue", DbType.Double, data_this.ServiceValue);
                        dbHead.AddParameter("Sts", DbType.Boolean, data_this.Sts);
                        dbHead.AddParameter("PaymentOrderTyp", DbType.Int32, data_this.PaymentOrderTyp);
                        dbHead.AddParameter("AdminLock", DbType.Boolean, data_this.AdminLock);
                        dbHead.AddParameter("DeleteDate", DbType.String, data_this.DeleteDate);
                        dbHead.AddParameter("DeleteTime", DbType.String, data_this.DeleteTime);
                        dbHead.AddParameter("UserNew", DbType.String, data_this.UserNew);
                        dbHead.AddParameter("IfEnter", DbType.Int32, data_this.IfEnter);
                        dbHead.AddParameter("InvAddTax", DbType.Double, data_this.InvAddTax);
                        dbHead.AddParameter("InvAddTaxlLoc", DbType.Double, data_this.InvAddTaxlLoc);
                        dbHead.AddParameter("IsTaxGaid", DbType.Boolean, data_this.IsTaxGaid);
                        dbHead.AddParameter("TaxGaidID", DbType.Double, data_this.TaxGaidID);
                        dbHead.AddParameter("IsTaxUse", DbType.Boolean, data_this.IsTaxUse);
                        dbHead.AddParameter("InvValGaidDis", DbType.Double, data_this.InvValGaidDis);
                        dbHead.AddParameter("InvValGaidDislLoc", DbType.Double, data_this.InvValGaidDislLoc);
                        dbHead.AddParameter("IsDisGaid", DbType.Boolean, data_this.IsDisGaid);
                        dbHead.AddParameter("DisGaidID1", DbType.Double, data_this.DisGaidID1);
                        dbHead.AddParameter("IsDisUse1", DbType.Boolean, data_this.IsDisUse1);
                        dbHead.AddParameter("InvComm", DbType.Double, data_this.InvComm);
                        dbHead.AddParameter("InvCommLoc", DbType.Double, data_this.InvCommLoc);
                        dbHead.AddParameter("IsCommGaid", DbType.Boolean, data_this.IsCommGaid);
                        dbHead.AddParameter("CommGaidID", DbType.Double, data_this.CommGaidID);
                        dbHead.AddParameter("IsCommUse", DbType.Boolean, data_this.IsCommUse);
                        dbHead.AddParameter("IsTaxLines", DbType.Boolean, data_this.IsTaxLines);
                        dbHead.AddParameter("IsTaxByTotal", DbType.Boolean, data_this.IsTaxByTotal);
                        dbHead.AddParameter("IsTaxByNet", DbType.Boolean, data_this.IsTaxByNet);
                        dbHead.AddParameter("TaxByNetValue", DbType.Double, data_this.TaxByNetValue);
                        dbHead.AddParameter("DesPointsValue", DbType.Double, data_this.DesPointsValue);
                        dbHead.AddParameter("DesPointsValueLocCur", DbType.Double, data_this.DesPointsValueLocCur);
                        dbHead.AddParameter("PointsCount", DbType.Double, data_this.PointsCount);
                        dbHead.AddParameter("IsPoints", DbType.Boolean, data_this.IsPoints);
                        dbHead.AddParameter("PriceIncludeTax", DbType.Boolean, ChkPriceIncludeTax.Checked);
                        dbHead.AddParameter("tailor20", DbType.String, data_this.tailor20);
                        dbHead.AddParameter("CInvType", DbType.Int32, data_this.InvTyp);
                        dbHead.ExecuteNonQuery(storedProcedure: true, "S_T_INVHED_INSERT");
                        data_this.InvHed_ID = int.Parse(dbHead.GetParameterValue("InvHed_ID").ToString());
                    }
                    catch (SqlException ex3)
                    {
                        try
                        {
                            VarGeneral.DebLog.writeLog("SaveData:", ex3, enable: true);
                        }
                        catch
                        {
                        }
                        string max = string.Empty;
                        dbInstance = null;
                        max = db.MaxInvheadNo.ToString();
                        int maxSeq = 1;
                        maxSeq = db.MaxInvheadNoSequence;
                        if (ex3.Number == 2627)
                        {
                            MessageBox.Show("الرمز مستخدم من قبل.\n سيتم الحفظ برقم جديد [" + max + "]", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            textBox_ID.Text = max ?? string.Empty;
                            data_this.InvNo = max ?? string.Empty;
                            if (!switchButtonItem_IsReturn.Value)
                            {
                                textBox_Sequenc.Text = string.Concat(maxSeq);
                                data_this.InvId = maxSeq;
                            }
                            Button_Save_Click(null, null);
                        }
                    }
                    catch (Exception ex4)
                    {
                        try
                        {
                            VarGeneral.DebLog.writeLog("SaveData2:", ex4, enable: true);
                        }
                        catch
                        {
                        }
                        return false;
                    }
                    if (data_this.RoomNo.Value > 1 && !string.IsNullOrEmpty(txtTable.Tag.ToString()))
                    {
                        db.ExecuteCommand("UPDATE [T_Rooms] SET [RomeStatus] = 1, [waiterNo] =" + ((!string.IsNullOrEmpty(textBox_WaiterName.Text)) ? int.Parse(textBox_WaiterName.Tag.ToString()).ToString() : "NULL") + " Where ID =" + int.Parse(txtTable.Tag.ToString()));
                    }
                }
                else if (!switchButtonItem_IsReturn.Value)
                {
                    if (!UpdateTableNo())
                    {
                        return false;
                    }
                    GetData();
                    if (data_this.RoomNo.Value > 1 && !string.IsNullOrEmpty(txtTable.Tag.ToString()))
                    {
                        List<T_Room> q3 = db.T_Rooms.Where((T_Room t) => t.ID == int.Parse(txtTable.Tag.ToString())).ToList();
                        if (q3.Count > 0)
                        {
                            T_Room vData = new T_Room();
                            vData = q3.First();
                            if (!string.IsNullOrEmpty(textBox_WaiterName.Text))
                            {
                                vData.waiterNo = int.Parse(textBox_WaiterName.Tag.ToString());
                            }
                            else
                            {
                                vData.waiterNo = null;
                            }
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                        }
                    }
                    vSINVDIT.Clear();
                    for (int j = 0; j < data_this.T_INVDETs.Count; j++)
                    {
                        if (data_this.T_INVDETs[j].ItmTyp.Value == 2)
                        {
                            vSINVDIT.Add(data_this.T_INVDETs[j].InvDet_ID, data_this.T_INVDETs[j].T_SINVDETs.ToList());
                        }
                    }
                    for (int j = 0; j < data_this.T_INVDETs.Count; j++)
                    {
                        if (data_this.T_INVDETs[j].ItmTyp.Value == 2)
                        {
                            for (int iicnt = 0; iicnt < data_this.T_INVDETs[j].T_SINVDETs.Count; iicnt++)
                            {
                                db_.ClearParameters();
                                db_.AddParameter("SInvDet_ID", DbType.Int32, data_this.T_INVDETs[j].T_SINVDETs[iicnt].SInvDet_ID);
                                try
                                {
                                    if (mndExtrnal && mndNo > 0 && !string.IsNullOrEmpty(mndNo.ToString()))
                                    {
                                        if (CmbInvSide.SelectedIndex == 1)
                                        {
                                            db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + abs(" + data_this.T_INVDETs[j].T_SINVDETs[iicnt].SRealQty.Value + ")\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_SINVDET ON T_Items.Itm_No = T_SINVDET.SItmNo\r\n\t\t                                          where SInvDet_ID = " + data_this.T_INVDETs[j].T_SINVDETs[iicnt].SInvDet_ID + " and T_SINVDET.SItmTyp <> 3 and T_StoreMnd.MndNo = " + mndNo + " ;");
                                        }
                                        else
                                        {
                                            db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + abs(" + data_this.T_INVDETs[j].T_SINVDETs[iicnt].SRealQty.Value + ")\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_SINVDET ON T_Items.Itm_No = T_SINVDET.SItmNo\r\n\t\t                                          where SInvDet_ID = " + data_this.T_INVDETs[j].T_SINVDETs[iicnt].SInvDet_ID + " and T_SINVDET.SItmTyp <> 3 and T_StoreMnd.CusVenNo = '" + mndNo + "' ;");
                                        }
                                    }
                                }
                                catch
                                {
                                }
                                db_.ExecuteNonQuery(storedProcedure: true, "S_T_SINVDET_DELETE");
                            }
                        }
                        db_.ClearParameters();
                        db_.AddParameter("InvDet_ID", DbType.Int32, data_this.T_INVDETs[j].InvDet_ID);
                        try
                        {
                            if (mndExtrnal && mndNo > 0 && !string.IsNullOrEmpty(mndNo.ToString()))
                            {
                                if (CmbInvSide.SelectedIndex == 1)
                                {
                                    db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + abs(" + data_this.T_INVDETs[j].RealQty.Value + ")\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_INVDET ON T_Items.Itm_No = T_INVDET.ItmNo\r\n\t\t                                          where InvDet_ID = " + data_this.T_INVDETs[j].InvDet_ID + " and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = " + mndNo + " ;");
                                }
                                else
                                {
                                    db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + abs(" + data_this.T_INVDETs[j].RealQty.Value + ")\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_INVDET ON T_Items.Itm_No = T_INVDET.ItmNo\r\n\t\t                                          where InvDet_ID = " + data_this.T_INVDETs[j].InvDet_ID + " and T_INVDET.ItmTyp <> 3 and T_StoreMnd.CusVenNo = '" + mndNo + "' ;");
                                }
                            }
                        }
                        catch
                        {
                        }
                        db_.ExecuteNonQuery(storedProcedure: true, "S_T_INVDET_DELETE");
                    }
                    data_this.SalsManNam = VarGeneral.UserNumber;
                    IDatabase dbHead = Database.GetDatabase(VarGeneral.BranchCS);
                    dbHead.ClearParameters();
                    dbHead.AddParameter("InvHed_ID", DbType.Int32, data_this.InvHed_ID);
                    dbHead.AddParameter("InvId", DbType.Double, data_this.InvId);
                    dbHead.AddParameter("InvNo", DbType.String, data_this.InvNo);
                    dbHead.AddParameter("InvTyp", DbType.Int32, data_this.InvTyp);
                    dbHead.AddParameter("InvCashPay", DbType.Int32, data_this.InvCashPay);
                    dbHead.AddParameter("CusVenNo", DbType.String, data_this.CusVenNo);
                    dbHead.AddParameter("CusVenNm", DbType.String, data_this.CusVenNm);
                    dbHead.AddParameter("CusVenAdd", DbType.String, data_this.CusVenAdd);
                    dbHead.AddParameter("CusVenTel", DbType.String, data_this.CusVenTel);
                    dbHead.AddParameter("Remark", DbType.String, data_this.Remark);
                    dbHead.AddParameter("HDat", DbType.String, data_this.HDat);
                    dbHead.AddParameter("GDat", DbType.String, data_this.GDat);
                    dbHead.AddParameter("PriceIncludTax", DbType.Boolean, ChkPriceIncludeTax.Checked);
                    dbHead.AddParameter("MndNo", DbType.Int32, data_this.MndNo);
                    dbHead.AddParameter("SalsManNo", DbType.String, data_this.SalsManNo);
                    dbHead.AddParameter("SalsManNam", DbType.String, data_this.SalsManNam);
                    dbHead.AddParameter("InvTot", DbType.Double, data_this.InvTot);
                    dbHead.AddParameter("InvTotLocCur", DbType.Double, data_this.InvTotLocCur);
                    dbHead.AddParameter("InvDisPrs", DbType.Double, data_this.InvDisPrs);
                    dbHead.AddParameter("InvDisVal", DbType.Double, data_this.InvDisVal);
                    dbHead.AddParameter("InvDisValLocCur", DbType.Double, data_this.InvDisValLocCur);
                    dbHead.AddParameter("InvNet", DbType.Double, data_this.InvNet);
                    dbHead.AddParameter("InvNetLocCur", DbType.Double, data_this.InvNetLocCur);
                    dbHead.AddParameter("CashPay", DbType.Double, data_this.CashPay);
                    dbHead.AddParameter("CashPayLocCur", DbType.Double, data_this.CashPayLocCur);
                    dbHead.AddParameter("IfRet", DbType.Int32, data_this.IfRet);
                    dbHead.AddParameter("GadeNo", DbType.Double, data_this.GadeNo);
                    dbHead.AddParameter("GadeId", DbType.Double, data_this.GadeId);
                    dbHead.AddParameter("IfDel", DbType.Int32, data_this.IfDel);
                    dbHead.AddParameter("RetNo", DbType.String, data_this.RetNo);
                    dbHead.AddParameter("RetId", DbType.Double, data_this.RetId);
                    dbHead.AddParameter("InvCstNo", DbType.Int32, data_this.InvCstNo);
                    dbHead.AddParameter("InvCashPayNm", DbType.String, data_this.InvCashPayNm);
                    dbHead.AddParameter("RefNo", DbType.String, data_this.RefNo);
                    dbHead.AddParameter("InvCost", DbType.Int32, data_this.InvCost);
                    dbHead.AddParameter("EstDat", DbType.String, data_this.EstDat);
                    dbHead.AddParameter("CustPri", DbType.Int32, data_this.CustPri);
                    dbHead.AddParameter("ArbTaf", DbType.String, data_this.ArbTaf);
                    dbHead.AddParameter("CurTyp", DbType.Int32, data_this.CurTyp);
                    dbHead.AddParameter("InvCash", DbType.String, data_this.InvCash);
                    dbHead.AddParameter("ToStore", DbType.String, data_this.ToStore);
                    dbHead.AddParameter("ToStoreNm", DbType.String, data_this.ToStoreNm);
                    dbHead.AddParameter("InvQty", DbType.Double, data_this.InvQty);
                    dbHead.AddParameter("EngTaf", DbType.String, data_this.EngTaf);
                    dbHead.AddParameter("IfTrans", DbType.Int32, data_this.IfTrans);
                    dbHead.AddParameter("CustRep", DbType.Double, data_this.CustRep);
                    dbHead.AddParameter("CustNet", DbType.Double, data_this.CustNet);
                    dbHead.AddParameter("InvWight_T", DbType.Double, data_this.InvWight_T);
                    dbHead.AddParameter("IfPrint", DbType.Int32, data_this.IfPrint);
                    dbHead.AddParameter("LTim", DbType.String, data_this.LTim);
                    dbHead.AddParameter("CREATED_BY", DbType.String, data_this.CREATED_BY);
                    dbHead.AddParameter("DATE_CREATED", DbType.DateTime, data_this.DATE_CREATED);
                    dbHead.AddParameter("MODIFIED_BY", DbType.String, data_this.MODIFIED_BY);
                    dbHead.AddParameter("DATE_MODIFIED", DbType.DateTime, data_this.DATE_MODIFIED);
                    dbHead.AddParameter("CreditPay", DbType.Double, data_this.CreditPay);
                    dbHead.AddParameter("CreditPayLocCur", DbType.Double, data_this.CreditPayLocCur);
                    dbHead.AddParameter("NetworkPay", DbType.Double, data_this.NetworkPay);
                    dbHead.AddParameter("NetworkPayLocCur", DbType.Double, data_this.NetworkPayLocCur);
                    dbHead.AddParameter("CommMnd_Inv", DbType.Double, data_this.CommMnd_Inv);
                    dbHead.AddParameter("MndExtrnal", DbType.Boolean, data_this.MndExtrnal);
                    dbHead.AddParameter("CompanyID", DbType.Int32, data_this.CompanyID);
                    dbHead.AddParameter("InvAddCost", DbType.Double, data_this.InvAddCost);
                    dbHead.AddParameter("InvAddCostLoc", DbType.Double, data_this.InvAddCostLoc);
                    dbHead.AddParameter("InvAddCostExtrnal", DbType.Double, data_this.InvAddCostExtrnal);
                    dbHead.AddParameter("InvAddCostExtrnalLoc", DbType.Double, data_this.InvAddCostExtrnalLoc);
                    dbHead.AddParameter("IsExtrnalGaid", DbType.Boolean, data_this.IsExtrnalGaid);
                    dbHead.AddParameter("ExtrnalCostGaidID", DbType.Double, data_this.ExtrnalCostGaidID);
                    dbHead.AddParameter("Puyaid", DbType.Double, data_this.Puyaid);
                    dbHead.AddParameter("Remming", DbType.Double, data_this.Remming);
                    dbHead.AddParameter("RoomNo", DbType.Int32, data_this.RoomNo);
                    dbHead.AddParameter("OrderTyp", DbType.Int32, data_this.OrderTyp);
                    dbHead.AddParameter("RoomSts", DbType.Boolean, data_this.RoomSts);
                    dbHead.AddParameter("chauffeurNo", DbType.Int32, data_this.chauffeurNo);
                    dbHead.AddParameter("RoomPerson", DbType.Int32, data_this.RoomPerson);
                    dbHead.AddParameter("ServiceValue", DbType.Double, data_this.ServiceValue);
                    dbHead.AddParameter("Sts", DbType.Boolean, data_this.Sts);
                    dbHead.AddParameter("PaymentOrderTyp", DbType.Int32, data_this.PaymentOrderTyp);
                    dbHead.AddParameter("AdminLock", DbType.Boolean, data_this.AdminLock);
                    dbHead.AddParameter("DeleteDate", DbType.String, data_this.DeleteDate);
                    dbHead.AddParameter("DeleteTime", DbType.String, data_this.DeleteTime);
                    dbHead.AddParameter("UserNew", DbType.String, data_this.UserNew);
                    dbHead.AddParameter("IfEnter", DbType.Int32, data_this.IfEnter);
                    dbHead.AddParameter("InvAddTax", DbType.Double, data_this.InvAddTax);
                    dbHead.AddParameter("InvAddTaxlLoc", DbType.Double, data_this.InvAddTaxlLoc);
                    dbHead.AddParameter("IsTaxGaid", DbType.Boolean, data_this.IsTaxGaid);
                    dbHead.AddParameter("TaxGaidID", DbType.Double, data_this.TaxGaidID);
                    dbHead.AddParameter("IsTaxUse", DbType.Boolean, data_this.IsTaxUse);
                    dbHead.AddParameter("InvValGaidDis", DbType.Double, data_this.InvValGaidDis);
                    dbHead.AddParameter("InvValGaidDislLoc", DbType.Double, data_this.InvValGaidDislLoc);
                    dbHead.AddParameter("IsDisGaid", DbType.Boolean, data_this.IsDisGaid);
                    dbHead.AddParameter("DisGaidID1", DbType.Double, data_this.DisGaidID1);
                    dbHead.AddParameter("IsDisUse1", DbType.Boolean, data_this.IsDisUse1);
                    dbHead.AddParameter("InvComm", DbType.Double, data_this.InvComm);
                    dbHead.AddParameter("InvCommLoc", DbType.Double, data_this.InvCommLoc);
                    dbHead.AddParameter("IsCommGaid", DbType.Boolean, data_this.IsCommGaid);
                    dbHead.AddParameter("CommGaidID", DbType.Double, data_this.CommGaidID);
                    dbHead.AddParameter("IsCommUse", DbType.Boolean, data_this.IsCommUse);
                    dbHead.AddParameter("IsTaxLines", DbType.Boolean, data_this.IsTaxLines);
                    dbHead.AddParameter("IsTaxByTotal", DbType.Boolean, data_this.IsTaxByTotal);
                    dbHead.AddParameter("IsTaxByNet", DbType.Boolean, data_this.IsTaxByNet);
                    dbHead.AddParameter("TaxByNetValue", DbType.Double, data_this.TaxByNetValue);
                    dbHead.AddParameter("DesPointsValue", DbType.Double, data_this.DesPointsValue);
                    dbHead.AddParameter("DesPointsValueLocCur", DbType.Double, data_this.DesPointsValueLocCur);
                    dbHead.AddParameter("PointsCount", DbType.Double, data_this.PointsCount);
                    dbHead.AddParameter("IsPoints", DbType.Boolean, data_this.IsPoints);
                    dbHead.AddParameter("tailor20", DbType.String, data_this.tailor20);
                    dbHead.AddParameter("CusVenMob", DbType.String, data_this.CusVenMob);
                    dbHead.AddParameter("PriceIncludeTax", DbType.Boolean, data_this.PriceIncludTax);
                    dbHead.ExecuteNonQuery(storedProcedure: true, "S_T_INVHED_UPDATE");
                    try
                    {
                        if ((VarGeneral.SSSLev == "C" || VarGeneral.SSSLev == "R" || VarGeneral.SSSLev == "H") && !panel_Table.Visible && data_this.RoomNo.Value > 1)
                        {
                            db.ExecuteCommand("update T_INVHED SET RoomNo = 1 ,RoomPerson = 1 where InvHed_ID = " + data_this.InvHed_ID);
                        }
                    }
                    catch
                    {
                    }
                }
                else
                {
                    vSINVDIT.Clear();
                    for (int j = 0; j < data_this.T_INVDETs.Count; j++)
                    {
                        if (data_this.T_INVDETs[j].ItmTyp.Value == 2)
                        {
                            vSINVDIT.Add(data_this.T_INVDETs[j].InvDet_ID, data_this.T_INVDETs[j].T_SINVDETs.ToList());
                        }
                    }
                    for (int j = 0; j < data_this.T_INVDETs.Count; j++)
                    {
                        if (data_this.T_INVDETs[j].ItmTyp.Value == 2)
                        {
                            for (int iicnt = 0; iicnt < data_this.T_INVDETs[j].T_SINVDETs.Count; iicnt++)
                            {
                                db_.ClearParameters();
                                db_.AddParameter("SInvDet_ID", DbType.Int32, data_this.T_INVDETs[j].T_SINVDETs[iicnt].SInvDet_ID);
                                try
                                {
                                    if (mndExtrnal && mndNo > 0 && !string.IsNullOrEmpty(mndNo.ToString()))
                                    {
                                        db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty + abs(" + data_this.T_INVDETs[j].T_SINVDETs[iicnt].SRealQty.Value + ")\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_SINVDET ON T_Items.Itm_No = T_SINVDET.SItmNo\r\n\t\t                                          where SInvDet_ID = " + data_this.T_INVDETs[j].T_SINVDETs[iicnt].SInvDet_ID + " and T_SINVDET.SItmTyp <> 3 and T_StoreMnd.MndNo = " + mndNo + " ;");
                                    }
                                }
                                catch
                                {
                                }
                                db_.ExecuteNonQuery(storedProcedure: true, "S_T_SINVDET_DELETE");
                            }
                        }
                        db_.ClearParameters();
                        db_.AddParameter("InvDet_ID", DbType.Int32, data_this.T_INVDETs[j].InvDet_ID);
                        try
                        {
                            if (mndExtrnal && mndNo > 0 && !string.IsNullOrEmpty(mndNo.ToString()))
                            {
                                db.ExecuteCommand("  UPDATE T_StoreMnd SET T_StoreMnd.stkQty = T_StoreMnd.stkQty - " + Math.Abs(data_this.T_INVDETs[j].RealQty.Value) + "\r\n\t\t                                          FROM T_Items INNER JOIN T_StoreMnd ON T_Items.Itm_No = T_StoreMnd.itmNo INNER JOIN T_INVDET ON T_Items.Itm_No = T_INVDET.ItmNo\r\n\t\t                                          where InvDet_ID = " + data_this.T_INVDETs[j].InvDet_ID + " and T_INVDET.ItmTyp <> 3 and T_StoreMnd.MndNo = " + mndNo + " ;");
                            }
                        }
                        catch
                        {
                        }
                        db_.ExecuteNonQuery(storedProcedure: true, "S_T_INVDET_DELETE");
                    }
                    data_this.SalsManNam = VarGeneral.UserNumber;
                    db.Log = VarGeneral.DebugLog;
                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                }
                int iiCnt = 0;
                try
                {
                    for (iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
                    {
                        if (FlxInv.GetData(iiCnt, 1) == null)
                        {
                            continue;
                        }
                        db_.ClearParameters();
                        db_.AddParameter("InvDet_ID", DbType.Int32, 0);
                        db_.AddParameter("InvNo", DbType.String, textBox_ID.Text.Trim());
                        db_.AddParameter("InvId", DbType.Int32, data_this.InvHed_ID);
                        db_.AddParameter("InvSer", DbType.Int32, iiCnt);
                        db_.AddParameter("ItmNo", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 1)));
                        db_.AddParameter("Cost", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 10)))));
                        if (!switchButtonItem_IsReturn.Value)
                        {
                            db_.AddParameter("Qty", DbType.Double, 0.0 - double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))));
                        }
                        else
                        {
                            db_.AddParameter("Qty", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))));
                        }
                        db_.AddParameter("ItmDes", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 2)));
                        db_.AddParameter("ItmUnt", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 3)));
                        db_.AddParameter("ItmDesE", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 4)));
                        db_.AddParameter("ItmUntE", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 5)));
                        db_.AddParameter("ItmUntPak", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 11)))));
                        db_.AddParameter("StoreNo", DbType.Int32, int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)));
                        db_.AddParameter("Price", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))));
                        db_.AddParameter("Amount", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38)))));
                        if (!switchButtonItem_IsReturn.Value)
                        {
                            db_.AddParameter("RealQty", DbType.Double, 0.0 - double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))));
                        }
                        else
                        {
                            db_.AddParameter("RealQty", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))));
                        }
                        db_.AddParameter("itmInvDsc", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 13)))));
                        if (VarGeneral.CheckDate(string.Concat(FlxInv.GetData(iiCnt, 27))))
                        {
                            db_.AddParameter("DatExper", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 27)));
                        }
                        else
                        {
                            db_.AddParameter("DatExper", DbType.String, string.Empty);
                        }
                        db_.AddParameter("ItmDis", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 9)))));
                        db_.AddParameter("ItmTyp", DbType.Int32, int.Parse("0" + FlxInv.GetData(iiCnt, 32)));
                        db_.AddParameter("ItmIndex", DbType.Int32, 0);
                        try
                        {
                            db_.AddParameter("ItmWight", DbType.Double, ((bool)FlxInv.GetData(iiCnt, 33)) ? 1 : 0);
                        }
                        catch
                        {
                            db_.AddParameter("ItmWight", DbType.Double, 0);
                        }
                        db_.AddParameter("ItmWight_T", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 34)))));
                        if (!string.IsNullOrEmpty(string.Concat(FlxInv.GetData(iiCnt, 35))))
                        {
                            db_.AddParameter("RunCod", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 35)));
                        }
                        else
                        {
                            db_.AddParameter("RunCod", DbType.String, string.Empty);
                        }
                        if (FlxInv.Rows[iiCnt].StyleNew.BackColor == Color.Black)
                        {
                            db_.AddParameter("LineDetails", DbType.String, string.Empty);
                        }
                        else if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            db_.AddParameter("LineDetails", DbType.String, string.Concat(FlxInv.GetData(iiCnt + 1, 2)));
                        }
                        else
                        {
                            db_.AddParameter("LineDetails", DbType.String, string.Concat(FlxInv.GetData(iiCnt + 1, 4)));
                        }
                        db_.AddParameter("Serial_Key", DbType.String, string.Empty);
                        db_.AddParameter("ItmTax", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))));
                        try
                        {
                            if (!string.IsNullOrEmpty(FlxInv.GetData(iiCnt, 39).ToString()))
                            {
                                db_.AddParameter("OfferTyp", DbType.Int32, int.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 39)))));
                            }
                        }
                        catch
                        {
                        }
                        db_.ExecuteNonQuery(storedProcedure: true, "S_T_INVDET_INSERT");
                        if (CmbInvSide.SelectedIndex > 0)
                        {
                            db.ExecuteCommand(string.Concat("Update T_Items SET OpenQty = OpenQty + ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), " WHERE Itm_No = '", FlxInv.GetData(iiCnt, 1), "';"));
                            db.ExecuteCommand(string.Concat("Update T_STKSQTY SET stkQty = stkQty + ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), " WHERE itmNo = '", FlxInv.GetData(iiCnt, 1), "' and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), ";"));
                            int q2 = db.ExecuteCommand(string.Concat("select Count(*) from T_STKSQTY where itmNo = '", FlxInv.GetData(iiCnt, 1), "' and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), ";"));
                            if (q2 > 0 && VarGeneral.CheckDate(string.Concat(FlxInv.GetData(iiCnt, 27))))
                            {
                                db.ExecuteCommand(string.Concat("Update T_QTYEXP SET stkQty = stkQty + ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), " WHERE itmNo = ", FlxInv.GetData(iiCnt, 1), " and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), " and DatExper = '", FlxInv.GetData(iiCnt, 27), "';"));
                            }
                            if (CmbInvSide.SelectedIndex == 1)
                            {
                                db.ExecuteCommand(string.Concat("Update T_StoreMnd SET stkQty = stkQty - ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), " WHERE itmNo = '", FlxInv.GetData(iiCnt, 1), "' and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), " and MndNo = ", int.Parse(CmbLegate.SelectedValue.ToString()), ";"));
                            }
                            else
                            {
                                db.ExecuteCommand(string.Concat("Update T_StoreMnd SET stkQty = stkQty - ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))), " WHERE itmNo = '", FlxInv.GetData(iiCnt, 1), "' and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)), " and CusVenNo = '", txtCustNo.Text, "';"));
                            }
                        }
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 32)))) != 2.0)
                        {
                            continue;
                        }
                        dataGridView_ItemDet.Visible = false;
                        FlxInv.RowSel = iiCnt;
                        if (State == FormState.New && (int.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 25)))) <= 0 || string.IsNullOrEmpty(FlxInv.GetData(iiCnt, 25).ToString())))
                        {
                            GridDetUpdate(FlxInv.RowSel);
                        }
                        else
                        {
                            for (int j = 0; j < vSINVDIT.Count; j++)
                            {
                                if ((double)vSINVDIT.ToList()[j].Key == double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 25)))))
                                {
                                    SetLinesDET(vSINVDIT.ToList()[j].Value, iiCnt);
                                }
                            }
                        }
                        int SInvHed = 0;
                        try
                        {
                            Stock_DataDataContext stock_DataDataContext = new Stock_DataDataContext(VarGeneral.BranchCS);
                            SInvHed = (from t in stock_DataDataContext.T_INVDETs
                                       where t.InvId == (int?)data_this.InvHed_ID
                                       where t.InvNo == textBox_ID.Text
                                       where t.ItmTyp == (int?)2
                                       where t.InvSer == (int?)iiCnt
                                       select t).ToList().First().InvDet_ID;
                        }
                        catch
                        {
                            SInvHed = 0;
                        }
                        if (SInvHed == 0)
                        {
                            continue;
                        }
                        for (int j = 1; j < dataGridView_ItemDet.Rows.Count; j++)
                        {
                            if (dataGridView_ItemDet.GetData(j, 1) == null)
                            {
                                continue;
                            }
                            db_.ClearParameters();
                            db_.AddParameter("SInvDet_ID", DbType.Int32, 0);
                            db_.AddParameter("SInvNo", DbType.String, textBox_ID.Text.Trim());
                            db_.AddParameter("SInvId", DbType.Int32, SInvHed);
                            db_.AddParameter("SInvSer", DbType.Int32, j);
                            db_.AddParameter("SItmNo", DbType.String, string.Concat(dataGridView_ItemDet.GetData(j, 1)));
                            db_.AddParameter("SCost", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 10)))));
                            if (!switchButtonItem_IsReturn.Value)
                            {
                                db_.AddParameter("SQty", DbType.Double, 0.0 - double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 7)))));
                            }
                            else
                            {
                                db_.AddParameter("SQty", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 7)))));
                            }
                            db_.AddParameter("SItmDes", DbType.String, string.Concat(dataGridView_ItemDet.GetData(j, 2)));
                            db_.AddParameter("SItmUnt", DbType.String, string.Concat(dataGridView_ItemDet.GetData(j, 3)));
                            db_.AddParameter("SItmDesE", DbType.String, string.Concat(dataGridView_ItemDet.GetData(j, 4)));
                            db_.AddParameter("SItmUntE", DbType.String, string.Concat(dataGridView_ItemDet.GetData(j, 5)));
                            db_.AddParameter("SItmUntPak", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 11)))));
                            db_.AddParameter("SStoreNo", DbType.Int32, int.Parse(VarGeneral.TString.TEmpty(dataGridView_ItemDet.GetData(j, 6).ToString() ?? string.Empty)));
                            db_.AddParameter("SPrice", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 8)))));
                            db_.AddParameter("SAmount", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 38)))));
                            if (!switchButtonItem_IsReturn.Value)
                            {
                                db_.AddParameter("SRealQty", DbType.Double, 0.0 - double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 12)))));
                            }
                            else
                            {
                                db_.AddParameter("SRealQty", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 12)))));
                            }
                            db_.AddParameter("SitmInvDsc", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 13)))));
                            if (VarGeneral.CheckDate(string.Concat(dataGridView_ItemDet.GetData(j, 27))))
                            {
                                db_.AddParameter("SDatExper", DbType.String, string.Concat(dataGridView_ItemDet.GetData(j, 27)));
                            }
                            else
                            {
                                db_.AddParameter("SDatExper", DbType.String, string.Empty);
                            }
                            db_.AddParameter("SItmDis", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 9)))));
                            db_.AddParameter("SItmTyp", DbType.Int32, int.Parse("0" + dataGridView_ItemDet.GetData(j, 32)));
                            db_.AddParameter("SItmIndex", DbType.Int32, 0);
                            db_.AddParameter("SItmWight", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 33)))));
                            db_.AddParameter("SItmWight_T", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 34)))));
                            db_.AddParameter("SQtyDef", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 29)))));
                            db_.AddParameter("SPriceDef", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 17)))));
                            db_.AddParameter("SInvIdHEAD", DbType.Int32, data_this.InvHed_ID);
                            db_.AddParameter("SItmTax", DbType.Double, 0);
                            db_.ExecuteNonQuery(storedProcedure: true, "S_T_SINVDET_INSERT");
                            if (CmbInvSide.SelectedIndex > 0)
                            {
                                db.ExecuteCommand(string.Concat("Update T_Items SET OpenQty = OpenQty + ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 12)))), " WHERE Itm_No = '", dataGridView_ItemDet.GetData(j, 1), "';"));
                                db.ExecuteCommand(string.Concat("Update T_STKSQTY SET stkQty = stkQty + ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 12)))), " WHERE itmNo = '", dataGridView_ItemDet.GetData(j, 1), "' and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(dataGridView_ItemDet.GetData(j, 6).ToString() ?? string.Empty)), ";"));
                                int q2 = db.ExecuteCommand(string.Concat("select Count(*) from T_STKSQTY where itmNo = '", dataGridView_ItemDet.GetData(j, 1), "' and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(dataGridView_ItemDet.GetData(j, 6).ToString() ?? string.Empty)), ";"));
                                if (q2 > 0 && VarGeneral.CheckDate(string.Concat(dataGridView_ItemDet.GetData(j, 27))))
                                {
                                    db.ExecuteCommand(string.Concat("Update T_QTYEXP SET stkQty = stkQty + ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 12)))), " WHERE itmNo = ", dataGridView_ItemDet.GetData(j, 1), " and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(dataGridView_ItemDet.GetData(j, 6).ToString() ?? string.Empty)), " and DatExper = '", dataGridView_ItemDet.GetData(j, 27), "';"));
                                }
                                if (CmbInvSide.SelectedIndex == 1)
                                {
                                    db.ExecuteCommand(string.Concat("Update T_StoreMnd SET stkQty = stkQty - ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 12)))), " WHERE itmNo = '", dataGridView_ItemDet.GetData(j, 1), "' and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(dataGridView_ItemDet.GetData(j, 6).ToString() ?? string.Empty)), " and MndNo = ", int.Parse(CmbLegate.SelectedValue.ToString()), ";"));
                                }
                                else
                                {
                                    db.ExecuteCommand(string.Concat("Update T_StoreMnd SET stkQty = stkQty - ", double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(j, 12)))), " WHERE itmNo = '", dataGridView_ItemDet.GetData(j, 1), "' and storeNo = ", int.Parse(VarGeneral.TString.TEmpty(dataGridView_ItemDet.GetData(j, 6).ToString() ?? string.Empty)), " and CusVenNo = '", txtCustNo.Text, "';"));
                                }
                            }
                        }
                    }
                }
                catch (Exception ex4)
                {
                    VarGeneral.DebLog.writeLog("LinesInv_Save_InvSalePoint:", ex4, enable: true);
                    MessageBox.Show(ex4.Message);
                    return false;
                }
                try
                {
                    if (State == FormState.New)
                    {
                        PKeys.Add(data_this.InvNo);
                    }
                }
                catch
                {
                }
                if ((txtPaymentLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt) && !string.IsNullOrEmpty(AccDbt)) || (doubleInput_NetWorkLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt_NewtWork) && !string.IsNullOrEmpty(AccDbt_NetWork)) || (doubleInput_CreditLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt_Credit) && !string.IsNullOrEmpty(AccDbt_Credit)))
                {
                    Stock_DataDataContext stock_DataDataContext = new Stock_DataDataContext(VarGeneral.BranchCS);
                    if (State == FormState.New || _GdHead.gdhead_ID == 0)
                    {
                        GetDataGd();
                        _GdHead.DATE_CREATED = DateTime.Now;
                        stock_DataDataContext.T_GDHEADs.InsertOnSubmit(_GdHead);
                        stock_DataDataContext.SubmitChanges();
                    }
                    else
                    {
                        dbInstance = null;
                        if (!data_this.GadeId.HasValue)
                        {
                            _GdHead = new T_GDHEAD();
                        }
                        textBox_ID_TextChanged(null, null);
                        GetDataGd();
                        if (!data_this.GadeId.HasValue)
                        {
                            stock_DataDataContext.T_GDHEADs.InsertOnSubmit(_GdHead);
                            stock_DataDataContext.SubmitChanges();
                        }
                        else
                        {
                            db.Log = VarGeneral.DebugLog;
                            db.SubmitChanges(ConflictMode.ContinueOnConflict);
                        }
                        for (int j = 0; j < _GdHead.T_GDDETs.Count; j++)
                        {
                            db_.StartTransaction();
                            db_.ClearParameters();
                            db_.AddParameter("GDDET_ID", DbType.Int32, _GdHead.T_GDDETs[j].GDDET_ID);
                            db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_DELETE");
                            db_.EndTransaction();
                        }
                    }
                    iiCnt = 0;
                    if (txtPaymentLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt) && !string.IsNullOrEmpty(AccDbt))
                    {
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                        db_.AddParameter("gdID", DbType.Int32, _GdHead.gdhead_ID);
                        db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("gdDes", DbType.String, "قيد تلقائي لفاتورة مبيعات رقم : " + textBox_ID.Text);
                        db_.AddParameter("gdDesE", DbType.String, "Auto Bound To Sales Invoice No : " + textBox_ID.Text);
                        db_.AddParameter("recptTyp", DbType.String, "1");
                        db_.AddParameter("AccNo", DbType.String, AccCrdt);
                        db_.AddParameter("AccName", DbType.String, string.Empty);
                        db_.AddParameter("gdValue", DbType.Double, 0.0 - double.Parse(txtPaymentLoc.Text));
                        db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("Lin", DbType.Int32, 1);
                        db_.AddParameter("AccNoDestruction", DbType.String, null);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                        db_.EndTransaction();
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                        db_.AddParameter("gdID", DbType.Int32, _GdHead.gdhead_ID);
                        db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("gdDes", DbType.String, "قيد تلقائي لفاتورة مبيعات رقم : " + textBox_ID.Text);
                        db_.AddParameter("gdDesE", DbType.String, "Auto Bound To Sales Invoice No : " + textBox_ID.Text);
                        db_.AddParameter("recptTyp", DbType.String, "1");
                        db_.AddParameter("AccNo", DbType.String, AccDbt);
                        db_.AddParameter("AccName", DbType.String, string.Empty);
                        db_.AddParameter("gdValue", DbType.Double, double.Parse(txtPaymentLoc.Text));
                        db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("Lin", DbType.Int32, 1);
                        db_.AddParameter("AccNoDestruction", DbType.String, null);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                        db_.EndTransaction();
                    }
                    if (doubleInput_NetWorkLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt_NewtWork) && !string.IsNullOrEmpty(AccDbt_NetWork))
                    {
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                        db_.AddParameter("gdID", DbType.Int32, _GdHead.gdhead_ID);
                        db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("gdDes", DbType.String, "قيد تلقائي لفاتورة مبيعات رقم : " + textBox_ID.Text);
                        db_.AddParameter("gdDesE", DbType.String, "Auto Bound To Sales Invoice No : " + textBox_ID.Text);
                        db_.AddParameter("recptTyp", DbType.String, "1");
                        db_.AddParameter("AccNo", DbType.String, AccCrdt_NewtWork);
                        db_.AddParameter("AccName", DbType.String, string.Empty);
                        db_.AddParameter("gdValue", DbType.Double, 0.0 - double.Parse(doubleInput_NetWorkLoc.Text));
                        db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("Lin", DbType.Int32, 3);
                        db_.AddParameter("AccNoDestruction", DbType.String, null);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                        db_.EndTransaction();
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                        db_.AddParameter("gdID", DbType.Int32, _GdHead.gdhead_ID);
                        db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("gdDes", DbType.String, "قيد تلقائي لفاتورة مبيعات رقم : " + textBox_ID.Text);
                        db_.AddParameter("gdDesE", DbType.String, "Auto Bound To Sales Invoice No : " + textBox_ID.Text);
                        db_.AddParameter("recptTyp", DbType.String, "1");
                        db_.AddParameter("AccNo", DbType.String, AccDbt_NetWork);
                        db_.AddParameter("AccName", DbType.String, string.Empty);
                        db_.AddParameter("gdValue", DbType.Double, double.Parse(doubleInput_NetWorkLoc.Text));
                        db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("Lin", DbType.Int32, 3);
                        db_.AddParameter("AccNoDestruction", DbType.String, null);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                        db_.EndTransaction();
                    }
                    if (doubleInput_CreditLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt_Credit) && !string.IsNullOrEmpty(AccDbt_Credit))
                    {
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                        db_.AddParameter("gdID", DbType.Int32, _GdHead.gdhead_ID);
                        db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("gdDes", DbType.String, "قيد تلقائي لفاتورة مبيعات رقم : " + textBox_ID.Text);
                        db_.AddParameter("gdDesE", DbType.String, "Auto Bound To Sales Invoice No : " + textBox_ID.Text);
                        db_.AddParameter("recptTyp", DbType.String, "1");
                        db_.AddParameter("AccNo", DbType.String, AccCrdt_Credit);
                        db_.AddParameter("AccName", DbType.String, string.Empty);
                        db_.AddParameter("gdValue", DbType.Double, 0.0 - double.Parse(doubleInput_CreditLoc.Text));
                        db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("Lin", DbType.Int32, 2);
                        db_.AddParameter("AccNoDestruction", DbType.String, null);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                        db_.EndTransaction();
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                        db_.AddParameter("gdID", DbType.Int32, _GdHead.gdhead_ID);
                        db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("gdDes", DbType.String, "قيد تلقائي لفاتورة مبيعات رقم : " + textBox_ID.Text);
                        db_.AddParameter("gdDesE", DbType.String, "Auto Bound To Sales Invoice No : " + textBox_ID.Text);
                        db_.AddParameter("recptTyp", DbType.String, "1");
                        db_.AddParameter("AccNo", DbType.String, AccDbt_Credit);
                        db_.AddParameter("AccName", DbType.String, string.Empty);
                        db_.AddParameter("gdValue", DbType.Double, double.Parse(doubleInput_CreditLoc.Text));
                        db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                        db_.AddParameter("Lin", DbType.Int32, 2);
                        db_.AddParameter("AccNoDestruction", DbType.String, null);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                        db_.EndTransaction();
                    }
                }
                else if (State == FormState.Edit && data_this.GadeId.HasValue)
                {
                    db.ExecuteCommand("UPDATE T_GDHEAD SET T_GDHEAD.gdLok = 1  where gdhead_ID = " + data_this.GadeId);
                }
                if ((txtPaymentLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt) && !string.IsNullOrEmpty(AccDbt)) || (doubleInput_NetWorkLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt_NewtWork) && !string.IsNullOrEmpty(AccDbt_NetWork)) || (doubleInput_CreditLoc.Value > 0.0 && !string.IsNullOrEmpty(AccCrdt_Credit) && !string.IsNullOrEmpty(AccDbt_Credit)))
                {
                    db.ExecuteCommand("UPDATE T_INVHED SET GadeId = " + _GdHead.gdhead_ID + ",GadeNo = " + int.Parse(textBox_ID.Text) + " where InvHed_ID = " + data_this.InvHed_ID);
                }
                else
                {
                    db.ExecuteCommand("UPDATE T_INVHED SET GadeId = null,GadeNo = null where InvHed_ID = " + data_this.InvHed_ID);
                }
                if (!switchButtonItem_IsReturn.Value && ButOption.Tag.ToString() != "0")
                {
                    data_thisRe.IfRet = 1;
                    dbReturn.Log = VarGeneral.DebugLog;
                    dbReturn.SubmitChanges(ConflictMode.ContinueOnConflict);
                }
                superTabControl_Info.SelectedTabIndex = 2;
                try
                {
                    db.ExecuteCommand("update T_INVHED set RoomNo = 1 where RoomSts = 0");
                }
                catch
                {
                }
                if (checkBox_CostGaidTax.Checked && !string.IsNullOrEmpty(txtDebit5.Tag.ToString()) && !string.IsNullOrEmpty(txtCredit5.Tag.ToString()) && txtTotTax.Value > 0.0)
                {
                    CreateCostGaidTax(AccCrdt_Cost_Tax, AccDbt_Cost_Tax);
                }
                if (checkBox_GaidDis.Checked && !string.IsNullOrEmpty(txtDebit6.Tag.ToString()) && !string.IsNullOrEmpty(txtCredit6.Tag.ToString()) && txtTotDis.Value > 0.0)
                {
                    CreateCostGaidDis(AccCrdt_Cost_Dis, AccDbt_Cost_Dis);
                }
                if (checkBox_GaidBankComm.Checked && !string.IsNullOrEmpty(txtDebit3.Tag.ToString()) && !string.IsNullOrEmpty(txtCredit7.Tag.ToString()) && txtTotBankComm.Value > 0.0)
                {
                    CreateCostGaidComm(AccCrdt_Cost_Comm, AccDbt_Cost_Comm);
                }
            }
            catch (Exception ex4)
            {
                VarGeneral.DebLog.writeLog("LinesInv_Save_InvSalePoint:", ex4, enable: true);
                MessageBox.Show(ex4.Message);
                return false;
            }
            return true;
            IL_07ac:
            num = ((!(VarGeneral.SSSLev != "M")) ? 1 : 0);
            goto IL_07c1;
        }
        private void CreateCostGaidTax(string AccCrdt_Cost, string AccDbt_Cost)
        {
            IDatabase db_ = Database.GetDatabase(VarGeneral.BranchCS);
            using (Stock_DataDataContext dbc = new Stock_DataDataContext(VarGeneral.BranchCS))
            {
                _GdHeadCostTax = new T_GDHEAD();
                if (!data_this.TaxGaidID.HasValue)
                {
                    GetDataGdCostTax();
                    _GdHeadCostTax.DATE_CREATED = DateTime.Now;
                    dbc.T_GDHEADs.InsertOnSubmit(_GdHeadCostTax);
                    dbc.SubmitChanges();
                }
                else
                {
                    _GdHeadCostTax = dbc.StockGdHeadid((int)data_this.TaxGaidID.Value).First();
                    GetDataGdCostTax();
                    dbc.Log = VarGeneral.DebugLog;
                    dbc.SubmitChanges(ConflictMode.ContinueOnConflict);
                    for (int i = 0; i < _GdHeadCostTax.T_GDDETs.Count; i++)
                    {
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, _GdHeadCostTax.T_GDDETs[i].GDDET_ID);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_DELETE");
                        db_.EndTransaction();
                    }
                }
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                db_.AddParameter("gdID", DbType.Int32, _GdHeadCostTax.gdhead_ID);
                db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("gdDes", DbType.String, "سند بقيمة العمولة لفاتورة مبيعات رقم : " + textBox_ID.Text);
                db_.AddParameter("gdDesE", DbType.String, "Commition Value To Sales Invoice No : " + textBox_ID.Text);
                db_.AddParameter("recptTyp", DbType.String, "1");
                db_.AddParameter("AccNo", DbType.String, AccCrdt_Cost);
                db_.AddParameter("AccName", DbType.String, string.Empty);
                db_.AddParameter("gdValue", DbType.Double, 0.0 - txtTotTax.Value);
                db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("Lin", DbType.Int32, 1);
                db_.AddParameter("AccNoDestruction", DbType.String, null);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                db_.EndTransaction();
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                db_.AddParameter("gdID", DbType.Int32, _GdHeadCostTax.gdhead_ID);
                db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("gdDes", DbType.String, "سند بقيمة العمولة لفاتورة مبيعات رقم : " + textBox_ID.Text);
                db_.AddParameter("gdDesE", DbType.String, "Commition Value To Sales Invoice No : " + textBox_ID.Text);
                db_.AddParameter("recptTyp", DbType.String, "1");
                db_.AddParameter("AccNo", DbType.String, AccDbt_Cost);
                db_.AddParameter("AccName", DbType.String, string.Empty);
                db_.AddParameter("gdValue", DbType.Double, txtTotTax.Value);
                db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("Lin", DbType.Int32, 2);
                db_.AddParameter("AccNoDestruction", DbType.String, null);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                db_.EndTransaction();
            }
            dbInstance = null;
            textBox_ID_TextChanged(null, null);
            data_this.TaxGaidID = _GdHeadCostTax.gdhead_ID;
            db.Log = VarGeneral.DebugLog;
            db.SubmitChanges(ConflictMode.ContinueOnConflict);
        }
        private void CreateCostGaidDis(string AccCrdt_Cost, string AccDbt_Cost)
        {
            IDatabase db_ = Database.GetDatabase(VarGeneral.BranchCS);
            using (Stock_DataDataContext dbc = new Stock_DataDataContext(VarGeneral.BranchCS))
            {
                _GdHeadCostDis = new T_GDHEAD();
                if (!data_this.DisGaidID1.HasValue)
                {
                    GetDataGdCostDis();
                    _GdHeadCostDis.DATE_CREATED = DateTime.Now;
                    dbc.T_GDHEADs.InsertOnSubmit(_GdHeadCostDis);
                    dbc.SubmitChanges();
                }
                else
                {
                    _GdHeadCostDis = dbc.StockGdHeadid((int)data_this.DisGaidID1.Value).First();
                    GetDataGdCostDis();
                    dbc.Log = VarGeneral.DebugLog;
                    dbc.SubmitChanges(ConflictMode.ContinueOnConflict);
                    for (int i = 0; i < _GdHeadCostDis.T_GDDETs.Count; i++)
                    {
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, _GdHeadCostDis.T_GDDETs[i].GDDET_ID);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_DELETE");
                        db_.EndTransaction();
                    }
                }
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                db_.AddParameter("gdID", DbType.Int32, _GdHeadCostDis.gdhead_ID);
                db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("gdDes", DbType.String, "سند بقيمة الخصم لفاتورة مبيعات رقم : " + textBox_ID.Text);
                db_.AddParameter("gdDesE", DbType.String, "Discount Value To Sales Invoice No : " + textBox_ID.Text);
                db_.AddParameter("recptTyp", DbType.String, "1");
                db_.AddParameter("AccNo", DbType.String, AccCrdt_Cost);
                db_.AddParameter("AccName", DbType.String, string.Empty);
                db_.AddParameter("gdValue", DbType.Double, 0.0 - txtTotDis.Value);
                db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("Lin", DbType.Int32, 1);
                db_.AddParameter("AccNoDestruction", DbType.String, null);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                db_.EndTransaction();
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                db_.AddParameter("gdID", DbType.Int32, _GdHeadCostDis.gdhead_ID);
                db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("gdDes", DbType.String, "سند بقيمة الخصم لفاتورة مبيعات رقم : " + textBox_ID.Text);
                db_.AddParameter("gdDesE", DbType.String, "Discount Value To Sales Invoice No : " + textBox_ID.Text);
                db_.AddParameter("recptTyp", DbType.String, "1");
                db_.AddParameter("AccNo", DbType.String, AccDbt_Cost);
                db_.AddParameter("AccName", DbType.String, string.Empty);
                db_.AddParameter("gdValue", DbType.Double, txtTotDis.Value);
                db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("Lin", DbType.Int32, 2);
                db_.AddParameter("AccNoDestruction", DbType.String, null);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                db_.EndTransaction();
            }
            dbInstance = null;
            textBox_ID_TextChanged(null, null);
            data_this.DisGaidID1 = _GdHeadCostDis.gdhead_ID;
            db.Log = VarGeneral.DebugLog;
            db.SubmitChanges(ConflictMode.ContinueOnConflict);
        }
        private void CreateCostGaidComm(string AccCrdt_Cost, string AccDbt_Cost)
        {
            IDatabase db_ = Database.GetDatabase(VarGeneral.BranchCS);
            using (Stock_DataDataContext dbc = new Stock_DataDataContext(VarGeneral.BranchCS))
            {
                _GdHeadCostComm = new T_GDHEAD();
                if (!data_this.CommGaidID.HasValue)
                {
                    GetDataGdCostComm();
                    _GdHeadCostComm.DATE_CREATED = DateTime.Now;
                    dbc.T_GDHEADs.InsertOnSubmit(_GdHeadCostComm);
                    dbc.SubmitChanges();
                }
                else
                {
                    _GdHeadCostComm = dbc.StockGdHeadid((int)data_this.CommGaidID.Value).First();
                    GetDataGdCostComm();
                    dbc.Log = VarGeneral.DebugLog;
                    dbc.SubmitChanges(ConflictMode.ContinueOnConflict);
                    for (int i = 0; i < _GdHeadCostComm.T_GDDETs.Count; i++)
                    {
                        db_.StartTransaction();
                        db_.ClearParameters();
                        db_.AddParameter("GDDET_ID", DbType.Int32, _GdHeadCostComm.T_GDDETs[i].GDDET_ID);
                        db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_DELETE");
                        db_.EndTransaction();
                    }
                }
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                db_.AddParameter("gdID", DbType.Int32, _GdHeadCostComm.gdhead_ID);
                db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("gdDes", DbType.String, "سند بقيمة العمولة لفاتورة مبيعات رقم : " + textBox_ID.Text);
                db_.AddParameter("gdDesE", DbType.String, "Commition Value To Sales Invoice No : " + textBox_ID.Text);
                db_.AddParameter("recptTyp", DbType.String, "1");
                db_.AddParameter("AccNo", DbType.String, AccCrdt_Cost);
                db_.AddParameter("AccName", DbType.String, string.Empty);
                db_.AddParameter("gdValue", DbType.Double, 0.0 - txtTotBankComm.Value);
                db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("Lin", DbType.Int32, 1);
                db_.AddParameter("AccNoDestruction", DbType.String, null);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                db_.EndTransaction();
                db_.StartTransaction();
                db_.ClearParameters();
                db_.AddParameter("GDDET_ID", DbType.Int32, 0);
                db_.AddParameter("gdID", DbType.Int32, _GdHeadCostComm.gdhead_ID);
                db_.AddParameter("gdNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("gdDes", DbType.String, "سند بقيمة العمولة لفاتورة مبيعات رقم : " + textBox_ID.Text);
                db_.AddParameter("gdDesE", DbType.String, "Commition Value To Sales Invoice No : " + textBox_ID.Text);
                db_.AddParameter("recptTyp", DbType.String, "1");
                db_.AddParameter("AccNo", DbType.String, AccDbt_Cost);
                db_.AddParameter("AccName", DbType.String, string.Empty);
                db_.AddParameter("gdValue", DbType.Double, txtTotBankComm.Value);
                db_.AddParameter("recptNo", DbType.String, textBox_ID.Text);
                db_.AddParameter("Lin", DbType.Int32, 2);
                db_.AddParameter("AccNoDestruction", DbType.String, null);
                db_.ExecuteNonQueryWithoutCommit(storedProcedure: true, "S_T_GDDET_INSERT");
                db_.EndTransaction();
            }
            dbInstance = null;
            textBox_ID_TextChanged(null, null);
            data_this.CommGaidID = _GdHeadCostComm.gdhead_ID;
            db.Log = VarGeneral.DebugLog;
            db.SubmitChanges(ConflictMode.ContinueOnConflict);
        }
        private T_GDHEAD GetDataGdCostDis()
        {
            _GdHeadCostDis.gdHDate = txtHDate.Text;
            _GdHeadCostDis.gdGDate = txtGDate.Text;
            _GdHeadCostDis.gdNo = textBox_ID.Text;
            _GdHeadCostDis.ArbTaf = ScriptNumber1.ScriptNum(decimal.Parse("0" + txtTotDis.Text));
            _GdHeadCostDis.BName = _GdHeadCostDis.BName;
            _GdHeadCostDis.ChekNo = _GdHeadCostDis.ChekNo;
            _GdHeadCostDis.CurTyp = int.Parse(CmbCurr.SelectedValue.ToString());
            _GdHeadCostDis.EngTaf = ScriptNumber1.TafEng(decimal.Parse("0" + txtTotDis.Text));
            _GdHeadCostDis.gdCstNo = int.Parse(CmbCostC.SelectedValue.ToString());
            _GdHeadCostDis.gdID = 0;
            _GdHeadCostDis.gdLok = false;
            _GdHeadCostDis.AdminLock = false;
            _GdHeadCostDis.gdMem = "سند بقيمة الخصم|Discount Value";
            if (CmbLegate.SelectedIndex > 0)
            {
                _GdHeadCostDis.gdMnd = int.Parse(CmbLegate.SelectedValue.ToString());
            }
            else
            {
                _GdHeadCostDis.gdMnd = null;
            }
            _GdHeadCostDis.gdRcptID = (_GdHeadCostDis.gdRcptID.HasValue ? _GdHeadCostDis.gdRcptID.Value : 0.0);
            _GdHeadCostDis.gdTot = txtTotDis.Value;
            _GdHeadCostDis.gdTp = (_GdHeadCostDis.gdTp.HasValue ? _GdHeadCostDis.gdTp.Value : 0);
            _GdHeadCostDis.gdTyp = VarGeneral.InvTyp;
            _GdHeadCostDis.RefNo = txtRef.Text;
            _GdHeadCostDis.DATE_MODIFIED = DateTime.Now;
            _GdHeadCostDis.salMonth = string.Empty;
            _GdHeadCostDis.gdUser = VarGeneral.UserNumber;
            _GdHeadCostDis.gdUserNam = VarGeneral.UserNameA;
            _GdHeadCostDis.CompanyID = 1;
            return _GdHeadCostDis;
        }
        private T_GDHEAD GetDataGdCostTax()
        {
            _GdHeadCostTax.gdHDate = txtHDate.Text;
            _GdHeadCostTax.gdGDate = txtGDate.Text;
            _GdHeadCostTax.gdNo = textBox_ID.Text;
            _GdHeadCostTax.ArbTaf = ScriptNumber1.ScriptNum(decimal.Parse("0" + txtTotTax.Text));
            _GdHeadCostTax.BName = _GdHeadCostTax.BName;
            _GdHeadCostTax.ChekNo = _GdHeadCostTax.ChekNo;
            _GdHeadCostTax.CurTyp = int.Parse(CmbCurr.SelectedValue.ToString());
            _GdHeadCostTax.EngTaf = ScriptNumber1.TafEng(decimal.Parse("0" + txtTotTax.Text));
            _GdHeadCostTax.gdCstNo = int.Parse(CmbCostC.SelectedValue.ToString());
            _GdHeadCostTax.gdID = 0;
            _GdHeadCostTax.gdLok = false;
            if (State == FormState.New)
            {
                _GdHeadCostTax.AdminLock = false;
            }
            _GdHeadCostTax.gdMem = "سند بقيمة الضريبة|Tax Value";
            if (CmbLegate.SelectedIndex > 0)
            {
                _GdHeadCostTax.gdMnd = int.Parse(CmbLegate.SelectedValue.ToString());
            }
            else
            {
                _GdHeadCostTax.gdMnd = null;
            }
            _GdHeadCostTax.gdRcptID = (_GdHeadCostTax.gdRcptID.HasValue ? _GdHeadCostTax.gdRcptID.Value : 0.0);
            _GdHeadCostTax.gdTot = txtTotTax.Value;
            _GdHeadCostTax.gdTp = (_GdHeadCostTax.gdTp.HasValue ? _GdHeadCostTax.gdTp.Value : 0);
            _GdHeadCostTax.gdTyp = VarGeneral.InvTyp;
            _GdHeadCostTax.RefNo = txtRef.Text;
            _GdHeadCostTax.DATE_MODIFIED = DateTime.Now;
            _GdHeadCostTax.salMonth = string.Empty;
            _GdHeadCostTax.gdUser = VarGeneral.UserNumber;
            _GdHeadCostTax.gdUserNam = VarGeneral.UserNameA;
            _GdHeadCostTax.CompanyID = 1;
            return _GdHeadCostTax;
        }
        private T_GDHEAD GetDataGdCostComm()
        {
            _GdHeadCostComm.gdHDate = txtHDate.Text;
            _GdHeadCostComm.gdGDate = txtGDate.Text;
            _GdHeadCostComm.gdNo = textBox_ID.Text;
            _GdHeadCostComm.ArbTaf = ScriptNumber1.ScriptNum(decimal.Parse("0" + txtTotBankComm.Text));
            _GdHeadCostComm.BName = _GdHeadCostComm.BName;
            _GdHeadCostComm.ChekNo = _GdHeadCostComm.ChekNo;
            _GdHeadCostComm.CurTyp = int.Parse(CmbCurr.SelectedValue.ToString());
            _GdHeadCostComm.EngTaf = ScriptNumber1.TafEng(decimal.Parse("0" + txtTotBankComm.Text));
            _GdHeadCostComm.gdCstNo = int.Parse(CmbCostC.SelectedValue.ToString());
            _GdHeadCostComm.gdID = 0;
            _GdHeadCostComm.gdLok = false;
            _GdHeadCostComm.AdminLock = false;
            _GdHeadCostComm.gdMem = "سند بقيمة العمولة البنكية|Bank Commition Value";
            if (CmbLegate.SelectedIndex > 0)
            {
                _GdHeadCostComm.gdMnd = int.Parse(CmbLegate.SelectedValue.ToString());
            }
            else
            {
                _GdHeadCostComm.gdMnd = null;
            }
            _GdHeadCostComm.gdRcptID = (_GdHeadCostComm.gdRcptID.HasValue ? _GdHeadCostComm.gdRcptID.Value : 0.0);
            _GdHeadCostComm.gdTot = txtTotBankComm.Value;
            _GdHeadCostComm.gdTp = (_GdHeadCostComm.gdTp.HasValue ? _GdHeadCostComm.gdTp.Value : 0);
            _GdHeadCostComm.gdTyp = VarGeneral.InvTyp;
            _GdHeadCostComm.RefNo = txtRef.Text;
            _GdHeadCostComm.DATE_MODIFIED = DateTime.Now;
            _GdHeadCostComm.salMonth = string.Empty;
            _GdHeadCostComm.gdUser = VarGeneral.UserNumber;
            _GdHeadCostComm.gdUserNam = VarGeneral.UserNameA;
            _GdHeadCostComm.CompanyID = 1;
            return _GdHeadCostComm;
        }
        private T_INVHED GetData()
        {
            txtDueAmountLoc.ValueChanged -= txtDueAmountLoc_ValueChanged;
            try
            {
                GetInvTot();
            }
            catch
            {
            }
            txtDueAmountLoc.ValueChanged += txtDueAmountLoc_ValueChanged;
            try
            {
                if (CmbInvPrice.SelectedIndex >= 0)
                {
                    data_this.CustPri = CmbInvPrice.SelectedIndex;
                }
                else
                {
                    data_this.CustPri = 0;
                }
            }
            catch
            {
                data_this.CustPri = 0;
            }
            data_this.PaymentOrderTyp = CmbInvSide.SelectedIndex;
            data_this.InvCashPayNm = string.Empty;
            data_this.CusVenNm = txtCustName.Text;
            data_this.CusVenNo = txtCustNo.Text;
            data_this.CusVenAdd = txtAddress.Text;
            data_this.CusVenTel = txtTele.Text;
            data_this.Remark = txtRemark.Text;
            data_this.InvNo = textBox_ID.Text;
            data_this.CusVenMob = text_Mobile.Text;
            if (!switchButtonItem_IsReturn.Value)
            {
                try
                {
                    if (State == FormState.New)
                    {
                        data_this.InvId = int.Parse(db.MaxInvheadNoSequence.ToString());
                    }
                    else
                    {
                        data_this.InvId = int.Parse(textBox_Sequenc.Text);
                    }
                }
                catch
                {
                    data_this.InvId = int.Parse(textBox_Sequenc.Text);
                }
            }
            data_this.CashPay = txtPaymentLoc.Value;
            try
            {
                data_this.CurTyp = int.Parse(CmbCurr.SelectedValue.ToString());
            }
            catch
            {
                data_this.CurTyp = null;
            }
            data_this.CustNet = txtCustNet.Value;
            data_this.CustRep = txtCustRep.Value;
            data_this.CusVenNm = txtCustName.Text;
            data_this.CusVenNo = txtCustNo.Text;
            data_this.HDat = txtHDate.Text;
            data_this.GDat = txtGDate.Text;
            if (State == FormState.New)
            {
                data_this.AdminLock = false;
            }
            try
            {
                if (checkBox_Chash.Checked)
                {
                    data_this.InvCashPay = 0;
                }
                else if (checkBox_Credit.Checked)
                {
                    data_this.InvCashPay = 1;
                }
                else
                {
                    data_this.InvCashPay = 2;
                }
            }
            catch
            {
                data_this.InvCashPay = 0;
            }
            try
            {
                if (checkBox_Chash.Checked)
                {
                    data_this.InvCash = checkBox_Chash.Text;
                }
                else if (checkBox_Credit.Checked)
                {
                    data_this.InvCash = checkBox_Credit.Text;
                }
                else
                {
                    data_this.InvCash = checkBox_NetWork.Text;
                }
            }
            catch
            {
                data_this.InvCash = "نقدي";
            }
            data_this.InvCost = txtInvCost.Value;
            try
            {
                data_this.InvCstNo = int.Parse(CmbCostC.SelectedValue.ToString());
            }
            catch
            {
                data_this.InvCstNo = null;
            }
            if (VarGeneral.CheckDate(txtDueDate.Text) && checkBox_Credit.Checked)
            {
                data_this.EstDat = txtDueDate.Text;
            }
            else
            {
                data_this.EstDat = string.Empty;
            }
            data_this.IfEnter = 0;
            data_this.DeleteDate = string.Empty;
            data_this.DeleteTime = string.Empty;
            data_this.InvDisPrs = txtDiscountP.Value;
            data_this.InvDisVal = txtDiscountVal.Value;
            data_this.InvDisValLocCur = txtDiscountValLoc.Value;
            data_this.DesPointsValue = txtDiscoundPoints.Value;
            data_this.DesPointsValueLocCur = txtDiscoundPointsLoc.Value;
            data_this.PointsCount = txtPointCount.Value;
            data_this.IsPoints = switchButton_PointActiv.Value;
            data_this.InvNet = txtDueAmount.Value;
            data_this.InvNetLocCur = txtDueAmountLoc.Value;
            data_this.InvQty = txtTotalQ.Value;
            data_this.InvTot = txtTotalAm.Value;
            data_this.InvTotLocCur = txtTotalAmLoc.Value;
            data_this.InvTyp = VarGeneral.InvTyp;
            data_this.IfDel = 0;
            if (State == FormState.New)
            {
                data_this.LTim = DateTime.Now.ToString("HH:mm");
            }
            else
            {
                data_this.LTim = txtTime.Text;
            }
            if (CmbLegate.SelectedIndex > 0)
            {
                data_this.MndNo = int.Parse(CmbLegate.SelectedValue.ToString());
            }
            else
            {
                data_this.MndNo = null;
            }
            data_this.RefNo = txtRef.Text;
            data_this.MndExtrnal = false;
            listCurency = db.Fillcurency_2(string.Empty).ToList();
            if (listCurency.Count > 0)
            {
                _Curency = listCurency[0];
            }
            data_this.ArbTaf = ScriptNumber1.ScriptNum(decimal.Parse(VarGeneral.TString.TEmpty(txtDueAmountLoc.Text ?? string.Empty))) + " " + _Curency.Arb_Des + " " + "فقط لاغير ";
            data_this.EngTaf = ScriptNumber1.TafEng(decimal.Parse(VarGeneral.TString.TEmpty(txtDueAmountLoc.Text ?? string.Empty))) + " " + _Curency.Eng_Des;
            data_this.DATE_MODIFIED = DateTime.Now;
            data_this.CreditPay = doubleInput_CreditLoc.Value;
            data_this.NetworkPay = doubleInput_NetWorkLoc.Value;
            data_this.CashPayLocCur = txtPaymentLoc.Value;
            data_this.CreditPayLocCur = doubleInput_CreditLoc.Value;
            data_this.NetworkPayLocCur = doubleInput_NetWorkLoc.Value;
            try
            {
                if (CmbLegate.SelectedIndex != -1)
                {
                    T_Mndob q = db.StockMndobID(int.Parse(CmbLegate.SelectedValue.ToString()));
                    if (q.Comm_Inv.Value > 0.0 && txtDueAmountLoc.Value > 0.0)
                    {
                        data_this.CommMnd_Inv = txtDueAmountLoc.Value * (q.Comm_Inv.Value / 100.0);
                    }
                    else
                    {
                        data_this.CommMnd_Inv = 0.0;
                    }
                }
                else
                {
                    data_this.CommMnd_Inv = 0.0;
                }
            }
            catch
            {
                data_this.CommMnd_Inv = 0.0;
            }
            data_this.Puyaid = txtPayment.Value;
            data_this.Remming = txtSteel.Value;
            data_this.CompanyID = 1;
            data_this.tailor20 = "0";
            try
            {
                if (!string.IsNullOrEmpty(txtTable.Tag.ToString()) && txtTable.Value > 0)
                {
                    data_this.RoomNo = int.Parse(txtTable.Tag.ToString());
                }
                else
                {
                    data_this.RoomNo = 1;
                }
            }
            catch
            {
            }
            try
            {
                if (switch_InSide.Value)
                {
                    data_this.OrderTyp = 0;
                }
                else if (switch_OutSide.Value)
                {
                    data_this.OrderTyp = 1;
                }
                else
                {
                    data_this.OrderTyp = 2;
                }
            }
            catch
            {
                data_this.OrderTyp = 0;
            }
            data_this.RoomPerson = txtPersons.Value;
            data_this.ServiceValue = 0.0;
            data_this.Sts = false;
            if (!string.IsNullOrEmpty(textBox_Driver.Text))
            {
                data_this.chauffeurNo = int.Parse(textBox_Driver.Tag.ToString());
            }
            else
            {
                data_this.chauffeurNo = null;
            }
            data_this.InvAddTax = txtTotTax.Value;
            data_this.InvAddTaxlLoc = txtTotTaxLoc.Value;
            if (switchButton_Tax.Value)
            {
                data_this.IsTaxUse = true;
            }
            else
            {
                data_this.IsTaxUse = false;
            }
            if (switchButton_TaxLines.Value)
            {
                data_this.IsTaxLines = true;
            }
            else
            {
                data_this.IsTaxLines = false;
            }
            if (switchButton_TaxByTotal.Value)
            {
                data_this.IsTaxByTotal = true;
            }
            else
            {
                data_this.IsTaxByTotal = false;
            }
            if (switchButton_TaxByNet.Value)
            {
                data_this.IsTaxByNet = true;
            }
            else
            {
                data_this.IsTaxByNet = false;
            }
            try
            {
                data_this.TaxByNetValue = double.Parse(textBoxItem_TaxByNetValue.Text);
            }
            catch
            {
                data_this.TaxByNetValue = 0.0;
            }
            data_this.IsTaxGaid = checkBox_CostGaidTax.Checked;
            data_this.InvValGaidDis = txtTotDis.Value;
            data_this.InvValGaidDislLoc = txtTotDisLoc.Value;
            if (switchButton_Dis.Value)
            {
                data_this.IsDisUse1 = true;
            }
            else
            {
                data_this.IsDisUse1 = false;
            }
            data_this.IsDisGaid = checkBox_GaidDis.Checked;
            data_this.InvComm = txtTotBankComm.Value;
            data_this.InvCommLoc = txtTotBankCommLoc.Value;
            if (switchButton_BankComm.Value)
            {
                data_this.IsCommUse = true;
            }
            else
            {
                data_this.IsCommUse = false;
            }
            data_this.IsCommGaid = checkBox_GaidBankComm.Checked;
            return data_this;
        }
        private T_GDHEAD GetDataGd()
        {
            _GdHead.gdHDate = txtHDate.Text;
            _GdHead.gdGDate = txtGDate.Text;
            _GdHead.gdNo = textBox_ID.Text;
            _GdHead.ArbTaf = ScriptNumber1.ScriptNum(decimal.Parse("0" + txtDueAmountLoc.Text));
            _GdHead.BName = _GdHead.BName;
            _GdHead.ChekNo = _GdHead.ChekNo;
            _GdHead.CurTyp = int.Parse(CmbCurr.SelectedValue.ToString());
            _GdHead.EngTaf = ScriptNumber1.TafEng(decimal.Parse("0" + txtDueAmountLoc.Text));
            _GdHead.gdCstNo = int.Parse(CmbCostC.SelectedValue.ToString());
            _GdHead.gdID = 0;
            _GdHead.gdLok = false;
            _GdHead.gdMem = txtRemark.Text;
            if (State == FormState.New)
            {
                _GdHead.AdminLock = false;
            }
            if (CmbLegate.SelectedIndex > 0)
            {
                _GdHead.gdMnd = int.Parse(CmbLegate.SelectedValue.ToString());
            }
            else
            {
                _GdHead.gdMnd = null;
            }
            _GdHead.gdRcptID = (_GdHead.gdRcptID.HasValue ? _GdHead.gdRcptID.Value : 0.0);
            _GdHead.gdTot = txtDueAmountLoc.Value;
            _GdHead.gdTp = (_GdHead.gdTp.HasValue ? _GdHead.gdTp.Value : 0);
            _GdHead.gdTyp = VarGeneral.InvTyp;
            _GdHead.RefNo = txtRef.Text;
            _GdHead.DATE_MODIFIED = DateTime.Now;
            _GdHead.salMonth = string.Empty;
            _GdHead.gdUser = VarGeneral.UserNumber;
            _GdHead.gdUserNam = VarGeneral.UserNameA;
            _GdHead.CompanyID = 1;
            return _GdHead;
        }
        private void FlxInv_AfterEdit(object sender, RowColEventArgs e)
        {
            if (e.Col != 37)
            { }
            try
            {
                if (permission.MaxDiscountSals.Value > 0.0 && double.Parse(FlxInv.GetData(e.Row, 9).ToString()) > permission.MaxDiscountSals.Value)
                {
                    FlxInv.SetData(e.Row, 9, 0);
                }
            }
            catch
            {
            }
            bool CalcuCustomerDisplay = false;
            double ItmDis = 0.0;
            double ItmAddTax = 0.0;
            ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 9)))) / 100.0);
            try
            {
                if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 36)))) > 0.0)
                {
                    ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 36)))) / 100.0);
                }
            }
            catch
            {
            }
            try
            {
                if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 36)))) > 0.0)
                {
                    ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 36))));
                }
            }
            catch
            {
            }
            ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
            if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
            {
                ItmAddTax = 0.0;
            }
            if (e.Col == 1)
            {
                BindDataOfItem();
                if (FlxInv.GetData(e.Row, 1) != null || FlxInv.GetData(e.Row, 1).ToString() == string.Empty) FlxInv_AfterEdit(null, new RowColEventArgs(e.Row, 8));//p) 
            }
            else if ((e.Col == 2 || e.Col == 4) && ((string)FlxInv.GetData(e.Row, 1) == string.Empty || FlxInv.GetData(e.Row, 1) == null))
            {
                if (FlxInv.Rows[e.Row].Height != 33)
                {
                    FlxInv.SetData(e.Row, e.Col, oldItemName);
                }
            }
            else if ((e.Col == 3 || e.Col == 5) && FlxInv.GetData(e.Row, e.Col).ToString() != oldUnit)
            {
                int ItemIndex = -1;
                if (e.Col == 3)
                {
                    string[] Items = FlxInv.Cols[e.Col].ComboList.Split('|');
                    for (int i = 0; i < Items.Length; i++)
                    {
                        if (Items[i] == FlxInv.GetData(e.Row, e.Col).ToString())
                        {
                            ItemIndex = i + 1;
                        }
                    }
                    string[] Items2 = FlxInv.Cols[5].ComboList.Split('|');
                    if (Items2.Length > 1 && ItemIndex > -1)
                    {
                        FlxInv.SetData(e.Row, 5, Items2[ItemIndex - 1]);
                    }
                }
                else if (e.Col == 5)
                {
                    string[] Items = FlxInv.Cols[e.Col].ComboList.Split('|');
                    for (int i = 0; i < Items.Length; i++)
                    {
                        if (Items[i] == FlxInv.GetData(e.Row, e.Col).ToString())
                        {
                            ItemIndex = i + 1;
                        }
                    }
                    string[] Items2 = FlxInv.Cols[3].ComboList.Split('|');
                    if (Items2.Length > 1 && ItemIndex > -1)
                    {
                        FlxInv.SetData(e.Row, 3, Items2[ItemIndex - 1]);
                    }
                }
                switch (ItemIndex)
                {
                    case 1:
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri1 / RateValue);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack1);
                        break;
                    case 2:
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri2 / RateValue);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack2);
                        break;
                    case 3:
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri3 / RateValue);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack3);
                        break;
                    case 4:
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri4 / RateValue);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack4);
                        break;
                    case 5:
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri5 / RateValue);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack5);
                        break;
                }
                Pack = ItemIndex;
                BindDataofItemPrice();
                PriceLoc = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8))));
                PriceLoc = (double)FlxInv.GetData(FlxInv.Row, 8);
                without = PriceLoc; pricel = without; lastprice = 0; FlxInv_AfterEdit(null, new RowColEventArgs(e.Row, 8));//p
                FlxInv.SetData(e.Row, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 11)))));
                FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis + ItmAddTax);
                if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) > 0.0)
                {
                    ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) + ItmAddTax);
                }
                PriceLoc = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8))));
                PriceLoc = (double)FlxInv.GetData(FlxInv.Row, 8);
                without = PriceLoc; pricel = without; lastprice = 0;
                BindDataOfStkQty(FlxInv.GetData(e.Row, 1).ToString());
                if (CmbCurr.SelectedIndex != -1)
                {
                    List<T_Curency> listSer = db.StockCurrList(int.Parse(CmbCurr.SelectedValue.ToString()));
                    T_Curency _Curency = listSer[0];
                    double CurRate = _Curency.Rate.Value;
                }
                FlxInv.SetData(e.Row, 26, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) / 1.0);
                try
                {
                    ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 9)))) / 100.0);
                    try
                    {
                        if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 36)))) > 0.0)
                        {
                            ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 36)))) / 100.0);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 36)))) > 0.0)
                        {
                            ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 36))));
                        }
                    }
                    catch
                    {
                    }
                    ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                    {
                        ItmAddTax = 0.0;
                    }
                    FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis + ItmAddTax);
                    if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) > 0.0)
                    {
                        ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                        FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) + ItmAddTax);
                    }
                }
                catch
                {
                }
                CalcuCustomerDisplay = true;
                double qty = 0.0;
                string unt = string.Empty;
                string itm_nm = string.Empty;
                try
                {
                    itm_nm = string.Concat(FlxInv.GetData(e.Row, 1));
                }
                catch
                {
                    itm_nm = string.Empty;
                }
                try
                {
                    unt = string.Concat(FlxInv.GetData(e.Row, 3));
                }
                catch
                {
                    unt = string.Empty;
                }
                try
                {
                    qty = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 7))));
                }
                catch
                {
                    qty = 0.0;
                }
                if (CmbInvSide.SelectedIndex <= 0)
                {
                    RemoveOFFerLines(FlxInv.Row + 1);
                    CheckOffers(itm_nm, unt, qty, FlxInv.Row, FlxInv.Row);
                }
            }
            else if (e.Col == 6)
            {
                listStkQty = (from t in db.T_STKSQTies
                              where t.itmNo == FlxInv.GetData(e.Row, 1).ToString()
                              where t.storeNo == (int?)int.Parse(FlxInv.GetData(e.Row, 6).ToString())
                              select t).ToList();
                if (listStkQty.Count != 0)
                {
                    _StksQty = listStkQty[0];
                    FlxInv.SetData(e.Row, 24, _StksQty.stkQty.ToString());
                }
                else
                {
                    FlxInv.SetData(e.Row, 24, 0);
                }
                if (string.Concat(FlxInv.GetData(e.Row, 28)) == "1")
                {
                    FlxDat.Clear(ClearFlags.Content, 1, 0, FlxDat.Rows.Count - 1, 1);
                    listQtyExp = (from t in db.T_QTYEXPs
                                  where t.itmNo == FlxInv.GetData(e.Row, 1).ToString()
                                  where t.storeNo == (int?)int.Parse(FlxInv.GetData(e.Row, 6).ToString())
                                  select t).ToList();
                    if (listQtyExp.Count != 0)
                    {
                        for (int iiCnt = 0; iiCnt < listQtyExp.Count; iiCnt++)
                        {
                            _QtyExp = listQtyExp[iiCnt];
                            FlxDat.Rows.Count = iiCnt + 2;
                            FlxDat.SetData(iiCnt + 1, 0, _QtyExp.DatExper.ToString());
                            FlxDat.SetData(iiCnt + 1, 1, _QtyExp.stkQty.Value.ToString());
                            FlxDat.SetData(iiCnt + 1, 2, _QtyExp.RunCod.ToString());
                        }
                        FlxDat.Visible = true;
                        FlxDat.Focus();
                    }
                    else
                    {
                        FlxDat.Visible = false;
                    }
                }
            }
            else if (e.Col == 7 || e.Col == 8)
            {
                double RealQ = 0.0;
                RealQ = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 11))));
                if (e.Col == 7 && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 32)))) != 3.0)
                {
                    if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 24)))) <= 0.0)
                    {
                        if (!VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 1))
                        {
                            MessageBox.Show((LangArEn == 0) ? ("لا يمكن البيع والكمية  " + double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 24)))) + "تأكد من صلاحيات المستخدمين") : ("Can't Sale and the Quantity " + double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 24)))) + " Check the Users Authorizations"), VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            FlxInv.SetData(e.Row, 7, 0);
                        }
                    }
                    else if (double.Parse(FlxInv.GetData(e.Row, 24).ToString()) < RealQ && !VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 1))
                    {
                        MessageBox.Show((LangArEn == 0) ? ("لا يمكن البيع بأكثر من الكمية  " + double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 24)))) + "راجع صلاحيات المستخدمين") : ("Can't Sale More Than available Quantity " + double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 24)))) + " Check the Users Authorizations"), VarGeneral.ProdectNam);
                        FlxInv.SetData(e.Row, 7, 0);
                    }
                }
                if (e.Col == 8)
                {
                    try
                    {
                        if (pricel != lastprice)
                        {
                            if (ChkPriceIncludeTax.Checked== true)
                            {
                                double p = getround(caltax(without, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31))))));
                                {
                                    FlxInv.SetData(e.Row, 8, p); lastprice = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString()); lastprice = getround(lastprice);
                                }
                            }
                            else
                                FlxInv.SetData(e.Row, 8, without); ; lastprice = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString()); lastprice = getround(lastprice);
                        }
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 10)))) > double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))))
                        {
                            if (!VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 2))
                            {
                                MessageBox.Show((LangArEn == 0) ? "لا يمكن البيع بأقل من سعر التكلفة . راجع صلاحيات المستخدمين" : "Can't Sale Less Then Cost Price .. Check the Users Authorizations", VarGeneral.ProdectNam);
                                FlxInv.SetData(e.Row, 8, PriceLoc);
                            }
                        }
                        else
                        {
                            PermissionPrice(e.Row, 8, _Sts: true);
                        }
                    }
                    catch
                    {
                    }
                }
                if (VarGeneral.SSSLev != "R" && VarGeneral.SSSLev != "C" && VarGeneral.SSSLev != "H" && File.Exists(Application.StartupPath + "\\Script\\SecriptCeramicQty.dll") && e.Col == 7)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(string.Concat(FlxInv.GetData(e.Row, e.Col))) && !string.IsNullOrEmpty(_Items.SecriptCeramic) && !string.IsNullOrEmpty(_Items.SecriptCeramicCombo))
                        {
                            int z = -1;
                            for (int i = 0; i < _Items.SecriptCeramic.Length; i++)
                            {
                                if (_Items.SecriptCeramic.Substring(i, 1) == ".")
                                {
                                    z = i;
                                    break;
                                }
                            }
                            if (z >= 0)
                            {
                                string cc = _Items.SecriptCeramic.Substring(z + 1);
                                if (!string.IsNullOrEmpty(cc))
                                {
                                    string Zer_ = string.Empty;
                                    for (int i = 0; i < cc.Length; i++)
                                    {
                                        Zer_ += "0";
                                    }
                                    int val_ = int.Parse("1" + Zer_);
                                    if (FlxInv.Rows[e.Row + 1].Height == 33)
                                    {
                                        FlxInv.SetData(e.Row, 36, Math.Round(double.Parse(FlxInv.GetData(e.Row, e.Col).ToString()) / (((_Items.SecriptCeramicCombo == "0") ? _Items.Pack1.Value : ((_Items.SecriptCeramicCombo == "1") ? _Items.Pack2.Value : ((_Items.SecriptCeramicCombo == "2") ? _Items.Pack3.Value : ((_Items.SecriptCeramicCombo == "3") ? _Items.Pack4.Value : _Items.Pack5.Value)))) / (double)val_), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                                        FlxInv.SetData(e.Row + 1, (LangArEn == 0) ? 2 : 4, FlxInv.GetData(e.Row, 36));
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                    }
                }
                FlxInv.SetData(e.Row, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 11)))));
                FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis + ItmAddTax);
                if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) > 0.0)
                {
                    ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) + ItmAddTax);
                }
                chekReptItem(Col_1: false);
                CalcuCustomerDisplay = true;
                double qty = 0.0;
                string unt = string.Empty;
                string itm_nm = string.Empty;
                try
                {
                    bool ChekOfferStat = false;
                    try
                    {
                        if (FlxInv.GetData(e.Row, 39).ToString() == "1")
                        {
                            ChekOfferStat = true;
                        }
                    }
                    catch
                    {
                    }
                    if (!string.IsNullOrEmpty(FlxInv.GetData(e.Row, 1).ToString()) && !ChekOfferStat)
                    {
                        try
                        {
                            itm_nm = string.Concat(FlxInv.GetData(e.Row, 1));
                        }
                        catch
                        {
                            itm_nm = string.Empty;
                        }
                        try
                        {
                            unt = string.Concat(FlxInv.GetData(e.Row, 3));
                        }
                        catch
                        {
                            unt = string.Empty;
                        }
                        try
                        {
                            qty = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 7))));
                        }
                        catch
                        {
                            qty = 0.0;
                        }
                        if (CmbInvSide.SelectedIndex <= 0)
                        {
                            RemoveOFFerLines(e.Row + 1);
                            CheckOffers(itm_nm, unt, qty, e.Row, e.Row);
                        }
                    }
                }
                catch
                {
                }
            }
            else if (e.Col == 9)
            {
                FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis + ItmAddTax);
                if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) > 0.0)
                {
                    ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) + ItmAddTax);
                }
                CalcuCustomerDisplay = true;
            }
            else if (e.Col == 38)
            {
                if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) > 0.0)
                {
                    ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                }
                if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) != Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis + ItmAddTax, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2))
                {
                    if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) == 0.0)
                    {
                        MessageBox.Show((LangArEn == 0) ? "يجب تحديد الكمية" : "Must Enter The Quantity", VarGeneral.ProdectNam);
                        FlxInv.SetData(e.Row, 38, 0);
                        FlxInv.Col = 7;
                        FlxInv.Row = e.Row;
                        FlxInv.Focus();
                    }
                    else
                    {
                        if (enteredtotal != 0)
                        {
                            double fs = 0;
                            fs = double.Parse((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) / double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7))))).ToString()); without = fs;
                            newprice = true;
                            if (ChkPriceIncludeTax.Checked== false) FlxInv.SetData(e.Row, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) / double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))));
                            else
                            {
                                without = fs;
                                newprice = true;
                                double p = getround(caltax(without, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31))))));
                                FlxInv.SetData(e.Row, 8, p);
                            }

                            FlxInv_AfterEdit(null, new RowColEventArgs(e.Row, 8));
                        }
                        else
                        {
                            FlxInv.SetData(e.Row, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) / double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))));
                        }
                        //   FlxInv.SetData(e.Row, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) / double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))));
                        FlxInv.SetData(e.Row, 9, 0);
                    }
                }
                try
                {
                    if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 10)))) > double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) && !VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 2))
                    {
                        MessageBox.Show((LangArEn == 0) ? "لا يمكن البيع بأقل من سعر التكلفة . راجع صلاحيات المستخدمين" : "Can't Sale Less Then Cost Price .. Check the Users Authorizations", VarGeneral.ProdectNam);
                        FlxInv.SetData(e.Row, 8, PriceLoc);
                    }
                }
                catch
                {
                }
                chekReptItem(Col_1: false);
                CalcuCustomerDisplay = true;
            }
            else if (e.Col == 37)
            {
                if (Convert.ToBoolean(FlxInv.GetData(e.Row, e.Col)))
                {
                    if (FlxInv.Rows[e.Row].Height > 33)
                    {
                        FlxInv.SetCellStyle(e.Row, 2, "SubTotal0");
                        FlxInv.SetCellStyle(e.Row, 4, "SubTotal0");
                        try
                        {
                            FlxInv.SetCellStyle(0, 2, "SelectedRowHeader");
                            FlxInv.SetCellStyle(0, 4, "SelectedRowHeader");
                        }
                        catch
                        {
                        }
                    }
                    else if (FlxInv.Rows[e.Row].StyleNew.BackColor == Color.Black)
                    {
                        int newRow = 1;
                        for (int i = e.Row; i > 0; i--)
                        {
                            if (FlxInv.Rows[i].StyleNew.BackColor != Color.Gainsboro && FlxInv.Rows[i].Height > 33)
                            {
                                newRow = i;
                                break;
                            }
                        }
                        FlxInv.SetCellStyle(newRow, 2, "SubTotal0");
                        FlxInv.SetCellStyle(newRow, 4, "SubTotal0");
                        try
                        {
                            FlxInv.SetCellStyle(0, 2, "SelectedRowHeader");
                            FlxInv.SetCellStyle(0, 4, "SelectedRowHeader");
                        }
                        catch
                        {
                        }
                        FlxInv.RowSel = newRow;
                        FlxInv.Row = newRow;
                    }
                    else
                    {
                        FlxInv.SetCellStyle(e.Row - 1, 2, "SubTotal0");
                        FlxInv.SetCellStyle(e.Row - 1, 4, "SubTotal0");
                        try
                        {
                            FlxInv.SetCellStyle(0, 2, "SelectedRowHeader");
                            FlxInv.SetCellStyle(0, 4, "SelectedRowHeader");
                        }
                        catch
                        {
                        }
                    }
                }
                else
                {
                    FlxInv.SetCellStyle(e.Row, 2, "SelectedRowHeader");
                    FlxInv.SetCellStyle(e.Row, 4, "SelectedRowHeader");
                }
            }
            else if (e.Col == 31)
            {
                if (ChkPriceIncludeTax.Checked)
                {
                    pricel = without; lastprice = 0;
                    edit = false;
                    FlxInv_AfterEdit(null, new RowColEventArgs(e.Row, 8));
                }
                FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis + ItmAddTax);
                if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) > 0.0)
                {
                    ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 38)))) + ItmAddTax);
                }
                CalcuCustomerDisplay = true;
            }
            else if (e.Col == 33 && Convert.ToBoolean(FlxInv.GetData(e.Row, 33)))
            {
                ItmAddTax = 0.0;
                ItmDis = 0.0;
                FlxInv.SetData(e.Row, 8, 0);
                FlxInv.SetData(e.Row, 9, 0);
                FlxInv.SetData(e.Row, 31, 0);
                FlxInv.SetData(e.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(e.Row, 8)))) - ItmDis + ItmAddTax);
            }
            try
            {
                if (VarGeneral.SSSLev != "R" && VarGeneral.SSSLev != "C" && VarGeneral.SSSLev != "H" && FlxInv.Rows[e.Row].Height == 33)
                {
                    FlxInv.SetData(e.Row - 1, 36, FlxInv.GetData(e.Row, (LangArEn == 0) ? 2 : 4));
                    if (File.Exists(Application.StartupPath + "\\Script\\SecriptCeramic.dll"))
                    {
                        try
                        {
                            if (!string.IsNullOrEmpty(string.Concat(FlxInv.GetData(e.Row - 1, 36))) && !string.IsNullOrEmpty(_Items.SecriptCeramic) && !string.IsNullOrEmpty(_Items.SecriptCeramicCombo))
                            {
                                int z = -1;
                                for (int i = 0; i < _Items.SecriptCeramic.Length; i++)
                                {
                                    if (_Items.SecriptCeramic.Substring(i, 1) == ".")
                                    {
                                        z = i;
                                        break;
                                    }
                                }
                                if (z >= 0)
                                {
                                    string cc = _Items.SecriptCeramic.Substring(z + 1);
                                    if (!string.IsNullOrEmpty(cc))
                                    {
                                        string Zer_ = string.Empty;
                                        for (int i = 0; i < cc.Length; i++)
                                        {
                                            Zer_ += "0";
                                        }
                                        int val_ = int.Parse("1" + Zer_);
                                        FlxInv.SetData(e.Row - 1, 7, Math.Round(double.Parse(FlxInv.GetData(e.Row - 1, 36).ToString()) * (((_Items.SecriptCeramicCombo == "0") ? _Items.Pack1.Value : ((_Items.SecriptCeramicCombo == "1") ? _Items.Pack2.Value : ((_Items.SecriptCeramicCombo == "2") ? _Items.Pack3.Value : ((_Items.SecriptCeramicCombo == "3") ? _Items.Pack4.Value : _Items.Pack5.Value)))) / (double)val_), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                                        FlxInv_AfterEdit(null, new RowColEventArgs(e.Row - 1, 7));
                                    }
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                }
            }
            catch
            {
            }
            VarGeneral.Flush();
            GetInvTot();
            try
            {
                double OldValueDis = txtDiscountVal.Value;
                txtDiscountVal.Value = txtTotalAmLoc.Value * (txtDiscountP.Value / 100.0);
                txtDiscountValLoc.Value = txtDiscountVal.Value * RateValue;
                if (OldValueDis != txtDiscountVal.Value)
                {
                    GetInvTot();
                }
            }
            catch
            {
            }
            if (VarGeneral.Settings_Sys.IsCustomerDisplay.Value && CalcuCustomerDisplay)
            {
                double _pric = 0.0;
                try
                {
                    _pric = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8))));
                }
                catch
                {
                    _pric = 0.0;
                }
                CustomerDisplayData(txtDueAmountLoc.Value, _pric);
            }
        }
        private void PermissionPrice(int _row, int _col, bool _Sts)
        {
            try
            {
                double vPri;
                List<T_Item> q;
                if (int.Parse(permission.RepInv2.Trim()) > 0 && int.Parse(permission.RepInv4.Trim()) == 0)
                {
                    vPri = 0.0;
                    q = db.T_Items.Where((T_Item t) => t.Itm_No == FlxInv.GetData(_row, 1).ToString()).ToList();
                    if (q.Count <= 0)
                    {
                        return;
                    }
                    if (int.Parse(permission.RepInv2.Trim()) == 1)
                    {
                        if (q.FirstOrDefault().Unit1.HasValue && q.FirstOrDefault().T_Unit.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri1.Value;
                        }
                        if (q.FirstOrDefault().Unit2.HasValue && q.FirstOrDefault().T_Unit1.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri2.Value;
                        }
                        if (q.FirstOrDefault().Unit3.HasValue && q.FirstOrDefault().T_Unit2.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri3.Value;
                        }
                        if (q.FirstOrDefault().Unit4.HasValue && q.FirstOrDefault().T_Unit3.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri4.Value;
                        }
                        if (q.FirstOrDefault().Unit5.HasValue && q.FirstOrDefault().T_Unit4.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri5.Value;
                        }
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) != vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر البيع الإفتراضي . راجع صلاحيات المستخدمين" : "You must sell at default selling . Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, PriceLoc);
                        }
                        return;
                    }
                    if (int.Parse(permission.RepInv2.Trim()) == 2)
                    {
                        vPri = q.FirstOrDefault().Price1.Value;
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) != vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر الجملة . راجع صلاحيات المستخدمين" : "You must sell at wholesale selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                        return;
                    }
                    if (int.Parse(permission.RepInv2.Trim()) == 3)
                    {
                        vPri = q.FirstOrDefault().Price2.Value;
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) != vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر الموزع . راجع صلاحيات المستخدمين" : "You must sell at the distributor selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                        return;
                    }
                    if (int.Parse(permission.RepInv2.Trim()) == 4)
                    {
                        vPri = q.FirstOrDefault().Price3.Value;
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) != vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر المندوب . راجع صلاحيات المستخدمين" : "You must sell at delegate selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                        return;
                    }
                    if (int.Parse(permission.RepInv2.Trim()) == 5)
                    {
                        vPri = q.FirstOrDefault().Price4.Value;
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) != vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر التجزئة . راجع صلاحيات المستخدمين" : "You must sell at retail selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                        return;
                    }
                    vPri = q.FirstOrDefault().Price5.Value;
                    if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) != vPri && vPri > 0.0)
                    {
                        if (_Sts)
                        {
                            MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر آخر . راجع صلاحيات المستخدمين" : "You must sell at other selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                        }
                        FlxInv.SetData(_row, 8, vPri);
                    }
                    return;
                }
                if (int.Parse(permission.RepInv2.Trim()) == 0 && int.Parse(permission.RepInv4.Trim()) > 0)
                {
                    vPri = 0.0;
                    q = db.T_Items.Where((T_Item t) => t.Itm_No == FlxInv.GetData(_row, 1).ToString()).ToList();
                    if (q.Count <= 0)
                    {
                        return;
                    }
                    if (int.Parse(permission.RepInv4.Trim()) == 1)
                    {
                        if (q.FirstOrDefault().Unit1.HasValue && q.FirstOrDefault().T_Unit.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri1.Value;
                        }
                        if (q.FirstOrDefault().Unit2.HasValue && q.FirstOrDefault().T_Unit1.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri2.Value;
                        }
                        if (q.FirstOrDefault().Unit3.HasValue && q.FirstOrDefault().T_Unit2.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri3.Value;
                        }
                        if (q.FirstOrDefault().Unit4.HasValue && q.FirstOrDefault().T_Unit3.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri4.Value;
                        }
                        if (q.FirstOrDefault().Unit5.HasValue && q.FirstOrDefault().T_Unit4.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                        {
                            vPri = q.FirstOrDefault().UntPri5.Value;
                        }
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) > vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر لا يتجاوز سعر البيع الإفتراضي . راجع صلاحيات المستخدمين" : "You must sell at default selling . Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, PriceLoc);
                        }
                        return;
                    }
                    if (int.Parse(permission.RepInv4.Trim()) == 2)
                    {
                        vPri = q.FirstOrDefault().Price1.Value;
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) > vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر لا يتجاوز سعر الجملة . راجع صلاحيات المستخدمين" : "You must sell at wholesale selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                        return;
                    }
                    if (int.Parse(permission.RepInv4.Trim()) == 3)
                    {
                        vPri = q.FirstOrDefault().Price2.Value;
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) > vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر لا يتجاوز سعر الموزع . راجع صلاحيات المستخدمين" : "You must sell at the distributor selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                        return;
                    }
                    if (int.Parse(permission.RepInv4.Trim()) == 4)
                    {
                        vPri = q.FirstOrDefault().Price3.Value;
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) > vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر لا يتجاوز سعر المندوب . راجع صلاحيات المستخدمين" : "You must sell at delegate selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                        return;
                    }
                    if (int.Parse(permission.RepInv4.Trim()) == 5)
                    {
                        vPri = q.FirstOrDefault().Price4.Value;
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) > vPri && vPri > 0.0)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر لا يتجاوز سعر التجزئة . راجع صلاحيات المستخدمين" : "You must sell at retail selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                        return;
                    }
                    vPri = q.FirstOrDefault().Price5.Value;
                    if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) > vPri && vPri > 0.0)
                    {
                        if (_Sts)
                        {
                            MessageBox.Show((LangArEn == 0) ? "يجب البيع بسعر لا يتجاوز سعر آخر . راجع صلاحيات المستخدمين" : "You must sell at other selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                        }
                        FlxInv.SetData(_row, 8, vPri);
                    }
                    return;
                }
                if (int.Parse(permission.RepInv2.Trim()) <= 0 || int.Parse(permission.RepInv4.Trim()) <= 0)
                {
                    return;
                }
                vPri = 0.0;
                double vPri2 = 0.0;
                q = db.T_Items.Where((T_Item t) => t.Itm_No == FlxInv.GetData(_row, 1).ToString()).ToList();
                if (q.Count <= 0)
                {
                    return;
                }
                if (int.Parse(permission.RepInv2.Trim()) != 1)
                {
                    vPri = ((int.Parse(permission.RepInv2.Trim()) == 2) ? q.FirstOrDefault().Price1.Value : ((int.Parse(permission.RepInv2.Trim()) == 3) ? q.FirstOrDefault().Price2.Value : ((int.Parse(permission.RepInv2.Trim()) == 4) ? q.FirstOrDefault().Price3.Value : ((int.Parse(permission.RepInv2.Trim()) != 5) ? q.FirstOrDefault().Price5.Value : q.FirstOrDefault().Price4.Value))));
                }
                else
                {
                    if (q.FirstOrDefault().Unit1.HasValue && q.FirstOrDefault().T_Unit.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri = q.FirstOrDefault().UntPri1.Value;
                    }
                    if (q.FirstOrDefault().Unit2.HasValue && q.FirstOrDefault().T_Unit1.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri = q.FirstOrDefault().UntPri2.Value;
                    }
                    if (q.FirstOrDefault().Unit3.HasValue && q.FirstOrDefault().T_Unit2.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri = q.FirstOrDefault().UntPri3.Value;
                    }
                    if (q.FirstOrDefault().Unit4.HasValue && q.FirstOrDefault().T_Unit3.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri = q.FirstOrDefault().UntPri4.Value;
                    }
                    if (q.FirstOrDefault().Unit5.HasValue && q.FirstOrDefault().T_Unit4.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri = q.FirstOrDefault().UntPri5.Value;
                    }
                }
                if (int.Parse(permission.RepInv4.Trim()) != 1)
                {
                    vPri2 = ((int.Parse(permission.RepInv4.Trim()) == 2) ? q.FirstOrDefault().Price1.Value : ((int.Parse(permission.RepInv4.Trim()) == 3) ? q.FirstOrDefault().Price2.Value : ((int.Parse(permission.RepInv4.Trim()) == 4) ? q.FirstOrDefault().Price3.Value : ((int.Parse(permission.RepInv4.Trim()) != 5) ? q.FirstOrDefault().Price5.Value : q.FirstOrDefault().Price4.Value))));
                }
                else
                {
                    if (q.FirstOrDefault().Unit1.HasValue && q.FirstOrDefault().T_Unit.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri2 = q.FirstOrDefault().UntPri1.Value;
                    }
                    if (q.FirstOrDefault().Unit2.HasValue && q.FirstOrDefault().T_Unit1.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri2 = q.FirstOrDefault().UntPri2.Value;
                    }
                    if (q.FirstOrDefault().Unit3.HasValue && q.FirstOrDefault().T_Unit2.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri2 = q.FirstOrDefault().UntPri3.Value;
                    }
                    if (q.FirstOrDefault().Unit4.HasValue && q.FirstOrDefault().T_Unit3.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri2 = q.FirstOrDefault().UntPri4.Value;
                    }
                    if (q.FirstOrDefault().Unit5.HasValue && q.FirstOrDefault().T_Unit4.Arb_Des == FlxInv.GetData(_row, 3).ToString())
                    {
                        vPri2 = q.FirstOrDefault().UntPri5.Value;
                    }
                }
                if (vPri > 0.0 && vPri2 > 0.0)
                {
                    if (vPri < vPri2)
                    {
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) < vPri || double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) > vPri2)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? ("يجب البيع بسعر " + vPri + " وعدم تجاوز السعر " + vPri2 + " . راجع صلاحيات المستخدمين") : "You must sell at other selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                    }
                    else if (vPri > vPri2)
                    {
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) > vPri || double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) < vPri2)
                        {
                            if (_Sts)
                            {
                                MessageBox.Show((LangArEn == 0) ? ("يجب البيع بسعر " + vPri2 + " وعدم تجاوز السعر " + vPri + " . راجع صلاحيات المستخدمين") : "You must sell at other selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            }
                            FlxInv.SetData(_row, 8, vPri);
                        }
                    }
                    else if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) != vPri)
                    {
                        if (_Sts)
                        {
                            MessageBox.Show((LangArEn == 0) ? ("يجب البيع بسعر " + vPri + " . راجع صلاحيات المستخدمين") : "You must sell at other selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                        }
                        FlxInv.SetData(_row, 8, vPri);
                    }
                }
                else if (vPri > 0.0 && vPri2 <= 0.0)
                {
                    if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(_row, 8)))) != vPri)
                    {
                        if (_Sts)
                        {
                            MessageBox.Show((LangArEn == 0) ? ("يجب البيع بسعر " + vPri + " . راجع صلاحيات المستخدمين") : "You must sell at other selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                        }
                        FlxInv.SetData(_row, 8, vPri);
                    }
                }
                else if (vPri <= 0.0 && vPri2 > 0.0)
                {
                    if (_Sts)
                    {
                        MessageBox.Show((LangArEn == 0) ? (" يجب عدم تجاوز السعر " + vPri2 + " . راجع صلاحيات المستخدمين") : "You must sell at other selling .. Check the Users Authorizations", VarGeneral.ProdectNam);
                    }
                    FlxInv.SetData(_row, 8, vPri2);
                }
            }
            catch
            {
            }
        }
        private void FlxInv_BeforeEdit(object sender, RowColEventArgs e)
        {
            try
            {
                if ((e.Col == 3 || e.Col == 5) && FlxInv.GetData(e.Row, e.Col) != null)
                {
                    oldUnit = FlxInv.GetData(e.Row, 3).ToString() ?? string.Empty;
                }
            }
            catch
            {
            }
            try
            {
                if (e.Col == 2 || e.Col == 4)
                {
                    oldItemName = FlxInv.GetData(e.Row, e.Col).ToString() ?? string.Empty;
                }
            }
            catch
            {
                oldItemName = string.Empty;
            }
            try
            {
                _RowIndex = e.Row;
            }
            catch
            {
            }
            GridDetUpdate(FlxInv.RowSel);
        }
        private void FlxInv_KeyDown(object sender, KeyEventArgs e)
        {
            if (
                           char.IsLetterOrDigit((char)e.KeyValue))
            {
                edit = true;
            }
            else
                edit = false;
            if (e.KeyCode != Keys.Delete)
            {
                return;
            }
            try
            {
                if (FlxInv.GetData(RowSel, 1).ToString() == null)
                {
                }
            }
            catch
            {
            }
        }
        void flxinitate()
        {
            C1.Win.C1Input.C1Button b1 = new C1.Win.C1Input.C1Button();
            // Set up color column.
           
            FlxInv.Cols[3].Visible = false;
            FlxInv.Cols[5].Visible = false;
           
        }
        private void FlxInv_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                try
                {
                    if (string.Concat(FlxInv.GetData(FlxInv.RowSel, 1)) != string.Empty && State != 0)
                    {
                        _Items = db.StockItem(string.Concat(FlxInv.GetData(FlxInv.RowSel, 1)));
                        txtVCost.Text = string.Concat(Math.Round(_Items.AvrageCost.Value * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))) / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                        txtLCost.Text = string.Concat(Math.Round(_Items.LastCost.Value * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))) / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                        LastPrice(_Items);
                    }
                }
                catch
                {
                }
                if (string.Concat(FlxInv.GetData(FlxInv.RowSel, 1)) != string.Empty)
                {
                    _Items = db.StockItem(string.Concat(FlxInv.GetData(FlxInv.RowSel, 1)));
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtItemName.Text = _Items.Arb_Des.Trim();
                    }
                    else
                    {
                        txtItemName.Text = _Items.Eng_Des.Trim();
                    }
                    string CoA = string.Empty;
                    string CoE = string.Empty;
                    for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                    {
                        _Unit = listUnit[iiCnt];
                        if (_Items.Unit1 == _Unit.Unit_ID)
                        {
                            if (CoA != string.Empty)
                            {
                                CoA += "|";
                                CoE += "|";
                            }
                            CoA += _Unit.Arb_Des;
                            CoE += _Unit.Eng_Des;
                            break;
                        }
                    }
                    for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                    {
                        _Unit = listUnit[iiCnt];
                        if (_Items.Unit2 == _Unit.Unit_ID)
                        {
                            if (CoA != string.Empty)
                            {
                                CoA += "|";
                                CoE += "|";
                            }
                            CoA += _Unit.Arb_Des;
                            CoE += _Unit.Eng_Des;
                            break;
                        }
                    }
                    for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                    {
                        _Unit = listUnit[iiCnt];
                        if (_Items.Unit3 == _Unit.Unit_ID)
                        {
                            if (CoA != string.Empty)
                            {
                                CoA += "|";
                                CoE += "|";
                            }
                            CoA += _Unit.Arb_Des;
                            CoE += _Unit.Eng_Des;
                            break;
                        }
                    }
                    for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                    {
                        _Unit = listUnit[iiCnt];
                        if (_Items.Unit4 == _Unit.Unit_ID)
                        {
                            if (CoA != string.Empty)
                            {
                                CoA += "|";
                                CoE += "|";
                            }
                            CoA += _Unit.Arb_Des;
                            CoE += _Unit.Eng_Des;
                            break;
                        }
                    }
                    for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                    {
                        _Unit = listUnit[iiCnt];
                        if (_Items.Unit5 == _Unit.Unit_ID)
                        {
                            if (CoA != string.Empty)
                            {
                                CoA += "|";
                                CoE += "|";
                            }
                            CoA += _Unit.Arb_Des;
                            CoE += _Unit.Eng_Des;
                            break;
                        }
                    }
                    FlxInv.Cols[3].ComboList = CoA;
                    FlxInv.Cols[5].ComboList = CoE;
                    txtVCost.Text = string.Concat(Math.Round(_Items.AvrageCost.Value * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))) / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                    txtLCost.Text = string.Concat(Math.Round(_Items.LastCost.Value * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))) / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                    LastPrice(_Items);
                    txtVSerial.Text = _Items.SerialKey ?? string.Empty;
                    BindDataOfStkQty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 1)));
                }
                int vRowIndex = FlxInv.RowSel;
                try
                {
                    if (FlxInv.ColSel == 7 || FlxInv.ColSel == 8 || FlxInv.ColSel == 9 || FlxInv.ColSel == 38)
                    {
                        PanaHide(Sts: true);
                        if (FlxInv.ColSel == 7)
                        {
                            vQtyGraid = true;
                        }
                        else if (FlxInv.ColSel == 8)
                        {
                            vPriceGraid = true;
                        }
                        else if (FlxInv.ColSel == 9)
                        {
                            vDisGraid = true;
                        }
                        else if (FlxInv.ColSel == 38)
                        {
                            vTotGraid = true;
                        }
                        else if (FlxInv.ColSel == 31)
                        {
                            vTax = true;
                        }
                    }
                }
                catch
                {
                    Button_Groups.Enabled = false;
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vDisGraid = false;
                    vTotGraid = false;
                    vTax = false;
                }
            }
            catch
            {
            }
        }
        private void GridDetUpdate(int vRow)
        {
            if (State == FormState.Saved)
            {
                return;
            }
            try
            {
                try
                {
                    dataGridView_ItemDet.Clear(ClearFlags.Content, 1, 1, dataGridView_ItemDet.Rows.Count - 1, 34);
                }
                catch
                {
                }
                dataGridView_ItemDet.Rows.Count = 1;
                if (!string.IsNullOrEmpty(FlxInv.GetData(vRow, 1).ToString()) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(vRow, 32)))) == 2.0)
                {
                    FlxStkQty.Clear(ClearFlags.Content, 1, 1, 1, 1);
                    _Items = db.StockItemList(FlxInv.GetData(vRow, 1).ToString()).First();
                    dataGridView_ItemDet.Visible = true;
                    Stock_DataDataContext dbc = new Stock_DataDataContext(VarGeneral.BranchCS);
                    if (State == FormState.New && (int.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(vRow, 25)))) <= 0 || string.IsNullOrEmpty(FlxInv.GetData(vRow, 25).ToString())))
                    {
                        List<T_ItemDet> ItmDet = db.T_ItemDets.Where((T_ItemDet t) => t.ItmNo == _Items.Itm_No).ToList();
                        SetLinesDet(ItmDet);
                        return;
                    }
                    List<T_SINVDET> ItmDEt = dbc.T_SINVDETs.Where((T_SINVDET t) => t.SInvId == (int?)int.Parse(VarGeneral.TString.TEmpty(string.Empty + FlxInv.GetData(vRow, 25)))).ToList();
                    if (ItmDEt.Count <= 0)
                    {
                        List<T_ItemDet> ItmDet = db.T_ItemDets.Where((T_ItemDet t) => t.ItmNo == _Items.Itm_No).ToList();
                        SetLinesDet(ItmDet);
                    }
                    else
                    {
                        SetLinesDET(ItmDEt, vRow);
                    }
                }
                else
                {
                    dataGridView_ItemDet.Visible = false;
                }
            }
            catch
            {
                dataGridView_ItemDet.Visible = false;
            }
        }
        private void dataGridView_ItemDet_MouseDown(object sender, MouseEventArgs e)
        {
            if (!(string.Concat(dataGridView_ItemDet.GetData(dataGridView_ItemDet.RowSel, 1)) != string.Empty))
            {
                return;
            }
            _Items = db.StockItem(string.Concat(dataGridView_ItemDet.GetData(dataGridView_ItemDet.RowSel, 1)));
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                txtItemName.Text = _Items.Arb_Des.Trim();
            }
            else
            {
                txtItemName.Text = _Items.Eng_Des.Trim();
            }
            string CoA = string.Empty;
            string CoE = string.Empty;
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit1 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    break;
                }
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit2 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    break;
                }
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit3 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    break;
                }
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit4 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    break;
                }
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit5 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    break;
                }
            }
            dataGridView_ItemDet.Cols[3].ComboList = CoA;
            dataGridView_ItemDet.Cols[5].ComboList = CoE;
            txtVCost.Text = string.Concat(Math.Round(_Items.AvrageCost.Value * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(dataGridView_ItemDet.RowSel, 11)))) / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
            txtLCost.Text = string.Concat(Math.Round(_Items.LastCost.Value * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(dataGridView_ItemDet.RowSel, 11)))) / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
            txtVSerial.Text = _Items.SerialKey ?? string.Empty;
            LastPrice(_Items);
            BindDataOfStkQtyDEt(string.Concat(dataGridView_ItemDet.GetData(dataGridView_ItemDet.RowSel, 1)));
        }
        private void BindDataOfStkQtyDEt(string ItmNo)
        {
            try
            {
                FlxStkQty.Clear(ClearFlags.Content, 1, 1, 1, 1);
                listStkQty = db.T_STKSQTies.Where((T_STKSQTY t) => t.itmNo == ItmNo).ToList();
                dataGridView_ItemDet.SetData(dataGridView_ItemDet.Row, 24, 0);
                for (int iiCnt = 0; iiCnt < listStkQty.Count; iiCnt++)
                {
                    _StksQty = listStkQty[iiCnt];
                    for (int I = 1; I < FlxStkQty.Rows.Count; I++)
                    {
                        if (_StksQty.storeNo.Value.ToString().Trim() == FlxStkQty.GetData(I, 0).ToString())
                        {
                            FlxStkQty.SetData(I, 1, _StksQty.stkQty / double.Parse(VarGeneral.TString.TEmpty(dataGridView_ItemDet.GetData(dataGridView_ItemDet.Row, 11).ToString())));
                            if (_StksQty.storeNo.Value.ToString().Trim() == dataGridView_ItemDet.GetData(dataGridView_ItemDet.RowSel, 6).ToString())
                            {
                                dataGridView_ItemDet.SetData(dataGridView_ItemDet.Row, 24, _StksQty.stkQty);
                            }
                        }
                    }
                }
            }
            catch
            {
            }
        }
        private void FillItemDet(T_Item _Itm, bool Barcod, int vRow, int vUntID, int vStoreNo, double vQty, double vPrice)
        {
            dataGridView_ItemDet.SetData(vRow, 1, _Itm.Itm_No.Trim());
            dataGridView_ItemDet.SetData(vRow, 2, _Itm.Arb_Des.Trim());
            dataGridView_ItemDet.SetData(vRow, 4, _Itm.Eng_Des.Trim());
            dataGridView_ItemDet.SetData(vRow, 6, (vUntID == 0) ? 1 : vStoreNo);
            string CoA = string.Empty;
            string CoE = string.Empty;
            string DefUnitA = string.Empty;
            string DefUnitE = string.Empty;
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (!((vUntID != 0) ? (vUntID == 1) : (_Itm.Unit1 == _Unit.Unit_ID)))
                {
                    continue;
                }
                if (CoA != string.Empty)
                {
                    CoA += "|";
                    CoE += "|";
                }
                CoA += _Unit.Arb_Des;
                CoE += _Unit.Eng_Des;
                if (_Itm.DefultUnit == 1 && DefPack == 0)
                {
                    Pack = _Itm.Pack1.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit.Arb_Des;
                        DefUnitE = _Itm.T_Unit.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri1.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack1.Value);
                }
                else if (vUntID != 0 || DefPack == 1)
                {
                    Pack = _Itm.Pack1.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit.Arb_Des;
                        DefUnitE = _Itm.T_Unit.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri1.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack1);
                }
                if (vUntID == 0)
                {
                }
                break;
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (!((vUntID != 0) ? (vUntID == 2) : (_Itm.Unit2 == _Unit.Unit_ID)))
                {
                    continue;
                }
                if (CoA != string.Empty)
                {
                    CoA += "|";
                    CoE += "|";
                }
                CoA += _Unit.Arb_Des;
                CoE += _Unit.Arb_Des;
                if (_Itm.DefultUnit == 2 && DefPack == 0)
                {
                    Pack = _Itm.Pack2.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit1.Arb_Des;
                        DefUnitE = _Itm.T_Unit1.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri2.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack2);
                }
                else if (vUntID != 0 || DefPack == 2)
                {
                    Pack = _Itm.Pack2.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit1.Arb_Des;
                        DefUnitE = _Itm.T_Unit1.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri2.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack2);
                }
                if (vUntID == 0)
                {
                }
                break;
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (!((vUntID != 0) ? (vUntID == 3) : (_Itm.Unit3 == _Unit.Unit_ID)))
                {
                    continue;
                }
                if (CoA != string.Empty)
                {
                    CoA += "|";
                    CoE += "|";
                }
                CoA += _Unit.Arb_Des;
                CoE += _Unit.Eng_Des;
                if (_Itm.DefultUnit == 3 && DefPack == 0)
                {
                    Pack = _Itm.Pack3.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit2.Arb_Des;
                        DefUnitE = _Itm.T_Unit2.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri3.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack3);
                }
                else if (vUntID != 0 || DefPack == 3)
                {
                    Pack = _Itm.Pack3.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit2.Arb_Des;
                        DefUnitE = _Itm.T_Unit2.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri3.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack3);
                }
                if (vUntID == 0)
                {
                }
                break;
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (!((vUntID != 0) ? (vUntID == 4) : (_Itm.Unit4 == _Unit.Unit_ID)))
                {
                    continue;
                }
                if (CoA != string.Empty)
                {
                    CoA += "|";
                    CoE += "|";
                }
                CoA += _Unit.Arb_Des;
                CoE += _Unit.Eng_Des;
                if (_Itm.DefultUnit == 4 && DefPack == 0)
                {
                    Pack = _Itm.Pack4.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit3.Arb_Des;
                        DefUnitE = _Itm.T_Unit3.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri4.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack4);
                }
                else if (vUntID != 0 || DefPack == 4)
                {
                    Pack = _Itm.Pack4.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit3.Arb_Des;
                        DefUnitE = _Itm.T_Unit3.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri4.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack4);
                }
                if (vUntID == 0)
                {
                }
                break;
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (!((vUntID != 0) ? (vUntID == 5) : (_Itm.Unit5 == _Unit.Unit_ID)))
                {
                    continue;
                }
                if (CoA != string.Empty)
                {
                    CoA += "|";
                    CoE += "|";
                }
                CoA += _Unit.Arb_Des;
                CoE += _Unit.Eng_Des;
                if (_Itm.DefultUnit == 5 && DefPack == 0)
                {
                    Pack = _Itm.Pack5.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit4.Arb_Des;
                        DefUnitE = _Itm.T_Unit4.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri5.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack5);
                }
                else if (vUntID != 0 || DefPack == 5)
                {
                    Pack = _Itm.Pack5.Value;
                    if (vUntID == 0)
                    {
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                    }
                    else
                    {
                        DefUnitA = _Itm.T_Unit4.Arb_Des;
                        DefUnitE = _Itm.T_Unit4.Eng_Des;
                    }
                    dataGridView_ItemDet.SetData(vRow, 8, (vUntID == 0) ? _Itm.UntPri5.Value : vPrice);
                    dataGridView_ItemDet.SetData(vRow, 11, _Itm.Pack5);
                }
                if (vUntID == 0)
                {
                }
                break;
            }
            dataGridView_ItemDet.Cols[3].ComboList = CoA;
            dataGridView_ItemDet.Cols[5].ComboList = CoE;
            dataGridView_ItemDet.SetData(vRow, 3, DefUnitA);
            dataGridView_ItemDet.SetData(vRow, 5, DefUnitE);
            dataGridView_ItemDet.SetData(vRow, 10, _Itm.AvrageCost / RateValue);
            dataGridView_ItemDet.SetData(vRow, 30, _Itm.LastCost * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(vRow, 11)))) / RateValue);
            dataGridView_ItemDet.SetData(vRow, 28, _Itm.Lot);
            dataGridView_ItemDet.SetData(vRow, 32, _Itm.ItmTyp);
            dataGridView_ItemDet.SetData(vRow, 33, _Itm.ItmLoc);
            dataGridView_ItemDet.SetData(vRow, 18, _Itm.DefPack);
            dataGridView_ItemDet.SetData(vRow, 19, _Itm.Price1);
            dataGridView_ItemDet.SetData(vRow, 20, _Itm.Price2);
            dataGridView_ItemDet.SetData(vRow, 21, _Itm.Price3);
            dataGridView_ItemDet.SetData(vRow, 22, _Itm.Price4);
            dataGridView_ItemDet.SetData(vRow, 23, _Itm.Price5);
            dataGridView_ItemDet.SetData(vRow, 17, vPrice);
            dataGridView_ItemDet.SetData(vRow, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(vRow, 17)))) / RateValue);
            dataGridView_ItemDet.SetData(vRow, 7, (vUntID == 0) ? 0.0 : vQty);
            dataGridView_ItemDet.SetData(vRow, 29, vQty);
            dataGridView_ItemDet.SetData(vRow, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(vRow, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(vRow, 11)))));
            dataGridView_ItemDet.SetData(vRow, 31, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(vRow, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(vRow, 8)))));
            VarGeneral.Flush();
        }
        public void SetLinesDet(List<T_ItemDet> listDet)
        {
            try
            {
                dataGridView_ItemDet.Rows.Count = listDet.Count + 1;
                for (int iiCnt = 1; iiCnt <= listDet.Count; iiCnt++)
                {
                    T_ItemDet _ItemsDet = listDet[iiCnt - 1];
                    FillItemDet(db.StockItem(_ItemsDet.GItmNo), Barcod: false, iiCnt, _ItemsDet.Unit_.Value, _ItemsDet.StoreNo.Value, Math.Abs(_ItemsDet.Qty.Value), _ItemsDet.Price.Value);
                }
                if (State == FormState.Saved)
                {
                    return;
                }
                double InvCost = 0.0;
                for (int i = 1; i < dataGridView_ItemDet.Rows.Count; i++)
                {
                    try
                    {
                        dataGridView_ItemDet.SetData(i, 7, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 7)))) * ((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) > 0.0) ? double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) : 1.0));
                        dataGridView_ItemDet.SetData(i, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 17)))));
                        dataGridView_ItemDet.SetData(i, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 11)))));
                        InvCost += double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 10)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(dataGridView_ItemDet.GetData(i, 12))));
                    }
                    catch
                    {
                    }
                }
                FlxInv.SetData(FlxInv.RowSel, 10, InvCost);
            }
            catch
            {
                MessageBox.Show((LangArEn == 0) ? "حدث خطأ أثناء تعبئة بيانات الصنف المجمع ." : "An error occurred while filling lines .", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }
        private void FlxInv_RowColChange(object sender, EventArgs e)
        {
            if (FlxInv.Col == 1)
            {
                Framework.Keyboard.Language.Switch("English");
            }
            if (FlxInv.Col == 2)
            {
                Framework.Keyboard.Language.Switch("Arabic");
            }
            if (FlxInv.Col == 4)
            {
                Framework.Keyboard.Language.Switch("English");
            }
        }
        private void FlxInv_SelChange(object sender, EventArgs e)
        {
            try
            {
                if (RowSel == 0 || RowSel == FlxInv.Row || FlxInv.Row <= 0 || !(string.Concat(FlxInv.GetData(FlxInv.Row, 1)) != string.Empty))
                {
                    return;
                }
                List<T_Item> listSer = new List<T_Item>();
                listSer = db.StockItemList(string.Concat(FlxInv.GetData(FlxInv.RowSel, 1)));
                if (listSer.Count == 0)
                {
                    return;
                }
                _Items = listSer[0];
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    txtItemName.Text = _Items.Arb_Des.Trim();
                }
                else
                {
                    txtItemName.Text = _Items.Eng_Des.Trim();
                }
                string CoA = string.Empty;
                string CoE = string.Empty;
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_Items.Unit1 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_Items.Unit2 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_Items.Unit3 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_Items.Unit4 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_Items.Unit5 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        break;
                    }
                }
                FlxInv.Cols[3].ComboList = CoA;
                FlxInv.Cols[5].ComboList = CoE;
                txtVCost.Text = string.Concat(Math.Round(_Items.AvrageCost.Value * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))) / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                txtLCost.Text = string.Concat(Math.Round(_Items.LastCost.Value * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))) / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                LastPrice(_Items);
                txtVSerial.Text = _Items.SerialKey ?? string.Empty;
            }
            catch
            {
            }
        }
        private void BindDataOfItem()
        {
            List<T_Item> listSer = new List<T_Item>();
            if ((string)FlxInv.GetData(FlxInv.Row, 1) != string.Empty && FlxInv.GetData(FlxInv.Row, 1) != null)
            {
                listSer = db.StockItemList(FlxInv.GetData(FlxInv.Row, 1).ToString());
                if (listSer.Count != 0)
                {
                    _Items = listSer[0];
                }
            }
            FlxInv.SetData(FlxInv.Row, 1, _Items.Itm_No.Trim());
            FlxInv.SetData(FlxInv.Row, 2, _Items.Arb_Des.Trim());
            FlxInv.SetData(FlxInv.Row, 4, _Items.Eng_Des.Trim());
            if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
            {
                txtItemName.Text = _Items.Arb_Des.Trim();
            }
            else
            {
                txtItemName.Text = _Items.Eng_Des.Trim();
            }
            FlxInv.SetData(FlxInv.Row, 6, 1);
            try
            {
                if (permission.DefStores.HasValue && permission.DefStores.Value > 0)
                {
                    FlxInv.SetData(FlxInv.Row, 6, permission.DefStores.Value);
                }
            }
            catch
            {
                FlxInv.SetData(FlxInv.Row, 6, 1);
            }
            string CoA = string.Empty;
            string CoE = string.Empty;
            string DefUnitA = string.Empty;
            string DefUnitE = string.Empty;
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit1 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    if (_Items.DefultUnit == 1 && DefPack == 0)
                    {
                        Pack = _Items.Pack1.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri1.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack1.Value);
                    }
                    else if (DefPack == 1)
                    {
                        Pack = _Items.Pack1.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri1.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack1.Value);
                    }
                    break;
                }
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit2 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Arb_Des;
                    if (_Items.DefultUnit == 2 && DefPack == 0)
                    {
                        Pack = _Items.Pack2.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri2.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack2.Value);
                    }
                    else if (DefPack == 2)
                    {
                        Pack = _Items.Pack2.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri2.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack2.Value);
                    }
                    break;
                }
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit3 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    if (_Items.DefultUnit == 3 && DefPack == 0)
                    {
                        Pack = _Items.Pack3.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri3.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack3.Value);
                    }
                    else if (DefPack == 3)
                    {
                        Pack = _Items.Pack3.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri3.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack3.Value);
                    }
                    break;
                }
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit4 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    if (_Items.DefultUnit == 4 && DefPack == 0)
                    {
                        Pack = _Items.Pack4.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri4.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack4.Value);
                    }
                    else if (DefPack == 4)
                    {
                        Pack = _Items.Pack4.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri4.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack4.Value);
                    }
                    break;
                }
            }
            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
            {
                _Unit = listUnit[iiCnt];
                if (_Items.Unit5 == _Unit.Unit_ID)
                {
                    if (CoA != string.Empty)
                    {
                        CoA += "|";
                        CoE += "|";
                    }
                    CoA += _Unit.Arb_Des;
                    CoE += _Unit.Eng_Des;
                    if (_Items.DefultUnit == 5 && DefPack == 0)
                    {
                        Pack = _Items.Pack5.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri5.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack5.Value);
                    }
                    else if (DefPack == 5)
                    {
                        Pack = _Items.Pack5.Value;
                        DefUnitA = _Unit.Arb_Des;
                        DefUnitE = _Unit.Eng_Des;
                        FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri5.Value);
                        FlxInv.SetData(FlxInv.Row, 11, _Items.Pack5.Value);
                    }
                    break;
                }
            }
            try
            {
                if (_Items.Unit2.HasValue && _stsClick == 0)
                {
                    FrmItemSize frm = new FrmItemSize(_Items.Itm_No);
                    frm.Tag = LangArEn;
                    frm.TopMost = true;
                    frm.ShowDialog();
                    if (frm.vSts_Op)
                    {
                        if (frm.vSize_ == 0)
                        {
                            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                            {
                                _Unit = listUnit[iiCnt];
                                if (_Items.Unit1 == _Unit.Unit_ID)
                                {
                                    Pack = _Items.Pack1.Value;
                                    DefUnitA = _Unit.Arb_Des;
                                    DefUnitE = _Unit.Eng_Des;
                                    FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri1.Value);
                                    FlxInv.SetData(FlxInv.Row, 11, _Items.Pack1.Value);
                                    break;
                                }
                            }
                        }
                        else if (frm.vSize_ == 1)
                        {
                            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                            {
                                _Unit = listUnit[iiCnt];
                                if (_Items.Unit2 == _Unit.Unit_ID)
                                {
                                    Pack = _Items.Pack2.Value;
                                    DefUnitA = _Unit.Arb_Des;
                                    DefUnitE = _Unit.Eng_Des;
                                    FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri2.Value);
                                    FlxInv.SetData(FlxInv.Row, 11, _Items.Pack2.Value);
                                    break;
                                }
                            }
                        }
                        else if (frm.vSize_ == 2)
                        {
                            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                            {
                                _Unit = listUnit[iiCnt];
                                if (_Items.Unit3 == _Unit.Unit_ID)
                                {
                                    Pack = _Items.Pack3.Value;
                                    DefUnitA = _Unit.Arb_Des;
                                    DefUnitE = _Unit.Eng_Des;
                                    FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri3.Value);
                                    FlxInv.SetData(FlxInv.Row, 11, _Items.Pack3.Value);
                                    break;
                                }
                            }
                        }
                        else if (frm.vSize_ == 3)
                        {
                            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                            {
                                _Unit = listUnit[iiCnt];
                                if (_Items.Unit4 == _Unit.Unit_ID)
                                {
                                    Pack = _Items.Pack4.Value;
                                    DefUnitA = _Unit.Arb_Des;
                                    DefUnitE = _Unit.Eng_Des;
                                    FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri4.Value);
                                    FlxInv.SetData(FlxInv.Row, 11, _Items.Pack4.Value);
                                    break;
                                }
                            }
                        }
                        else
                        {
                            for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                            {
                                _Unit = listUnit[iiCnt];
                                if (_Items.Unit5 == _Unit.Unit_ID)
                                {
                                    Pack = _Items.Pack5.Value;
                                    DefUnitA = _Unit.Arb_Des;
                                    DefUnitE = _Unit.Eng_Des;
                                    FlxInv.SetData(FlxInv.Row, 8, _Items.UntPri5.Value);
                                    FlxInv.SetData(FlxInv.Row, 11, _Items.Pack5.Value);
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        FlxInv.SetData(FlxInv.Row, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) / RateValue);
                        try
                        {
                            if (FlxInv.RowSel > 0)
                            {
                                if (FlxInv.Rows[FlxInv.Row].Height > 33)
                                {
                                    FlxInv.RemoveItem(FlxInv.Row);
                                    FlxInv.RemoveItem(FlxInv.Row);
                                }
                                else
                                {
                                    FlxInv.RemoveItem(FlxInv.Row - 1);
                                    FlxInv.RemoveItem(FlxInv.Row);
                                }
                                GetInvTot();
                            }
                        }
                        catch
                        {
                            FlxInv.SetData(FlxInv.Row, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) / RateValue);
                        }
                    }
                }
                else
                {
                    FlxInv.SetData(FlxInv.Row, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) / RateValue);
                }
            }
            catch
            {
                FlxInv.SetData(FlxInv.Row, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) / RateValue);
            }
            FlxInv.Cols[3].ComboList = CoA;
            FlxInv.Cols[5].ComboList = CoE;
            FlxInv.SetData(FlxInv.Row, 3, DefUnitA);
            FlxInv.SetData(FlxInv.Row, 5, DefUnitE);
            BindDataofItemPrice();
            PermissionPrice(FlxInv.Row, 8, _Sts: false);
            FlxInv.SetData(FlxInv.Row, 10, _Items.AvrageCost / RateValue);
            txtVCost.Text = string.Concat(Math.Round((_Items.AvrageCost * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 11))))).Value / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
            FlxInv.SetData(FlxInv.Row, 30, _Items.LastCost * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 11)))) / RateValue);
            txtLCost.Text = string.Concat(Math.Round((_Items.LastCost * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 11))))).Value / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
            txtVSerial.Text = _Items.SerialKey ?? string.Empty;
            LastPrice(_Items);
            FlxInv.SetData(FlxInv.Row, 28, _Items.Lot);
            if (_Items.Lot == 1)
            {
                FlxInv.Cols[27].Visible = true;
                FlxInv.Cols[35].Visible = true;
            }
            FlxInv.SetData(FlxInv.Row, 32, _Items.ItmTyp);
            FlxInv.SetData(FlxInv.Row, 33, _Items.ItmLoc);
            FlxInv.SetData(FlxInv.Row, 18, _Items.DefPack);
            FlxInv.SetData(FlxInv.Row, 19, _Items.Price1);
            FlxInv.SetData(FlxInv.Row, 20, _Items.Price2);
            FlxInv.SetData(FlxInv.Row, 21, _Items.Price3);
            FlxInv.SetData(FlxInv.Row, 22, _Items.Price4);
            FlxInv.SetData(FlxInv.Row, 23, _Items.Price5);
            if (Balance_Price >= 0.0)
            {
                FlxInv.SetData(FlxInv.Row, 8, Balance_Price);
            }
            else
            {
                FlxInv.SetData(FlxInv.Row, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) / RateValue);
            }
            if (FlxInv.Cols[9].Visible)
            {
                FlxInv.SetData(FlxInv.Row, 9, _Items.ItemDis.Value);
            }
            else
            {
                FlxInv.SetData(FlxInv.Row, 9, 0);
            }
            try
            {
                if (txtCustNo.Text != string.Empty && FlxInv.Cols[9].Visible)
                {
                    T_AccDef h = db.StockAccDef(txtCustNo.Text);
                    if (h.MaxDisCust.Value > 0.0)
                    {
                        if (h.vColNum1.Value == 0.0)
                        {
                            FlxInv.SetData(FlxInv.Row, 9, h.MaxDisCust.Value);
                        }
                        else
                        {
                            FlxInv.SetData(FlxInv.Row, 9, 0);
                        }
                    }
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("MaxDisCust :", error, enable: true);
            }
            try
            {
                if (permission.MaxDiscountSals.Value > 0.0 && double.Parse(FlxInv.GetData(FlxInv.Row, 9).ToString()) > permission.MaxDiscountSals.Value)
                {
                    FlxInv.SetData(FlxInv.Row, 9, 0);
                }
            }
            catch
            {
            }
            if (FlxInv.Cols[31].Visible)
            {
                FlxInv.SetData(FlxInv.Row, 31, VarGeneral.TString.ChkStatShow(_InvSetting.TaxOptions, 2) ? _Items.TaxPurchas : _Items.TaxSales);
            }
            else
            {
                FlxInv.SetData(FlxInv.Row, 31, 0);
            }
            PriceLoc = (double)FlxInv.GetData(FlxInv.Row, 8);
            without = PriceLoc; pricel = without; lastprice = 0;
            BindDataOfStkQty(_Items.Itm_No.Trim());
            if (Balance_Qty >= 0.0)
            {
                FlxInv.SetData(FlxInv.Row, 7, Balance_Qty);
            }
            else
            {
                FlxInv.SetData(FlxInv.Row, 7, 1);
            }
            FlxInv.SetData(FlxInv.Row, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 11)))));
            double ItmDis = 0.0;
            double ItmAddTax = 0.0;
            try
            {
                ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 9)))) / 100.0);
            }
            catch
            {
                ItmDis = 0.0;
            }
            try
            {
                ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
            }
            catch
            {
                ItmAddTax = 0.0;
            }
            if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
            {
                ItmAddTax = 0.0;
            }
            FlxInv.SetData(FlxInv.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) - ItmDis + ItmAddTax);
            if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 38)))) > 0.0)
            {
                ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                FlxInv.SetData(FlxInv.Row, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 38)))) + ItmAddTax);
            }
            if (!chekReptItem(Col_1: true))
            {
                FlxInv.Col = 0;
            }
            else
            {
                FlxInv.Col = 0;
            }
            DefUnitAx = DefUnitA;
            GetInvTot();
            base.ActiveControl = FlxInv;
            FlxInv.Row = FlxInv.Row;
            FlxInv.RowSel = FlxInv.Row;
            FlxInv.Col = 7;
            FlxInv.ColSel = 7;
            if (FlxInv.ColSel == 7 || FlxInv.ColSel == 8 || FlxInv.ColSel == 9 || FlxInv.ColSel == 38)
            {
                PanaHide(Sts: true);
            }
            vQtyGraid = true;
            VarGeneral.Flush();
        }
        private void CheckOffers(string itmNo, string untNm, double vQty, int RowNow, int Ro)
        {
            try
            {
                if (!VarGeneral.CheckDate(txtGDate.Text) || !VarGeneral.CheckDate(txtHDate.Text) || string.IsNullOrEmpty(itmNo) || string.IsNullOrEmpty(untNm))
                {
                    return;
                }
                List<T_OfferDet> q = db.ExecuteQuery<T_OfferDet>("select T_OfferDet.* from  T_OfferDet INNER JOIN T_Offer ON T_OfferDet.OfferID = T_Offer.OfferHeadID where T_OfferDet.ItmNo ='" + itmNo + "' and T_OfferDet.ItmUnt =" + db.T_Units.Where((T_Unit c) => c.Arb_Des == untNm).ToList().FirstOrDefault()
                    .Unit_ID + " and ( '" + txtGDate.Text + "' BETWEEN  T_Offer.StartDat and T_Offer.EndDat or '" + txtHDate.Text + "' BETWEEN  T_Offer.StartDat and T_Offer.EndDat) order by  CONVERT(INT, LEFT(T_Offer.OfferHeadNo, PATINDEX('%[^0-9]%', T_Offer.OfferHeadNo + 'z')-1))", new object[0]).ToList();
                if (q.Count <= 0)
                {
                    return;
                }
                if (q.Where((T_OfferDet g) => g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().Count() > 0)
                {
                    if (!string.IsNullOrEmpty(txtCustNo.Text) && q.Where((T_OfferDet g) => g.T_Offer.CusVenNo == txtCustNo.Text && g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().Count > 0)
                    {
                        try
                        {
                            FlxInv.SetData(Ro, 8, q.Where((T_OfferDet g) => g.T_Offer.CusVenNo == txtCustNo.Text && g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().LastOrDefault()
                                .UnitPriVal.Value);
                            FlxInv_AfterEdit(null, new RowColEventArgs(Ro, 9));
                        }
                        catch
                        {
                        }
                        double QtyX = 1.0;
                        try
                        {
                            double vtot = vQty / q.Where((T_OfferDet g) => g.T_Offer.CusVenNo == txtCustNo.Text && g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().LastOrDefault()
                                .Qty.Value;
                            int i = 0;
                            for (i = 0; i < vtot.ToString().Length && !(vtot.ToString().Substring(i, 1) == "."); i++)
                            {
                            }
                            QtyX = double.Parse(vtot.ToString().Substring(0, i));
                        }
                        catch
                        {
                        }
                        List<T_OfferQFree> offerQFree = q.Where((T_OfferDet g) => g.T_Offer.CusVenNo == txtCustNo.Text && g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().LastOrDefault()
                            .T_OfferQFrees.ToList();
                        FillQFree(offerQFree, RowNow + 1, QtyX);
                    }
                    else
                    {
                        if (q.Where((T_OfferDet g) => string.IsNullOrEmpty(g.T_Offer.CusVenNo) && g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().Count <= 0)
                        {
                            return;
                        }
                        try
                        {
                            FlxInv.SetData(Ro, 8, q.Where((T_OfferDet g) => string.IsNullOrEmpty(g.T_Offer.CusVenNo) && g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().LastOrDefault()
                                .UnitPriVal.Value);
                            FlxInv_AfterEdit(null, new RowColEventArgs(Ro, 9));
                        }
                        catch
                        {
                        }
                        double QtyX = 1.0;
                        try
                        {
                            double vtot = vQty / q.Where((T_OfferDet g) => string.IsNullOrEmpty(g.T_Offer.CusVenNo) && g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().LastOrDefault()
                                .Qty.Value;
                            int i = 0;
                            for (i = 0; i < vtot.ToString().Length && !(vtot.ToString().Substring(i, 1) == "."); i++)
                            {
                            }
                            QtyX = double.Parse(vtot.ToString().Substring(0, i));
                        }
                        catch
                        {
                        }
                        List<T_OfferQFree> offerQFree = q.Where((T_OfferDet g) => string.IsNullOrEmpty(g.T_Offer.CusVenNo) && g.T_Offer.OfferHeadTyp.Value == 1 && g.Qty.Value <= vQty).ToList().LastOrDefault()
                            .T_OfferQFrees.ToList();
                        FillQFree(offerQFree, RowNow + 1, QtyX);
                        return;
                    }
                }
                else
                {
                    if (q.Where((T_OfferDet g) => g.T_Offer.OfferHeadTyp.Value == 0).ToList().Count() <= 0)
                    {
                        return;
                    }
                    if (!string.IsNullOrEmpty(txtCustNo.Text) && q.Where((T_OfferDet g) => g.T_Offer.CusVenNo == txtCustNo.Text && g.T_Offer.OfferHeadTyp.Value == 0).ToList().Count > 0)
                    {
                        FlxInv.SetData(RowNow, 8, q.Where((T_OfferDet g) => g.T_Offer.CusVenNo == txtCustNo.Text && g.T_Offer.OfferHeadTyp.Value == 0).ToList().LastOrDefault()
                            .UnitPriVal.Value);
                        FlxInv_AfterEdit(null, new RowColEventArgs(RowNow, 9));
                    }
                    else if (q.Where((T_OfferDet g) => string.IsNullOrEmpty(g.T_Offer.CusVenNo) && g.T_Offer.OfferHeadTyp.Value == 0).ToList().Count > 0)
                    {
                        FlxInv.SetData(RowNow, 8, q.Where((T_OfferDet g) => string.IsNullOrEmpty(g.T_Offer.CusVenNo) && g.T_Offer.OfferHeadTyp.Value == 0).ToList().LastOrDefault()
                            .UnitPriVal.Value);
                        FlxInv_AfterEdit(null, new RowColEventArgs(RowNow, 9));
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void FillQFree(List<T_OfferQFree> offerQFree, int oldRow, double QtyX)
        {
            FlxInvToCopy.Rows.Count = 1;
            FlxInv.SetData(oldRow - 1, 39, "0");
            double Pack_OfferQFree = 0.0;
            T_Item _ItemsOfferQFree = new T_Item();
            int t = 0;
            int vRowToCopy = oldRow;
            for (int i = oldRow; i < FlxInv.Rows.Count + 1; i++)
            {
                try
                {
                    if (string.Concat(FlxInv.GetData(i, 1)) != string.Empty)
                    {
                        t++;
                    }
                }
                catch
                {
                    break;
                }
            }
            if (t > 0)
            {
                try
                {
                    FlxInvToCopy.Rows.Count += t;
                    for (int i = 1; i <= FlxInvToCopy.Rows.Count; i++)
                    {
                        for (int iicnt = 0; iicnt < FlxInvToCopy.Cols.Count; iicnt++)
                        {
                            FlxInvToCopy.SetData(i, iicnt, FlxInv.GetData(vRowToCopy, iicnt));
                        }
                        vRowToCopy++;
                    }
                }
                catch
                {
                }
            }
            oldRow++;
            for (int i = 0; i < offerQFree.Count; i++)
            {
                FlxInv.Rows.Add();
                FlxInv.Rows[FlxInv.Rows.Count - 1].Height = 35;
                _ItemsOfferQFree = db.StockItem(offerQFree[i].OfferQFreeItmNo);
                FlxInv.SetData(oldRow, 1, _ItemsOfferQFree.Itm_No.Trim());
                FlxInv.SetData(oldRow, 2, _ItemsOfferQFree.Arb_Des.Trim() + " * عرض");
                FlxInv.SetData(oldRow, 4, _ItemsOfferQFree.Eng_Des.Trim() + " * Offer");
                if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                {
                    txtItemName.Text = _ItemsOfferQFree.Arb_Des.Trim();
                }
                else
                {
                    txtItemName.Text = _ItemsOfferQFree.Eng_Des.Trim();
                }
                FlxInv.SetData(oldRow, 6, offerQFree[i].OfferQFreeStoreNo.Value);
                string CoA = string.Empty;
                string CoE = string.Empty;
                string DefUnitA = string.Empty;
                string DefUnitE = string.Empty;
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_ItemsOfferQFree.Unit1 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        if (offerQFree[i].T_Unit.Arb_Des == _Unit.Arb_Des)
                        {
                            Pack_OfferQFree = _ItemsOfferQFree.Pack1.Value;
                            DefUnitA = _Unit.Arb_Des;
                            DefUnitE = _Unit.Eng_Des;
                            FlxInv.SetData(oldRow, 8, offerQFree[i].OfferQFreeUnitPriVal.Value);
                            FlxInv.SetData(oldRow, 11, _ItemsOfferQFree.Pack1.Value);
                        }
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_ItemsOfferQFree.Unit2 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Arb_Des;
                        if (offerQFree[i].T_Unit.Arb_Des == _Unit.Arb_Des)
                        {
                            Pack_OfferQFree = _ItemsOfferQFree.Pack2.Value;
                            DefUnitA = _Unit.Arb_Des;
                            DefUnitE = _Unit.Eng_Des;
                            FlxInv.SetData(oldRow, 8, offerQFree[i].OfferQFreeUnitPriVal.Value);
                            FlxInv.SetData(oldRow, 11, _ItemsOfferQFree.Pack2.Value);
                        }
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_ItemsOfferQFree.Unit3 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        if (offerQFree[i].T_Unit.Arb_Des == _Unit.Arb_Des)
                        {
                            Pack_OfferQFree = _ItemsOfferQFree.Pack3.Value;
                            DefUnitA = _Unit.Arb_Des;
                            DefUnitE = _Unit.Eng_Des;
                            FlxInv.SetData(oldRow, 8, offerQFree[i].OfferQFreeUnitPriVal.Value);
                            FlxInv.SetData(oldRow, 11, _ItemsOfferQFree.Pack3.Value);
                        }
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_ItemsOfferQFree.Unit4 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        if (offerQFree[i].T_Unit.Arb_Des == _Unit.Arb_Des)
                        {
                            Pack_OfferQFree = _ItemsOfferQFree.Pack4.Value;
                            DefUnitA = _Unit.Arb_Des;
                            DefUnitE = _Unit.Eng_Des;
                            FlxInv.SetData(oldRow, 8, offerQFree[i].OfferQFreeUnitPriVal.Value);
                            FlxInv.SetData(oldRow, 11, _ItemsOfferQFree.Pack4.Value);
                        }
                        break;
                    }
                }
                for (int iiCnt = 0; iiCnt < listUnit.Count; iiCnt++)
                {
                    _Unit = listUnit[iiCnt];
                    if (_ItemsOfferQFree.Unit5 == _Unit.Unit_ID)
                    {
                        if (CoA != string.Empty)
                        {
                            CoA += "|";
                            CoE += "|";
                        }
                        CoA += _Unit.Arb_Des;
                        CoE += _Unit.Eng_Des;
                        if (offerQFree[i].T_Unit.Arb_Des == _Unit.Arb_Des)
                        {
                            Pack_OfferQFree = _ItemsOfferQFree.Pack5.Value;
                            DefUnitA = _Unit.Arb_Des;
                            DefUnitE = _Unit.Eng_Des;
                            FlxInv.SetData(oldRow, 8, offerQFree[i].OfferQFreeUnitPriVal.Value);
                            FlxInv.SetData(oldRow, 11, _ItemsOfferQFree.Pack5.Value);
                        }
                        break;
                    }
                }
                FlxInv.Cols[3].ComboList = CoA;
                FlxInv.Cols[5].ComboList = CoE;
                FlxInv.SetData(oldRow, 3, DefUnitA);
                FlxInv.SetData(oldRow, 5, DefUnitE);
                FlxInv.SetData(oldRow, 10, _ItemsOfferQFree.AvrageCost / RateValue);
                txtVCost.Text = string.Concat(Math.Round((_ItemsOfferQFree.AvrageCost * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 11))))).Value / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                FlxInv.SetData(oldRow, 30, _ItemsOfferQFree.LastCost * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 11)))) / RateValue);
                txtLCost.Text = string.Concat(Math.Round((_ItemsOfferQFree.LastCost * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 11))))).Value / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                txtVSerial.Text = _ItemsOfferQFree.SerialKey ?? string.Empty;
                FlxInv.SetData(oldRow, 28, _ItemsOfferQFree.Lot);
                if (_ItemsOfferQFree.Lot == 1)
                {
                    FlxInv.Cols[27].Visible = true;
                    FlxInv.Cols[35].Visible = true;
                }
                FlxInv.SetData(oldRow, 27, offerQFree[i].OfferQFreeDatExper);
                FlxInv.SetData(oldRow, 35, offerQFree[i].OfferQFreeRunCod);
                FlxInv.SetData(oldRow, 32, _ItemsOfferQFree.ItmTyp);
                FlxInv.SetData(oldRow, 33, _ItemsOfferQFree.ItmLoc);
                FlxInv.SetData(oldRow, 18, _ItemsOfferQFree.DefPack);
                FlxInv.SetData(oldRow, 19, _ItemsOfferQFree.Price1);
                FlxInv.SetData(oldRow, 20, _ItemsOfferQFree.Price2);
                FlxInv.SetData(oldRow, 21, _ItemsOfferQFree.Price3);
                FlxInv.SetData(oldRow, 22, _ItemsOfferQFree.Price4);
                FlxInv.SetData(oldRow, 23, _ItemsOfferQFree.Price5);
                FlxInv.SetData(oldRow, 39, "1");
                FlxInv.SetData(oldRow, 8, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 8)))) / RateValue);
                if (FlxInv.Cols[9].Visible)
                {
                    FlxInv.SetData(oldRow, 9, _ItemsOfferQFree.ItemDis.Value);
                }
                else
                {
                    FlxInv.SetData(oldRow, 9, 0);
                }
                if (FlxInv.Cols[31].Visible)
                {
                    FlxInv.SetData(oldRow, 31, offerQFree[i].OfferQFreeItmTax.Value);
                }
                else
                {
                    FlxInv.SetData(oldRow, 31, 0);
                }
                FlxInv.SetData(oldRow, 7, offerQFree[i].OfferQFreeQty.Value * QtyX);
                FlxInv.SetData(oldRow, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 11)))));
                double ItmDis = 0.0;
                double ItmAddTax = 0.0;
                try
                {
                    ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 9)))) / 100.0);
                }
                catch
                {
                    ItmDis = 0.0;
                }
                try
                {
                    if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 36)))) > 0.0)
                    {
                        ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 36)))) / 100.0);
                    }
                }
                catch
                {
                }
                try
                {
                    if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 36)))) > 0.0)
                    {
                        ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 36))));
                    }
                }
                catch
                {
                }
                try
                {
                    ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                }
                catch
                {
                    ItmAddTax = 0.0;
                }
                if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                {
                    ItmAddTax = 0.0;
                }
                FlxInv.SetData(oldRow, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 8)))) - ItmDis + ItmAddTax);
                if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 38)))) > 0.0)
                {
                    ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    FlxInv.SetData(oldRow, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(oldRow, 38)))) + ItmAddTax);
                }
                GetInvTot();
                try
                {
                    FlxInv_AfterEdit(null, new RowColEventArgs(oldRow, 9));
                }
                catch
                {
                }
                FlxInv.Rows[oldRow].StyleNew.BackColor = Color.Gainsboro;
                FlxInv.Rows[oldRow].AllowEditing = false;
                oldRow++;
            }
            if (FlxInvToCopy.Rows.Count <= 0)
            {
                return;
            }
            for (int i = 1; i < FlxInvToCopy.Rows.Count; i++)
            {
                for (int iicnt = 1; iicnt < FlxInvToCopy.Cols.Count; iicnt++)
                {
                    FlxInv.SetData(oldRow, iicnt, FlxInvToCopy.GetData(i, iicnt));
                }
                try
                {
                    if (int.Parse(FlxInv.GetData(oldRow, 39).ToString()) == 1)
                    {
                        FlxInv.Rows[oldRow].StyleNew.BackColor = Color.Gainsboro;
                        FlxInv.Rows[oldRow].AllowEditing = false;
                    }
                }
                catch
                {
                }
                oldRow++;
            }
        }
        private void BindDataOfStkQty(string ItmNo)
        {
            FlxStkQty.Clear(ClearFlags.Content, 1, 1, 1, 1);
            using (Stock_DataDataContext dbC = new Stock_DataDataContext(VarGeneral.BranchCS))
            {
                listStkQty = dbC.T_STKSQTies.Where((T_STKSQTY t) => t.itmNo == ItmNo).ToList();
            }
            FlxInv.SetData(FlxInv.Row, 24, 0);
            for (int iiCnt = 0; iiCnt < listStkQty.Count; iiCnt++)
            {
                _StksQty = listStkQty[iiCnt];
                for (int I = 1; I < FlxStkQty.Rows.Count; I++)
                {
                    if (_StksQty.storeNo.Value.ToString().Trim() == FlxStkQty.GetData(I, 0).ToString())
                    {
                        FlxStkQty.SetData(I, 1, _StksQty.stkQty / double.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(FlxInv.Row, 11).ToString())));
                        if (_StksQty.storeNo.Value.ToString().Trim() == FlxInv.GetData(FlxInv.RowSel, 6).ToString())
                        {
                            FlxInv.SetData(FlxInv.Row, 24, _StksQty.stkQty);
                        }
                    }
                }
            }
        }
        private void chekRept()
        {
            if (State == FormState.Saved || FlxInv.ColSel != 1)
            {
                return;
            }
            for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
            {
                if (string.IsNullOrEmpty(string.Concat(FlxInv.GetData(iiCnt, 1))) || iiCnt == FlxInv.RowSel)
                {
                    continue;
                }
                try
                {
                    if (FlxInv.GetData(iiCnt, 1).ToString() == FlxInv.GetData(FlxInv.RowSel, 1).ToString())
                    {
                        MessageBox.Show((LangArEn == 0) ? "تنبيه . لقد قمت بأدخال هذا الصنف مسبقا\u064b في هذه الفاتورة" : "Alert . You have entered already this product in this bill", VarGeneral.ProdectNam);
                        return;
                    }
                }
                catch
                {
                }
            }
        }
        private bool chekReptItem(bool Col_1)
        {
            if (State != 0 && (FlxInv.ColSel == 38 || FlxInv.ColSel == 7 || FlxInv.ColSel == 8 || Col_1) && VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 17))
            {
                double vQty = 0.0;
                try
                {
                    vQty = double.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(FlxInv.RowSel, 7).ToString()));
                }
                catch
                {
                    vQty = 0.0;
                }
                for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
                {
                    if (string.IsNullOrEmpty(string.Concat(FlxInv.GetData(iiCnt, 1))) || iiCnt == FlxInv.RowSel || !(FlxInv.GetData(iiCnt, 1).ToString() == FlxInv.GetData(FlxInv.RowSel, 1).ToString()) || !(FlxInv.GetData(iiCnt, 11).ToString() == FlxInv.GetData(FlxInv.RowSel, 11).ToString()) || !(FlxInv.GetData(iiCnt, 6).ToString() == FlxInv.GetData(FlxInv.RowSel, 6).ToString()))
                    {
                        continue;
                    }
                    double ItmDis = 0.0;
                    double ItmAddTax = 0.0;
                    try
                    {
                        FlxInv.SetData(FlxInv.RowSel, 7, double.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 7).ToString() ?? string.Empty)) + vQty);
                        double RealQ = 0.0;
                        RealQ = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11))));
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 32)))) == 3.0)
                        {
                            goto IL_0fe1;
                        }
                        if (double.Parse(FlxInv.GetData(FlxInv.RowSel, 24).ToString()) <= 0.0)
                        {
                            if (!VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 1))
                            {
                                MessageBox.Show((LangArEn == 0) ? ("لا يمكن البيع والكمية  " + double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 24)))) + "تأكد من صلاحيات المستخدمين") : ("Can't Sale and the Quantity " + double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 24)))) + " Check the Users Authorizations"), VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                                FlxInv.SetData(FlxInv.RowSel, 7, 0);
                                ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 9)))) / 100.0);
                                try
                                {
                                    if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) > 0.0)
                                    {
                                        ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) / 100.0);
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) > 0.0)
                                    {
                                        ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36))));
                                    }
                                }
                                catch
                                {
                                }
                                ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                                if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                                {
                                    ItmAddTax = 0.0;
                                }
                                FlxInv.SetData(FlxInv.RowSel, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))));
                                FlxInv.SetData(FlxInv.RowSel, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) - ItmDis + ItmAddTax);
                                if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 38)))) > 0.0)
                                {
                                    ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                                    FlxInv.SetData(FlxInv.RowSel, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 38)))) + ItmAddTax);
                                }
                                FlxInv.Row = FlxInv.RowSel;
                                FlxInv.Col = 38;
                                break;
                            }
                            goto IL_0fe1;
                        }
                        if (!(double.Parse(FlxInv.GetData(FlxInv.RowSel, 24).ToString()) < RealQ) || VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 1))
                        {
                            goto IL_0fe1;
                        }
                        MessageBox.Show((LangArEn == 0) ? ("لا يمكن البيع بأكثر من الكمية  " + double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 24)))) + "راجع صلاحيات المستخدمين") : ("Can't Sale More Than available Quantity " + double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 24)))) + " Check the Users Authorizations"), VarGeneral.ProdectNam);
                        FlxInv.SetData(FlxInv.RowSel, 7, 0);
                        ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 9)))) / 100.0);
                        try
                        {
                            if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) > 0.0)
                            {
                                ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) / 100.0);
                            }
                        }
                        catch
                        {
                        }
                        try
                        {
                            if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) > 0.0)
                            {
                                ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36))));
                            }
                        }
                        catch
                        {
                        }
                        ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                        if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                        {
                            ItmAddTax = 0.0;
                        }
                        FlxInv.SetData(FlxInv.RowSel, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))));
                        FlxInv.SetData(FlxInv.RowSel, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) - ItmDis + ItmAddTax);
                        if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 38)))) > 0.0)
                        {
                            ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                            FlxInv.SetData(FlxInv.RowSel, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 38)))) + ItmAddTax);
                        }
                        FlxInv.Row = FlxInv.RowSel;
                        FlxInv.Col = 38;
                        goto end_IL_01da;
                        IL_0fe1:
                        if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 10)))) > double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) && !VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 2))
                        {
                            MessageBox.Show((LangArEn == 0) ? "لا يمكن البيع بأقل من سعر التكلفة . راجع صلاحيات المستخدمين" : "Can't Sale Less Then Cost Price .. Check the Users Authorizations", VarGeneral.ProdectNam);
                            FlxInv.SetData(FlxInv.RowSel, 8, PriceLoc);
                            ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 9)))) / 100.0);
                            try
                            {
                                if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) > 0.0)
                                {
                                    ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) / 100.0);
                                }
                            }
                            catch
                            {
                            }
                            try
                            {
                                if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) > 0.0)
                                {
                                    ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36))));
                                }
                            }
                            catch
                            {
                            }
                            ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                            if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                            {
                                ItmAddTax = 0.0;
                            }
                            FlxInv.SetData(FlxInv.RowSel, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))));
                            FlxInv.SetData(FlxInv.RowSel, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) - ItmDis + ItmAddTax);
                            if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 38)))) > 0.0)
                            {
                                ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                                FlxInv.SetData(FlxInv.RowSel, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 38)))) + ItmAddTax);
                            }
                            FlxInv.Row = FlxInv.RowSel;
                            FlxInv.Col = 38;
                            break;
                        }
                        goto IL_1bd1;
                        end_IL_01da:;
                    }
                    catch
                    {
                        FlxInv.SetData(FlxInv.RowSel, 7, 0);
                        ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 9)))) / 100.0);
                        try
                        {
                            if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) > 0.0)
                            {
                                ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) / 100.0);
                            }
                        }
                        catch
                        {
                        }
                        try
                        {
                            if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36)))) > 0.0)
                            {
                                ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 36))));
                            }
                        }
                        catch
                        {
                        }
                        ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                        if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                        {
                            ItmAddTax = 0.0;
                        }
                        FlxInv.SetData(FlxInv.RowSel, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 11)))));
                        FlxInv.SetData(FlxInv.RowSel, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) - ItmDis + ItmAddTax);
                        if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 38)))) > 0.0)
                        {
                            ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                            FlxInv.SetData(FlxInv.RowSel, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 38)))) + ItmAddTax);
                        }
                    }
                    break;
                    IL_1bd1:
                    FlxInv.SetData(iiCnt, 7, double.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 7).ToString() ?? string.Empty)) + vQty);
                    ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 9)))) / 100.0);
                    try
                    {
                        if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) > 0.0)
                        {
                            ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) / 100.0);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) > 0.0)
                        {
                            ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36))));
                        }
                    }
                    catch
                    {
                    }
                    ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                    {
                        ItmAddTax = 0.0;
                    }
                    if (FlxInv.RowSel > 0)
                    {
                        if (FlxInv.Rows[FlxInv.Row].Height > 33)
                        {
                            mergeflage = 1;
                            FlxInv.RemoveItem(FlxInv.Row);
                            FlxInv.RemoveItem(FlxInv.Row);
                        }
                        else
                        {
                            mergeflage = 1;
                            FlxInv.RemoveItem(FlxInv.Row - 1);
                            FlxInv.RemoveItem(FlxInv.Row);
                        }
                        FlxInv.SetData(iiCnt, 12, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 11)))));
                        FlxInv.SetData(iiCnt, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) - ItmDis + ItmAddTax);
                        if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38)))) > 0.0)
                        {
                            ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                            FlxInv.SetData(iiCnt, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38)))) + ItmAddTax);
                        }
                        GetInvTot();
                        FlxInv.Row = FlxInv.RowSel;
                        FlxInv.Col = 0;
                    }
                    double qty = 0.0;
                    string unt = string.Empty;
                    string itm_nm = string.Empty;
                    try
                    {
                        itm_nm = string.Concat(FlxInv.GetData(iiCnt, 1));
                    }
                    catch
                    {
                        itm_nm = string.Empty;
                    }
                    try
                    {
                        unt = string.Concat(FlxInv.GetData(iiCnt, 3));
                    }
                    catch
                    {
                        unt = string.Empty;
                    }
                    try
                    {
                        qty = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7))));
                    }
                    catch
                    {
                        qty = 0.0;
                    }
                    if (CmbInvSide.SelectedIndex <= 0)
                    {
                        RemoveOFFerLines(iiCnt); mergeflage = 1;
                        CheckOffers(itm_nm, unt, qty, iiCnt, iiCnt);
                    }
                    return true;
                }
            }
            return false;
        }
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.mergeflage' is assigned but its value is never used
        int mergeflage = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.mergeflage' is assigned but its value is never used
        private void BindDataofItemPrice()
        {
            if (CmbInvPrice.SelectedIndex == 1 && _Items.Price1.HasValue)
            {
                FlxInv.SetData(FlxInv.Row, 8, _Items.Price1.Value / _Items.DefPack.Value * Pack / RateValue);
            }
            else if (CmbInvPrice.SelectedIndex == 2 && _Items.Price2.HasValue)
            {
                FlxInv.SetData(FlxInv.Row, 8, _Items.Price2.Value / _Items.DefPack.Value * Pack / RateValue);
            }
            else if (CmbInvPrice.SelectedIndex == 3 && _Items.Price3.HasValue)
            {
                FlxInv.SetData(FlxInv.Row, 8, _Items.Price3.Value / _Items.DefPack.Value * Pack / RateValue);
            }
            else if (CmbInvPrice.SelectedIndex == 4 && _Items.Price4.HasValue)
            {
                FlxInv.SetData(FlxInv.Row, 8, _Items.Price4.Value / _Items.DefPack.Value * Pack / RateValue);
            }
            else if (CmbInvPrice.SelectedIndex == 5 && _Items.Price5.HasValue)
            {
                FlxInv.SetData(FlxInv.Row, 8, _Items.Price5.Value / _Items.DefPack.Value * Pack / RateValue);
            }
            try
            {
                if (string.IsNullOrEmpty(txtCustNo.Text))
                {
                    return;
                }
                T_AccDef q = db.StockAccDefWithOutBalance(txtCustNo.Text);
                if (q != null && !string.IsNullOrEmpty(q.AccDef_No) && q.Price > 0)
                {
                    if (q.Price == 1 && _Items.Price1.HasValue)
                    {
                        FlxInv.SetData(FlxInv.Row, 8, _Items.Price1.Value / _Items.DefPack.Value * Pack / RateValue);
                    }
                    else if (q.Price == 2 && _Items.Price2.HasValue)
                    {
                        FlxInv.SetData(FlxInv.Row, 8, _Items.Price2.Value / _Items.DefPack.Value * Pack / RateValue);
                    }
                    else if (q.Price == 3 && _Items.Price3.HasValue)
                    {
                        FlxInv.SetData(FlxInv.Row, 8, _Items.Price3.Value / _Items.DefPack.Value * Pack / RateValue);
                    }
                    else if (q.Price == 4 && _Items.Price4.HasValue)
                    {
                        FlxInv.SetData(FlxInv.Row, 8, _Items.Price4.Value / _Items.DefPack.Value * Pack / RateValue);
                    }
                    else if (q.Price == 5 && _Items.Price5.HasValue)
                    {
                        FlxInv.SetData(FlxInv.Row, 8, _Items.Price5.Value / _Items.DefPack.Value * Pack / RateValue);
                    }
                }
            }
            catch
            {
            }
        }
        private void FlxDat_DoubleClick(object sender, EventArgs e)
        {
            if (FlxDat.MouseRow > 0)
            {
                FlxInv.SetData(FlxInv.Row, 27, FlxDat.GetData(FlxDat.Row, 0));
                FlxInv.SetData(FlxInv.Row, 24, FlxDat.GetData(FlxDat.Row, 1));
                FlxInv.SetData(FlxInv.Row, 35, FlxDat.GetData(FlxDat.Row, 2));
                FlxDat.Visible = false;
                FlxInv.Col = 6;
                FlxInv.Focus();
            }
        }
        private void FlxDat_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Return && FlxDat.Row > 0)
            {
                FlxInv.SetData(FlxInv.Row, 27, FlxDat.GetData(FlxDat.Row, 0));
                FlxInv.SetData(FlxInv.Row, 24, FlxDat.GetData(FlxDat.Row, 1));
                FlxInv.SetData(FlxInv.Row, 35, FlxDat.GetData(FlxDat.Row, 2));
                FlxDat.Visible = false;
                FlxInv.Col = 6;
                FlxInv.Focus();
            }
        }
        private void FlxDat_Leave(object sender, EventArgs e)
        {
            if (FlxDat.Visible && State == FormState.New)
            {
                FlxDat.Focus();
            }
            else
            {
                FlxDat.Visible = false;
            }
        }
        public void Button_Print_Click(object sender, EventArgs e)
        {
            if (ViewState == ViewState.Table)
            {
                VarGeneral.InvType = 21;
                FRInvoice form1 = new FRInvoice(VarGeneral.InvTyp, LangArEn);
                form1.Tag = LangArEn.ToString();
                form1.StartPosition = FormStartPosition.CenterScreen;
                form1.TopMost = true;
                form1.ShowDialog();
            }
        }
        private void GetInvTot()
        {
            double InvTot = 0.0;
            double InvCost = 0.0;
            double InvQty = 0.0;
            double InvDis = 0.0;
            double InvTax = 0.0;
            double ItmDisCount = 0.0;
            if (State != 0 || convertflag == 1)
            {
                InvDis = double.Parse(VarGeneral.TString.TEmpty(txtDiscountVal.Text));
                try
                {
                    InvDis += txtDiscoundPoints.Value;
                }
                catch
                {
                }
                for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
                {
                    try
                    {
                        if (FlxInv.Rows[iiCnt].Height <= 33)
                        {
                            continue;
                        }
                        InvTot += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38))));
                        InvCost += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 10)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12))));
                        InvQty += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7))));
                        if (switchButton_TaxByTotal.Value)
                        {
                            double DisVal = 0.0;
                            try
                            {
                                DisVal = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 9)))) / 100.0);
                            }
                            catch
                            {
                            }
                            InvTax += (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) - DisVal) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))) / 100.0);
                        }
                        else
                        {
                            InvTax += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))) / 100.0);
                        }
                        ItmDisCount += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 9)))) / 100.0);
                        try
                        {
                            if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) > 0.0)
                            {
                                ItmDisCount += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) / 100.0);
                            }
                        }
                        catch
                        {
                        }
                        try
                        {
                            if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) > 0.0)
                            {
                                ItmDisCount += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36))));
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch
                    {
                    }
                }
                txtTotalAm.Text = VarGeneral.TString.TEmpty(Math.Round(InvTot * RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                txtDueAmount.Text = VarGeneral.TString.TEmpty(Math.Round((InvTot - InvDis) * RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                txtTotalQ.Text = VarGeneral.TString.TEmpty(InvQty.ToString());
                txtInvCost.Text = VarGeneral.TString.TEmpty(Math.Round(InvCost, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                txtCustNet.Text = VarGeneral.TString.TEmpty(Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(txtCustRep.Value))) + double.Parse(txtDueAmountLoc.Text), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                txtTotalAmLoc.Text = VarGeneral.TString.TEmpty(Math.Round(InvTot, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                txtDueAmountLoc.Text = VarGeneral.TString.TEmpty(Math.Round(InvTot - InvDis, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                double Tax_Per = 0.0;
                try
                {
                    Tax_Per = double.Parse(textBoxItem_TaxByNetValue.Text);
                }
                catch
                {
                    Tax_Per = 0.0;
                }
                if (switchButton_TaxByNet.Value)
                {
                    InvTax = ((!(Tax_Per <= 0.0) && !(txtDueAmountLoc.Value <= 0.0)) ? Math.Round(txtDueAmountLoc.Value * Tax_Per / 100.0, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2) : 0.0);
                }
                txtTotTax.Text = VarGeneral.TString.TEmpty(Math.Round(InvTax, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                txtTotTaxLoc.Text = VarGeneral.TString.TEmpty(Math.Round(InvTax * RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                if (switchButton_TaxLines.Value)
                {
                    if (!switchButton_Tax.Value)
                    {
                        txtDueAmount.Text = VarGeneral.TString.TEmpty(Math.Round((InvTot - InvTax - InvDis) * RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                    }
                    if (!switchButton_Tax.Value)
                    {
                        txtDueAmountLoc.Text = VarGeneral.TString.TEmpty(Math.Round(InvTot - InvTax - InvDis, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                    }
                    if (switchButton_TaxByNet.Value && InvTax > 0.0)
                    {
                        if (switchButton_Tax.Value)
                        {
                            txtDueAmount.Text = VarGeneral.TString.TEmpty(Math.Round((InvTot + InvTax - InvDis) * RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                        }
                        if (switchButton_Tax.Value)
                        {
                            txtDueAmountLoc.Text = VarGeneral.TString.TEmpty(Math.Round(InvTot + InvTax - InvDis, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                        }
                    }
                }
                else
                {
                    if (switchButton_Tax.Value)
                    {
                        txtDueAmount.Text = VarGeneral.TString.TEmpty(Math.Round((InvTot + InvTax - InvDis) * RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                    }
                    if (switchButton_Tax.Value)
                    {
                        txtDueAmountLoc.Text = VarGeneral.TString.TEmpty(Math.Round(InvTot + InvTax - InvDis, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2).ToString());
                    }
                }
                txtTotDis.Value = (switchButton_Dis.Value ? (txtDiscountVal.Value + ItmDisCount) : txtDiscountVal.Value);
                txtTotDisLoc.Value = (switchButton_Dis.Value ? (txtDiscountValLoc.Value + ItmDisCount) : txtDiscountValLoc.Value);
                txtTotDis.Value += txtDiscoundPoints.Value;
                txtTotDisLoc.Value += txtDiscoundPointsLoc.Value;
                try
                {
                    if (switchButton_Dis.Value && ItmDisCount > 0.0)
                    {
                        txtTotalAm.Value += Math.Round(ItmDisCount * RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                        txtTotalAmLoc.Value += Math.Round(ItmDisCount, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    }
                }
                catch
                {
                }
                CommCalculat();
                if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 56))
                {
                    txtTotalAm.Value = Math.Round(txtTotalAm.Value, 0);
                    txtDueAmount.Value = Math.Round(txtDueAmount.Value, 0);
                    txtTotalAmLoc.Value = Math.Round(txtTotalAmLoc.Value, 0);
                    txtDueAmountLoc.Value = Math.Round(txtDueAmountLoc.Value, 0);
                }
                try
                {
                    if (checkBox_CostGaidTax.Checked && txtPaymentLoc.Value + doubleInput_NetWorkLoc.Value + doubleInput_CreditLoc.Value != txtDueAmountLoc.Value - txtTotTax.Value)
                    {
                        txtDueAmountLoc_ValueChanged(null, null);
                    }
                }
                catch
                {
                }
                try
                {
                    if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 62))
                    {
                        doubleInput_LostOrWin.Value = txtDueAmountLoc.Value - txtInvCost.Value;
                    }
                    else
                    {
                        doubleInput_LostOrWin.Value = txtDueAmountLoc.Value - txtInvCost.Value - txtTotTax.Value;
                    }
                }
                catch
                {
                    doubleInput_LostOrWin.Value = 0.0;
                }
            }
            if (FlxInv.Rows.Count <= 1)
            {
                button_DeleteLine.Visible = false;
            }

            if (!VarGeneral.Settings_Sys.IsCustomerDisplay.Value && !VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 73))
            {
                FillFrmBranch();
            }
        }
        private void CustomerDisplayData(double _vTot, double _price)
        {
            try
            {
                SerialPort sport = new SerialPort(VarGeneral.Settings_Sys.Port, VarGeneral.Settings_Sys.Fast.Value, (VarGeneral.Settings_Sys.Parity.Value == 1) ? Parity.Even : ((VarGeneral.Settings_Sys.Parity.Value == 2) ? Parity.Mark : ((VarGeneral.Settings_Sys.Parity.Value != 3) ? ((VarGeneral.Settings_Sys.Parity.Value == 4) ? Parity.Odd : Parity.Space) : Parity.None)), VarGeneral.Settings_Sys.BitData.Value, (VarGeneral.Settings_Sys.BitStop.Value == 1) ? StopBits.One : ((VarGeneral.Settings_Sys.BitStop.Value == 2) ? StopBits.OnePointFive : StopBits.Two));
                sport.Open();
                sport.Write(new byte[1]
                {
                    12
                }, 0, 1);
                sport.Write(VarGeneral.Settings_Sys.CustomerHello);
                sport.Write(new byte[2]
                {
                    10,
                    13
                }, 0, 2);
                if (VarGeneral.Settings_Sys.DisplayTypeShow.Value == 0)
                {
                    sport.Write("Price:" + _price + " Total:" + _vTot);
                }
                else if (VarGeneral.Settings_Sys.DisplayTypeShow.Value == 1)
                {
                    sport.Write("Price:" + _price);
                }
                else
                {
                    sport.Write(" Total:" + _vTot);
                }
                sport.Close();
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("CustomerDisplayData :", error, enable: true);
            }
        }
        private void CommCalculat()
        {
            try
            {
                if (switchButton_BankComm.Value && doubleInput_NetWorkLoc.Value > 0.0 && !string.IsNullOrEmpty(txtDebit3.Text))
                {
                    txtTotBankComm.Value = doubleInput_NetWorkLoc.Value * db.StockAccDefWithOutBalance(txtDebit3.Tag.ToString()).BankComm.Value;
                    txtTotBankCommLoc.Value = Math.Round(txtTotBankComm.Value * RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                }
                else
                {
                    txtTotBankComm.Value = 0.0;
                    txtTotBankCommLoc.Value = 0.0;
                }
            }
            catch
            {
            }
        }
        private void CmbCurr_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (CmbCurr.SelectedIndex == -1)
                {
                    return;
                }
                _Curency = db.StockCurencyID(int.Parse(CmbCurr.SelectedValue.ToString()));
                try
                {
                    label_Curr.Text = CmbCurr.Text;
                }
                catch
                {
                }
                try
                {
                    if (CmbCurr.SelectedValue.ToString() == VarGeneral.Settings_Sys.ImportIp.ToString())
                    {
                        RateValue = 1.0;
                        doubleInput_Rate.Value = 1.0;
                    }
                    else
                    {
                        RateValue = _Curency.Rate.Value;
                        try
                        {
                            doubleInput_Rate.Value = _Curency.Rate.Value;
                        }
                        catch
                        {
                        }
                    }
                }
                catch
                {
                    RateValue = _Curency.Rate.Value;
                    try
                    {
                        doubleInput_Rate.Value = _Curency.Rate.Value;
                    }
                    catch
                    {
                    }
                }
                try
                {
                    GetInvTot();
                    txtDiscountVal_Leave(sender, e);
                }
                catch
                {
                }
            }
            catch
            {
            }
        }
        private void txtDiscountP_Leave(object sender, EventArgs e)
        {
            if (State != 0)
            {
                txtDiscountVal.Value = txtTotalAmLoc.Value * (txtDiscountP.Value / 100.0);
                txtDiscountValLoc.Value = txtDiscountVal.Value * RateValue;
                GetInvTot();
            }
        }
        private void txtDiscountVal_Leave(object sender, EventArgs e)
        {
            if (State == FormState.Saved)
            {
                return;
            }
            try
            {
                if (txtTotalAm.Value > 0.0)
                {
                    txtDiscountP.Value = Math.Round(txtDiscountVal.Value / txtTotalAmLoc.Value * 100.0, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                }
            }
            catch
            {
            }
            txtDiscountValLoc.Value = txtDiscountVal.Value * RateValue;
            GetInvTot();
        }
        private void txtDueAmountLoc_ValueChanged(object sender, EventArgs e)
        {
            if (State != 0)
            {
                //if (checkBox_Chash.Checked)
                //{
                //    txtPaymentLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value);
                //    doubleInput_CreditLoc.Value = 0.0;
                //    doubleInput_NetWorkLoc.Value = 0.0;
                //}
                //else
                //{
                //    doubleInput_CreditLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value);
                //    txtPaymentLoc.Value = 0.0;
                //    doubleInput_NetWorkLoc.Value = 0.0;
                //}
                if (checkBox_Chash.Checked)
                {
                    txtPaymentLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value);
                    doubleInput_CreditLoc.Value = 0.0;
                    doubleInput_NetWorkLoc.Value = 0.0;
                }
                else if (checkBox_NetWork.Checked)
                {
                    doubleInput_NetWorkLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value);
                    txtPaymentLoc.Value = 0.0;
                    doubleInput_CreditLoc.Value = 0.0;
                }
                else
                {
                    doubleInput_CreditLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value);
                    txtPaymentLoc.Value = 0.0;
                    doubleInput_NetWorkLoc.Value = 0.0;
                }
            }

            Lab_DueAmountLoc.Text = txtDueAmountLoc.Text +"   (SR) " ;

        }
        private void txtRemark_ButtonCustomClick(object sender, EventArgs e)
        {
            ControlNo = 3;
            CheckSts(ControlNo);
        }
        private void checkBoxItem_BarCode_CheckedChanged(object sender, CheckBoxChangeEventArgs e)
        {
            try
            {
                if (checkBoxItem_BarCode.Checked)
                {
                    Status_Bar.Visible = false;
                    puBar1.Enabled = false;
                    puBar1.Button_Search.Enabled = false;
                    puBar1.Button_Delete.Enabled = false;
                    buttonItem_Print.Enabled = false;
                    puBar1.buttonItem_Print.Enabled = false;
                    expandableSplitter1.Expandable = false;
                    Button_Add_Click(sender, e);
                    textBox_Barcode.Focus();
                    //buttonItem_SaveOrder.Visible = true;
                    return;
                }
                puBar1.Visible = true;
                Status_Bar.Visible = true;
                puBar1.Enabled = true;
                puBar1.Button_Search.Enabled = true;
                 puBar1.Button_Add.Enabled = true;
                puBar1.Button_Delete.Enabled = true;
                buttonItem_Print.Enabled = true;
                puBar1.buttonItem_Print.Enabled = true;
                expandableSplitter1.Expandable = true;
                State = FormState.Saved;
                dbInstance = null;
                if (pkeys.Count == 1)
                {
                    Button_First_Click(sender, e);
                }
                else
                {
                    textBox_ID.TextChanged -= textBox_ID_TextChanged;
                    try
                    {
                        if (string.IsNullOrEmpty(textBox_ID.Text))
                        {
                            textBox_ID.Text = PKeys.FirstOrDefault();
                        }
                    }
                    catch
                    {
                    }
                    textBox_ID.TextChanged += textBox_ID_TextChanged;
                    textBox_ID_TextChanged(sender, e);
                }
                SetReadOnly = true;
                if (State != FormState.New)
                {
                    button_AddToTable.Visible = false;
                }
                //buttonItem_SaveOrder.Visible = false;
            }
            catch (Exception exe)
            {
                MessageBox.Show(exe.ToString());
            }
        }
        private void txtDebit1_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 4;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtDebit1.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit1.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtDebit1.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtDebit1.Text = string.Empty;
                    txtDebit1.Tag = string.Empty;
                }
            }
            catch
            {
                txtDebit1.Text = string.Empty;
                txtDebit1.Tag = string.Empty;
            }
        }
        private void txtDebit2_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 4;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtDebit2.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit2.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtDebit2.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtDebit2.Text = string.Empty;
                    txtDebit2.Tag = string.Empty;
                }
            }
            catch
            {
                txtDebit2.Text = string.Empty;
                txtDebit2.Tag = string.Empty;
            }
        }
        private void txtDebit3_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 4;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtDebit3.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit3.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtDebit3.Text = _AccDef.Eng_Des;
                    }
                    if (State != 0)
                    {
                        CommCalculat();
                    }
                }
                else
                {
                    txtDebit3.Text = string.Empty;
                    txtDebit3.Tag = string.Empty;
                }
            }
            catch
            {
                txtDebit3.Text = string.Empty;
                txtDebit3.Tag = string.Empty;
            }
        }
        private void txtCredit1_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 4;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtCredit1.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit1.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtCredit1.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtCredit1.Text = string.Empty;
                    txtCredit1.Tag = string.Empty;
                }
            }
            catch
            {
                txtCredit1.Text = string.Empty;
                txtCredit1.Tag = string.Empty;
            }
        }
        private void txtCredit2_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 4;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtCredit2.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit2.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtCredit2.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtCredit2.Text = string.Empty;
                    txtCredit2.Tag = string.Empty;
                }
            }
            catch
            {
                txtCredit2.Text = string.Empty;
                txtCredit2.Tag = string.Empty;
            }
        }
        private void txtCredit3_ButtonCustomClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            Button_Edit_Click(sender, e);
            columns_Names_visible2.Clear();
            columns_Names_visible2.Clear();
            columns_Names_visible2.Add("AccDef_No", new ColumnDictinary("الرقم ", " No", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
            columns_Names_visible2.Add("AccDef_ID", new ColumnDictinary(" ", " ", ifDefault: false, string.Empty));
            columns_Names_visible2.Add("Mobile", new ColumnDictinary("الجوال", "Mobile", ifDefault: false, string.Empty));
            FrmSearch frm = new FrmSearch();
            frm.Tag = LangArEn;
            ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
            foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
            {
                frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
            }
            if (VarGeneral.SSSTyp == 0)
            {
                VarGeneral.SFrmTyp = "T_AccDef";
                VarGeneral.AccTyp = 4;
            }
            else
            {
                VarGeneral.SFrmTyp = "AccDefID_Setting";
            }
            frm.TopMost = true;
            frm.ShowDialog();
            try
            {
                if (frm.SerachNo != string.Empty)
                {
                    T_AccDef _AccDef = db.StockAccDefs(int.Parse(frm.Serach_No));
                    txtCredit3.Tag = _AccDef.AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit3.Text = _AccDef.Arb_Des;
                    }
                    else
                    {
                        txtCredit3.Text = _AccDef.Eng_Des;
                    }
                }
                else
                {
                    txtCredit3.Text = string.Empty;
                    txtCredit3.Tag = string.Empty;
                }
            }
            catch
            {
                txtCredit3.Text = string.Empty;
                txtCredit3.Tag = string.Empty;
            }
        }
        private void txtCustNo_TextChanged(object sender, EventArgs e)
        {
            if (!(this.txtCustNo.Text != ""))
            {
                txtCustName.ReadOnly = false;
                txtTele.ReadOnly = false;
                txtAddress.ReadOnly = false;
                text_Mobile.Text = string.Empty;
                text_Mobile.ReadOnly = false;
                try
                {
                    T_AccDef h = db.StockAccDefsByAcNO(txtCustNo.Text);
                    text_Mobile.Text = h.Mobile;
                }
                catch { }
            }
            else
            {
                // txtCustName.ReadOnly = false;
                //  txtTele.ReadOnly = false;
                //   txtAddress.ReadOnly = false;
                text_Mobile.Text = string.Empty;
                //     text_Mobile.ReadOnly = false;

                txtCustName.ReadOnly = true;
                txtTele.ReadOnly = true;
                txtAddress.ReadOnly = true;
                text_Mobile.ReadOnly = true;
            }
        }
        private void button_CustD1_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCustNo.Text))
            {
                Button_Edit_Click(sender, e);
                txtDebit1.Tag = txtCustNo.Text;
                txtDebit1.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(txtCustNo.Text).Arb_Des : db.SelectAccRootByCode(txtCustNo.Text).Eng_Des);
            }
        }
        private void button_CustD2_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCustNo.Text))
            {
                Button_Edit_Click(sender, e);
                txtDebit2.Tag = txtCustNo.Text;
                txtDebit2.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(txtCustNo.Text).Arb_Des : db.SelectAccRootByCode(txtCustNo.Text).Eng_Des);
            }
        }
        private void button_CustD3_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCustNo.Text))
            {
                Button_Edit_Click(sender, e);
                txtDebit3.Tag = txtCustNo.Text;
                txtDebit3.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(txtCustNo.Text).Arb_Des : db.SelectAccRootByCode(txtCustNo.Text).Eng_Des);
            }
        }
        private void button_CustC1_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCustNo.Text))
            {
                Button_Edit_Click(sender, e);
                txtCredit1.Tag = txtCustNo.Text;
                txtCredit1.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(txtCustNo.Text).Arb_Des : db.SelectAccRootByCode(txtCustNo.Text).Eng_Des);
            }
        }
        private void button_CustC2_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCustNo.Text))
            {
                Button_Edit_Click(sender, e);
                txtCredit2.Tag = txtCustNo.Text;
                txtCredit2.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(txtCustNo.Text).Arb_Des : db.SelectAccRootByCode(txtCustNo.Text).Eng_Des);
            }
        }
        private void button_CustC3_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCustNo.Text))
            {
                Button_Edit_Click(sender, e);
                txtCredit3.Tag = txtCustNo.Text;
                txtCredit3.Text = ((LangArEn == 0) ? db.SelectAccRootByCode(txtCustNo.Text).Arb_Des : db.SelectAccRootByCode(txtCustNo.Text).Eng_Des);
            }
        }
        private void LastPrice(T_Item vItm)
        {
            try
            {
                var q = (from t in db.T_INVDETs
                         where t.T_INVHED.InvTyp == (int?)VarGeneral.InvTyp
                         where t.ItmNo == vItm.Itm_No
                         orderby t.T_INVHED.InvHed_ID descending
                         select new
                         {
                             t.InvNo,
                             t.Price,
                             t.ItmUnt,
                             t.ItmUntE,
                             t.InvSer
                         }).ToList();
                if (q.Count > 0)
                {
                    T_INVHED vInvH = db.StockInvHead(VarGeneral.InvTyp, q.First().InvNo);
                    txtLPrice.Text = string.Concat(Math.Round(vInvH.T_INVDETs.Where((T_INVDET g) => g.ItmNo == vItm.Itm_No).Last().Price.Value / RateValue, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
                    txtUnit.Text = ((LangArEn == 0) ? vInvH.T_INVDETs.Last().ItmUnt : vInvH.T_INVDETs.Last().ItmUntE);
                }
                else
                {
                    txtLPrice.Text = "0";
                    txtUnit.Text = string.Empty;
                }
            }
            catch
            {
                txtLPrice.Text = "0";
                txtUnit.Text = string.Empty;
            }
        }
        private void doubleInput_NetWorkLoc_Leave(object sender, EventArgs e)
        {
            try
            {
                if (doubleInput_NetWorkLoc.Value > 0.0)
                {
                    if (txtPaymentLoc.Value > 0.0 || doubleInput_CreditLoc.Value > 0.0)
                    {
                        if (txtPaymentLoc.Value > 0.0 && doubleInput_CreditLoc.Value > 0.0)
                        {
                            return;
                        }
                        if (txtPaymentLoc.Value > 0.0)
                        {
                            txtPaymentLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - doubleInput_NetWorkLoc.Value;
                        }
                        else
                        {
                            doubleInput_CreditLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - doubleInput_NetWorkLoc.Value;
                        }
                    }
                    else
                    {
                        txtPaymentLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - doubleInput_NetWorkLoc.Value;
                    }
                }
            }
            catch
            {
                doubleInput_NetWorkLoc.Value = 0.0;
                doubleInput_NetWorkLoc.Leave -= doubleInput_NetWorkLoc_Leave;
            }
            if (State != 0)
            {
                CommCalculat();
            }
        }
        private void txtPaymentLoc_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!(txtPaymentLoc.Value > 0.0))
                {
                    return;
                }
                if (doubleInput_CreditLoc.Value > 0.0 || doubleInput_NetWorkLoc.Value > 0.0)
                {
                    if (!(doubleInput_CreditLoc.Value > 0.0) || !(doubleInput_NetWorkLoc.Value > 0.0))
                    {
                        if (doubleInput_CreditLoc.Value > 0.0)
                        {
                            doubleInput_CreditLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - txtPaymentLoc.Value;
                        }
                        else
                        {
                            doubleInput_NetWorkLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - txtPaymentLoc.Value;
                        }
                    }
                }
                else
                {
                    doubleInput_NetWorkLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - txtPaymentLoc.Value;
                }
            }
            catch
            {
                txtPaymentLoc.Value = 0.0;
                txtPaymentLoc.Leave -= txtPaymentLoc_Leave;
            }
        }
        private void doubleInput_CreditLoc_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!(doubleInput_CreditLoc.Value > 0.0))
                {
                    return;
                }
                if (txtPaymentLoc.Value > 0.0 || doubleInput_NetWorkLoc.Value > 0.0)
                {
                    if (!(txtPaymentLoc.Value > 0.0) || !(doubleInput_NetWorkLoc.Value > 0.0))
                    {
                        if (txtPaymentLoc.Value > 0.0)
                        {
                            txtPaymentLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - doubleInput_CreditLoc.Value;
                        }
                        else
                        {
                            doubleInput_NetWorkLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - doubleInput_CreditLoc.Value;
                        }
                    }
                }
                else
                {
                    txtPaymentLoc.Value = (checkBox_CostGaidTax.Checked ? (txtDueAmountLoc.Value - txtTotTax.Value) : txtDueAmountLoc.Value) - doubleInput_CreditLoc.Value;
                }
            }
            catch
            {
                doubleInput_CreditLoc.Value = 0.0;
                doubleInput_CreditLoc.Leave -= doubleInput_CreditLoc_Leave;
            }
        }
        private void txtPayment_Leave(object sender, EventArgs e)
        {
            if (txtPayment.Value > 0.0)
            {
                txtSteel.Value = txtPayment.Value - txtDueAmountLoc.Value;
            }
            else
            {
                txtSteel.Value = 0.0;
            }
        }
        private void txtSteel_ValueChanged(object sender, EventArgs e)
        {
            if (txtSteel.Value > 0.0)
            {
                label16.Text = ((LangArEn == 0) ? "متبقي للعميل :" : "Remaining :");
            }
            else if (txtSteel.Value < 0.0)
            {
                label16.Text = ((LangArEn == 0) ? "متبقي عليه :" : "Remaining :");
            }
            else
            {
                label16.Text = ((LangArEn == 0) ? "إجمالي المتبقي :" : "Remaining :");
            }
        }
        private void FrmInvSalePoint_SizeChanged(object sender, EventArgs e)
        {


            if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 72))
            {
                FlxInv.Cols[2].Width = 150 + FlxInv.Width / 8;
                FlxInv.Cols[4].Width = 150 + FlxInv.Width / 8;
                FlxInv.Cols[3].Width = 64 + FlxInv.Width / 15;
                FlxInv.Cols[5].Width = 64 + FlxInv.Width / 15;
                FlxInv.Cols[6].Width = 45 + FlxInv.Width / 15;
                FlxInv.Cols[7].Width = 60 + FlxInv.Width / 15;
                FlxInv.Cols[8].Width = 60 + FlxInv.Width / 15;
                FlxInv.Cols[38].Width = 70 + FlxInv.Width / 15;
                if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 72))
                {

                    poS_ItemsPanel1.Visible = false; DetailsPanel.Dock = DockStyle.Fill;
                }

            }

            else
            {
                DetailsPanel.Dock = DockStyle.Left;


            }

            FillCat();


            textBox_Barcode.Focus();
        }
        private void metroTilePanel_Cat_ItemClick(object sender, EventArgs e)
        {
            try
            {
                if (CmbLegate.SelectedIndex <= 0 && CmbInvSide.SelectedIndex == 1)
                {
                    MessageBox.Show((LangArEn == 0) ? "يجب تحديد المندوب الخارجي لهذه البضاعة قبل عرض الأصناف" : "You must specify the external representative of these goods ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    CmbLegate.Focus();
                    return;
                }
                if (CmbInvSide.SelectedIndex > 1 && txtCustNo.Text == string.Empty && VarGeneral.SSSLev != "M")
                {
                    MessageBox.Show((LangArEn == 0) ? "يجب تحديد العميل / المورد لهذه البضاعة قبل عرض الأصناف" : "You must specify the Customer/Supplier of these goods ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    CmbLegate.Focus();
                    return;
                }
                MetroTileItem q = sender as MetroTileItem;
                if (string.IsNullOrEmpty(q.Tag.ToString()))
                {
                    ItmMainParameter = string.Empty;
                    return;
                }
                ItmMainParameter = q.Tag.ToString();
                FillItmesMain(null, vBestSaller: false);
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("metroTilePanel_Cat_ItemClick:", error, enable: true);
                Refresh();
            }
        }
        private void FillItmesMain(GridCell vSender, bool vBestSaller)
        {
            List<T_Item> vItemsMain = new List<T_Item>();
            Stock_DataDataContext dbc = new Stock_DataDataContext(VarGeneral.BranchCS);
            vItemsMain = (from t in dbc.T_Items
                          where t.ItmTyp != (int?)1 && !t.InvSaleStoped.Value
                          orderby t.Itm_ID
                          select t).ToList();
            if (vSender != null)
            {
                //   vSender.Checked = true;
                if (int.Parse(vSender.Tag.ToString()) != 0)
                {
                    vItemsMain = (from t in dbc.T_Items
                                  where t.ItmCat == (int?)int.Parse(vSender.Tag.ToString())
                                  where t.ItmTyp != (int?)1 && !t.InvSaleStoped.Value
                                  orderby t.Itm_ID
                                  select t).ToList();
                }
            }
            if (vBestSaller)
            {
                vItemsMain = db.ExecuteQuery<T_Item>("SELECT        T_Items.Itm_ID, T_Items.Itm_No, T_Items.ItmCat, T_Items.Arb_Des, T_Items.Eng_Des, T_Items.StartCost, T_Items.AvrageCost, T_Items.LastCost, T_Items.Price1, \r\n                                                                                  T_Items.Price3, T_Items.Price2, T_Items.Price5, T_Items.Price4, T_Items.Price6, T_Items.Unit1, T_Items.Pack1, T_Items.Unit2, T_Items.UntPri2, T_Items.UntPri1, \r\n                                                                                  T_Items.Pack2, T_Items.Unit3, T_Items.Pack3, T_Items.Unit4, T_Items.UntPri3, T_Items.UntPri4, T_Items.Pack4, T_Items.Unit5, T_Items.UntPri5, T_Items.Pack5, \r\n                                                                                  T_Items.DefultUnit, T_Items.DefultVendor, T_Items.OpenQty, T_Items.QtyLvl, T_Items.ItmLoc, T_Items.BarCod1, T_Items.BarCod2, T_Items.BarCod3, \r\n                                                                                  T_Items.BarCod4, T_Items.BarCod5, T_Items.Lot, T_Items.LrnExp, T_Items.DMY, T_Items.ItmTyp, T_Items.DefPack, T_Items.ItmImg, \r\n                                                                                  T_Items.InvSaleStoped, T_Items.InvPaymentStoped, T_Items.InvPaymentReturnStoped, T_Items.FirstCost, T_Items.CompanyID, T_Items.InvSaleReturnStoped, \r\n                                                                                  T_Items.SerialKey,sum(RealQty) as QtyMax\r\n                                                            FROM         T_Items INNER JOIN\r\n                                                                                  T_INVDET ON T_Items.Itm_No = T_INVDET.ItmNo INNER JOIN\r\n                                                                                  T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID  \r\n                                                            WHERE T_INVHED.InvTyp = 1 and T_Items.ItmTyp != 1 and T_Items.InvSaleStoped = 0\r\n                                                            Group By T_Items.Itm_ID, T_Items.Itm_No, T_Items.ItmCat, T_Items.Arb_Des, T_Items.Eng_Des, T_Items.StartCost, T_Items.AvrageCost, T_Items.LastCost, T_Items.Price1, \r\n                                                                                  T_Items.Price3, T_Items.Price2, T_Items.Price5, T_Items.Price4, T_Items.Price6, T_Items.Unit1, T_Items.Pack1, T_Items.Unit2, T_Items.UntPri2, T_Items.UntPri1, \r\n                                                                                  T_Items.Pack2, T_Items.Unit3, T_Items.Pack3, T_Items.Unit4, T_Items.UntPri3, T_Items.UntPri4, T_Items.Pack4, T_Items.Unit5, T_Items.UntPri5, T_Items.Pack5, \r\n                                                                                  T_Items.DefultUnit, T_Items.DefultVendor, T_Items.OpenQty, T_Items.QtyLvl, T_Items.ItmLoc, T_Items.BarCod1, T_Items.BarCod2, T_Items.BarCod3, \r\n                                                                                  T_Items.BarCod4, T_Items.BarCod5, T_Items.Lot, T_Items.QtyMax, T_Items.LrnExp, T_Items.DMY, T_Items.ItmTyp, T_Items.DefPack, T_Items.ItmImg, \r\n                                                                                  T_Items.InvSaleStoped, T_Items.InvPaymentStoped, T_Items.InvPaymentReturnStoped, T_Items.FirstCost, T_Items.CompanyID, T_Items.InvSaleReturnStoped, \r\n                                                                                  T_Items.SerialKey\r\n                                                                                  order by QtyMax desc", new object[0]).ToList();
            }
            if (vItemsMain.Count <= 0)
            {
                ClearItemsMain();
                return;
            }
            CurrentPageIndex = 1;
            CurrentPageIndexItmDet = 1;
            CalculateTotalPages(vItemsMain);
            GetCurrentRecords(1, vBestSaller);
        }
        private void CalculateTotalPages(List<T_Item> vItemsMain)
        {
            try
            {
                int rowCount = vItemsMain.ToList().Count;
                TotalPage = rowCount / PageSize;
                if (rowCount % PageSize > 0)
                {
                    TotalPage++;
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("CalculateTotalPages:", error, enable: true);
                if (TotalPage <= 0)
                {
                    TotalPage = 1;
                }
            }
        }
        private void GetCurrentRecords(int page, bool vBestSaller)
        {

        }
        public static Image ResizeImage(Image image, Size size, bool preserveAspectRatio)
        {
            int newWidth;
            int newHeight;
            if (preserveAspectRatio)
            {
                int originalWidth = image.Width;
                int originalHeight = image.Height;
                float percentWidth = (float)size.Width / (float)originalWidth;
                float percentHeight = (float)size.Height / (float)originalHeight;
                float percent = ((percentHeight < percentWidth) ? percentHeight : percentWidth);
                newWidth = (int)((float)originalWidth * percent);
                newHeight = (int)((float)originalHeight * percent);
            }
            else
            {
                newWidth = size.Width;
                newHeight = size.Height;
            }
            Image newImage = new Bitmap(newWidth, newHeight);
            using (Graphics graphicsHandle = Graphics.FromImage(newImage))
            {
                graphicsHandle.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphicsHandle.DrawImage(image, 0, 0, newWidth, newHeight);
            }
            return newImage;
        }
        public static string[] GetFilesFrom(string searchFolder, string[] filters, bool isRecursive)
        {
            List<string> filesFound = new List<string>();
            SearchOption searchOption = (isRecursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly);
            foreach (string filter in filters)
            {
                filesFound.AddRange(Directory.GetFiles(searchFolder, $"*.{filter}", searchOption));
            }
            return filesFound.ToArray();
        }
        private void btnFirstPAge_Click(object sender, EventArgs e)
        {
            CurrentPageIndex = 1;
            GetCurrentRecords(CurrentPageIndex, vBestSaller: false);
        }
        private void btnNxtPage_Click(object sender, EventArgs e)
        {
            if (CurrentPageIndex < TotalPage)
            {
                CurrentPageIndex++;
                GetCurrentRecords(CurrentPageIndex, vBestSaller: false);
            }
        }
        private void btnPrevPage_Click(object sender, EventArgs e)
        {
            if (CurrentPageIndex > 1)
            {
                CurrentPageIndex--;
                GetCurrentRecords(CurrentPageIndex, vBestSaller: false);
            }
        }
        private void btnLastPage_Click(object sender, EventArgs e)
        {
            CurrentPageIndex = TotalPage;
            GetCurrentRecords(CurrentPageIndex, vBestSaller: false);
        }
        private void ClearItemsMain()
        {

        }
        private void dataGridView_ItemMains_CellClick(object sender, DataGridViewCellEventArgs e)
        {
        }
        string pricestring = string.Empty;
        bool[] dot = new bool[10];
        private void button_1_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8) || (FlxInv.ColSel == 38))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".1";
                        else
                            pricestring = without.ToString() + "1";
                        edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        if (dotc == true && !val.Contains("."))
                            val += ".1";
                        else
                            val += "1";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".1";
                    else
                        val += "1";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (txtTele.Enabled)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";val="";

                        val = "";
                         if (dotc == true && !val.Contains("."))
                        val += ".1";
                    else
                        val += "1";
txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".1";
                    else
                        val += "1";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_2_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8) || (FlxInv.ColSel == 38))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".2";
                        else
                            pricestring = without.ToString() + "2";
                        edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        if (dotc == true && !val.Contains("."))
                            val += ".2";
                        else
                            val += "2";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".2";
                    else
                        val += "2";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".2";
                    else
                        val += "2";
txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".2";
                    else
                        val += "2";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_3_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".3";
                        else
                            pricestring = without.ToString() + "3";
                        edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        if (dotc == true && !val.Contains("."))
                            val += ".3";
                        else
                            val += "3";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".3";
                    else
                        val += "3";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".3";
                    else
                        val += "3";
txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".3";
                    else
                        val += "3";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_4_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".4";
                        else
                            pricestring = without.ToString() + "4"; edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        if (dotc == true && !val.Contains("."))
                            val += ".4";
                        else
                            val += "4";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".4";
                    else
                        val += "4";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".4";
                    else
                        val += "4";
txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".4";
                    else
                        val += "4";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_5_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".5";
                        else
                            pricestring = without.ToString() + "5"; edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        if (dotc == true && !val.Contains("."))
                            val += ".5";
                        else
                            val += "5";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".5";
                    else
                        val += "5";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";
                        if (dotc == true && !val.Contains("."))
                            val += ".5";
                        else
                            val += "5";
                       
                        txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".5";
                    else
                        val += "5";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_6_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                int vRowIndex = FlxInv.RowSel;
                if (ControlNo == 0)
                {
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".6";
                        else
                            pricestring = without.ToString() + "6"; edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        if (dotc == true && !val.Contains("."))
                            val += ".6";
                        else
                            val += "6";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".6";
                    else
                        val += "6";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";
                        if (dotc == true && !val.Contains("."))
                            val += ".6";
                        else
                            val += "6";
                        txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                        if (dotc == true && !val.Contains("."))
                        val += ".6";
                    else
                        val += "6";
 

                      
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_9_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".9";
                        else
                            pricestring = without.ToString() + "9";
                        edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                        catch { }
                        if (dotc == true && !val.Contains("."))
                            val += ".9";
                        else
                            val += "9";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".9";
                    else
                        val += "9";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";
                        if (dotc == true && !val.Contains("."))
                            val += ".9";
                        else
                            val += "9";
                       
                       txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".9";
                    else
                        val += "9";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_8_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".8";
                        else
                            pricestring = without.ToString() + "8";
                        edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                        catch { }
                        if (dotc == true && !val.Contains("."))
                            val += ".8";
                        else
                            val += "8";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".8";
                    else
                        val += "8";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";
                        if (dotc == true && !val.Contains("."))
                            val += ".8";
                        else
                            val += "8";
                       txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".8";
                    else
                        val += "8";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_7_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".7";
                        else
                            pricestring = without.ToString() + "7";
                        edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        if (dotc == true && !val.Contains("."))
                            val += ".7";
                        else
                            val += "7";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".7";
                    else
                        val += "7";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";
                        if (dotc == true && !val.Contains("."))
                            val += ".7";
                        else
                            val += "7";
                       txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".7";
                    else
                        val += "7";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_Bac_Click(object sender, EventArgs e)
        {
            dot[ControlNo] = false;
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if ((FlxInv.ColSel == 8))
                    {
                        without = 0;
                        pricestring = without.ToString() + "0";
                        edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, "0");
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text = string.Empty;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text = string.Empty;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text = string.Empty;
                        }
                    }
                    else if (ControlNo == 6)
                    {//val="";
                        txtDiscountVal.Text = "0";
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {//val="";
                        txtDiscountP.Text = "0";
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void button_0_Click(object sender, EventArgs e)
        {
            bool dotc = dot[ControlNo];
            string val = string.Empty;
            try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
            catch { }
            try
            {
                if (FlxInv.Rows[FlxInv.RowSel].StyleNew.BackColor == Color.Black)
                {
                    return;
                }
                if (ControlNo == 0)
                {
                    int vRowIndex = FlxInv.RowSel;
                    if (FlxInv.ColSel == 7 && vQtyGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 8 && vPriceGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 9 && vDisGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 38 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    else if (FlxInv.ColSel == 31 && vTotGraid)
                    {
                        button_Bac_Click(sender, e);
                    }
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if ((FlxInv.ColSel == 8))
                    {
                        if (dotc == true && !val.Contains("."))
                            pricestring = without.ToString() + ".0";
                        else
                            pricestring = without.ToString() + "0";
                        edit = true;
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, pricestring);
                    }
                    else
                    {
                        if (dotc == true && !val.Contains("."))
                            val += ".0";
                        else
                            val += "0";
                        FlxInv.SetData(FlxInv.RowSel, FlxInv.ColSel, val);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, FlxInv.ColSel));
                    vQtyGraid = false;
                    vPriceGraid = false;
                    vTotGraid = false;
                    vDisGraid = false;
                    vTax = false;
                }
                else
                {
                    try { val = FlxInv.GetData(FlxInv.RowSel, FlxInv.ColSel).ToString(); }
                    catch { }
                    if (dotc == true && !val.Contains("."))
                        val += ".0";
                    else
                        val += "0";
                    if (ControlNo == 1 || ControlNo == 2)
                    {
                        return;
                    }
                    if (ControlNo == 3)
                    {
                        txtRemark.Text += val;
                    }
                    else if (ControlNo == 4)
                    {
                        txtRef.Text += val;
                    }
                    else if (ControlNo == 5)
                    {
                        if (!txtTele.ReadOnly)
                        {
                            txtTele.Text += val;
                        }
                    }
                    else if (ControlNo == 6)
                    {val="";
                        if (dotc == true && !val.Contains("."))
                            val += ".0";
                        else
                            val += "0";
                       txtDiscountVal.Text = txtDiscountVal.Text.Substring(0, txtDiscountVal.Text.Length - 3) + val;
                        txtDiscountVal_Leave(sender, e);
                    }
                    else if (ControlNo == 7)
                    {val="";
                         if (dotc == true && !val.Contains("."))
                        val += ".0";
                    else
                        val += "0";
 
txtDiscountP.Text = txtDiscountP.Text.Substring(0, txtDiscountP.Text.Length - 3) + val;
                        txtDiscountP_Leave(sender, e);
                    }
                    return;
                }
            }
            catch
            {
            }
        }
        private void PanaHide(bool Sts)
        {
        }
        private void FlxInv_LeaveCell(object sender, EventArgs e)
        {
            PanaHide(Sts: false);
        }
        private void FlxInv_Leave(object sender, EventArgs e)
        {
            try
            {
                if (VarGeneral.SSSLev != "R" && VarGeneral.SSSLev != "C" && VarGeneral.SSSLev != "H" && FlxInv.Rows[_RowIndex].Height == 33)
                {
                    FlxInv.SetData(_RowIndex - 1, 36, FlxInv.GetData(_RowIndex, (LangArEn == 0) ? 2 : 4));
                }
            }
            catch
            {
            }
        }
        private void button_1_Leave(object sender, EventArgs e)
        {
        }
        private void FlxInv_AfterSelChange(object sender, RangeEventArgs e)
        {
            try
            {
                int vRowIndex = FlxInv.RowSel;
                for (int i = 1; i < FlxInv.Rows.Count; i++)
                {
                    if (i == vRowIndex)
                    {
                        FlxInv.SetData(i, 37, true);
                        button_DeleteLine.Visible = true;
                    }
                    else
                    {
                        FlxInv.SetData(i, 37, false);
                    }
                    FlxInv_AfterEdit(sender, new RowColEventArgs(i, 37));
                }
            }
            catch
            {
            }
        }
        private void txtGDate_Enter(object sender, EventArgs e)
        {
            ControlNo = 1;
            CheckSts(ControlNo);
        }
        private void txtHDate_Enter(object sender, EventArgs e)
        {
            ControlNo = 2;
            CheckSts(ControlNo);
        }
        private void txtTime_Enter(object sender, EventArgs e)
        {
            ControlNo = 3;
            CheckSts(ControlNo);
        }
        private void txtRef_Enter(object sender, EventArgs e)
        {
            ControlNo = 4;
            CheckSts(ControlNo);
        }
        private void txtTele_Enter(object sender, EventArgs e)
        {
            ControlNo = 5;
            CheckSts(ControlNo);
        }
        private void txtDiscountVal_Enter(object sender, EventArgs e)
        {
            ControlNo = 6;
            CheckSts(ControlNo);
        }
        private void txtDiscountP_Enter(object sender, EventArgs e)
        {
            ControlNo = 7;
            CheckSts(ControlNo);
        }
        private void CheckSts(int Sts)
        {
            try
            {
                if (ControlNo == 0)
                {
                    txtRef.ButtonCustom.Checked = false;
                    txtTele.ButtonCustom.Checked = false;
                    txtDiscountVal.ButtonCustom.Checked = false;
                    txtDiscountP.ButtonCustom.Checked = false;
                }
                else if (ControlNo == 1)
                {
                    txtRef.ButtonCustom.Checked = false;
                    txtTele.ButtonCustom.Checked = false;
                    txtDiscountVal.ButtonCustom.Checked = false;
                    txtDiscountP.ButtonCustom.Checked = false;
                }
                else if (ControlNo == 2)
                {
                    txtRef.ButtonCustom.Checked = false;
                    txtTele.ButtonCustom.Checked = false;
                    txtDiscountVal.ButtonCustom.Checked = false;
                    txtDiscountP.ButtonCustom.Checked = false;
                }
                else if (ControlNo == 3)
                {
                    txtRef.ButtonCustom.Checked = false;
                    txtTele.ButtonCustom.Checked = false;
                    txtDiscountVal.ButtonCustom.Checked = false;
                    txtDiscountP.ButtonCustom.Checked = false;
                }
                else if (ControlNo == 4)
                {
                    txtRef.ButtonCustom.Checked = true;
                    txtTele.ButtonCustom.Checked = false;
                    txtDiscountVal.ButtonCustom.Checked = false;
                    txtDiscountP.ButtonCustom.Checked = false;
                }
                else if (ControlNo == 5)
                {
                    txtRef.ButtonCustom.Checked = false;
                    txtTele.ButtonCustom.Checked = true;
                    txtDiscountVal.ButtonCustom.Checked = false;
                    txtDiscountP.ButtonCustom.Checked = false;
                }
                else if (ControlNo == 6)
                    {//val="";
                    txtRef.ButtonCustom.Checked = false;
                    txtTele.ButtonCustom.Checked = false;
                    txtDiscountVal.ButtonCustom.Checked = true;
                    txtDiscountP.ButtonCustom.Checked = false;
                }
                else if (ControlNo == 7)
                {
                    txtRef.ButtonCustom.Checked = false;
                    txtTele.ButtonCustom.Checked = false;
                    txtDiscountVal.ButtonCustom.Checked = false;
                    txtDiscountP.ButtonCustom.Checked = true;
                }
            }
            catch
            {
            }
        }
        private void txtGDate_ButtonCustomClick(object sender, EventArgs e)
        {
            ControlNo = 1;
            CheckSts(ControlNo);
        }
        private void txtHDate_ButtonCustomClick(object sender, EventArgs e)
        {
            ControlNo = 2;
            CheckSts(ControlNo);
        }
        private void txtTime_ButtonCustomClick(object sender, EventArgs e)
        {
            ControlNo = 3;
            CheckSts(ControlNo);
        }
        private void txtRef_ButtonCustomClick(object sender, EventArgs e)
        {
            ControlNo = 4;
            CheckSts(ControlNo);
        }
        private void txtTele_ButtonCustomClick(object sender, EventArgs e)
        {
            ControlNo = 5;
            CheckSts(ControlNo);
        }
        private void txtDiscountVal_ButtonCustomClick(object sender, EventArgs e)
        {
            ControlNo = 6;
            CheckSts(ControlNo);
        }
        private void txtDiscountP_ButtonCustomClick(object sender, EventArgs e)
        {
            ControlNo = 7;
            CheckSts(ControlNo);
        }
        private void txtGDate_Click(object sender, EventArgs e)
        {
            txtGDate.SelectAll();
        }
        private void txtHDate_Click(object sender, EventArgs e)
        {
            txtHDate.SelectAll();
        }
        private void txtTime_Click(object sender, EventArgs e)
        {
            txtTime.SelectAll();
        }
        private void txtRemark_Enter(object sender, EventArgs e)
        {
            ControlNo = 3;
            CheckSts(ControlNo);
        }
        private void button_Space_Click(object sender, EventArgs e)
        {

        }
        private void buttonItem_OrderOptions_Click(object sender, EventArgs e)
        {
        }
        private void switch_InSide_ValueChanged(object sender, EventArgs e)
        {
            switch_InSide.ValueChanged -= switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged -= switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged -= switch_Dilevry_ValueChanged;
            switch_OutSide.Value = false;
            switch_InSide.Value = true;
            switch_Dilevry.Value = false;
            OrderTypChange();
            switch_InSide.ValueChanged += switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged += switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged += switch_Dilevry_ValueChanged;
        }
        private void switch_OutSide_ValueChanged(object sender, EventArgs e)
        {
            switch_InSide.ValueChanged -= switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged -= switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged -= switch_Dilevry_ValueChanged;
            switch_OutSide.Value = true;
            switch_InSide.Value = false;
            switch_Dilevry.Value = false;
            OrderTypChange();
            switch_InSide.ValueChanged += switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged += switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged += switch_Dilevry_ValueChanged;
        }
        private void switch_Dilevry_ValueChanged(object sender, EventArgs e)
        {
            switch_InSide.ValueChanged -= switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged -= switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged -= switch_Dilevry_ValueChanged;
            switch_OutSide.Value = false;
            switch_InSide.Value = false;
            switch_Dilevry.Value = true;
            OrderTypChange();
            switch_InSide.ValueChanged += switch_InSide_ValueChanged;
            switch_OutSide.ValueChanged += switch_OutSide_ValueChanged;
            switch_Dilevry.ValueChanged += switch_Dilevry_ValueChanged;
        }
        private void OrderTypChange()
        {
            if (switch_InSide.Value)
            {
                try
                {
                    if (data_this.RoomNo.HasValue && State == FormState.Edit && data_this.RoomNo > 1 && txtTable.Value == 0)
                    {
                        txtTable.Tag = data_this.RoomNo.Value.ToString();
                        txtTable.Value = db.StockRommID(data_this.RoomNo.Value).RomeNo;
                    }
                }
                catch
                {
                }
                panel_Driver.Visible = false;
                panel_Table.Visible = true;
            }
            else if (switch_OutSide.Value)
            {
                panel_Driver.Visible = false;
                panel_Table.Visible = false;
            }
            else
            {
                panel_Driver.Visible = true;
                panel_Table.Visible = false;
            }
            if (!switch_InSide.Value)
            {
                txtTable.Value = 0;
                txtPersons.Value = 1;
            }
        }
        private void switch_OutSide_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
        }
        private void switch_InSide_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
        }
        private void switch_Dilevry_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
        }
        private void button_SrchDriv_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
            if (State != 0)
            {
                FrmCustSearch frm = new FrmCustSearch();
                frm.vTy_ = 3;
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    textBox_Driver.Tag = db.StockDriv(frm.SerachNo.ToString()).chauffeur_ID;
                    textBox_Driver.Text = ((LangArEn == 0) ? db.StockDriv(frm.SerachNo.ToString()).Arb_Des : db.StockDriv(frm.SerachNo.ToString()).Eng_Des);
                }
                else
                {
                    textBox_Driver.Tag = string.Empty;
                    textBox_Driver.Text = string.Empty;
                }
            }
        }
        private void button_SrchTable_Click(object sender, EventArgs e)
        {
            using (Stock_DataDataContext dtb = new Stock_DataDataContext(VarGeneral.BranchCS))
            {
                VarGeneral.Tb_Return = false;
                if (State == FormState.Edit || string.IsNullOrEmpty(textBox_ID.Text))
                {
                    return;
                }
                if (State == FormState.Saved)
                {
                    Button_Edit_Click(sender, e);
                }
                if ((data_this.RoomSts.HasValue && !data_this.RoomSts.Value) || string.IsNullOrEmpty(textBox_ID.Text))
                {
                    return;
                }
                if (switch_InSide.Value)
                {
                    FrmTables frm2 = new FrmTables(textBox_ID.Text, 0, frmSts: false);
                    frm2.Tag = LangArEn;
                    VarGeneral.SFrmTyp = string.Empty;
                    if (State == FormState.New)
                    {
                        frm2.sts_ = "new";
                    }
                    else
                    {
                        if (State != FormState.Edit)
                        {
                            return;
                        }
                        try
                        {
                            if (data_this.RoomNo.Value == 0)
                            {
                                frm2.sts_ = "new";
                            }
                            else
                            {
                                frm2.sts_ = "update";
                            }
                        }
                        catch
                        {
                            return;
                        }
                    }
                    frm2.TopMost = true;
                    frm2.ShowDialog();
                    if (VarGeneral.Tb_Return)
                    {
                        if (State == FormState.Edit)
                        {
                            State = FormState.Saved;
                        }
                        button_SrchTable_Click(sender, e);
                    }
                    else if (frm2.sts_ == "new")
                    {
                        txtTable.Value = dtb.StockRommID(frm2.Serach_No).RomeNo;
                        txtTable.Tag = frm2.Serach_No;
                    }
                    else
                    {
                        dbInstance = null;
                        textBox_ID_TextChanged(sender, e);
                    }
                }
            }
            TableTyp();
        }
        private void TableTyp()
        {
            try
            {
                if (txtTable.Value < 1 || string.IsNullOrEmpty(txtTable.Tag.ToString()) || State == FormState.New)
                {
                    labelTableTyp.Text = ((LangArEn == 0) ? "بدون طاولة" : "WithOut Table");
                    return;
                }
                T_Room q = db.StockRommID(int.Parse(txtTable.Tag.ToString()));
                if (q == null || string.IsNullOrEmpty(q.RomeNo.ToString()))
                {
                    labelTableTyp.Text = ((LangArEn == 0) ? "بدون طاولة" : "WithOut Table");
                }
                else if (q.Type == 1)
                {
                    labelTableTyp.Text = ((LangArEn == 0) ? "طاولات العوائل" : "Families Tables");
                }
                else if (q.Type == 2)
                {
                    labelTableTyp.Text = ((LangArEn == 0) ? "طاولات الشباب" : "Boys Tables");
                }
                else if (q.Type == 3)
                {
                    labelTableTyp.Text = ((LangArEn == 0) ? "طاولات خارجية" : "Extrnal Tables");
                }
                else if (q.Type == 4)
                {
                    labelTableTyp.Text = ((LangArEn == 0) ? "طاولات أخرى" : "Other Tables");
                }
                else
                {
                    labelTableTyp.Text = ((LangArEn == 0) ? "بدون طاولة" : "WithOut Table");
                }
            }
            catch
            {
                labelTableTyp.Text = ((LangArEn == 0) ? "بدون طاولة" : "WithOut Table");
            }
        }
        private void button_DeleteLine_Click(object sender, EventArgs e)
        {
       
            try
            {
                if (FlxInv.GetData(RowSel, 1).ToString() == null)
                {
                    return;
                }
                if (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 32)))) == 2.0)
                {
                    ItemDetRemoved.Add(int.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 25)))));
                }
                try
                {
                    if ((FlxInv.GetData(FlxInv.RowSel, 39).ToString() ?? string.Empty) != string.Empty && CmbInvSide.SelectedIndex <= 0)
                    {
                        if (FlxInv.GetData(FlxInv.RowSel, 39).ToString() == "1")
                        {
                            return;
                        }
                        if (FlxInv.GetData(FlxInv.RowSel, 39).ToString() == "0")
                        {
                            RemoveOFFerLines(FlxInv.RowSel);
                            if (FlxInv.Rows[FlxInv.Row].Height > 33)
                            {
                                FlxInv.RemoveItem(FlxInv.Row);
                                FlxInv.RemoveItem(FlxInv.Row);
                            }
                            else
                            {
                                FlxInv.RemoveItem(FlxInv.Row - 1);
                                FlxInv.RemoveItem(FlxInv.Row);
                            }
                        }
                    }
                    else if (FlxInv.Rows[FlxInv.Row].Height > 33)
                    {
                        FlxInv.RemoveItem(FlxInv.Row);
                        FlxInv.RemoveItem(FlxInv.Row);
                    }
                    else
                    {
                        FlxInv.RemoveItem(FlxInv.Row - 1);
                        FlxInv.RemoveItem(FlxInv.Row);
                    }
                }
                catch
                {
                    RemoveOFFerLines((FlxInv.Rows[RowSel].Height > 33) ? FlxInv.RowSel : (FlxInv.RowSel - 1));
                    if (FlxInv.Rows[FlxInv.Row].Height > 33)
                    {
                        FlxInv.RemoveItem(FlxInv.Row);
                        FlxInv.RemoveItem(FlxInv.Row);
                    }
                    else
                    {
                        FlxInv.RemoveItem(FlxInv.Row - 1);
                        FlxInv.RemoveItem(FlxInv.Row);
                    }
                }
                GetInvTot();
                try
                {
                    FlxInv.SetData(FlxInv.RowSel, 37, true);
                }
                catch
                {
                }
                FlxInv_AfterEdit(sender, new RowColEventArgs(FlxInv.RowSel, 37));
                if (VarGeneral.Settings_Sys.IsCustomerDisplay.Value)
                {
                    double _pric = 0.0;
                    try
                    {
                        _pric = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.RowSel - 1, 8))));
                    }
                    catch
                    {
                        _pric = 0.0;
                    }
                    CustomerDisplayData(txtDueAmountLoc.Value, _pric);
                }
            }
            catch
            {
                GetInvTot();
            }
        }
        private void RemoveOFFerLines(int RowLines)
        {
            try
            {
                RowLines += 2;
                for (int i = RowLines; i < VarGeneral.Settings_Sys.LineOfInvoices.Value + 1000; i++)
                {
                    if (FlxInv.Rows[RowLines].Height != 33)
                    {
                        if (!(FlxInv.GetData(i, 39).ToString() == "1"))
                        {
                            break;
                        }
                        FlxInv.RemoveItem(i);
                        GetInvTot();
                        i--;
                    }
                }
            }
            catch
            {
            }
        }
        private void button_SrchWaiter_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
            if (State != 0)
            {
                FrmCustSearch frm = new FrmCustSearch();
                frm.vTy_ = 1;
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    textBox_WaiterName.Tag = db.StockWaiter(frm.Serach_No).waiter_ID.ToString();
                    textBox_WaiterName.Text = ((LangArEn == 0) ? db.StockWaiter(frm.Serach_No).Arb_Des : db.StockWaiter(frm.Serach_No).Eng_Des);
                }
                else
                {
                    textBox_WaiterName.Tag = string.Empty;
                    textBox_WaiterName.Text = string.Empty;
                }
            }
        }
        private void txtTable_ValueChanged(object sender, EventArgs e)
        {
            if (txtTable.Value >= 1)
            {
                label_Waiter.Visible = true;
                textBox_WaiterName.Visible = true;
                button_SrchWaiter.Visible = true;
            }
            else
            {
                label_Waiter.Visible = false;
                textBox_WaiterName.Visible = false;
                button_SrchWaiter.Visible = false;
            }
        }
        private void CmbInvSide_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (State != 0)
            {
                FillComboMnd();
                txtCustNo.Text = string.Empty;
                txtCustName.Text = string.Empty;
                txtAddress.Text = string.Empty;
                txtCustRep.Value = 0.0;
            }
        }
        private void txtDueDate_Click(object sender, EventArgs e)
        {
            txtDueDate.SelectAll();
        }
        private void txtDueDate_Leave(object sender, EventArgs e)
        {
            try
            {
                if (VarGeneral.CheckDate(txtDueDate.Text))
                {
                    txtDueDate.Text = Convert.ToDateTime(txtDueDate.Text).ToString("yyyy/MM/dd");
                    if (CalculateSupport() > 0)
                    {
                        label_Due.Text = ((LangArEn == 0) ? ("موعد الدفع سيكون بعد " + CalculateSupport() + " يوم") : ("Payment date will be after " + CalculateSupport() + " Day"));
                    }
                    else
                    {
                        label_Due.Text = string.Empty;
                    }
                }
                else
                {
                    txtDueDate.Text = string.Empty;
                    label_Due.Text = string.Empty;
                }
            }
            catch
            {
                txtDueDate.Text = string.Empty;
                label_Due.Text = string.Empty;
            }
        }
        private int CalculateSupport()
        {
            try
            {
                return n.vDiff(n.IsHijri(txtDueDate.Text) ? n.FormatHijri(txtDueDate.Text, "yyyy/MM/dd") : n.GregToHijri(txtDueDate.Text, "yyyy/MM/dd"), VarGeneral.Hdate);
            }
            catch
            {
                return 0;
            }
        }
        private void item_CellClick(object itemno)
        {
            try
            {

                if (!string.IsNullOrEmpty(textBox_ID.Text))
                {
                    if (State == FormState.Saved)
                    {
                        Button_Edit_Click(null, null);
                    }
                    object q = itemno.ToString();
                    if (!string.IsNullOrEmpty(q.ToString()))// && !string.IsNullOrEmpty(superGridControl1.PrimaryGrid.GetCell(eRow, eCol).Value.ToString()))
                    {
                        _stsClick = 0;
                        _ItemProcess(q.ToString());
                    }
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("dataGridView_ItemMains_CellClick:", error, enable: true);
            }
        }
        private void RowNotes()
        {
            FlxInv.Rows.Add();
            FlxInv.Rows[FlxInv.Rows.Count - 1].Height = 33;
            if (!VarGeneral.TString.ChkStatShow(_SysSetting.LineDetailSts, 26))
            {
                FlxInv.Rows[FlxInv.Rows.Count - 1].Visible = false;
            }
            FlxInv.Rows[FlxInv.Rows.Count - 1].AllowEditing = false;
            FlxInv.Rows[FlxInv.Rows.Count - 1].StyleNew.BackColor = Color.White;
            FlxInv.Row = FlxInv.Rows.Count - 2;
            FlxInv.RowSel = FlxInv.Rows.Count - 2;
            FlxInv.Col = 1;
            FlxInv.Refresh();
        }
        private void _ItemProcess(string q)
        {
            List<T_Item> listSer = new List<T_Item>();
            listSer = db.StockItemList(q.ToString());
            _Items = listSer[0];
            FlxInv.Rows.Add();
            FlxInv.Rows[FlxInv.Rows.Count - 1].Height = 35;
            FlxInv.SetData(FlxInv.Rows.Count - 1, 1, _Items.Itm_No);
            //   FlxInv_AfterEdit(null, new RowColEventArgs(FlxInv.Rows.Count - 1, 1));
            FlxInv.Row = FlxInv.Rows.Count - 1;
            FlxInv.RowSel = FlxInv.Rows.Count - 1;
            int r = FlxInv.Rows.Count - 1;
            FlxInv.Col = 1;
            RowNotes();
            BindDataOfItem();
            try
            {

                if (FlxInv.GetData(r, 1) != null)
                    if ((FlxInv.GetData(r, 1) != null) || FlxInv.GetData(r, 1).ToString() == string.Empty)
                        FlxInv_AfterEdit(null, new RowColEventArgs(r, 8));//p) 

            }
            catch
            { }
            BindDataOfStkQty(string.Concat(FlxInv.GetData(FlxInv.RowSel, 1)));
            Refresh();

            double qty = 0.0;
            string unt = string.Empty;
            string itm_nm = string.Empty;
            try
            {
                itm_nm = _Items.Itm_No.Trim();
            }
            catch
            {
                itm_nm = string.Empty;
            }
            try
            {
                unt = DefUnitAx;
            }
            catch
            {
                unt = string.Empty;
            }
            try
            {
                qty = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 7))));
            }
            catch
            {
                qty = 0.0;
            }
            if (CmbInvSide.SelectedIndex <= 0)
            {
                RemoveOFFerLines(FlxInv.Row + 1);
                CheckOffers(itm_nm, unt, qty, FlxInv.Row, FlxInv.Row);
            }
            textBox_Barcode.Text = string.Empty;
            textBox_Barcode.Focus();
            if (VarGeneral.Settings_Sys.IsCustomerDisplay.Value)
            {
                double _pric = 0.0;
                try
                {
                    _pric = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(FlxInv.Row, 8))));
                }
                catch
                {
                    _pric = 0.0;
                }
                CustomerDisplayData(txtDueAmountLoc.Value, _pric);
            }
            else if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 73))
            {
                FillFrmBranch();
            }
        }
        private void FillFrmBranch()
        {
            try
            {
                if (Screen.AllScreens.Length <= 1)
                {
                    return;
                }
                frmBranch.columns_Names_visible_POS.Clear();
                for (int i = 1; i < FlxInv.Rows.Count - 1; i++)
                {
                    if (FlxInv.Rows[i].Height == 35)
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            frmBranch.columns_Names_visible_POS.Add(i, new FrmInvSalePoint_Branch.ColumnDictinary_POS(FlxInv.GetData(i, 2).ToString(), FlxInv.GetData(i, 7).ToString(), FlxInv.GetData(i, 3).ToString(), VarGeneral.TString.TEmpty(FlxInv.GetData(i, 8).ToString())));
                        }
                        else
                        {
                            frmBranch.columns_Names_visible_POS.Add(i, new FrmInvSalePoint_Branch.ColumnDictinary_POS(FlxInv.GetData(i, 4).ToString(), FlxInv.GetData(i, 7).ToString(), FlxInv.GetData(i, 5).ToString(), VarGeneral.TString.TEmpty(FlxInv.GetData(i, 8).ToString())));
                        }
                    }
                }
                try
                {
                    frmBranch.StartPosition = FormStartPosition.Manual;
                    Screen screen = GetSecondaryScreen();
                    if (screen != null)
                    {
                        frmBranch.Location = screen.WorkingArea.Location;
                        frmBranch.Size = new Size(screen.WorkingArea.Width, screen.WorkingArea.Height);
                        frmBranch.FlxInv.Rows.Count = 1;
                        frmBranch._Process();
                        frmBranch.Tag = LangArEn;
                        try
                        {
                            frmBranch.Close();
                        }
                        catch
                        {
                        }
                        frmBranch.Show();
                    }
                }
                catch
                {
                }
            }
            catch
            {
            }
        }
        public Screen GetSecondaryScreen()
        {
            try
            {
                if (Screen.AllScreens.Length == 1)
                {
                    return null;
                }
                Screen[] allScreens = Screen.AllScreens;
                foreach (Screen screen in allScreens)
                {
                    if (!screen.Primary)
                    {
                        return screen;
                    }
                }
                return null;
            }
            catch
            {
                return null;
            }
        }
        private void buttonItem_BestSeller_Click(object sender, EventArgs e)
        {

        }
        private void FrmInvSalePoint_FormClosed(object sender, FormClosedEventArgs e)
        {
            VarGeneral._IsPOS = false;
            try
            {
                frmBranch.Close();
            }
            catch
            {
            }
            if (VarGeneral.Settings_Sys.IsCustomerDisplay.Value)
            {
                CustomerDisplayData(0.0, 0.0);
            }
        }
        private void switchButtonItem_IsReturn_ValueChanged(object sender, EventArgs e)
        {

        }
        private void textBox_Barcode_KeyPress(object sender, KeyPressEventArgs e)
        {
        }
        private void textBox_Barcode_TextChanged(object sender, EventArgs e)
        {
        }
        private void txtCustNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '\b' && e.KeyChar != '.')
            {
                e.Handled = true;
            }
        }
        private void txtCustNo_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtCustNo.ReadOnly)
                {
                    return;
                }
                List<T_AccDef> LAccDef = new List<T_AccDef>();
                LAccDef = (from t in db.T_AccDefs
                           where t.Lev == (int?)4 && t.AccCat == (int?)4 && t.Sts == (int?)0
                           where !t.StopedState.Value
                           where t.AccDef_No == txtCustNo.Text
                           orderby t.AccDef_No
                           select t).ToList();
                if (LAccDef.Count > 0)
                {
                    txtCustNo.Text = db.StockAccDefWithOutBalance(txtCustNo.Text).AccDef_No;
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCustName.Text = db.StockAccDefWithOutBalance(txtCustNo.Text).Arb_Des;
                    }
                    else
                    {
                        txtCustName.Text = db.StockAccDefWithOutBalance(txtCustNo.Text).Eng_Des;
                    }
                    txtAddress.Text = db.StockAccDefWithOutBalance(txtCustNo.Text).Adders ?? string.Empty;
                    txtTele.Text = db.StockAccDefWithOutBalance(txtCustNo.Text).Telphone1 ?? string.Empty;
                    try
                    {
                        if (db.StockAccDefWithOutBalance(txtCustNo.Text).Mnd.HasValue)
                        {
                            int? mnd_Typ = db.StockAccDefWithOutBalance(txtCustNo.Text).T_Mndob.Mnd_Typ;
                            if (mnd_Typ.Value == 0 && mnd_Typ.HasValue)
                            {
                                CmbInvSide.SelectedIndex = 0;
                                CmbLegate.SelectedValue = db.StockAccDefWithOutBalance(txtCustNo.Text).Mnd;
                            }
                            else
                            {
                                CmbInvSide.SelectedIndex = 1;
                                CmbLegate.SelectedValue = db.StockAccDefWithOutBalance(txtCustNo.Text).Mnd;
                            }
                        }
                    }
                    catch
                    {
                        CmbLegate.SelectedIndex = 0;
                    }
                    try
                    {
                        txtCustRep.Value = db.StockAccDef(txtCustNo.Text).Balance.Value;
                    }
                    catch
                    {
                        txtCustRep.Value = 0.0;
                    }
                    txtDebit2.Text = txtCustName.Text;
                    txtDebit2.Tag = txtCustNo.Text;
                }
                else
                {
                    txtCustNo.Text = string.Empty;
                    txtCustRep.Value = 0.0;
                    txtDebit2.Text = string.Empty;
                    txtDebit2.Tag = string.Empty;
                }
                txtCustNo_TextChanged(sender, e);
            }
            catch
            {
                txtCustNo.Text = string.Empty;
                txtCustRep.Value = 0.0;
                txtDebit2.Text = string.Empty;
                txtDebit2.Tag = string.Empty;
                txtCustNo_TextChanged(sender, e);
            }
        }
        private void textBox_Barcode_Leave(object sender, EventArgs e)
        {

        }
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.kd' is assigned but its value is never used
        int kd = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.kd' is assigned but its value is never used
        private void textBox_Barcode_ButtonCustom2Click(object sender, EventArgs e)
        {
            textBox_Barcode.Text = string.Empty;
        }
        private void textBox_Barcode_ButtonCustomClick(object sender, EventArgs e)
        {
            textBox_Barcode_Leave(sender, e);
        }
        private void textBox_Barcode_KeyDown
            (object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Return)
            {
                textBox_Barcode_Leave(sender, e);
            }
        }
        private void button_openCasheir_Click(object sender, EventArgs e)
        {
            try
            {
                PrintDocument prnt_doc = new PrintDocument();
                T_INVSETTING _InvSetting = new T_INVSETTING();
                _InvSetting = db.StockInvSetting(VarGeneral.UserID, VarGeneral.InvTyp);
                string _PrinterName = prnt_doc.PrinterSettings.PrinterName;
                try
                {
                    prnt_doc.PrinterSettings.PrinterName = _InvSetting.defPrn;
                    if (prnt_doc.PrinterSettings.IsValid)
                    {
                        _PrinterName = _InvSetting.defPrn;
                    }
                }
                catch
                {
                }
                CashDrawer.OpenDrawer(_PrinterName);
            }
            catch (Exception error)
            {
                try
                {
                    VarGeneral.DebLog.writeLog("button_openCasheir_Click:", error, enable: true);
                }
                catch
                {
                }
            }
        }
        private void checkBox_Credit_CheckedChanging(object sender, CheckBoxChangeEventArgs e)
        {
        }
        private void txtDebit1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }
        private void button_SrchCenterCost_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
            if (State == FormState.Saved)
            {
                return;
            }
            try
            {
                FrmCustSearch frm = new FrmCustSearch();
                frm.vTy_ = 2;
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    CmbCostC.SelectedValue = db.StockCst(frm.Serach_No).Cst_ID;
                }
                else
                {
                    CmbCostC.SelectedIndex = 0;
                }
            }
            catch
            {
                CmbCostC.SelectedIndex = 0;
            }
        }
        private void panel_Driver_VisibleChanged(object sender, EventArgs e)
        {
            try
            {
                if (State != 0 && (VarGeneral.SSSLev == "C" || VarGeneral.SSSLev == "R" || VarGeneral.SSSLev == "H") && !panel_Driver.Visible)
                {
                    textBox_Driver.Tag = string.Empty;
                    textBox_Driver.Text = string.Empty;
                }
            }
            catch
            {
            }
        }
        public FrmPOSREP frmRepOps
        {
            set
            {
                frRep = value;
            }
            get
            {
                return frRep;
            }
        }
        private void panel_Table_VisibleChanged(object sender, EventArgs e)
        {
            try
            {
                if (State != 0 && (VarGeneral.SSSLev == "C" || VarGeneral.SSSLev == "R" || VarGeneral.SSSLev == "H") && !panel_Table.Visible)
                {
                    textBox_WaiterName.Tag = string.Empty;
                    textBox_WaiterName.Text = string.Empty;
                }
            }
            catch
            {
            }
        }
        private void button_SrchMnd_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
            if (State == FormState.Saved)
            {
                return;
            }
            try
            {
                FrmCustSearch frm = new FrmCustSearch();
                frm.vTy_ = 4;
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    CmbLegate.SelectedValue = db.StockMndob(frm.Serach_No).Mnd_ID;
                }
                else
                {
                    CmbLegate.SelectedIndex = 0;
                }
            }
            catch
            {
                CmbLegate.SelectedIndex = 0;
            }
        }
        private void button_SrchCurr_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
            if (State == FormState.Saved)
            {
                return;
            }
            try
            {
                FrmCustSearch frm = new FrmCustSearch();
                frm.vTy_ = 5;
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    CmbCurr.SelectedValue = db.StockCurency(frm.Serach_No).Curency_ID;
                }
                else
                {
                    CmbCurr.SelectedIndex = 0;
                }
            }
            catch
            {
                CmbCurr.SelectedIndex = 0;
            }
        }
        private void button_SrchPriceDefault_Click(object sender, EventArgs e)
        {
            Button_Edit_Click(sender, e);
            if (State == FormState.Saved)
            {
                return;
            }
            try
            {
                FrmCustSearch frm = new FrmCustSearch();
                frm.vTy_ = 6;
                frm.Tag = LangArEn;
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    CmbInvPrice.SelectedIndex = int.Parse(frm.Serach_No);
                }
                else
                {
                    CmbInvPrice.SelectedIndex = 0;
                }
            }
            catch
            {
                CmbInvPrice.SelectedIndex = 0;
            }
        }
        private T_INVHED GetData_ORDER()
        {
            _DataThisORDERS = new T_INVHED();
            GetInvTot();
            try
            {
                if (CmbInvPrice.SelectedIndex >= 0)
                {
                    _DataThisORDERS.CustPri = CmbInvPrice.SelectedIndex;
                }
                else
                {
                    _DataThisORDERS.CustPri = 0;
                }
            }
            catch
            {
                _DataThisORDERS.CustPri = 0;
            }
            _DataThisORDERS.PaymentOrderTyp = CmbInvSide.SelectedIndex;
            _DataThisORDERS.InvCashPayNm = string.Empty;
            _DataThisORDERS.CusVenNm = txtCustName.Text;
            _DataThisORDERS.CusVenNo = txtCustNo.Text;
            _DataThisORDERS.CusVenAdd = txtAddress.Text;
            _DataThisORDERS.CusVenTel = txtTele.Text;
            _DataThisORDERS.Remark = txtRemark.Text;
            _DataThisORDERS.InvNo = textBox_ID.Text;
            if (!switchButtonItem_IsReturn.Value)
            {
                _DataThisORDERS.InvId = int.Parse(textBox_Sequenc.Text);
            }
            _DataThisORDERS.CashPay = txtPaymentLoc.Value;
            try
            {
                _DataThisORDERS.CurTyp = int.Parse(CmbCurr.SelectedValue.ToString());
            }
            catch
            {
                _DataThisORDERS.CurTyp = null;
            }
            _DataThisORDERS.CustNet = txtCustNet.Value;
            _DataThisORDERS.CustRep = txtCustRep.Value;
            _DataThisORDERS.CusVenNm = txtCustName.Text;
            _DataThisORDERS.CusVenNo = txtCustNo.Text;
            _DataThisORDERS.HDat = txtHDate.Text;
            _DataThisORDERS.GDat = txtGDate.Text;
            if (State == FormState.New)
            {
                _DataThisORDERS.AdminLock = false;
            }
            try
            {
                if (checkBox_Chash.Checked)
                {
                    _DataThisORDERS.InvCashPay = 0;
                }
                else if (checkBox_Credit.Checked)
                {
                    _DataThisORDERS.InvCashPay = 1;
                }
                else
                {
                    _DataThisORDERS.InvCashPay = 2;
                }
            }
            catch
            {
                _DataThisORDERS.InvCashPay = 0;
            }
            try
            {
                if (checkBox_Chash.Checked)
                {
                    _DataThisORDERS.InvCash = checkBox_Chash.Text;
                }
                else if (checkBox_Credit.Checked)
                {
                    _DataThisORDERS.InvCash = checkBox_Credit.Text;
                }
                else
                {
                    _DataThisORDERS.InvCash = checkBox_NetWork.Text;
                }
            }
            catch
            {
                _DataThisORDERS.InvCash = "نقدي";
            }
            _DataThisORDERS.InvCost = txtInvCost.Value;
            try
            {
                _DataThisORDERS.InvCstNo = int.Parse(CmbCostC.SelectedValue.ToString());
            }
            catch
            {
                _DataThisORDERS.InvCstNo = null;
            }
            if (VarGeneral.CheckDate(txtDueDate.Text) && checkBox_Credit.Checked)
            {
                _DataThisORDERS.EstDat = txtDueDate.Text;
            }
            else
            {
                _DataThisORDERS.EstDat = string.Empty;
            }
            _DataThisORDERS.DeleteDate = string.Empty;
            _DataThisORDERS.DeleteTime = string.Empty;
            _DataThisORDERS.InvDisPrs = txtDiscountP.Value;
            _DataThisORDERS.InvDisVal = txtDiscountVal.Value;
            _DataThisORDERS.InvDisValLocCur = txtDiscountValLoc.Value;
            _DataThisORDERS.DesPointsValue = txtDiscoundPoints.Value;
            _DataThisORDERS.DesPointsValueLocCur = txtDiscoundPointsLoc.Value;
            _DataThisORDERS.PointsCount = txtPointCount.Value;
            _DataThisORDERS.IsPoints = switchButton_PointActiv.Value;
            _DataThisORDERS.InvNet = txtDueAmount.Value;
            _DataThisORDERS.InvNetLocCur = txtDueAmountLoc.Value;
            _DataThisORDERS.InvQty = txtTotalQ.Value;
            _DataThisORDERS.InvTot = txtTotalAm.Value;
            _DataThisORDERS.InvTotLocCur = txtTotalAmLoc.Value;
            _DataThisORDERS.InvTyp = VarGeneral.InvTyp;
            _DataThisORDERS.IfDel = 0;
            _DataThisORDERS.LTim = txtTime.Text;
            if (CmbLegate.SelectedIndex > 0)
            {
                _DataThisORDERS.MndNo = int.Parse(CmbLegate.SelectedValue.ToString());
            }
            else
            {
                _DataThisORDERS.MndNo = null;
            }
            _DataThisORDERS.RefNo = txtRef.Text;
            _DataThisORDERS.MndExtrnal = false;
            listCurency = db.Fillcurency_2(string.Empty).ToList();
            if (listCurency.Count > 0)
            {
                _Curency = listCurency[0];
            }
            _DataThisORDERS.ArbTaf = ScriptNumber1.ScriptNum(decimal.Parse(VarGeneral.TString.TEmpty(txtDueAmountLoc.Text ?? string.Empty))) + " " + _Curency.Arb_Des;
            _DataThisORDERS.EngTaf = ScriptNumber1.TafEng(decimal.Parse(VarGeneral.TString.TEmpty(txtDueAmountLoc.Text ?? string.Empty))) + " " + _Curency.Eng_Des;
            _DataThisORDERS.DATE_MODIFIED = DateTime.Now;
            _DataThisORDERS.CreditPay = doubleInput_CreditLoc.Value;
            _DataThisORDERS.NetworkPay = doubleInput_NetWorkLoc.Value;
            _DataThisORDERS.CashPayLocCur = txtPaymentLoc.Value;
            _DataThisORDERS.CreditPayLocCur = doubleInput_CreditLoc.Value;
            _DataThisORDERS.NetworkPayLocCur = doubleInput_NetWorkLoc.Value;
            try
            {
                if (CmbLegate.SelectedIndex != -1)
                {
                    T_Mndob q = db.StockMndobID(int.Parse(CmbLegate.SelectedValue.ToString()));
                    if (q.Comm_Inv.Value > 0.0 && txtDueAmountLoc.Value > 0.0)
                    {
                        _DataThisORDERS.CommMnd_Inv = txtDueAmountLoc.Value * (q.Comm_Inv.Value / 100.0);
                    }
                    else
                    {
                        _DataThisORDERS.CommMnd_Inv = 0.0;
                    }
                }
                else
                {
                    _DataThisORDERS.CommMnd_Inv = 0.0;
                }
            }
            catch
            {
                _DataThisORDERS.CommMnd_Inv = 0.0;
            }
            _DataThisORDERS.Puyaid = txtPayment.Value;
            _DataThisORDERS.Remming = txtSteel.Value;
            _DataThisORDERS.CompanyID = 1;
            try
            {
                if (!string.IsNullOrEmpty(txtTable.Tag.ToString()) && txtTable.Value > 0)
                {
                    _DataThisORDERS.RoomNo = int.Parse(txtTable.Tag.ToString());
                }
                else
                {
                    _DataThisORDERS.RoomNo = 1;
                }
            }
            catch
            {
            }
            try
            {
                if (switch_InSide.Value)
                {
                    _DataThisORDERS.OrderTyp = 0;
                }
                else if (switch_OutSide.Value)
                {
                    _DataThisORDERS.OrderTyp = 1;
                }
                else
                {
                    _DataThisORDERS.OrderTyp = 2;
                }
            }
            catch
            {
                _DataThisORDERS.OrderTyp = 0;
            }
            _DataThisORDERS.RoomPerson = txtPersons.Value;
            _DataThisORDERS.ServiceValue = 0.0;
            _DataThisORDERS.Sts = false;
            if (!string.IsNullOrEmpty(textBox_Driver.Text))
            {
                _DataThisORDERS.chauffeurNo = int.Parse(textBox_Driver.Tag.ToString());
            }
            else
            {
                _DataThisORDERS.chauffeurNo = null;
            }
            _DataThisORDERS.InvAddTax = txtTotTax.Value;
            _DataThisORDERS.InvAddTaxlLoc = txtTotTaxLoc.Value;
            if (switchButton_Tax.Value)
            {
                _DataThisORDERS.IsTaxUse = true;
            }
            else
            {
                _DataThisORDERS.IsTaxUse = false;
            }
            if (switchButton_TaxLines.Value)
            {
                _DataThisORDERS.IsTaxLines = true;
            }
            else
            {
                _DataThisORDERS.IsTaxLines = false;
            }
            if (switchButton_TaxByTotal.Value)
            {
                _DataThisORDERS.IsTaxByTotal = true;
            }
            else
            {
                _DataThisORDERS.IsTaxByTotal = false;
            }
            if (switchButton_TaxByNet.Value)
            {
                _DataThisORDERS.IsTaxByNet = true;
            }
            else
            {
                _DataThisORDERS.IsTaxByNet = false;
            }
            try
            {
                _DataThisORDERS.TaxByNetValue = double.Parse(textBoxItem_TaxByNetValue.Text);
            }
            catch
            {
                _DataThisORDERS.TaxByNetValue = 0.0;
            }
            _DataThisORDERS.IsTaxGaid = checkBox_CostGaidTax.Checked;
            _DataThisORDERS.InvValGaidDis = txtTotDis.Value;
            _DataThisORDERS.InvValGaidDislLoc = txtTotDisLoc.Value;
            if (switchButton_Dis.Value)
            {
                _DataThisORDERS.IsDisUse1 = true;
            }
            else
            {
                _DataThisORDERS.IsDisUse1 = false;
            }
            _DataThisORDERS.IsDisGaid = checkBox_GaidDis.Checked;
            _DataThisORDERS.InvComm = txtTotBankComm.Value;
            _DataThisORDERS.InvCommLoc = txtTotBankCommLoc.Value;
            if (switchButton_BankComm.Value)
            {
                _DataThisORDERS.IsCommUse = true;
            }
            else
            {
                _DataThisORDERS.IsCommUse = false;
            }
            _DataThisORDERS.IsCommGaid = checkBox_GaidBankComm.Checked;
            return _DataThisORDERS;
        }
        private void GetDataLines(int Order_)
        {
            switch (Order_)
            {
                case 1:
                    {
                        GraidORDER1.Rows.Count = FlxInv.Rows.Count;
                        GraidORDER1.Cols.Count = FlxInv.Cols.Count;
                        for (int iiCnt = 0; iiCnt < FlxInv.Rows.Count; iiCnt++)
                        {
                            GraidORDER1.Rows[iiCnt].Height = FlxInv.Rows[iiCnt].Height;
                            GraidORDER1.Rows[iiCnt].Visible = FlxInv.Rows[iiCnt].Visible;
                            GraidORDER1.Rows[iiCnt].StyleNew.BackColor = FlxInv.Rows[iiCnt].StyleNew.BackColor;
                            GraidORDER1.Rows[iiCnt].AllowEditing = FlxInv.Rows[iiCnt].AllowEditing;
                            for (int i = 0; i < FlxInv.Cols.Count; i++)
                            {
                                GraidORDER1.SetData(iiCnt, i, FlxInv.GetData(iiCnt, i));
                            }
                        }
                        break;
                    }
                case 2:
                    {
                        GraidORDER2.Rows.Count = FlxInv.Rows.Count;
                        GraidORDER2.Cols.Count = FlxInv.Cols.Count;
                        for (int iiCnt = 0; iiCnt < FlxInv.Rows.Count; iiCnt++)
                        {
                            GraidORDER2.Rows[iiCnt].Height = FlxInv.Rows[iiCnt].Height;
                            GraidORDER2.Rows[iiCnt].Visible = FlxInv.Rows[iiCnt].Visible;
                            GraidORDER2.Rows[iiCnt].StyleNew.BackColor = FlxInv.Rows[iiCnt].StyleNew.BackColor;
                            GraidORDER2.Rows[iiCnt].AllowEditing = FlxInv.Rows[iiCnt].AllowEditing;
                            for (int i = 0; i < FlxInv.Cols.Count; i++)
                            {
                                GraidORDER2.SetData(iiCnt, i, FlxInv.GetData(iiCnt, i));
                            }
                        }
                        break;
                    }
                case 3:
                    {
                        GraidORDER3.Rows.Count = FlxInv.Rows.Count;
                        GraidORDER3.Cols.Count = FlxInv.Cols.Count;
                        for (int iiCnt = 0; iiCnt < FlxInv.Rows.Count; iiCnt++)
                        {
                            GraidORDER3.Rows[iiCnt].Height = FlxInv.Rows[iiCnt].Height;
                            GraidORDER3.Rows[iiCnt].Visible = FlxInv.Rows[iiCnt].Visible;
                            GraidORDER3.Rows[iiCnt].StyleNew.BackColor = FlxInv.Rows[iiCnt].StyleNew.BackColor;
                            GraidORDER3.Rows[iiCnt].AllowEditing = FlxInv.Rows[iiCnt].AllowEditing;
                            for (int i = 0; i < FlxInv.Cols.Count; i++)
                            {
                                GraidORDER3.SetData(iiCnt, i, FlxInv.GetData(iiCnt, i));
                            }
                        }
                        break;
                    }
                case 4:
                    {
                        GraidORDER4.Rows.Count = FlxInv.Rows.Count;
                        GraidORDER4.Cols.Count = FlxInv.Cols.Count;
                        for (int iiCnt = 0; iiCnt < FlxInv.Rows.Count; iiCnt++)
                        {
                            GraidORDER4.Rows[iiCnt].Height = FlxInv.Rows[iiCnt].Height;
                            GraidORDER4.Rows[iiCnt].Visible = FlxInv.Rows[iiCnt].Visible;
                            GraidORDER4.Rows[iiCnt].StyleNew.BackColor = FlxInv.Rows[iiCnt].StyleNew.BackColor;
                            GraidORDER4.Rows[iiCnt].AllowEditing = FlxInv.Rows[iiCnt].AllowEditing;
                            for (int i = 0; i < FlxInv.Cols.Count; i++)
                            {
                                GraidORDER4.SetData(iiCnt, i, FlxInv.GetData(iiCnt, i));
                            }
                        }
                        break;
                    }
                case 5:
                    {
                        GraidORDER5.Rows.Count = FlxInv.Rows.Count;
                        GraidORDER5.Cols.Count = FlxInv.Cols.Count;
                        for (int iiCnt = 0; iiCnt < FlxInv.Rows.Count; iiCnt++)
                        {
                            GraidORDER5.Rows[iiCnt].Height = FlxInv.Rows[iiCnt].Height;
                            GraidORDER5.Rows[iiCnt].Visible = FlxInv.Rows[iiCnt].Visible;
                            GraidORDER5.Rows[iiCnt].StyleNew.BackColor = FlxInv.Rows[iiCnt].StyleNew.BackColor;
                            GraidORDER5.Rows[iiCnt].AllowEditing = FlxInv.Rows[iiCnt].AllowEditing;
                            for (int i = 0; i < FlxInv.Cols.Count; i++)
                            {
                                GraidORDER5.SetData(iiCnt, i, FlxInv.GetData(iiCnt, i));
                            }
                        }
                        break;
                    }
            }
        }
        private void buttonItem_Default_Click(object sender, EventArgs e)
        {
            _RunOrderOpration(0);
        }
        private void buttonItem_Order1_Click(object sender, EventArgs e)
        {
            _RunOrderOpration(1);
        }
        private void buttonItem_Order2_Click(object sender, EventArgs e)
        {
            _RunOrderOpration(2);
        }
        private void buttonItem_Order3_Click(object sender, EventArgs e)
        {
            _RunOrderOpration(3);
        }
        private void buttonItem_Order4_Click(object sender, EventArgs e)
        {
            _RunOrderOpration(4);
        }
        private void buttonItem_Order5_Click(object sender, EventArgs e)
        {
            _RunOrderOpration(5);
        }
        private void _RunOrderOpration(int _OrderTyp)
        {
            checkBox_Credit.CheckedChanging -= lijsadf;
            try
            {
                orderNo_activate = _OrderTyp;
                T_INVHED newData = new T_INVHED();
                switch (_OrderTyp)
                {
                    case 1:
                        newData = data_this_ORDER1;
                        break;
                    case 2:
                        newData = data_this_ORDER2;
                        break;
                    case 3:
                        newData = data_this_ORDER3;
                        break;
                    case 4:
                        newData = data_this_ORDER4;
                        break;
                    case 5:
                        newData = data_this_ORDER5;
                        break;
                }
                if (newData == null || string.IsNullOrEmpty(newData.InvNo))
                {
                    State = FormState.Saved;
                    Button_Add_Click(null, null);
                }
                else
                {
                    SetData(newData);
                    State = FormState.New;
                     puBar1.Button_Save.Enabled = true;
                }
                switch (_OrderTyp)
                {
                    case 1:
                        {
                            for (int iiCnt = 1; iiCnt < GraidORDER1.Rows.Count; iiCnt++)
                            {
                                FlxInv.Rows.Add();
                                FlxInv.Rows[iiCnt].Height = GraidORDER1.Rows[iiCnt].Height;
                                FlxInv.Rows[iiCnt].Visible = GraidORDER1.Rows[iiCnt].Visible;
                                FlxInv.Rows[iiCnt].StyleNew.BackColor = GraidORDER1.Rows[iiCnt].StyleNew.BackColor;
                                FlxInv.Rows[iiCnt].AllowEditing = GraidORDER1.Rows[iiCnt].AllowEditing;
                                for (int i = 0; i < GraidORDER1.Cols.Count; i++)
                                {
                                    FlxInv.SetData(iiCnt, i, GraidORDER1.GetData(iiCnt, i));
                                }
                                try
                                {
                                    if (string.Concat(FlxInv.GetData(iiCnt, 1)) != string.Empty && FlxInv.Rows[iiCnt].Height > 33)
                                    {
                                        FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 7));
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    if (FlxInv.Rows[iiCnt].Height == 33)
                                    {
                                        FlxInv.SetData(iiCnt, (LangArEn == 0) ? 2 : 4, FlxInv.GetData(iiCnt - 1, 36));
                                    }
                                }
                                catch
                                {
                                }
                            }
                            clearRowsNull();
                            txtDebit1.Text = ORDER_ACC["ORDER_1"].ATxt1_D;
                            txtDebit1.Tag = ORDER_ACC["ORDER_1"].ATag1_D;
                            txtCredit1.Text = ORDER_ACC["ORDER_1"].ATxt1_C;
                            txtCredit1.Tag = ORDER_ACC["ORDER_1"].ATag1_C;
                            txtDebit2.Text = ORDER_ACC["ORDER_1"].ATxt2_D;
                            txtDebit2.Tag = ORDER_ACC["ORDER_1"].ATag2_D;
                            txtCredit2.Text = ORDER_ACC["ORDER_1"].ATxt2_C;
                            txtCredit2.Tag = ORDER_ACC["ORDER_1"].ATag2_C;
                            txtDebit3.Text = ORDER_ACC["ORDER_1"].ATxt3_D;
                            txtDebit3.Tag = ORDER_ACC["ORDER_1"].ATag3_D;
                            txtCredit3.Text = ORDER_ACC["ORDER_1"].ATxt3_C;
                            txtCredit3.Tag = ORDER_ACC["ORDER_1"].ATag3_C;
                            txtDebit5.Text = ORDER_ACC["ORDER_1"].ATxt5_D;
                            txtDebit5.Tag = ORDER_ACC["ORDER_1"].ATag5_D;
                            txtCredit5.Text = ORDER_ACC["ORDER_1"].ATxt5_C;
                            txtCredit5.Tag = ORDER_ACC["ORDER_1"].ATag5_C;
                            txtDebit6.Text = ORDER_ACC["ORDER_1"].ATxt6_D;
                            txtDebit6.Tag = ORDER_ACC["ORDER_1"].ATag6_D;
                            txtCredit6.Text = ORDER_ACC["ORDER_1"].ATxt6_C;
                            txtCredit6.Tag = ORDER_ACC["ORDER_1"].ATag6_C;
                            txtCredit7.Text = ORDER_ACC["ORDER_1"].ATxt7_C;
                            txtCredit7.Tag = ORDER_ACC["ORDER_1"].ATag7_C;
                            break;
                        }
                    case 2:
                        {
                            for (int iiCnt = 1; iiCnt < GraidORDER2.Rows.Count; iiCnt++)
                            {
                                FlxInv.Rows.Add();
                                FlxInv.Rows[iiCnt].Height = GraidORDER2.Rows[iiCnt].Height;
                                FlxInv.Rows[iiCnt].Visible = GraidORDER2.Rows[iiCnt].Visible;
                                FlxInv.Rows[iiCnt].StyleNew.BackColor = GraidORDER2.Rows[iiCnt].StyleNew.BackColor;
                                FlxInv.Rows[iiCnt].AllowEditing = GraidORDER2.Rows[iiCnt].AllowEditing;
                                for (int i = 0; i < GraidORDER2.Cols.Count; i++)
                                {
                                    FlxInv.SetData(iiCnt, i, GraidORDER2.GetData(iiCnt, i));
                                }
                                try
                                {
                                    if (string.Concat(FlxInv.GetData(iiCnt, 1)) != string.Empty && FlxInv.Rows[iiCnt].Height > 33)
                                    {
                                        FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 7));
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    if (FlxInv.Rows[iiCnt].Height == 33)
                                    {
                                        FlxInv.SetData(iiCnt, (LangArEn == 0) ? 2 : 4, FlxInv.GetData(iiCnt - 1, 36));
                                    }
                                }
                                catch
                                {
                                }
                            }
                            clearRowsNull();
                            txtDebit1.Text = ORDER_ACC["ORDER_2"].ATxt1_D;
                            txtDebit1.Tag = ORDER_ACC["ORDER_2"].ATag1_D;
                            txtCredit1.Text = ORDER_ACC["ORDER_2"].ATxt1_C;
                            txtCredit1.Tag = ORDER_ACC["ORDER_2"].ATag1_C;
                            txtDebit2.Text = ORDER_ACC["ORDER_2"].ATxt2_D;
                            txtDebit2.Tag = ORDER_ACC["ORDER_2"].ATag2_D;
                            txtCredit2.Text = ORDER_ACC["ORDER_2"].ATxt2_C;
                            txtCredit2.Tag = ORDER_ACC["ORDER_2"].ATag2_C;
                            txtDebit3.Text = ORDER_ACC["ORDER_2"].ATxt3_D;
                            txtDebit3.Tag = ORDER_ACC["ORDER_2"].ATag3_D;
                            txtCredit3.Text = ORDER_ACC["ORDER_2"].ATxt3_C;
                            txtCredit3.Tag = ORDER_ACC["ORDER_2"].ATag3_C;
                            txtDebit5.Text = ORDER_ACC["ORDER_2"].ATxt5_D;
                            txtDebit5.Tag = ORDER_ACC["ORDER_2"].ATag5_D;
                            txtCredit5.Text = ORDER_ACC["ORDER_2"].ATxt5_C;
                            txtCredit5.Tag = ORDER_ACC["ORDER_2"].ATag5_C;
                            txtDebit6.Text = ORDER_ACC["ORDER_2"].ATxt6_D;
                            txtDebit6.Tag = ORDER_ACC["ORDER_2"].ATag6_D;
                            txtCredit6.Text = ORDER_ACC["ORDER_2"].ATxt6_C;
                            txtCredit6.Tag = ORDER_ACC["ORDER_2"].ATag6_C;
                            txtCredit7.Text = ORDER_ACC["ORDER_2"].ATxt7_C;
                            txtCredit7.Tag = ORDER_ACC["ORDER_2"].ATag7_C;
                            break;
                        }
                    case 3:
                        {
                            for (int iiCnt = 1; iiCnt < GraidORDER3.Rows.Count; iiCnt++)
                            {
                                FlxInv.Rows.Add();
                                FlxInv.Rows[iiCnt].Height = GraidORDER3.Rows[iiCnt].Height;
                                FlxInv.Rows[iiCnt].Visible = GraidORDER3.Rows[iiCnt].Visible;
                                FlxInv.Rows[iiCnt].StyleNew.BackColor = GraidORDER3.Rows[iiCnt].StyleNew.BackColor;
                                FlxInv.Rows[iiCnt].AllowEditing = GraidORDER3.Rows[iiCnt].AllowEditing;
                                for (int i = 0; i < GraidORDER3.Cols.Count; i++)
                                {
                                    FlxInv.SetData(iiCnt, i, GraidORDER3.GetData(iiCnt, i));
                                }
                                try
                                {
                                    if (string.Concat(FlxInv.GetData(iiCnt, 1)) != string.Empty && FlxInv.Rows[iiCnt].Height > 33)
                                    {
                                        FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 7));
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    if (FlxInv.Rows[iiCnt].Height == 33)
                                    {
                                        FlxInv.SetData(iiCnt, (LangArEn == 0) ? 2 : 4, FlxInv.GetData(iiCnt - 1, 36));
                                    }
                                }
                                catch
                                {
                                }
                            }
                            clearRowsNull();
                            txtDebit1.Text = ORDER_ACC["ORDER_3"].ATxt1_D;
                            txtDebit1.Tag = ORDER_ACC["ORDER_3"].ATag1_D;
                            txtCredit1.Text = ORDER_ACC["ORDER_3"].ATxt1_C;
                            txtCredit1.Tag = ORDER_ACC["ORDER_3"].ATag1_C;
                            txtDebit2.Text = ORDER_ACC["ORDER_3"].ATxt2_D;
                            txtDebit2.Tag = ORDER_ACC["ORDER_3"].ATag2_D;
                            txtCredit2.Text = ORDER_ACC["ORDER_3"].ATxt2_C;
                            txtCredit2.Tag = ORDER_ACC["ORDER_3"].ATag2_C;
                            txtDebit3.Text = ORDER_ACC["ORDER_3"].ATxt3_D;
                            txtDebit3.Tag = ORDER_ACC["ORDER_3"].ATag3_D;
                            txtCredit3.Text = ORDER_ACC["ORDER_3"].ATxt3_C;
                            txtCredit3.Tag = ORDER_ACC["ORDER_3"].ATag3_C;
                            txtDebit5.Text = ORDER_ACC["ORDER_3"].ATxt5_D;
                            txtDebit5.Tag = ORDER_ACC["ORDER_3"].ATag5_D;
                            txtCredit5.Text = ORDER_ACC["ORDER_3"].ATxt5_C;
                            txtCredit5.Tag = ORDER_ACC["ORDER_3"].ATag5_C;
                            txtDebit6.Text = ORDER_ACC["ORDER_3"].ATxt6_D;
                            txtDebit6.Tag = ORDER_ACC["ORDER_3"].ATag6_D;
                            txtCredit6.Text = ORDER_ACC["ORDER_3"].ATxt6_C;
                            txtCredit6.Tag = ORDER_ACC["ORDER_3"].ATag6_C;
                            txtCredit7.Text = ORDER_ACC["ORDER_3"].ATxt7_C;
                            txtCredit7.Tag = ORDER_ACC["ORDER_3"].ATag7_C;
                            break;
                        }
                    case 4:
                        {
                            for (int iiCnt = 1; iiCnt < GraidORDER4.Rows.Count; iiCnt++)
                            {
                                FlxInv.Rows.Add();
                                FlxInv.Rows[iiCnt].Height = GraidORDER4.Rows[iiCnt].Height;
                                FlxInv.Rows[iiCnt].Visible = GraidORDER4.Rows[iiCnt].Visible;
                                FlxInv.Rows[iiCnt].StyleNew.BackColor = GraidORDER4.Rows[iiCnt].StyleNew.BackColor;
                                FlxInv.Rows[iiCnt].AllowEditing = GraidORDER4.Rows[iiCnt].AllowEditing;
                                for (int i = 0; i < GraidORDER4.Cols.Count; i++)
                                {
                                    FlxInv.SetData(iiCnt, i, GraidORDER4.GetData(iiCnt, i));
                                }
                                try
                                {
                                    if (string.Concat(FlxInv.GetData(iiCnt, 1)) != string.Empty && FlxInv.Rows[iiCnt].Height > 33)
                                    {
                                        FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 7));
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    if (FlxInv.Rows[iiCnt].Height == 33)
                                    {
                                        FlxInv.SetData(iiCnt, (LangArEn == 0) ? 2 : 4, FlxInv.GetData(iiCnt - 1, 36));
                                    }
                                }
                                catch
                                {
                                }
                            }
                            clearRowsNull();
                            txtDebit1.Text = ORDER_ACC["ORDER_4"].ATxt1_D;
                            txtDebit1.Tag = ORDER_ACC["ORDER_4"].ATag1_D;
                            txtCredit1.Text = ORDER_ACC["ORDER_4"].ATxt1_C;
                            txtCredit1.Tag = ORDER_ACC["ORDER_4"].ATag1_C;
                            txtDebit2.Text = ORDER_ACC["ORDER_4"].ATxt2_D;
                            txtDebit2.Tag = ORDER_ACC["ORDER_4"].ATag2_D;
                            txtCredit2.Text = ORDER_ACC["ORDER_4"].ATxt2_C;
                            txtCredit2.Tag = ORDER_ACC["ORDER_4"].ATag2_C;
                            txtDebit3.Text = ORDER_ACC["ORDER_4"].ATxt3_D;
                            txtDebit3.Tag = ORDER_ACC["ORDER_4"].ATag3_D;
                            txtCredit3.Text = ORDER_ACC["ORDER_4"].ATxt3_C;
                            txtCredit3.Tag = ORDER_ACC["ORDER_4"].ATag3_C;
                            txtDebit5.Text = ORDER_ACC["ORDER_4"].ATxt5_D;
                            txtDebit5.Tag = ORDER_ACC["ORDER_4"].ATag5_D;
                            txtCredit5.Text = ORDER_ACC["ORDER_4"].ATxt5_C;
                            txtCredit5.Tag = ORDER_ACC["ORDER_4"].ATag5_C;
                            txtDebit6.Text = ORDER_ACC["ORDER_4"].ATxt6_D;
                            txtDebit6.Tag = ORDER_ACC["ORDER_4"].ATag6_D;
                            txtCredit6.Text = ORDER_ACC["ORDER_4"].ATxt6_C;
                            txtCredit6.Tag = ORDER_ACC["ORDER_4"].ATag6_C;
                            txtCredit7.Text = ORDER_ACC["ORDER_4"].ATxt7_C;
                            txtCredit7.Tag = ORDER_ACC["ORDER_4"].ATag7_C;
                            break;
                        }
                    case 5:
                        {
                            for (int iiCnt = 1; iiCnt < GraidORDER5.Rows.Count; iiCnt++)
                            {
                                FlxInv.Rows.Add();
                                FlxInv.Rows[iiCnt].Height = GraidORDER5.Rows[iiCnt].Height;
                                FlxInv.Rows[iiCnt].Visible = GraidORDER5.Rows[iiCnt].Visible;
                                FlxInv.Rows[iiCnt].StyleNew.BackColor = GraidORDER5.Rows[iiCnt].StyleNew.BackColor;
                                FlxInv.Rows[iiCnt].AllowEditing = GraidORDER5.Rows[iiCnt].AllowEditing;
                                for (int i = 0; i < GraidORDER5.Cols.Count; i++)
                                {
                                    FlxInv.SetData(iiCnt, i, GraidORDER5.GetData(iiCnt, i));
                                }
                                try
                                {
                                    if (string.Concat(FlxInv.GetData(iiCnt, 1)) != string.Empty && FlxInv.Rows[iiCnt].Height > 33)
                                    {
                                        FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 7));
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    if (FlxInv.Rows[iiCnt].Height == 33)
                                    {
                                        FlxInv.SetData(iiCnt, (LangArEn == 0) ? 2 : 4, FlxInv.GetData(iiCnt - 1, 36));
                                    }
                                }
                                catch
                                {
                                }
                            }
                            clearRowsNull();
                            txtDebit1.Text = ORDER_ACC["ORDER_5"].ATxt1_D;
                            txtDebit1.Tag = ORDER_ACC["ORDER_5"].ATag1_D;
                            txtCredit1.Text = ORDER_ACC["ORDER_5"].ATxt1_C;
                            txtCredit1.Tag = ORDER_ACC["ORDER_5"].ATag1_C;
                            txtDebit2.Text = ORDER_ACC["ORDER_5"].ATxt2_D;
                            txtDebit2.Tag = ORDER_ACC["ORDER_5"].ATag2_D;
                            txtCredit2.Text = ORDER_ACC["ORDER_5"].ATxt2_C;
                            txtCredit2.Tag = ORDER_ACC["ORDER_5"].ATag2_C;
                            txtDebit3.Text = ORDER_ACC["ORDER_5"].ATxt3_D;
                            txtDebit3.Tag = ORDER_ACC["ORDER_5"].ATag3_D;
                            txtCredit3.Text = ORDER_ACC["ORDER_5"].ATxt3_C;
                            txtCredit3.Tag = ORDER_ACC["ORDER_5"].ATag3_C;
                            txtDebit5.Text = ORDER_ACC["ORDER_5"].ATxt5_D;
                            txtDebit5.Tag = ORDER_ACC["ORDER_5"].ATag5_D;
                            txtCredit5.Text = ORDER_ACC["ORDER_5"].ATxt5_C;
                            txtCredit5.Tag = ORDER_ACC["ORDER_5"].ATag5_C;
                            txtDebit6.Text = ORDER_ACC["ORDER_5"].ATxt6_D;
                            txtDebit6.Tag = ORDER_ACC["ORDER_5"].ATag6_D;
                            txtCredit6.Text = ORDER_ACC["ORDER_5"].ATxt6_C;
                            txtCredit6.Tag = ORDER_ACC["ORDER_5"].ATag6_C;
                            txtCredit7.Text = ORDER_ACC["ORDER_5"].ATxt7_C;
                            txtCredit7.Tag = ORDER_ACC["ORDER_5"].ATag7_C;
                            break;
                        }
                }
            }
            catch
            {
            }
            CommCalculat();
            FlxDat.Visible = false;
            UpdateVcr();
            checkBox_Credit.CheckedChanging += lijsadf;
        }
        private void clearRowsNull()
        {
            for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
            {
                try
                {
                    if (string.Concat(FlxInv.GetData(iiCnt, 1)) == string.Empty && FlxInv.Rows[iiCnt].Height != 33)
                    {
                        FlxInv.RemoveItem(iiCnt);
                        iiCnt = 1;
                    }
                }
                catch
                {
                }
            }
        }
        //private void buttonItem_SaveOrder_Click(object sender, EventArgs e)
        //{
        //    if (State != FormState.New || FlxInv.Rows.Count <= 1)
        //    {
        //        return;
        //    }
        //    textBox_ID.Focus();
        //    FrmOrderNo frm = new FrmOrderNo();
        //    frm.Tag = LangArEn;
        //    frm.TopMost = true;
        //    frm.ShowDialog();
        //    if (frm.vSize_ == 1)
        //    {
        //        if (buttonItem_Order1.Visible)
        //        {
        //            try
        //            {
        //                if (MessageBox.Show((LangArEn == 0) ? ("هناك فاتورة معلقة على هذا الطلب باسم العميل  [" + data_this_ORDER1.CusVenNm + "] \n  هل تريد الكتابة عليه ؟") : ("There is a bill pending on this request on behalf of the client [" + data_this_ORDER1.CusVenNm + "] \n  Do you want to write it?"), VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
        //                {
        //                    return;
        //                }
        //            }
        //            catch
        //            {
        //            }
        //        }
        //        data_this_ORDER1 = new T_INVHED();
        //        data_this_ORDER1 = GetData_ORDER();
        //        try
        //        {
        //            if (!string.IsNullOrEmpty(GetData_ORDER().CusVenNm))
        //            {
        //                labelItem_OrderCust1.Text = GetData_ORDER().CusVenNm;
        //            }
        //            else
        //            {
        //                labelItem_OrderCust1.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //            }
        //        }
        //        catch
        //        {
        //            labelItem_OrderCust1.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //        }
        //        ORDER_ACC["ORDER_1"].ATxt1_D = txtDebit1.Text;
        //        ORDER_ACC["ORDER_1"].ATag1_D = txtDebit1.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt1_C = txtCredit1.Text;
        //        ORDER_ACC["ORDER_1"].ATag1_C = txtCredit1.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt2_D = txtDebit2.Text;
        //        ORDER_ACC["ORDER_1"].ATag2_D = txtDebit2.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt2_C = txtCredit2.Text;
        //        ORDER_ACC["ORDER_1"].ATag2_C = txtCredit2.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt3_D = txtDebit3.Text;
        //        ORDER_ACC["ORDER_1"].ATag3_D = txtDebit3.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt3_C = txtCredit3.Text;
        //        ORDER_ACC["ORDER_1"].ATag3_C = txtCredit3.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt5_D = txtDebit5.Text;
        //        ORDER_ACC["ORDER_1"].ATag5_D = txtDebit5.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt5_C = txtCredit5.Text;
        //        ORDER_ACC["ORDER_1"].ATag5_C = txtCredit5.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt6_D = txtDebit6.Text;
        //        ORDER_ACC["ORDER_1"].ATag6_D = txtDebit6.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt6_C = txtCredit6.Text;
        //        ORDER_ACC["ORDER_1"].ATag6_C = txtCredit6.Tag.ToString();
        //        ORDER_ACC["ORDER_1"].ATxt7_C = txtCredit7.Text;
        //        ORDER_ACC["ORDER_1"].ATag7_C = txtCredit7.Tag.ToString();
        //        GraidORDER1.Rows.Count = 0;
        //        GetDataLines(1);
        //    }
        //    else if (frm.vSize_ == 2)
        //    {
        //        if (buttonItem_Order2.Visible)
        //        {
        //            try
        //            {
        //                if (MessageBox.Show((LangArEn == 0) ? ("هناك فاتورة معلقة على هذا الطلب باسم العميل  [" + data_this_ORDER2.CusVenNm + "] \n  هل تريد الكتابة عليه ؟") : ("There is a bill pending on this request on behalf of the client [" + data_this_ORDER2.CusVenNm + "] \n  Do you want to write it?"), VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
        //                {
        //                    return;
        //                }
        //            }
        //            catch
        //            {
        //            }
        //        }
        //        data_this_ORDER2 = new T_INVHED();
        //        data_this_ORDER2 = GetData_ORDER();
        //        try
        //        {
        //            if (!string.IsNullOrEmpty(GetData_ORDER().CusVenNm))
        //            {
        //                //labelItem_OrderCust2.Text = GetData_ORDER().CusVenNm;
        //            }
        //            else
        //            {
        //             //   labelItem_OrderCust2.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //            }
        //        }
        //        catch
        //        {
        //            //labelItem_OrderCust2.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //        }
        //        ORDER_ACC["ORDER_2"].ATxt1_D = txtDebit1.Text;
        //        ORDER_ACC["ORDER_2"].ATag1_D = txtDebit1.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt1_C = txtCredit1.Text;
        //        ORDER_ACC["ORDER_2"].ATag1_C = txtCredit1.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt2_D = txtDebit2.Text;
        //        ORDER_ACC["ORDER_2"].ATag2_D = txtDebit2.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt2_C = txtCredit2.Text;
        //        ORDER_ACC["ORDER_2"].ATag2_C = txtCredit2.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt3_D = txtDebit3.Text;
        //        ORDER_ACC["ORDER_2"].ATag3_D = txtDebit3.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt3_C = txtCredit3.Text;
        //        ORDER_ACC["ORDER_2"].ATag3_C = txtCredit3.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt5_D = txtDebit5.Text;
        //        ORDER_ACC["ORDER_2"].ATag5_D = txtDebit5.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt5_C = txtCredit5.Text;
        //        ORDER_ACC["ORDER_2"].ATag5_C = txtCredit5.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt6_D = txtDebit6.Text;
        //        ORDER_ACC["ORDER_2"].ATag6_D = txtDebit6.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt6_C = txtCredit6.Text;
        //        ORDER_ACC["ORDER_2"].ATag6_C = txtCredit6.Tag.ToString();
        //        ORDER_ACC["ORDER_2"].ATxt7_C = txtCredit7.Text;
        //        ORDER_ACC["ORDER_2"].ATag7_C = txtCredit7.Tag.ToString();
        //        GraidORDER2.Rows.Count = 0;
        //        GetDataLines(2);
        //    }
        //    else if (frm.vSize_ == 3)
        //    {
        //        if (buttonItem_Order3.Visible)
        //        {
        //            try
        //            {
        //                if (MessageBox.Show((LangArEn == 0) ? ("هناك فاتورة معلقة على هذا الطلب باسم العميل  [" + data_this_ORDER3.CusVenNm + "] \n  هل تريد الكتابة عليه ؟") : ("There is a bill pending on this request on behalf of the client [" + data_this_ORDER3.CusVenNm + "] \n  Do you want to write it?"), VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
        //                {
        //                    return;
        //                }
        //            }
        //            catch
        //            {
        //            }
        //        }
        //        data_this_ORDER3 = new T_INVHED();
        //        data_this_ORDER3 = GetData_ORDER();
        //        try
        //        {
        //            if (!string.IsNullOrEmpty(GetData_ORDER().CusVenNm))
        //            {
        //                labelItem_OrderCust3.Text = GetData_ORDER().CusVenNm;
        //            }
        //            else
        //            {
        //                labelItem_OrderCust3.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //            }
        //        }
        //        catch
        //        {
        //            labelItem_OrderCust3.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //        }
        //        ORDER_ACC["ORDER_3"].ATxt1_D = txtDebit1.Text;
        //        ORDER_ACC["ORDER_3"].ATag1_D = txtDebit1.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt1_C = txtCredit1.Text;
        //        ORDER_ACC["ORDER_3"].ATag1_C = txtCredit1.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt2_D = txtDebit2.Text;
        //        ORDER_ACC["ORDER_3"].ATag2_D = txtDebit2.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt2_C = txtCredit2.Text;
        //        ORDER_ACC["ORDER_3"].ATag2_C = txtCredit2.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt3_D = txtDebit3.Text;
        //        ORDER_ACC["ORDER_3"].ATag3_D = txtDebit3.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt3_C = txtCredit3.Text;
        //        ORDER_ACC["ORDER_3"].ATag3_C = txtCredit3.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt5_D = txtDebit5.Text;
        //        ORDER_ACC["ORDER_3"].ATag5_D = txtDebit5.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt5_C = txtCredit5.Text;
        //        ORDER_ACC["ORDER_3"].ATag5_C = txtCredit5.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt6_D = txtDebit6.Text;
        //        ORDER_ACC["ORDER_3"].ATag6_D = txtDebit6.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt6_C = txtCredit6.Text;
        //        ORDER_ACC["ORDER_3"].ATag6_C = txtCredit6.Tag.ToString();
        //        ORDER_ACC["ORDER_3"].ATxt7_C = txtCredit7.Text;
        //        ORDER_ACC["ORDER_3"].ATag7_C = txtCredit7.Tag.ToString();
        //        GraidORDER3.Rows.Count = 0;
        //        GetDataLines(3);
        //    }
        //    else if (frm.vSize_ == 4)
        //    {
        //        if (buttonItem_Order4.Visible)
        //        {
        //            try
        //            {
        //                if (MessageBox.Show((LangArEn == 0) ? ("هناك فاتورة معلقة على هذا الطلب باسم العميل  [" + data_this_ORDER4.CusVenNm + "] \n  هل تريد الكتابة عليه ؟") : ("There is a bill pending on this request on behalf of the client [" + data_this_ORDER4.CusVenNm + "] \n  Do you want to write it?"), VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
        //                {
        //                    return;
        //                }
        //            }
        //            catch
        //            {
        //            }
        //        }
        //        data_this_ORDER4 = new T_INVHED();
        //        data_this_ORDER4 = GetData_ORDER();
        //        try
        //        {
        //            if (!string.IsNullOrEmpty(GetData_ORDER().CusVenNm))
        //            {
        //                labelItem_OrderCust4.Text = GetData_ORDER().CusVenNm;
        //            }
        //            else
        //            {
        //                labelItem_OrderCust4.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //            }
        //        }
        //        catch
        //        {
        //            labelItem_OrderCust4.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //        }
        //        ORDER_ACC["ORDER_4"].ATxt1_D = txtDebit1.Text;
        //        ORDER_ACC["ORDER_4"].ATag1_D = txtDebit1.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt1_C = txtCredit1.Text;
        //        ORDER_ACC["ORDER_4"].ATag1_C = txtCredit1.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt2_D = txtDebit2.Text;
        //        ORDER_ACC["ORDER_4"].ATag2_D = txtDebit2.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt2_C = txtCredit2.Text;
        //        ORDER_ACC["ORDER_4"].ATag2_C = txtCredit2.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt3_D = txtDebit3.Text;
        //        ORDER_ACC["ORDER_4"].ATag3_D = txtDebit3.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt3_C = txtCredit3.Text;
        //        ORDER_ACC["ORDER_4"].ATag3_C = txtCredit3.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt5_D = txtDebit5.Text;
        //        ORDER_ACC["ORDER_4"].ATag5_D = txtDebit5.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt5_C = txtCredit5.Text;
        //        ORDER_ACC["ORDER_4"].ATag5_C = txtCredit5.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt6_D = txtDebit6.Text;
        //        ORDER_ACC["ORDER_4"].ATag6_D = txtDebit6.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt6_C = txtCredit6.Text;
        //        ORDER_ACC["ORDER_4"].ATag6_C = txtCredit6.Tag.ToString();
        //        ORDER_ACC["ORDER_4"].ATxt7_C = txtCredit7.Text;
        //        ORDER_ACC["ORDER_4"].ATag7_C = txtCredit7.Tag.ToString();
        //        GraidORDER4.Rows.Count = 0;
        //        GetDataLines(4);
        //    }
        //    else if (frm.vSize_ == 5)
        //    {
        //        if (buttonItem_Order5.Visible)
        //        {
        //            try
        //            {
        //                if (MessageBox.Show((LangArEn == 0) ? ("هناك فاتورة معلقة على هذا الطلب باسم العميل  [" + data_this_ORDER5.CusVenNm + "] \n  هل تريد الكتابة عليه ؟") : ("There is a bill pending on this request on behalf of the client [" + data_this_ORDER5.CusVenNm + "] \n  Do you want to write it?"), VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
        //                {
        //                    return;
        //                }
        //            }
        //            catch
        //            {
        //            }
        //        }
        //        data_this_ORDER5 = new T_INVHED();
        //        data_this_ORDER5 = GetData_ORDER();
        //        try
        //        {
        //            if (!string.IsNullOrEmpty(GetData_ORDER().CusVenNm))
        //            {
        //                labelItem_OrderCust5.Text = GetData_ORDER().CusVenNm;
        //            }
        //            else
        //            {
        //                labelItem_OrderCust5.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //            }
        //        }
        //        catch
        //        {
        //            labelItem_OrderCust5.Text = ((LangArEn == 0) ? "بدون عميل" : "Without Cust");
        //        }
        //        ORDER_ACC["ORDER_5"].ATxt1_D = txtDebit1.Text;
        //        ORDER_ACC["ORDER_5"].ATag1_D = txtDebit1.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt1_C = txtCredit1.Text;
        //        ORDER_ACC["ORDER_5"].ATag1_C = txtCredit1.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt2_D = txtDebit2.Text;
        //        ORDER_ACC["ORDER_5"].ATag2_D = txtDebit2.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt2_C = txtCredit2.Text;
        //        ORDER_ACC["ORDER_5"].ATag2_C = txtCredit2.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt3_D = txtDebit3.Text;
        //        ORDER_ACC["ORDER_5"].ATag3_D = txtDebit3.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt3_C = txtCredit3.Text;
        //        ORDER_ACC["ORDER_5"].ATag3_C = txtCredit3.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt5_D = txtDebit5.Text;
        //        ORDER_ACC["ORDER_5"].ATag5_D = txtDebit5.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt5_C = txtCredit5.Text;
        //        ORDER_ACC["ORDER_5"].ATag5_C = txtCredit5.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt6_D = txtDebit6.Text;
        //        ORDER_ACC["ORDER_5"].ATag6_D = txtDebit6.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt6_C = txtCredit6.Text;
        //        ORDER_ACC["ORDER_5"].ATag6_C = txtCredit6.Tag.ToString();
        //        ORDER_ACC["ORDER_5"].ATxt7_C = txtCredit7.Text;
        //        ORDER_ACC["ORDER_5"].ATag7_C = txtCredit7.Tag.ToString();
        //        GraidORDER5.Rows.Count = 0;
        //        GetDataLines(5);
        //    }
        //    if (frm.vSts_Op)
        //    {
        //        buttonItem_Default_Click(sender, e);
        //    }
        //    buttonItem_SaveOrder_VisibleChanged(sender, e);
        //}
        //private void buttonItem_SaveOrder_VisibleChanged(object sender, EventArgs e)
        //{
        //    if (! puBar1.Button_Add.Visible || ! puBar1.Button_Add.Enabled)
        //    {
        //        buttonItem_SaveOrder.Visible = false;
        //        return;
        //    }
        //    if (buttonItem_SaveOrder.Visible)
        //    {
        //        try
        //        {
        //            if (data_this_ORDER1 != null && !string.IsNullOrEmpty(data_this_ORDER1.InvNo))
        //            {
        //                buttonItem_Order1.Visible = true;
        //            }
        //            else
        //            {
        //                buttonItem_Order1.Visible = false;
        //            }
        //        }
        //        catch
        //        {
        //        }
        //        try
        //        {
        //            if (data_this_ORDER2 != null && !string.IsNullOrEmpty(data_this_ORDER2.InvNo))
        //            {
        //                buttonItem_Order2.Visible = true;
        //            }
        //            else
        //            {
        //                buttonItem_Order2.Visible = false;
        //            }
        //        }
        //        catch
        //        {
        //        }
        //        try
        //        {
        //            if (data_this_ORDER3 != null && !string.IsNullOrEmpty(data_this_ORDER3.InvNo))
        //            {
        //                buttonItem_Order3.Visible = true;
        //            }
        //            else
        //            {
        //                buttonItem_Order3.Visible = false;
        //            }
        //        }
        //        catch
        //        {
        //        }
        //        try
        //        {
        //            if (data_this_ORDER4 != null && !string.IsNullOrEmpty(data_this_ORDER4.InvNo))
        //            {
        //                buttonItem_Order4.Visible = true;
        //            }
        //            else
        //            {
        //                buttonItem_Order4.Visible = false;
        //            }
        //        }
        //        catch
        //        {
        //        }
        //        try
        //        {
        //            if (data_this_ORDER5 != null && !string.IsNullOrEmpty(data_this_ORDER5.InvNo))
        //            {
        //                buttonItem_Order5.Visible = true;
        //            }
        //            else
        //            {
        //                buttonItem_Order5.Visible = false;
        //            }
        //        }
        //        catch
        //        {
        //        }
        //        if (buttonItem_Order1.Visible || buttonItem_Order2.Visible || buttonItem_Order3.Visible || buttonItem_Order4.Visible || buttonItem_Order5.Visible)
        //        {
        //            buttonItem_Default.Visible = true;
        //        }
        //        else
        //        {
        //            buttonItem_Default.Visible = false;
        //        }
        //    }
        //    superTabStrip_ORders.Refresh();
        //}
        private void buttonItem_Order1_Print_Click(object sender, EventArgs e)
        {
            PrintOrders(1);
        }
        private void buttonItem_Order2_Print_Click(object sender, EventArgs e)
        {
            PrintOrders(2);
        }
        private void buttonItem_Order3_Print_Click(object sender, EventArgs e)
        {
            PrintOrders(3);
        }
        private void buttonItem_Order4_Print_Click(object sender, EventArgs e)
        {
            PrintOrders(4);
        }
        private void buttonItem_Order5_Print_Click(object sender, EventArgs e)
        {
            PrintOrders(5);
        }
        private void PrintOrders(int _OrderTyp)
        {
            try
            {
                if ((_InvSetting.InvpRINTERInfo.nTyp.Substring(1, 1) != "2"))
                {
                    orderNo_activate = _OrderTyp;
                    T_INVHED newData = new T_INVHED();
                    C1FlexGrid _ListGraid = new C1FlexGrid();
                    switch (_OrderTyp)
                    {
                        case 1:
                            newData = data_this_ORDER1;
                            _ListGraid = GraidORDER1;
                            break;
                        case 2:
                            newData = data_this_ORDER2;
                            _ListGraid = GraidORDER2;
                            break;
                        case 3:
                            newData = data_this_ORDER3;
                            _ListGraid = GraidORDER3;
                            break;
                        case 4:
                            newData = data_this_ORDER4;
                            _ListGraid = GraidORDER4;
                            break;
                        case 5:
                            newData = data_this_ORDER5;
                            _ListGraid = GraidORDER5;
                            break;
                    }
                    if (VarGeneral.SSSLev != "R" && VarGeneral.SSSLev != "C" && VarGeneral.SSSLev != "H")
                    {
                        for (int i = 1; i <= _ListGraid.Rows.Count; i++)
                        {
                            try
                            {
                                if (_ListGraid.Rows[i].Height == 33)
                                {
                                    _ListGraid.SetData(i - 1, 36, _ListGraid.Rows[i][2].ToString());
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    bool tax = true;
                    bool taxline = true;
                    bool taxByTotal = false;
                    DataSet _null = new DataSet();
                    VarGeneral.RepData = new DataSet();
                    DataSet _List = new DataSet();
                    VarGeneral.RepData.Tables.Add();
                    _null.Tables.Add();
                    _null.Tables[0].Columns.Add();
                    _null.Tables[0].Rows.Add("_null");
                    VarGeneral.RepData.Tables[0].Merge(_null.Tables[0]);
                    VarGeneral.RepData.Tables[0].Columns.Add("InvNo");
                    VarGeneral.RepData.Tables[0].Columns.Add("HDat");
                    VarGeneral.RepData.Tables[0].Columns.Add("GDat");
                    VarGeneral.RepData.Tables[0].Columns.Add("CusVenNo");
                    VarGeneral.RepData.Tables[0].Columns.Add("CusVenNm");
                    VarGeneral.RepData.Tables[0].Columns.Add("CusVenAdd");
                    VarGeneral.RepData.Tables[0].Columns.Add("CusVenTel");
                    VarGeneral.RepData.Tables[0].Columns.Add("RefNo");
                    VarGeneral.RepData.Tables[0].Columns.Add("UsrNamA");
                    VarGeneral.RepData.Tables[0].Columns.Add("UsrNamE");
                    VarGeneral.RepData.Tables[0].Columns.Add("Branch_Name");
                    VarGeneral.RepData.Tables[0].Columns.Add("Branch_NameE");
                    VarGeneral.RepData.Tables[0].Columns.Add("InvCash");
                    VarGeneral.RepData.Tables[0].Columns.Add("Remark");
                    VarGeneral.RepData.Tables[0].Columns.Add("EstDat");
                    VarGeneral.RepData.Tables[0].Columns.Add("EstDatNote");
                    VarGeneral.RepData.Tables[0].Columns.Add("InvQty");
                    VarGeneral.RepData.Tables[0].Columns.Add("InvTotLocCur");
                    VarGeneral.RepData.Tables[0].Columns.Add("InvDisValLocCur");
                    VarGeneral.RepData.Tables[0].Columns.Add("InvNetLocCur");
                    VarGeneral.RepData.Tables[0].Columns.Add("LogImg");
                    VarGeneral.RepData.Tables[0].Columns.Add("TaxAcc");
                    VarGeneral.RepData.Tables[0].Columns.Add("TaxNoteInv");
                    VarGeneral.RepData.Tables[0].Columns.Add("InvAddTax");
                    VarGeneral.RepData.Tables[0].Columns.Add("InvAddTaxlLoc");
                    VarGeneral.RepData.Tables[0].Columns.Add("TaxGaidID");
                    VarGeneral.RepData.Tables[0].Columns.Add("IsTaxUse", typeof(bool));
                    VarGeneral.RepData.Tables[0].Columns.Add("IsTaxLines", typeof(bool));
                    VarGeneral.RepData.Tables[0].Columns.Add("IsTaxByTotal", typeof(bool));
                    VarGeneral.RepData.Tables[0].Rows.Add();
                    VarGeneral.RepData.Tables[0].Rows[1]["InvNo"] = ((LangArEn == 0) ? "معلق" : "Hold");
                    VarGeneral.RepData.Tables[0].Rows[1]["HDat"] = newData.HDat;
                    VarGeneral.RepData.Tables[0].Rows[1]["GDat"] = newData.GDat;
                    VarGeneral.RepData.Tables[0].Rows[1]["CusVenNo"] = newData.CusVenNo;
                    VarGeneral.RepData.Tables[0].Rows[1]["CusVenNm"] = newData.CusVenNm;
                    VarGeneral.RepData.Tables[0].Rows[1]["CusVenAdd"] = newData.CusVenAdd;
                    VarGeneral.RepData.Tables[0].Rows[1]["CusVenTel"] = newData.CusVenTel;
                    VarGeneral.RepData.Tables[0].Rows[1]["RefNo"] = newData.RefNo;
                    VarGeneral.RepData.Tables[0].Rows[1]["UsrNamA"] = VarGeneral.UserNameA;
                    VarGeneral.RepData.Tables[0].Rows[1]["UsrNamE"] = VarGeneral.UserNameE;
                    VarGeneral.RepData.Tables[0].Rows[1]["Branch_Name"] = VarGeneral.BranchNameA;
                    VarGeneral.RepData.Tables[0].Rows[1]["Branch_NameE"] = VarGeneral.BranchNameE;
                    VarGeneral.RepData.Tables[0].Rows[1]["LogImg"] = VarGeneral.Settings_Sys.LogImg;
                    VarGeneral.RepData.Tables[0].Rows[1]["TaxAcc"] = VarGeneral.Settings_Sys.TaxAcc;
                    VarGeneral.RepData.Tables[0].Rows[1]["TaxNoteInv"] = VarGeneral.Settings_Sys.TaxNoteInv;
                    VarGeneral.RepData.Tables[0].Rows[1]["InvAddTax"] = newData.InvAddTax;
                    VarGeneral.RepData.Tables[0].Rows[1]["InvAddTaxlLoc"] = newData.InvAddTaxlLoc;
                    VarGeneral.RepData.Tables[0].Rows[1]["TaxGaidID"] = newData.TaxGaidID;
                    VarGeneral.RepData.Tables[0].Rows[1]["IsTaxUse"] = newData.IsTaxUse.Value;
                    VarGeneral.RepData.Tables[0].Rows[1]["IsTaxLines"] = newData.IsTaxLines.Value;
                    VarGeneral.RepData.Tables[0].Rows[1]["IsTaxByTotal"] = newData.IsTaxByTotal.Value;
                    tax = newData.IsTaxUse.Value;
                    taxline = newData.IsTaxLines.Value;
                    taxByTotal = newData.IsTaxByTotal.Value;
                    try
                    {
                        VarGeneral.RepData.Tables[0].Rows[1]["InvCash"] = newData.InvCash;
                    }
                    catch
                    {
                        VarGeneral.RepData.Tables[0].Rows[1]["InvCash"] = "نقدي";
                    }
                    VarGeneral.RepData.Tables[0].Rows[1]["Remark"] = newData.Remark;
                    VarGeneral.RepData.Tables[0].Rows[1]["EstDat"] = newData.EstDat;
                    VarGeneral.RepData.Tables[0].Rows[1]["EstDatNote"] = 0;
                    VarGeneral.RepData.Tables[0].Rows[1]["InvQty"] = newData.InvQty;
                    VarGeneral.RepData.Tables[0].Rows[1]["InvTotLocCur"] = newData.InvTotLocCur;
                    VarGeneral.RepData.Tables[0].Rows[1]["InvDisValLocCur"] = newData.InvDisValLocCur;
                    VarGeneral.RepData.Tables[0].Rows[1]["InvNetLocCur"] = newData.InvNetLocCur;
                    _List.Tables.Add();
                    _List.Tables[0].Columns.Add("InvId");
                    _List.Tables[0].Columns.Add("InvSer");
                    _List.Tables[0].Columns.Add("ItmNo");
                    _List.Tables[0].Columns.Add("Cost");
                    _List.Tables[0].Columns.Add("QtyAbs");
                    _List.Tables[0].Columns.Add("ItmDes");
                    _List.Tables[0].Columns.Add("ItmUnt");
                    _List.Tables[0].Columns.Add("ItmDesE");
                    _List.Tables[0].Columns.Add("ItmUntE");
                    _List.Tables[0].Columns.Add("ItmUntPak");
                    _List.Tables[0].Columns.Add("StoreNo");
                    _List.Tables[0].Columns.Add("Price");
                    _List.Tables[0].Columns.Add("Amount");
                    _List.Tables[0].Columns.Add("RealQty");
                    _List.Tables[0].Columns.Add("DatExper");
                    _List.Tables[0].Columns.Add("ItmDis");
                    _List.Tables[0].Columns.Add("RunCod");
                    _List.Tables[0].Columns.Add("ItmWight");
                    _List.Tables[0].Columns.Add("LineDetails");
                    _List.Tables[0].Columns.Add("InvDet_ID");
                    _List.Tables[0].Columns.Add("TaxValue");
                    _List.Tables[0].Columns.Add("ItmTax");
                    _List.Tables[0].Columns.Add("ItmCat", typeof(int));
                    _List.Tables[0].Columns.Add("defPrn", typeof(string));
                    for (int i = 1; i < _ListGraid.Rows.Count; i++)
                    {
                        if (_ListGraid.Rows[i].Height == 35)
                        {
                            if (string.Concat(_ListGraid.GetData(i, 1)) != string.Empty)
                            {
                                _List.Tables[0].Rows.Add();
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["InvId"] = string.Empty;
                                }
                                catch
                                {
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["InvSer"] = i.ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["InvSer"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmNo"] = _ListGraid.GetData(i, 1).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmNo"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmCat"] = db.StockItem(_ListGraid.GetData(i, 1).ToString()).ItmCat;
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmCat"] = 1;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["defPrn"] = db.StockInvSettingInvoices(VarGeneral.UserID, db.StockItem(_ListGraid.GetData(i, 1).ToString()).ItmCat.Value).defPrn;
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["defPrn"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["Cost"] = _ListGraid.GetData(i, 10).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["Cost"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["QtyAbs"] = _ListGraid.GetData(i, 7).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["QtyAbs"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmDes"] = _ListGraid.GetData(i, 2).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmDes"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmUnt"] = _ListGraid.GetData(i, 3).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmUnt"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmDesE"] = _ListGraid.GetData(i, 4).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmDesE"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmUntE"] = _ListGraid.GetData(i, 5).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmUntE"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmUntPak"] = _ListGraid.GetData(i, 11).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmUntPak"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["StoreNo"] = _ListGraid.GetData(i, 6).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["StoreNo"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["Price"] = _ListGraid.GetData(i, 8).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["Price"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["Amount"] = _ListGraid.GetData(i, 38).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["Amount"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["RealQty"] = _ListGraid.GetData(i, 12).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["RealQty"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["DatExper"] = _ListGraid.GetData(i, 27).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["DatExper"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmDis"] = _ListGraid.GetData(i, 9).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmDis"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["RunCod"] = _ListGraid.GetData(i, 35).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["RunCod"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmWight"] = _ListGraid.GetData(i, 33).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmWight"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["LineDetails"] = _ListGraid.GetData(i, 36).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["LineDetails"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["InvDet_ID"] = _ListGraid.GetData(i, 25).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["InvDet_ID"] = string.Empty;
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["TaxValue"] = 0;
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["TaxValue"] = "0";
                                }
                                try
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmTax"] = _ListGraid.GetData(i, 31).ToString();
                                }
                                catch
                                {
                                    _List.Tables[0].Rows[i - 1]["ItmTax"] = string.Empty;
                                }
                            }
                        }
                        else if (_ListGraid.Rows[i].Height < 35)
                        {
                            _List.Tables[0].Rows.Add();
                        }
                    }
                    VarGeneral.RepData.Tables[0].Merge(_List.Tables[0]);
                    if (VarGeneral.RepData.Tables[0].Rows.Count != 0)
                    {
                        try
                        {
                            for (int i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                            {
                                try
                                {
                                    for (int ii = 0; ii < VarGeneral.RepData.Tables[0].Columns.Count; ii++)
                                    {
                                        if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "EstDatNote")
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = 0;
                                        }
                                        if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "LogImg")
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = VarGeneral.Settings_Sys.LogImg;
                                        }
                                        if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "UsrNamA")
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = VarGeneral.UserNameA;
                                        }
                                        if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "UsrNamE")
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = VarGeneral.UserNameE;
                                        }
                                        if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "Branch_Name")
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = VarGeneral.BranchNameA;
                                        }
                                        if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "Branch_NameE")
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = VarGeneral.BranchNameE;
                                        }
                                        try
                                        {
                                            if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "IsTaxUse" && string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[i][ii].ToString()))
                                            {
                                                VarGeneral.RepData.Tables[0].Rows[i][ii] = tax;
                                            }
                                        }
                                        catch
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = true;
                                        }
                                        try
                                        {
                                            if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "IsTaxLines" && string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[i][ii].ToString()))
                                            {
                                                VarGeneral.RepData.Tables[0].Rows[i][ii] = taxline;
                                            }
                                        }
                                        catch
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = true;
                                        }
                                        try
                                        {
                                            if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "IsTaxByTotal" && string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[i][ii].ToString()))
                                            {
                                                VarGeneral.RepData.Tables[0].Rows[i][ii] = taxByTotal;
                                            }
                                        }
                                        catch
                                        {
                                            VarGeneral.RepData.Tables[0].Rows[i][ii] = false;
                                        }
                                        if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "ItmCat")
                                        {
                                            try
                                            {
                                                VarGeneral.RepData.Tables[0].Rows[i][ii] = db.StockItem(VarGeneral.RepData.Tables[0].Rows[i]["ItmNo"].ToString()).ItmCat;
                                            }
                                            catch
                                            {
                                                VarGeneral.RepData.Tables[0].Rows[i][ii] = 1;
                                            }
                                        }
                                        if (VarGeneral.RepData.Tables[0].Columns[ii].ColumnName == "defPrn")
                                        {
                                            try
                                            {
                                                VarGeneral.RepData.Tables[0].Rows[i][ii] = db.StockInvSettingInvoices(VarGeneral.UserID, db.StockItem(VarGeneral.RepData.Tables[0].Rows[i]["ItmNo"].ToString()).ItmCat.Value).defPrn;
                                            }
                                            catch
                                            {
                                                VarGeneral.RepData.Tables[0].Rows[i][ii] = string.Empty;
                                            }
                                        }
                                    }
                                }
                                catch
                                {
                                }
                            }
                            FrmReportsViewer frm = new FrmReportsViewer();
                            frm.Repvalue = "InvSal";
                            frm.RepCashier = "InvoiceCachier";
                            frm.Repvalue = "InvSalWtr";
                            frm.RepCashier = "InvoiceCachierWaiter";

                            frm.Tag = LangArEn;
                            VarGeneral.itmDes = "HOLD";
                            frm.BarcodSts = true;
                            if (_InvSetting.InvpRINTERInfo.nTyp.Substring(1, 1) == "1")
                            {
                                frm.Repvalue = "InvSal";
                            }
                            else
                            {

                                frm.RepCashier = "InvoiceCachier";
                            }
                            if (puBar1.ChkA4Cahir.Checked)
                            {
                                if (frm.Repvalue == "InvSal")
                                {

                                    frm.RepCashier = "InvoiceCachier";
                                }
                                else
                                {
                                    frm.Repvalue = "InvSal";
                                }
                            }
                            VarGeneral.IsCashCredit = checkBox_Credit.Visible;
                            VarGeneral.vTitle = Text;
                            frm._Proceess();
                        }
                        catch (Exception error)
                        {
                            VarGeneral.itmDes = string.Empty;
                            VarGeneral.DebLog.writeLog("buttonItem_Print_Click:", error, enable: true);
                            MessageBox.Show(error.Message);
                        }
                    }
                }
            }
            catch
            {
                VarGeneral.itmDes = string.Empty;
                MessageBox.Show((LangArEn == 0) ? "لا توجد حقول للطباعة تأكد من إعدادات الطباعة" : "No printing fields make sure the print settings", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            VarGeneral.itmDes = string.Empty;
            VarGeneral.IsCashCredit = true;
        }
        private void buttonItem_RelayBox_Click(object sender, EventArgs e)
        {

        }
        private void buttonItem_RepItemMovement_Click(object sender, EventArgs e)
        {

        }
        private void bubbleButton_RelayInvPoint_Click(object sender, EventArgs e)
        {

        }
        private void button_SrchCustADD_Click(object sender, EventArgs e)
        {
            if (!VarGeneral.TString.ChkStatShow(permission.FilStr, 33))
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكنك إضافة عميل جديد . راجع صلاحيات المستخدمين" : "You can not add a new customer .. Check the Users Authorizations", VarGeneral.ProdectNam);
                return;
            }
            FrmCustomer frm = new FrmCustomer();
            frm.Tag = LangArEn;
            frm.TopMost = true;
            frm.ShowDialog();
        }
        private void expandableSplitter1_ExpandedChanged(object sender, ExpandedChangeEventArgs e)
        {
            if (expandableSplitter1.Expanded)
            {
                expandableSplitter1.Dock = DockStyle.Top;
            }
            else
            {
                expandableSplitter1.Dock = DockStyle.Bottom;
            }
        }
        private void switchButtonItem_OrderSts_ValueChanged(object sender, EventArgs e)
        {
            if (switchButtonItem_OrderSts.Value)
            {
                ToolStripMenuItem_ProveOrder.Enabled = false;
                ToolStripMenuItem_ProveOrderBack.Enabled = true;
                ToolStripMenuItem_PrintOrder.Enabled = true;
                ToolStripMenuItem_TransSales.Enabled = true;
            }
            else
            {
                ToolStripMenuItem_ProveOrder.Enabled = true;
                ToolStripMenuItem_ProveOrderBack.Enabled = false;
                ToolStripMenuItem_PrintOrder.Enabled = false;
                ToolStripMenuItem_TransSales.Enabled = false;
            }
            Fill_DGV_Main();
        }
        private void ToolStripMenuItem_TransSales_Click(object sender, EventArgs e)
        {
            _orderLocal = false;
            try
            {
                if (puBar1.Button_Add.Visibility == DevExpress.XtraBars.BarItemVisibility.Never || ! puBar1.Button_Add.Enabled)
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن اتمام هذه العملية . الرجاء مراجعة صلاحيات المستخدمين !" : "Can not complete this process . please see the powers of the users!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                if (VarGeneral.vDemo)
                {
                    MessageBox.Show((LangArEn == 0) ? "يرجى تفعيل النسخة للاستفادة من هذه الميزة" : "يرجى تفعيل النسخة للاستفادة من هذه الميزة", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                dbInstance = null;
                int rowIndex = Convert.ToInt32(DGV_Main.PrimaryGrid.Tag);
                VarGeneral.InvTyp = 1;
                Button_Add_Click(sender, e);
                _orderLocal = true;
                DataThisRe = db.StockInvHead(21, DGV_Main.PrimaryGrid.GetCell(rowIndex, 0).Value.ToString());
                RepShow _RepShow = new RepShow();
                _RepShow.Tables = "T_INVDET LEFT OUTER JOIN T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID LEFT OUTER JOIN T_Rooms ON T_INVHED.RoomNo = T_Rooms.ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                string vInvH = " T_INVHED.InvHed_ID, T_INVHED.InvId as vID, T_INVHED.InvNo, T_INVHED.InvTyp, T_INVHED.InvCashPay, T_INVHED.CusVenNo,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Arb_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNm,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Eng_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNmE, T_INVHED.CusVenAdd, T_INVHED.CusVenTel, T_INVHED.Remark, T_INVHED.HDat, T_INVHED.GDat, T_INVHED.MndNo, T_INVHED.SalsManNo, T_INVHED.SalsManNam, T_INVHED.InvTot, T_INVHED.InvDisPrs, ((case when IsDisUse1 = 1 then T_INVHED.InvValGaidDis else T_INVHED.InvDisVal end) + T_INVHED.DesPointsValue) as InvDisVal,T_INVHED.InvDisVal as InvDisValOnly,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints, T_INVHED.InvNet, T_INVHED.InvNetLocCur, T_INVHED.CashPayLocCur, T_INVHED.IfRet, T_INVHED.CashPay, T_INVHED.InvTotLocCur, T_INVHED.InvDisValLocCur, T_INVHED.GadeNo, T_INVHED.GadeId, T_INVHED.RetNo, T_INVHED.RetId, T_INVHED.InvCashPayNm, T_INVHED.InvCost, T_INVHED.CustPri, T_INVHED.ArbTaf, T_INVHED.ToStore, T_INVHED.InvCash, T_INVHED.CurTyp, T_INVHED.EstDat,case when DATEDIFF(day, GETDATE(), EstDat) > 0 Then DATEDIFF(day, GETDATE(), EstDat) WHEN DATEDIFF(day, GETDATE(), InvCashPayNm) > 0 THEN DATEDIFF(day, GETDATE(), InvCashPayNm) Else '0' END as EstDatNote, T_INVHED.InvCstNo, T_INVHED.IfDel, T_INVHED.RefNo, T_INVHED.ToStoreNm, T_INVHED.EngTaf, T_INVHED.IfTrans, T_INVHED.InvQty, T_INVHED.CustNet, T_INVHED.CustRep, T_INVHED.InvWight_T, T_INVHED.IfPrint, T_INVHED.LTim, T_INVHED.DATE_CREATED, T_INVHED.MODIFIED_BY, T_INVHED.CreditPay, T_INVHED.DATE_MODIFIED, T_INVHED.CREATED_BY, T_INVHED.CreditPayLocCur, T_INVHED.NetworkPay, T_INVHED.NetworkPayLocCur, T_INVHED.MndExtrnal, T_INVHED.CompanyID, T_INVHED.InvAddCost, T_INVHED.InvAddCostExtrnal, T_INVHED.InvAddCostExtrnalLoc, T_INVHED.IsExtrnalGaid, T_INVHED.ExtrnalCostGaidID, T_INVHED.InvAddCostLoc, T_INVHED.CommMnd_Inv, T_INVHED.Puyaid, T_INVHED.Remming,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.PersonalNm from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as PersonalNm,T_SYSSETTING.LineGiftlNameA,T_SYSSETTING.LineGiftlNameE,T_Rooms.RomeNo";
                string Fields = " Abs(T_INVDET.Qty) as QtyAbs , T_INVDET.InvDet_ID,T_INVHED.tailor1,T_INVHED.tailor2,T_INVHED.tailor3,T_INVHED.tailor4,T_INVHED.tailor5,T_INVHED.tailor6,T_INVHED.tailor7,T_INVHED.tailor8,T_INVHED.tailor9,T_INVHED.tailor10,T_INVHED.tailor11,T_INVHED.tailor12,T_INVHED.tailor13,T_INVHED.tailor14,T_INVHED.tailor15,T_INVHED.tailor16,T_INVHED.tailor17,T_INVHED.tailor18,T_INVHED.tailor19,T_INVHED.tailor20,T_INVHED.InvImg, T_INVDET.InvNo, T_INVDET.InvId, T_INVDET.InvSer, T_INVDET.ItmNo, T_INVDET.Cost, T_INVDET.Qty, T_INVDET.ItmUnt, T_INVDET.ItmDes,T_INVDET.ItmDesE , T_INVDET.ItmUntE, T_INVDET.ItmUntPak, T_INVDET.StoreNo, T_INVDET.Price, T_INVDET.Amount, T_INVDET.RealQty, T_INVDET.ItmTyp,T_INVDET.ItmDis, (Abs(T_INVDET.Qty) *  T_INVDET.Price) * (T_INVDET.ItmDis / 100) as ItmDisVal, T_INVDET.DatExper, T_INVDET.itmInvDsc,ItmIndex ," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.LineGiftSts, vStr(VarGeneral.InvTyp)) ? " T_INVDET.ItmWight " : " 0 as ItmWight") + ", T_INVDET.ItmWight_T, T_INVDET.ItmAddCost, T_INVDET.RunCod, T_INVDET.LineDetails ,T_INVDET.Serial_Key, " + vInvH + ",case when T_INVHED.CusVenNo = '' THEN '0' ELSE (SELECT Sum(T_GDDET.gdValue) FROM T_GDHEAD INNER JOIN  T_GDDET ON T_GDHEAD.gdhead_ID = T_GDDET.gdID where T_GDDET.AccNo = T_INVHED.CusVenNo and T_GDHEAD.gdLok = 0 and (select T_AccDef.AccCat from T_AccDef where T_AccDef.AccDef_No = T_INVHED.CusVenNo) = '4') END as Balanc,T_INVDET.ItmTax,T_INVHED.InvAddTax,T_INVHED.InvAddTaxlLoc,T_INVHED.TaxGaidID,T_INVHED.IsTaxUse,T_INVHED.IsTaxLines,IsTaxByTotal,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.TaxNo from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as TaxCustNo," + ((DataThisRe.IsTaxLines.Value && !VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 65)) ? " T_INVHED.InvTotLocCur - T_INVHED.InvAddTax as TotWithTaxPoint " : " T_INVHED.InvTotLocCur as TotWithTaxPoint") + ",IsTaxGaid";
                VarGeneral.HeaderRep[0] = Text;
                VarGeneral.HeaderRep[1] = string.Empty;
                VarGeneral.HeaderRep[2] = string.Empty;
                _RepShow.Rule = " where T_INVHED.InvTyp = 21 and T_INVHED.RoomNo > 1 and T_Rooms.RomeStatus = 1 and T_INVHED.RoomSts = 1 and T_INVHED.RoomNo = " + DataThisRe.RoomNo.Value;
                if (!string.IsNullOrEmpty(Fields))
                {
                    _RepShow.Fields = Fields;
                    try
                    {
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData = _RepShow.RepData;
                        try
                        {
                            if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 15))
                            {
                                _RepShow = new RepShow();
                                _RepShow.Tables = " T_SINVDET LEFT OUTER JOIN  T_INVHED ON T_SINVDET.SInvIdHEAD = T_INVHED.InvHed_ID LEFT OUTER JOIN  T_Rooms ON T_INVHED.RoomNo = T_Rooms.ID ";
                                _RepShow.Fields = " Abs(T_SINVDET.SQty) as QtyAbs , SInvDet_ID as InvId , SInvNo as InvNo, SInvId as InvDet_ID, SInvSer as InvSer,SItmNo as ItmNo, SCost as Cost, SQty as Qty, SItmDes as ItmDes, SItmUnt as ItmUnt, SItmDesE as ItmDesE, SItmUntE as ItmUntE, SItmUntPak as ItmUntPak, SStoreNo as StoreNo, (SPrice * 0) as Price, (SAmount * 0) as Amount, SRealQty as RealQty, SitmInvDsc as itmInvDsc, SDatExper as DatExper, SItmDis as ItmDis, SItmTyp as ItmTyp,SItmIndex as ItmIndex, SItmWight_T as ItmWight_T, SItmWight as ItmWight , T_INVHED.* ";
                                _RepShow.Rule = " where T_INVHED.InvTyp = 21 and T_INVHED.RoomNo > 1 and T_Rooms.RomeStatus = 1 and T_INVHED.RoomSts = 1 and T_INVHED.RoomNo = " + DataThisRe.RoomNo.Value;
                                _RepShow = _RepShow.Save();
                                VarGeneral.RepData.Tables[0].Merge(_RepShow.RepData.Tables[0]);
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                    if (VarGeneral.RepData.Tables[0].Rows.Count != 0)
                    {
                        double sum1 = 0.0;
                        double sum11 = 0.0;
                        double sum12 = 0.0;
                        double sum13 = 0.0;
                        double sum14 = 0.0;
                        double sum15 = 0.0;
                        double sum16 = 0.0;
                        double sum17 = 0.0;
                        double sum18 = 0.0;
                        double sum2 = 0.0;
                        double sum3 = 0.0;
                        double sum4 = 0.0;
                        double sum5 = 0.0;
                        double sum6 = 0.0;
                        double sum7 = 0.0;
                        double sum8 = 0.0;
                        double sum9 = 0.0;
                        double sum10 = 0.0;
                        try
                        {
                            List<string> _list = new List<string>();
                            int j;
                            for (j = 0; j < VarGeneral.RepData.Tables[0].Rows.Count; j++)
                            {
                                try
                                {
                                    if (!string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[j]["InvHed_ID"].ToString()) && string.IsNullOrEmpty(_list.Find((string x) => x == VarGeneral.RepData.Tables[0].Rows[j]["InvHed_ID"].ToString())))
                                    {
                                        try
                                        {
                                            sum1 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvTot"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum11 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvTotLocCur"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum12 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvDisVal"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum13 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvDisValLocCur"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum14 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvNet"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum15 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvNetLocCur"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum16 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["CashPay"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum17 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["CashPayLocCur"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum18 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["CreditPay"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum2 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["CreditPayLocCur"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum3 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["NetworkPay"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum4 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["NetworkPayLocCur"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum5 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["Puyaid"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum6 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["Remming"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum7 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvAddTax"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum8 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvAddTaxlLoc"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum9 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["InvDisPrs"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                        try
                                        {
                                            sum10 += double.Parse(VarGeneral.RepData.Tables[0].Rows[j]["Puyaid"].ToString());
                                        }
                                        catch
                                        {
                                        }
                                    }
                                }
                                catch
                                {
                                }
                            }
                            for (int k = 0; k < VarGeneral.RepData.Tables[0].Rows.Count; k++)
                            {
                                foreach (DataRow dr in VarGeneral.RepData.Tables[0].Rows)
                                {
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvTot"] = sum1;
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvTotLocCur"] = sum11;
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvDisVal"] = sum12;
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvDisValLocCur"] = sum13;
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvNet"] = sum14;
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvNetLocCur"] = sum15;
                                    VarGeneral.RepData.Tables[0].Rows[k]["CashPay"] = sum16;
                                    VarGeneral.RepData.Tables[0].Rows[k]["CashPayLocCur"] = sum17;
                                    VarGeneral.RepData.Tables[0].Rows[k]["CreditPay"] = sum18;
                                    VarGeneral.RepData.Tables[0].Rows[k]["CreditPayLocCur"] = sum2;
                                    VarGeneral.RepData.Tables[0].Rows[k]["NetworkPay"] = sum3;
                                    VarGeneral.RepData.Tables[0].Rows[k]["NetworkPayLocCur"] = sum4;
                                    VarGeneral.RepData.Tables[0].Rows[k]["Puyaid"] = sum5;
                                    VarGeneral.RepData.Tables[0].Rows[k]["Remming"] = sum6;
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvAddTax"] = sum7;
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvAddTaxlLoc"] = sum8;
                                    VarGeneral.RepData.Tables[0].Rows[k]["InvDisPrs"] = sum9;
                                    VarGeneral.RepData.Tables[0].Rows[k]["Puyaid"] = sum10;
                                    if (double.Parse(VarGeneral.TString.TEmpty(VarGeneral.RepData.Tables[0].Rows[k]["Puyaid"].ToString())) > 0.0)
                                    {
                                        VarGeneral.RepData.Tables[0].Rows[k]["Remming"] = double.Parse(VarGeneral.TString.TEmpty(VarGeneral.RepData.Tables[0].Rows[k]["Puyaid"].ToString())) - double.Parse(VarGeneral.TString.TEmpty(VarGeneral.RepData.Tables[0].Rows[k]["InvNetLocCur"].ToString()));
                                    }
                                    else
                                    {
                                        VarGeneral.RepData.Tables[0].Rows[k]["Remming"] = 0;
                                    }
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                }
                try
                {
                    try
                    {
                        if (VarGeneral.SSSTyp != 0 && Convert.ToBoolean(VarGeneral.RepData.Tables[0].Rows[0]["IsTaxGaid"]))
                        {
                            checkBox_CostGaidTax_CheckedChanged(sender, e);
                        }
                    }
                    catch
                    {
                    }
                    FlxInv.Rows.Count = 1;
                    FlxInv.Rows.Count = VarGeneral.RepData.Tables[0].Rows.Count * 2 + 1;
                    FlxInv.Cols[27].Visible = false;
                    FlxInv.Cols[35].Visible = false;
                    int i = 0;
                    int iiCnt = 1;
                    while (true)
                    {
                        if (iiCnt > FlxInv.Rows.Count || i >= VarGeneral.RepData.Tables[0].Rows.Count)
                        {
                            break;
                        }
                        FlxInv.Rows[iiCnt].Height = 35;
                        int Ser = iiCnt;
                        T_Item _itm = db.StockItem(VarGeneral.RepData.Tables[0].Rows[i]["ItmNo"].ToString());
                        FlxInv.SetData(iiCnt, 0, Ser.ToString());
                        FlxInv.SetData(iiCnt, 1, VarGeneral.RepData.Tables[0].Rows[i]["ItmNo"]);
                        FlxInv.SetData(iiCnt, 2, VarGeneral.RepData.Tables[0].Rows[i]["ItmDes"]);
                        FlxInv.SetData(iiCnt, 3, VarGeneral.RepData.Tables[0].Rows[i]["ItmUnt"]);
                        FlxInv.SetData(iiCnt, 4, VarGeneral.RepData.Tables[0].Rows[i]["ItmDesE"]);
                        FlxInv.SetData(iiCnt, 5, VarGeneral.RepData.Tables[0].Rows[i]["ItmUntE"]);
                        FlxInv.SetData(iiCnt, 6, VarGeneral.RepData.Tables[0].Rows[i]["StoreNo"]);
                        FlxInv.SetData(iiCnt, 7, Math.Abs(double.Parse(VarGeneral.RepData.Tables[0].Rows[i]["Qty"].ToString())));
                        FlxInv.SetData(iiCnt, 8, VarGeneral.RepData.Tables[0].Rows[i]["Price"]);
                        FlxInv.SetData(iiCnt, 9, VarGeneral.RepData.Tables[0].Rows[i]["ItmDis"]);
                        FlxInv.SetData(iiCnt, 10, VarGeneral.RepData.Tables[0].Rows[i]["Cost"]);
                        FlxInv.SetData(iiCnt, 11, VarGeneral.RepData.Tables[0].Rows[i]["ItmUntPak"]);
                        FlxInv.SetData(iiCnt, 12, Math.Abs(double.Parse(VarGeneral.RepData.Tables[0].Rows[i]["RealQty"].ToString())));
                        FlxInv.SetData(iiCnt, 13, VarGeneral.RepData.Tables[0].Rows[i]["itmInvDsc"]);
                        FlxInv.SetData(iiCnt, 14, VarGeneral.RepData.Tables[0].Rows[i]["Cost"]);
                        FlxInv.SetData(iiCnt, 15, VarGeneral.RepData.Tables[0].Rows[i]["ItmDes"]);
                        FlxInv.SetData(iiCnt, 16, VarGeneral.RepData.Tables[0].Rows[i]["Cost"]);
                        FlxInv.SetData(iiCnt, 18, _itm.DefultUnit.Value);
                        FlxInv.SetData(iiCnt, 19, _itm.Price1.Value);
                        FlxInv.SetData(iiCnt, 20, _itm.Price2.Value);
                        FlxInv.SetData(iiCnt, 21, _itm.Price3.Value);
                        FlxInv.SetData(iiCnt, 22, _itm.Price4.Value);
                        FlxInv.SetData(iiCnt, 23, _itm.Price5.Value);
                        FlxInv.SetData(iiCnt, 25, VarGeneral.RepData.Tables[0].Rows[i]["InvDet_ID"]);
                        FlxInv.SetData(iiCnt, 27, string.Concat(VarGeneral.RepData.Tables[0].Rows[i]["DatExper"]));
                        if (string.Concat(VarGeneral.RepData.Tables[0].Rows[i]["DatExper"]) != string.Empty || string.Concat(VarGeneral.RepData.Tables[0].Rows[i]["RunCod"]) != string.Empty)
                        {
                            FlxInv.Cols[27].Visible = true;
                            FlxInv.Cols[35].Visible = true;
                            FlxInv.SetData(iiCnt, 28, 1);
                        }
                        try
                        {
                            FlxInv.SetData(iiCnt, 33, VarGeneral.RepData.Tables[0].Rows[i]["ItmWight"]);
                        }
                        catch
                        {
                            FlxInv.SetData(iiCnt, 33, false);
                        }
                        FlxInv.SetData(iiCnt, 32, VarGeneral.RepData.Tables[0].Rows[i]["ItmTyp"]);
                        FlxInv.SetData(iiCnt, 31, VarGeneral.RepData.Tables[0].Rows[i]["ItmTax"]);
                        double ItmDis = 0.0;
                        double ItmAddTax = 0.0;
                        try
                        {
                            ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 9)))) / 100.0);
                        }
                        catch
                        {
                            ItmDis = 0.0;
                        }
                        try
                        {
                            ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                        }
                        catch
                        {
                            ItmAddTax = 0.0;
                        }
                        if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                        {
                            ItmAddTax = 0.0;
                        }
                        FlxInv.SetData(iiCnt, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) - ItmDis + ItmAddTax);
                        if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38)))) > 0.0)
                        {
                            ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                            FlxInv.SetData(iiCnt, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38)))) + ItmAddTax);
                        }
                        FlxInv.SetData(iiCnt, 35, VarGeneral.RepData.Tables[0].Rows[i]["RunCod"]);
                        FlxInv.SetData(iiCnt, 36, VarGeneral.RepData.Tables[0].Rows[i]["LineDetails"]);
                        listStkQty = (from t in db.T_STKSQTies
                                      where t.storeNo == (int?)int.Parse(VarGeneral.RepData.Tables[0].Rows[i]["StoreNo"].ToString())
#pragma warning disable CS0253 // Possible unintended reference comparison; to get a value comparison, cast the right hand side to type 'string'
                                      where t.itmNo == VarGeneral.RepData.Tables[0].Rows[i]["ItmNo"]
#pragma warning restore CS0253 // Possible unintended reference comparison; to get a value comparison, cast the right hand side to type 'string'
                                      select t).ToList();
                        if (listStkQty.Count != 0)
                        {
                            _StksQty = listStkQty[0];
                            FlxInv.SetData(iiCnt, 24, double.Parse(VarGeneral.RepData.Tables[0].Rows[i]["RealQty"].ToString()) + _StksQty.stkQty.Value);
                        }
                        FlxInv.Rows[iiCnt + 1].AllowEditing = false;
                        FlxInv.Rows[iiCnt + 1].StyleNew.BackColor = Color.White;
                        FlxInv.Rows[iiCnt + 1].Height = 33;
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            FlxInv.SetData(iiCnt + 1, 2, VarGeneral.RepData.Tables[0].Rows[i]["LineDetails"]);
                        }
                        else
                        {
                            FlxInv.SetData(iiCnt + 1, 4, VarGeneral.RepData.Tables[0].Rows[i]["LineDetails"]);
                        }
                        if (!VarGeneral.TString.ChkStatShow(_SysSetting.LineDetailSts, 26))
                        {
                            FlxInv.Rows[iiCnt + 1].Visible = false;
                        }
                        i++;
                        iiCnt += 2;
                    }
                }
                catch
                {
                    MessageBox.Show((LangArEn == 0) ? "حدث خطأ أثناء تعبئة الأسطر ." : "An error occurred while filling lines .", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                GetInvTot();
                button_SrchTable.Enabled = false;
                switch_Dilevry.Enabled = false;
                switch_OutSide.Enabled = false;
                button_SrchWaiter.Enabled = false;
                button_AddToTable.Enabled = false;
                frRep.buttonItem_MoveTables.Enabled = false;
                expandableSplitter1.Expanded = true;
                ViewDetails_Click(sender, e);
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("ToolStripMenuItem_TransSales_Click:", error, enable: true);
                MessageBox.Show(error.Message);
                _orderLocal = false;
            }
            _orderLocal = false;
        }
        private void ToolStripMenuItem_ProveOrder_Click(object sender, EventArgs e)
        {
            try
            {
                if (!VarGeneral.TString.ChkStatShow(permission.SetStr, 40))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن اتمام هذه العملية . الرجاء مراجعة صلاحيات المستخدمين !" : "Can not complete this process . please see the powers of the users!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                dbInstance = null;
                int rowIndex = Convert.ToInt32(DGV_Main.PrimaryGrid.Tag);
                T_INVHED c = db.StockInvHead(VarGeneral.InvTyp, DGV_Main.PrimaryGrid.GetCell(rowIndex, 0).Value.ToString());
                List<T_INVHED> q = (from t in db.T_INVHEDs
                                    where t.IfDel == (int?)0
                                    where t.InvTyp == (int?)VarGeneral.InvTyp
                                    where t.RoomNo == (int?)c.RoomNo.Value
                                    orderby t.InvNo
                                    select t).ToList();
                for (int i = 0; i < q.Count; i++)
                {
                    T_INVHED WiterOrder = q[i];
                    WiterOrder.AdminLock = true;
                    db.Log = VarGeneral.DebugLog;
                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                }
                Fill_DGV_Main();
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("ToolStripMenuItem_ProveOrder_Click:", error, enable: true);
                MessageBox.Show(error.Message);
            }
        }
        private void ToolStripMenuItem_PrintOrder_Click(object sender, EventArgs e)
        {
            if (VarGeneral.vDemo)
            {
                MessageBox.Show((LangArEn == 0) ? "يرجى تفعيل النسخة للاستفادة من هذه الميزة" : "يرجى تفعيل النسخة للاستفادة من هذه الميزة", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
            dbInstance = null;
            int rowIndex = Convert.ToInt32(DGV_Main.PrimaryGrid.Tag);
            try
            {
                try
                {
                    if (rowIndex < 0)
                    {
                        return;
                    }
                    T_INVSETTING _InvSettingWaiter = db.StockInvSetting(VarGeneral.UserID, VarGeneral.InvTyp);
                    T_INVHED WiterOrder = db.StockInvHead(VarGeneral.InvTyp, DGV_Main.PrimaryGrid.GetCell(rowIndex, 0).Value.ToString());
                    RepShow _RepShow = new RepShow();
                    _RepShow.Tables = "T_INVDET LEFT OUTER JOIN T_INVHED ON T_INVDET.InvId = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Curency ON T_INVHED.CurTyp = T_Curency.Curency_ID LEFT OUTER JOIN T_CstTbl ON T_INVHED.InvCstNo = T_CstTbl.Cst_ID LEFT OUTER JOIN T_Mndob ON T_INVHED.MndNo = T_Mndob.Mnd_ID LEFT OUTER JOIN T_Items ON T_INVDET.ItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                    string vInvH = " T_INVHED.InvHed_ID, T_INVHED.InvId as vID, T_INVHED.InvNo, T_INVHED.InvTyp, T_INVHED.InvCashPay, T_INVHED.CusVenNo,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Arb_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNm,case when T_INVHED.CusVenNo = '' THEN T_INVHED.CusVenNm ELSE (select T_AccDef.Eng_Des from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as CusVenNmE, T_INVHED.CusVenAdd, T_INVHED.CusVenTel, T_INVHED.Remark, T_INVHED.HDat, T_INVHED.GDat, T_INVHED.MndNo, T_INVHED.SalsManNo, T_INVHED.SalsManNam, T_INVHED.InvTot, T_INVHED.InvDisPrs, ((case when IsDisUse1 = 1 then T_INVHED.InvValGaidDis else T_INVHED.InvDisVal end) + T_INVHED.DesPointsValue) as InvDisVal,T_INVHED.InvDisVal as InvDisValOnly,T_INVHED.DesPointsValue,T_INVHED.DesPointsValueLocCur,T_INVHED.PointsCount,T_INVHED.IsPoints, T_INVHED.InvNet, T_INVHED.InvNetLocCur, T_INVHED.CashPayLocCur, T_INVHED.IfRet, T_INVHED.CashPay, T_INVHED.InvTotLocCur, T_INVHED.InvDisValLocCur, T_INVHED.GadeNo, T_INVHED.GadeId, T_INVHED.RetNo, T_INVHED.RetId, T_INVHED.InvCashPayNm, T_INVHED.InvCost, T_INVHED.CustPri, T_INVHED.ArbTaf, T_INVHED.ToStore, T_INVHED.InvCash, T_INVHED.CurTyp, T_INVHED.EstDat,case when DATEDIFF(day, GETDATE(), EstDat) > 0 Then DATEDIFF(day, GETDATE(), EstDat) WHEN DATEDIFF(day, GETDATE(), InvCashPayNm) > 0 THEN DATEDIFF(day, GETDATE(), InvCashPayNm) Else '0' END as EstDatNote, T_INVHED.InvCstNo, T_INVHED.IfDel, T_INVHED.RefNo, T_INVHED.ToStoreNm, T_INVHED.EngTaf, T_INVHED.IfTrans, T_INVHED.InvQty, T_INVHED.CustNet, T_INVHED.CustRep, T_INVHED.InvWight_T, T_INVHED.IfPrint, T_INVHED.LTim, T_INVHED.DATE_CREATED, T_INVHED.MODIFIED_BY, T_INVHED.CreditPay, T_INVHED.DATE_MODIFIED, T_INVHED.CREATED_BY, T_INVHED.CreditPayLocCur, T_INVHED.NetworkPay, T_INVHED.NetworkPayLocCur, T_INVHED.MndExtrnal, T_INVHED.CompanyID, T_INVHED.InvAddCost, T_INVHED.InvAddCostExtrnal, T_INVHED.InvAddCostExtrnalLoc, T_INVHED.IsExtrnalGaid, T_INVHED.ExtrnalCostGaidID, T_INVHED.InvAddCostLoc, T_INVHED.CommMnd_Inv, T_INVHED.Puyaid, T_INVHED.Remming,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.PersonalNm from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as PersonalNm,T_SYSSETTING.LineGiftlNameA,T_SYSSETTING.LineGiftlNameE,T_INVHED.OrderTyp";
                    string Fields = " Abs(T_INVDET.Qty) as QtyAbs , T_INVDET.InvDet_ID,T_INVHED.tailor1,T_INVHED.tailor2,T_INVHED.tailor3,T_INVHED.tailor4,T_INVHED.tailor5,T_INVHED.tailor6,T_INVHED.tailor7,T_INVHED.tailor8,T_INVHED.tailor9,T_INVHED.tailor10,T_INVHED.tailor11,T_INVHED.tailor12,T_INVHED.tailor13,T_INVHED.tailor14,T_INVHED.tailor15,T_INVHED.tailor16,T_INVHED.tailor17,T_INVHED.tailor18,T_INVHED.tailor19,T_INVHED.tailor20,T_INVHED.InvImg, T_INVDET.InvNo, T_INVDET.InvId, T_INVDET.InvSer, T_INVDET.ItmNo, T_INVDET.Cost, T_INVDET.Qty, T_INVDET.ItmUnt,  T_INVDET.ItmDes,T_INVDET.ItmDesE , T_INVDET.ItmUntE, T_INVDET.ItmUntPak, T_INVDET.StoreNo, T_INVDET.Price, T_INVDET.Amount, T_INVDET.RealQty, T_INVDET.ItmTyp,T_INVDET.ItmDis, (Abs(T_INVDET.Qty) *  T_INVDET.Price) * (T_INVDET.ItmDis / 100) as ItmDisVal, T_INVDET.DatExper, T_INVDET.itmInvDsc,ItmIndex ," + (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.LineGiftSts, vStr(VarGeneral.InvTyp)) ? " T_INVDET.ItmWight " : " 0 as ItmWight") + ", T_INVDET.ItmWight_T, T_INVDET.ItmAddCost, T_INVDET.RunCod, T_INVDET.LineDetails ,T_INVDET.Serial_Key , " + vInvH + ", T_Items.* , T_CstTbl.Arb_Des as CstTbl_Arb_Des , T_CstTbl.Eng_Des as CstTbl_Eng_Des , T_Mndob.Arb_Des as Mndob_Arb_Des , T_Mndob.Eng_Des as Mndob_Eng_Des,T_SYSSETTING.LogImg,(select max(T_AccDef.TaxNo) from T_AccDef where T_AccDef.AccDef_No = T_SYSSETTING.TaxAcc) as TaxAcc,T_SYSSETTING.TaxNoteInv,case when T_INVHED.IsTaxLines = 1 then (case when T_INVHED.IsTaxByTotal = 1 then (case when (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) > 0 then ((Abs(T_INVDET.Qty) *  T_INVDET.Price) - case when (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) > 0 then (Abs(T_INVDET.Qty) * T_INVDET.Price * T_INVDET.ItmDis / 100) else 0 end )* T_INVDET.ItmTax / 100   else 0 end) else (Abs(T_INVDET.Qty) *  T_INVDET.Price * T_INVDET.ItmTax / 100) end) else 0 end as TaxValue,(select InvNamA from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as InvNamA,(select InvNamE from T_INVSETTING where T_INVHED.InvTyp = T_INVSETTING.InvID ) as InvNamE,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.Mobile from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as Mobile,(select T_Store.Arb_Des from T_Store where T_Store.Stor_ID = T_INVDET.StoreNo) as StoreNmA,(select T_Store.Eng_Des from T_Store where T_Store.Stor_ID = T_INVDET.StoreNo) as StoreNmE,(select defPrn from T_INVSETTING where CatID = (select ItmCat from T_Items where Itm_No = T_INVDET.ItmNo) ) as defPrn,T_INVDET.ItmTax,T_INVHED.InvAddTax,T_INVHED.InvAddTaxlLoc,T_INVHED.TaxGaidID,T_INVHED.IsTaxUse,T_INVHED.IsTaxLines,IsTaxByTotal,case when T_INVHED.CusVenNo = '' THEN '' ELSE (select T_AccDef.TaxNo from T_AccDef where AccDef_No = T_INVHED.CusVenNo) END as TaxCustNo," + ((!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 65)) ? " T_INVHED.InvTotLocCur - T_INVHED.InvAddTax as TotWithTaxPoint " : " T_INVHED.InvTotLocCur as TotWithTaxPoint") + " ,T_INVHED.InvTotLocCur - T_INVHED.InvDisVal as TotBeforeDisVal,T_INVHED.IsTaxByNet,T_INVHED.TaxByNetValue," + (data_this.IsTaxUse.Value ? " T_INVHED.InvNetLocCur - T_INVHED.InvAddTax as NetWithoutTax " : " T_INVHED.InvNetLocCur as NetWithoutTax");
                    VarGeneral.HeaderRep[0] = Text;
                    VarGeneral.HeaderRep[1] = string.Empty;
                    VarGeneral.HeaderRep[2] = string.Empty;
                    _RepShow.Rule = " where T_INVHED.InvHed_ID = " + WiterOrder.InvHed_ID;
                    if (string.IsNullOrEmpty(Fields))
                    {
                        return;
                    }
                    _RepShow.Fields = Fields;
                    try
                    {
                        _RepShow = _RepShow.Save();
                        VarGeneral.RepData = _RepShow.RepData;
                        _RepShow = new RepShow();
                        _RepShow.Rule = " WHERE T_Users.UsrNo = '" + WiterOrder.SalsManNo + "'";
                        _RepShow.Tables = " T_Branch INNER JOIN T_Users ON T_Branch.Branch_no = T_Users.Brn ";
                        _RepShow.Fields = " T_Users.UsrNamA ,T_Branch.Branch_Name ,T_Users.UsrNamE ,T_Branch.Branch_NameE ,T_Users.UsrImg ";
                        try
                        {
                            VarGeneral.RepShowStock_Rat = "Rate";
                            _RepShow = _RepShow.Save();
                            VarGeneral.RepShowStock_Rat = string.Empty;
                        }
                        catch (Exception ex2)
                        {
                            VarGeneral.RepShowStock_Rat = string.Empty;
                            MessageBox.Show(ex2.Message);
                        }
                        _RepShow.RepData.Tables[0].Merge(VarGeneral.RepData.Tables[0]);
                        VarGeneral.RepData = _RepShow.RepData;
                        try
                        {
                            for (int i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                            {
                                if (string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[i]["LogImg"].ToString()))
                                {
                                    VarGeneral.RepData.Tables[0].Rows[i]["LogImg"] = VarGeneral.RepData.Tables[0].Rows[VarGeneral.RepData.Tables[0].Rows.Count - 1]["LogImg"];
                                    VarGeneral.RepData.Tables[0].Rows[i]["LTim"] = VarGeneral.RepData.Tables[0].Rows[VarGeneral.RepData.Tables[0].Rows.Count - 1]["LTim"];
                                }
                            }
                        }
                        catch
                        {
                        }
                        try
                        {
                            for (int i = 0; i < VarGeneral.RepData.Tables[0].Rows.Count; i++)
                            {
                                if (string.IsNullOrEmpty(VarGeneral.RepData.Tables[0].Rows[i]["UsrImg"].ToString()))
                                {
                                    try
                                    {
                                        VarGeneral.RepData.Tables[0].Rows[i]["UsrImg"] = VarGeneral.RepData.Tables[0].Rows[0]["UsrImg"];
                                    }
                                    catch
                                    {
                                    }
                                }
                            }
                        }
                        catch
                        {
                        }
                        try
                        {
                            if (VarGeneral.TString.ChkStatShow(_SysSetting.Seting, 15))
                            {
                                _RepShow = new RepShow();
                                _RepShow.Rule = string.Empty;
                                _RepShow.Tables = "T_SINVDET LEFT OUTER JOIN T_INVHED ON T_SINVDET.SInvIdHEAD = T_INVHED.InvHed_ID LEFT OUTER JOIN T_INVSETTING ON T_INVHED.InvTyp = T_INVSETTING.InvID  LEFT OUTER JOIN T_Curency ON T_INVHED.CurTyp = T_Curency.Curency_ID LEFT OUTER JOIN T_CstTbl ON T_INVHED.InvCstNo = T_CstTbl.Cst_ID LEFT OUTER JOIN T_Mndob ON T_INVHED.MndNo = T_Mndob.Mnd_ID LEFT OUTER JOIN T_Items ON T_SINVDET.SItmNo = T_Items.Itm_No LEFT OUTER JOIN T_CATEGORY ON T_Items.ItmCat = T_CATEGORY.CAT_ID LEFT OUTER JOIN T_SYSSETTING ON T_INVHED.CompanyID = T_SYSSETTING.SYSSETTING_ID ";
                                _RepShow.Fields = " Abs(T_SINVDET.SQty) as QtyAbs , SInvDet_ID as InvId, SInvNo as InvNo, SInvId as InvDet_ID, SInvSer as InvSer,SItmNo as ItmNo, SCost as Cost, SQty as Qty, SItmDes as ItmDes, SItmUnt as ItmUnt, SItmDesE as ItmDesE, SItmUntE as ItmUntE, SItmUntPak as ItmUntPak, SStoreNo as StoreNo, (SPrice * 0) as Price, (SAmount * 0) as Amount, SRealQty as RealQty, SitmInvDsc as itmInvDsc, SDatExper as DatExper, SItmDis as ItmDis, SItmTyp as ItmTyp,SItmIndex as ItmIndex, SItmWight_T as ItmWight_T, SItmWight as ItmWight , T_INVHED.* , T_Items.* , T_CstTbl.Arb_Des as CstTbl_Arb_Des , T_CstTbl.Eng_Des as CstTbl_Eng_Des , T_Mndob.Arb_Des as Mndob_Arb_Des , T_Mndob.Eng_Des as Mndob_Eng_Des,T_SYSSETTING.LogImg,(select max(T_AccDef.TaxNo) from T_AccDef where T_AccDef.AccDef_No = T_SYSSETTING.TaxAcc) as TaxAcc,T_SYSSETTING.TaxNoteInv";
                                _RepShow.Rule = " where T_INVHED.InvHed_ID = " + WiterOrder.InvHed_ID;
                                _RepShow = _RepShow.Save();
                                VarGeneral.RepData.Tables[0].Merge(_RepShow.RepData.Tables[0]);
                            }
                        }
                        catch
                        {
                        }
                    }
                    catch (Exception ex2)
                    {
                        MessageBox.Show(ex2.Message);
                    }
                    if (VarGeneral.RepData.Tables[0].Rows.Count == 0)
                    {
                        return;
                    }
                    try
                    {
                        FrmReportsViewer frm = new FrmReportsViewer();
                        frm.Repvalue = "InvSal";
                        frm.RepCashier = "InvoiceCachier";
                        frm.Repvalue = "InvSalWtr";
                        frm.RepCashier = "InvoiceCachierWaiter";

                        frm.Tag = LangArEn;
                        if (_InvSettingWaiter.nTyp.Substring(1, 1) == "1")
                        {
                            frm.Repvalue = "InvSalWtr";
                        }
                        else
                        {

                            frm.RepCashier = "InvoiceCachierWaiter";
                        }
                        if (VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 79))
                        {
                            frm._GroupsIsPrint = true;
                        }
                        VarGeneral.vTitle = ((LangArEn == 0) ? db.StockInvSetting(VarGeneral.InvTyp, VarGeneral.UserID).InvNamA : db.StockInvSetting(VarGeneral.InvTyp, VarGeneral.UserID).InvNamE);
                        if (_InvSettingWaiter.nTyp.Substring(2, 1) == "1")
                        {
                            frm._Proceess();
                            return;
                        }
                        frm.TopMost = true;
                        frm.ShowDialog();
                    }
                    catch (Exception error)
                    {
                        VarGeneral.DebLog.writeLog("buttonItem_Print_Click:", error, enable: true);
                        MessageBox.Show(error.Message);
                    }
                }
                catch
                {
                    MessageBox.Show((LangArEn == 0) ? "لا توجد حقول للطباعة تأكد من إعدادات الطباعة" : "No printing fields make sure the print settings", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
            catch
            {
            }
        }
        private void ToolStripMenuItem_RemoveOrder_Click(object sender, EventArgs e)
        {
            try
            {
                if (!VarGeneral.TString.ChkStatShow(permission.SetStr, 41))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن اتمام هذه العملية . الرجاء مراجعة صلاحيات المستخدمين !" : "Can not complete this process . please see the powers of the users!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                dbInstance = null;
                int rowIndex = Convert.ToInt32(DGV_Main.PrimaryGrid.Tag);
                T_INVHED WiterOrder = db.StockInvHead(VarGeneral.InvTyp, DGV_Main.PrimaryGrid.GetCell(rowIndex, 0).Value.ToString());
                List<T_INVHED> q = (from t in db.T_INVHEDs
                                    where t.IfDel == (int?)0
                                    where t.InvTyp == (int?)VarGeneral.InvTyp
                                    where t.RoomNo == (int?)WiterOrder.RoomNo.Value
                                    where t.InvHed_ID != WiterOrder.InvHed_ID
                                    orderby t.InvNo
                                    select t).ToList();
                if (q.Count > 0)
                {
                    RemoveOrder(WiterOrder, _typOption: false);
                }
                else
                {
                    RemoveOrder(WiterOrder, _typOption: true);
                }
                Fill_DGV_Main();
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("ToolStripMenuItem_RemoveOrder_Click:", error, enable: true);
                MessageBox.Show(error.Message);
            }
        }
        private void RemoveOrder(T_INVHED WiterOrder, bool _typOption)
        {
            if (WiterOrder.RoomSts.Value && _typOption && VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 44))
            {
                db.ExecuteCommand("UPDATE [T_Rooms] SET [RomeStatus] = 0, [waiterNo] = NULL Where [RomeStatus] = 1 and ID =" + WiterOrder.RoomNo.Value);
                db.ExecuteCommand("UPDATE T_INVHED SET RoomNo = 1 ,RoomSts = 0,RoomPerson = 1 where InvHed_ID =" + data_this.InvHed_ID);
            }
            if (WiterOrder == null || WiterOrder.InvNo == 0.ToString())
            {
                return;
            }
            WiterOrder = db.StockInvHead(21, WiterOrder.InvNo);
            IDatabase db_ = Database.GetDatabase(VarGeneral.BranchCS);
            try
            {
                db_ = Database.GetDatabase(VarGeneral.BranchCS);
                for (int i = 0; i < WiterOrder.T_INVDETs.Count; i++)
                {
                    if (WiterOrder.T_INVDETs[i].ItmTyp.Value == 2)
                    {
                        for (int iicnt = 0; iicnt < WiterOrder.T_INVDETs[i].T_SINVDETs.Count; iicnt++)
                        {
                            db_.ClearParameters();
                            db_.AddParameter("SInvDet_ID", DbType.Int32, WiterOrder.T_INVDETs[i].T_SINVDETs[iicnt].SInvDet_ID);
                            db_.ExecuteNonQuery(storedProcedure: true, "S_T_SINVDET_DELETE");
                        }
                    }
                    db_.ClearParameters();
                    db_.AddParameter("InvDet_ID", DbType.Int32, WiterOrder.T_INVDETs[i].InvDet_ID);
                    db_.ExecuteNonQuery(storedProcedure: true, "S_T_INVDET_DELETE");
                }
                try
                {
                    db.ExecuteCommand("DELETE FROM [T_INVHED] WHERE InvHed_ID=" + WiterOrder.InvHed_ID);
                }
                catch
                {
                }
            }
            catch (SqlException)
            {
                WiterOrder = db.StockInvHead(21, WiterOrder.InvNo);
            }
            catch (Exception)
            {
                WiterOrder = db.StockInvHead(21, WiterOrder.InvNo);
            }
        }
        private void ToolStripMenuItem_ProveOrderBack_Click(object sender, EventArgs e)
        {
            try
            {
                if (!VarGeneral.TString.ChkStatShow(permission.SetStr, 40))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن اتمام هذه العملية . الرجاء مراجعة صلاحيات المستخدمين !" : "Can not complete this process . please see the powers of the users!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                dbInstance = null;
                int rowIndex = Convert.ToInt32(DGV_Main.PrimaryGrid.Tag);
                T_INVHED c = db.StockInvHead(VarGeneral.InvTyp, DGV_Main.PrimaryGrid.GetCell(rowIndex, 0).Value.ToString());
                List<T_INVHED> q = (from t in db.T_INVHEDs
                                    where t.IfDel == (int?)0
                                    where t.InvTyp == (int?)VarGeneral.InvTyp
                                    where t.RoomNo == (int?)c.RoomNo.Value
                                    orderby t.InvNo
                                    select t).ToList();
                for (int i = 0; i < q.Count; i++)
                {
                    T_INVHED WiterOrder = q[i];
                    WiterOrder.AdminLock = false;
                    db.Log = VarGeneral.DebugLog;
                    db.SubmitChanges(ConflictMode.ContinueOnConflict);
                }
                Fill_DGV_Main();
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("ToolStripMenuItem_ProveOrderBack_Click:", error, enable: true);
                MessageBox.Show(error.Message);
            }
        }
        private void button_Back_Click(object sender, EventArgs e)
        {
            if (checkBoxItem_BarCode.Checked)
            {
                checkBoxItem_BarCode.Checked = false;
                checkBoxItem_BarCode.Checked = true;
            }
            else
            {
                checkBoxItem_BarCode.Checked = true;
            }
        }
        private void button_SrchTable_EnabledChanged(object sender, EventArgs e)
        {
            if (!button_SrchTable.Enabled && !switchButtonItem_IsReturn.Value)
            {
                button_Back.Visible = true;
            }
            else
            {
                button_Back.Visible = false;
            }
        }
        private void expandableSplitter1_ExpandedChanging(object sender, ExpandedChangeEventArgs e)
        {
            if (State == FormState.Edit)
            {
                e.Cancel = true;
            }
        }
        private void buttonItem_RemoveInvWaiter_Click(object sender, EventArgs e)
        {
            try
            {
                if (!VarGeneral.TString.ChkStatShow(permission.SetStr, 41))
                {
                    MessageBox.Show((LangArEn == 0) ? "لا يمكن اتمام هذه العملية . الرجاء مراجعة صلاحيات المستخدمين !" : "Can not complete this process . please see the powers of the users!", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
                else
                {
                    if (button_Back.Visible || !button_SrchTable.Enabled || MessageBox.Show("سيتم إزالة هذا الطلبات بشكل نهائي من النظام . هل تريد المتابعة؟ \n This Orders will be permanently removed from the system . Continue ?", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                    {
                        return;
                    }
                    var Query = (from p in db.T_INVHEDs
                                 join c in db.T_INVDETs on p.InvHed_ID equals c.InvId into j1
                                 from j2 in j1.DefaultIfEmpty()
                                 where p.RoomNo.HasValue
                                 where p.T_Room.waiterNo.HasValue
                                 where p.PaymentOrderTyp == (int?)0
                                 where p.AdminLock.Value == switchButtonItem_OrderSts.Value
                                 group new
                                 {
                                     j2,
                                     j1
                                 } by new
                                 {
                                     p.InvHed_ID,
                                     p.InvNo,
                                     p.InvTyp,
                                     p.RoomNo,
                                     j2.ItmNo,
                                     j2.InvDet_ID,
                                     j2.InvId,
                                     p.GadeId
                                 } into grouped
                                 orderby grouped.Key.InvHed_ID
                                 select new
                                 {
                                     grouped.Key.InvHed_ID,
                                     grouped.Key.GadeId,
                                     grouped.Key.RoomNo
                                 }).Distinct().ToList();
                    if (Query.Count <= 0)
                    {
                        return;
                    }
                    for (int i = 0; i < Query.Count; i++)
                    {
                        db.ExecuteCommand("UPDATE [dbo].[T_Rooms] SET [RomeStatus] = 0,[waiterNo] = NULL WHERE RomeStatus = 1 and ID = " + Query[i].RoomNo.Value);
                        db.ExecuteCommand("DELETE FROM [dbo].[T_SINVDET] WHERE SInvIdHEAD = " + Query[i].InvHed_ID);
                        db.ExecuteCommand("DELETE FROM [dbo].[T_INVDET] WHERE InvId = " + Query[i].InvHed_ID);
                        db.ExecuteCommand("DELETE FROM [dbo].[T_INVHED] WHERE InvHed_ID = " + Query[i].InvHed_ID);
                        try
                        {
                            if (Query[i].GadeId.HasValue)
                            {
                                db.ExecuteCommand("DELETE FROM [dbo].[T_GDDET] WHERE gdID = " + Query[i].GadeId.Value);
                                db.ExecuteCommand("DELETE FROM [dbo].[T_GDHEAD] WHERE gdhead_ID = " + Query[i].GadeId.Value);
                            }
                        }
                        catch
                        {
                        }
                    }
                    Fill_DGV_Main();
                    return;
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("buttonItem_RemoveInvWaiter_Click:", error, enable: true);
                MessageBox.Show(error.Message);
            }
        }
        private void ShowLoadAlert()
        {
            try
            {
                m_AlertOnLoad.Close();
            }
            catch

            {
            }
            m_AlertOnLoad = new AlertCustom();
            Rectangle r = Screen.GetWorkingArea(this);
            m_AlertOnLoad.Location = new Point(r.Right - m_AlertOnLoad.Width, r.Bottom - m_AlertOnLoad.Height);
            m_AlertOnLoad.AutoClose = true;
            m_AlertOnLoad.AutoCloseTimeOut = 15;
            m_AlertOnLoad.AlertAnimation = eAlertAnimation.BottomToTop;
            m_AlertOnLoad.AlertAnimationDuration = 300;
            m_AlertOnLoad.Show(balloonFocus: false);
        }
        private void timer_HoldOrders_Tick(object sender, EventArgs e)
        {
            int _holds = db.FillInvHead_2(21, string.Empty, sts: true, LangArEn).ToList().Count;
            frmRepOps.buttonItem_AlarmLocalOrder.Text = ((LangArEn == 0) ? ("لديك الان " + _holds + " طلب محلي معتمد") : ("You Have Now " + _holds + " Local Order"));
            if (expandableSplitter1.Expanded && HoldOrderHold < _holds)
            {
                HoldOrderHold = _holds;
                ShowLoadAlert();
            }
        }
        private void buttonItem_RefreshList_Click(object sender, EventArgs e)
        {
            Fill_DGV_Main();
        }
        private void button_AddToTable_Click(object sender, EventArgs e)
        {
            VarGeneral.Tb_Return = false;
            if (State == FormState.Edit || string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            if (State == FormState.Saved)
            {
                Button_Edit_Click(sender, e);
            }
            if ((data_this.RoomSts.HasValue && !data_this.RoomSts.Value) || string.IsNullOrEmpty(textBox_ID.Text))
            {
                return;
            }
            if (switch_InSide.Value)
            {
                FrmTables frm2 = new FrmTables(textBox_ID.Text, 0, frmSts: false);
                frm2.Tag = LangArEn;
                VarGeneral.SFrmTyp = "AddToTable";
                if (State == FormState.New)
                {
                    frm2.sts_ = "new";
                }
                else
                {
                    if (State != FormState.Edit)
                    {
                        return;
                    }
                    if (data_this.RoomNo.Value == 0)
                    {
                        frm2.sts_ = "new";
                    }
                    else
                    {
                        frm2.sts_ = "update";
                    }
                }
                frm2.TopMost = true;
                frm2.ShowDialog();
                if (VarGeneral.Tb_Return)
                {
                    button_SrchTable_Click(sender, e);
                }
                else if (frm2.sts_ == "new")
                {
                    txtTable.Value = db.StockRommID(frm2.Serach_No).RomeNo;
                    txtTable.Tag = frm2.Serach_No;
                }
                else
                {
                    textBox_ID_TextChanged(sender, e);
                }
            }
            VarGeneral.SFrmTyp = string.Empty;
            TableTyp();
        }
        private void buttonItem_TableInfo_Click(object sender, EventArgs e)
        {
            FrmTables frm = new FrmTables(string.Empty, 0, frmSts: true);
            frm.Tag = LangArEn;
            frm.TopMost = true;
            frm.ShowDialog();
        }
        private void switchButton_Tax_ValueChanged(object sender, EventArgs e)
        {
            GetInvTot();
        }
        private void checkBox_CostGaidTax_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void buttonItem_RepInvoices_Click(object sender, EventArgs e)
        {

        }
        private void buttonItem_MoveTables_Click(object sender, EventArgs e)
        {

        }
        private void checkBox_GaidDis_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox_GaidDis.Checked)
            {
                txtDebit6.Enabled = true;
                txtCredit6.Enabled = true;
                if (VarGeneral.SSSTyp == 0)
                {
                    return;
                }
                if (string.IsNullOrEmpty(txtCredit6.Text))
                {
                    txtCredit6.Tag = ((_InvSetting.DisCredit.Trim() != "***") ? _InvSetting.DisCredit.Trim() : string.Empty);
                    if (!string.IsNullOrEmpty(txtCredit6.Tag.ToString()))
                    {
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            txtCredit6.Text = db.SelectAccRootByCode(txtCredit6.Tag.ToString()).Arb_Des;
                        }
                        else
                        {
                            txtCredit6.Text = db.SelectAccRootByCode(txtCredit6.Tag.ToString()).Eng_Des;
                        }
                    }
                    else
                    {
                        txtCredit6.Text = string.Empty;
                    }
                }
                if (!string.IsNullOrEmpty(txtDebit6.Text))
                {
                    return;
                }
                txtDebit6.Tag = ((_InvSetting.DisDebit.Trim() != "***") ? _InvSetting.DisDebit.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtDebit6.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtDebit6.Text = db.SelectAccRootByCode(txtDebit6.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtDebit6.Text = db.SelectAccRootByCode(txtDebit6.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtDebit6.Text = string.Empty;
                }
            }
            else
            {
                txtDebit6.Enabled = false;
                txtCredit6.Enabled = false;
            }
        }

        private void switchButton_Dis_ValueChanged(object sender, EventArgs e)
        {
            GetInvTot();
        }
        private void switchButton_BankComm_ValueChanged(object sender, EventArgs e)
        {
            if (State != 0)
            {
                CommCalculat();
            }
        }
        private void checkBox_GaidBankComm_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox_GaidBankComm.Checked)
            {
                txtCredit7.Enabled = true;
                if (VarGeneral.SSSTyp == 0 || !string.IsNullOrEmpty(txtCredit7.Text))
                {
                    return;
                }
                txtCredit7.Tag = ((_InvSetting.CommCredit.Trim() != "***") ? _InvSetting.CommCredit.Trim() : string.Empty);
                if (!string.IsNullOrEmpty(txtCredit7.Tag.ToString()))
                {
                    if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                    {
                        txtCredit7.Text = db.SelectAccRootByCode(txtCredit7.Tag.ToString()).Arb_Des;
                    }
                    else
                    {
                        txtCredit7.Text = db.SelectAccRootByCode(txtCredit7.Tag.ToString()).Eng_Des;
                    }
                }
                else
                {
                    txtCredit7.Text = string.Empty;
                }
            }
            else
            {
                txtCredit7.Enabled = false;
            }
        }
        private void switchButton_TaxLines_ValueChanged(object sender, EventArgs e)
        {
            if (State == FormState.Saved)
            {
                return;
            }
            for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
            {
                if (!(string.Concat(FlxInv.GetData(iiCnt, 1)) != string.Empty))
                {
                    continue;
                }
                double ItmDis = 0.0;
                double ItmAddTax = 0.0;
                ItmDis = double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 9)))) / 100.0);
                try
                {
                    if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPoint.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPoint.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) > 0.0)
                    {
                        ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) / 100.0);
                    }
                }
                catch
                {
                }
                try
                {
                    if ((File.Exists(Application.StartupPath + "\\Script\\SecriptColDisSalesPointValue.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptColDisSalesPointValue.dll"))) && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36)))) > 0.0)
                    {
                        ItmDis += double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 36))));
                    }
                }
                catch
                {
                }
                ItmAddTax = Math.Round(double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                if (!switchButton_TaxLines.Value || switchButton_TaxByTotal.Value)
                {
                    ItmAddTax = 0.0;
                }
                FlxInv.SetData(iiCnt, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) - ItmDis + ItmAddTax);
                if (switchButton_TaxByTotal.Value && switchButton_TaxLines.Value && double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38)))) > 0.0)
                {
                    ItmAddTax = Math.Round((double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))) * double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))) - ItmDis) * (double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))) / 100.0), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
                    FlxInv.SetData(iiCnt, 38, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38)))) + ItmAddTax);
                }
            }
            GetInvTot();
            txtDueAmountLoc_ValueChanged(sender, e);
          
        }
        private void switchButton_TaxByNet_ValueChanged(object sender, EventArgs e)
        {
            if (switchButton_TaxByNet.Value)
            {
                textBoxItem_TaxByNetValue.Visible = true;
                labelItem_TaxByNetPer.Visible = true;
                switchButton_TaxByTotal.Visible = false;
            }
            else
            {
                textBoxItem_TaxByNetValue.Visible = false;
                labelItem_TaxByNetPer.Visible = false;
                switchButton_TaxByTotal.Visible = true;
            }
            txtDueAmountLoc_ValueChanged(sender, e);
            
        }
        private void textBoxItem_TaxByNetValue_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if ((!char.IsNumber(e.KeyChar) & (e.KeyChar != '\b')) && e.KeyChar != '.')
                {
                    e.Handled = true;
                }
            }
            catch
            {
                e.Handled = true;
            }
        }
        private void textBoxItem_TaxByNetValue_LostFocus(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(textBoxItem_TaxByNetValue.Text))
                {
                    textBoxItem_TaxByNetValue.Text = "0";
                }
            }
            catch
            {
                textBoxItem_TaxByNetValue.Text = "0";
            }
            GetInvTot();
        }

        private void txtRemark_ButtonCustom2Click(object sender, EventArgs e)
        {
            try
            {
                FrmInvDetNoteSrch frm = new FrmInvDetNoteSrch();
                frm.Tag = LangArEn;
                try
                {
                    frm.textbox_Detailes.Text = txtRemark.Text;
                }
                catch
                {
                    frm.textbox_Detailes.Text = string.Empty;
                }
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    txtRemark.Text = frm.SerachNo;
                }
                else
                {
                    txtRemark.Text = string.Empty;
                }
            }
            catch
            {
            }
        }
        private void txtDiscoundPoints_ValueChanged(object sender, EventArgs e)
        {
            if (State != 0)
            {
                txtDiscoundPointsLoc.Value = txtDiscoundPoints.Value * RateValue;
                GetInvTot();
            }
        }
        private void switchButton_PointActiv_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                if (File.Exists(Application.StartupPath + "\\Script\\SecriptGlasses.dll") || (VarGeneral.gUserName == "runsetting" && File.Exists(Application.StartupPath + "\\Script\\" + VarGeneral.gServerName.Replace(Environment.MachineName + "\\", string.Empty).Trim() + "\\SecriptGlasses.dll")) || State == FormState.Saved)
                {
                    return;
                }
                if (string.IsNullOrEmpty(txtCustNo.Text))
                {
                    switchButton_PointActiv.Value = false;
                }
            }
            catch
            {
                switchButton_PointActiv.Value = false;
                switchButton_PointActiv.Refresh();
            }
            if (!switchButton_PointActiv.Value)
            {
                txtDiscoundPoints.Value = 0.0;
                txtDiscoundPoints_ButtonClearClick(null, null);
            }
        }
        private void button_SrchCustPoints_Click(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtCustNo.Text) && switchButton_PointActiv.Value)
                {
                    Button_Edit_Click(sender, e);
                    FrmCustomerPointData frm = new FrmCustomerPointData(Rep: false, (State == FormState.Edit) ? true : false, (State == FormState.Edit) ? data_this.InvHed_ID : 0, txtDiscoundPoints.Value);
                    frm.Tag = LangArEn;
                    frm.txtCustNo.Text = txtCustNo.Text;
                    frm.txtCustName.Text = txtCustName.Text;
                    frm.txtDueAmountLoc.Value = txtDueAmountLoc.Value + txtDiscoundPoints.Value;
                    frm.txtDiscoundPointsValue.Value = txtDiscoundPoints.Value;
                    frm.TopMost = true;
                    frm.ShowDialog();
                    if (frm.IsDone)
                    {
                        txtDiscoundPoints.Value = frm.txtDiscoundPointsValue.Value;
                        txtPointCount.Value = frm.txtDiscoundPoints.Value;
                    }
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("button_SrchCustPoints_Click:", error, enable: true);
                txtDiscoundPoints.Value = 0.0;
                txtPointCount.Value = 0.0;
                MessageBox.Show(error.Message);
            }
        }
        private void txtDiscoundPoints_ButtonClearClick(object sender, CancelEventArgs e)
        {
            try
            {
                Button_Edit_Click(sender, e);
                txtDiscoundPoints_ValueChanged(sender, e);
                txtPointCount.Value = 0.0;
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("txtDiscoundPoints_ButtonClearClick:", error, enable: true);
                MessageBox.Show(error.Message);
            }
        }
        private void FrmInvSale_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (VarGeneral.TString.ChkStatShow(VarGeneral.UserPassQty, 17))
            {
                try
                {
                    if (!string.IsNullOrEmpty(data_this_ORDER1.InvNo))
                    {
                        MessageBox.Show((LangArEn == 0) ? " لا يمكن اغلاق النافذة . يرجى التأكد من انهاء الفواتير المعلقة" : "Can not close window . Please make sure to end pending invoices", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        e.Cancel = true;
                        return;
                    }
                }
                catch
                {
                }
                try
                {
                    if (!string.IsNullOrEmpty(data_this_ORDER2.InvNo))
                    {
                        MessageBox.Show((LangArEn == 0) ? " لا يمكن اغلاق النافذة . يرجى التأكد من انهاء الفواتير المعلقة" : "Can not close window . Please make sure to end pending invoices", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        e.Cancel = true;
                        return;
                    }
                }
                catch
                {
                }
                try
                {
                    if (!string.IsNullOrEmpty(data_this_ORDER3.InvNo))
                    {
                        MessageBox.Show((LangArEn == 0) ? " لا يمكن اغلاق النافذة . يرجى التأكد من انهاء الفواتير المعلقة" : "Can not close window . Please make sure to end pending invoices", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        e.Cancel = true;
                        return;
                    }
                }
                catch
                {
                }
                try
                {
                    if (!string.IsNullOrEmpty(data_this_ORDER4.InvNo))
                    {
                        MessageBox.Show((LangArEn == 0) ? " لا يمكن اغلاق النافذة . يرجى التأكد من انهاء الفواتير المعلقة" : "Can not close window . Please make sure to end pending invoices", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        e.Cancel = true;
                        return;
                    }
                }
                catch
                {
                }
                try
                {
                    if (!string.IsNullOrEmpty(data_this_ORDER5.InvNo))
                    {
                        MessageBox.Show((LangArEn == 0) ? " لا يمكن اغلاق النافذة . يرجى التأكد من انهاء الفواتير المعلقة" : "Can not close window . Please make sure to end pending invoices", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        e.Cancel = true;
                    }
                }
                catch
                {
                }
                return;
            }
            try
            {
                if (!string.IsNullOrEmpty(data_this_ORDER1.InvNo) && MessageBox.Show((LangArEn == 0) ? " تنبيه . توجد هناك فواتير معلق\u0651ة لم يتم حفظها .! هل انت متأكد من اغلاق الشاشة" : "Alert . There are outstanding unsaved invoices . Are you sure the screen is closed", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
            catch
            {
            }
            try
            {
                if (!string.IsNullOrEmpty(data_this_ORDER2.InvNo) && MessageBox.Show((LangArEn == 0) ? " تنبيه . توجد هناك فواتير معلق\u0651ة لم يتم حفظها .! هل انت متأكد من اغلاق الشاشة" : "Alert . There are outstanding unsaved invoices . Are you sure the screen is closed", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
            catch
            {
            }
            try
            {
                if (!string.IsNullOrEmpty(data_this_ORDER3.InvNo) && MessageBox.Show((LangArEn == 0) ? " تنبيه . توجد هناك فواتير معلق\u0651ة لم يتم حفظها .! هل انت متأكد من اغلاق الشاشة" : "Alert . There are outstanding unsaved invoices . Are you sure the screen is closed", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
            catch
            {
            }
            try
            {
                if (!string.IsNullOrEmpty(data_this_ORDER4.InvNo) && MessageBox.Show((LangArEn == 0) ? " تنبيه . توجد هناك فواتير معلق\u0651ة لم يتم حفظها .! هل انت متأكد من اغلاق الشاشة" : "Alert . There are outstanding unsaved invoices . Are you sure the screen is closed", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
            catch
            {
            }
            try
            {
                if (!string.IsNullOrEmpty(data_this_ORDER5.InvNo) && MessageBox.Show((LangArEn == 0) ? " تنبيه . توجد هناك فواتير معلق\u0651ة لم يتم حفظها .! هل انت متأكد من اغلاق الشاشة" : "Alert . There are outstanding unsaved invoices . Are you sure the screen is closed", VarGeneral.ProdectNam, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    e.Cancel = true;
                }
            }
            catch
            {
            }
        }
        private void buttonItem_Order1_Del_Click(object sender, EventArgs e)
        {

        }
        private void buttonItem_Order2_Del_Click(object sender, EventArgs e)
        {

        }
        private void buttonItem_Order3_Del_Click(object sender, EventArgs e)
        {

        }
        private void buttonItem_Order4_Del_Click(object sender, EventArgs e)
        {

        }
        private void buttonItem_Order5_Del_Click(object sender, EventArgs e)
        {

        }
        private void button_SrchInvNoBarcod_Click(object sender, EventArgs e)
        {
            string vNewNo = InputDialog.mostrar((LangArEn == 0) ? "أدخل رقم الفاتورة او قم بقرائته هنا : " : "Insert Invoice No : ", (LangArEn == 0) ? "قراءة رقم الفاتورة" : "Invoice No Reading");
            if (string.IsNullOrEmpty(vNewNo))
            {
                return;
            }
            int ChkNo = 0;
            try
            {
                ChkNo = int.Parse(vNewNo);
            }
            catch
            {
                ChkNo = 0;
            }
            if (ChkNo <= 0)
            {
                MessageBox.Show((LangArEn == 0) ? " يجب ان يكون رقم الفاتورة رقمي فقط" : "Numbers must be used only to Reading the Invoice number", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                textBox_ID.Focus();
                return;
            }
            try
            {
                List<T_INVHED> q = (from t in db.T_INVHEDs
                                    where t.InvNo == vNewNo
                                    where t.InvTyp == (int?)VarGeneral.InvTyp
                                    where t.IfDel == (int?)0
                                    where t.SalsManNo == VarGeneral.UserNo
                                    where t.PaymentOrderTyp == (int?)0
                                    //where (!switchButtonItem_IsReturn.Value) ? (t.InvId.HasValue && t.InvId > (double?)0.0) : true
                                    //1Secript   where (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 25)) ? (t.InvCashPay.Value == 0 || t.InvCashPay.Value == 2) : true
                                    select t).ToList();
                if (q.Count <= 0)
                {
                    MessageBox.Show((LangArEn == 0) ? " رقم الفاتورة غير موجود في النظام" : "Invoice No It's a existing", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    textBox_ID.Focus();
                }
                else
                {
                    textBox_ID.Text = vNewNo;
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("button_SrchInvNoBarcod_Click:", error, enable: true);
                MessageBox.Show(error.Message);
            }
        }
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.newprice' is assigned but its value is never used
        bool newprice = false, fa = false;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.newprice' is assigned but its value is never used
        public double pricel = 0.0, lastprice = 0.0, _without = 0;
        public double without
        {
            set
            {
                if (value == 1000)
                { fa = true; }
                if (fa && value < 1000)
                { }
                _without = value;
            }
            get
            {
                return _without;
            }
        }
        double getround(double value)
        {
            return Math.Round(value, VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2);
        }
        double beforeeditprice = 0, enteredtotal = 0;
        private void FlxInv_StartEdit(object sender, RowColEventArgs e)
        {
            if (e.Col == 8)
            {
                beforeeditprice = 1;
                //     double.Parse(FlxInv.GetData(e.Row, 8).ToString(), out beforeeditprice);
            }
            if (e.Col == 38)
            {
                if (edit) beforeeditprice = 2; else enteredtotal = 0;
            }
            else
            { enteredtotal = 0; }
        }
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.modefiy' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.enterflag' is assigned but its value is never used
        bool enterflag = false, edit = false, modefiy = false;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.enterflag' is assigned but its value is never used
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.modefiy' is assigned but its value is never used
        private void saveDraft()
        {
            GetData();
            data_this.CInvType = VarGeneral.InvTyp;
            data_this.InvTyp = VarGeneral.DraftBillId;
            if (State == FormState.New)
            {
                try
                {
                    GetInvSetting();
                    textBox_ID.TextChanged -= textBox_ID_TextChanged;
                    T_INVHED newData = db.StockInvHead(VarGeneral.InvTyp, data_this.InvNo);
                    if (!string.IsNullOrEmpty(newData.InvNo) || newData.InvHed_ID > 0)
                    {
                        string max = string.Empty;
                        dbInstance = null;
                        max = db.MaxInvheadNo.ToString();
                        MessageBox.Show("الرمز مستخدم من قبل.\n سيتم الحفظ برقم جديد [" + max + "]", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        textBox_ID.Text = max ?? string.Empty;
                        data_this.InvNo = max ?? string.Empty;
                    }
                    textBox_ID.TextChanged += textBox_ID_TextChanged;
                    data_this.IfRet = 0;
                    data_this.DATE_CREATED = DateTime.Now;
                    data_this.SalsManNo = VarGeneral.UserNumber;
                    data_this.UserNew = VarGeneral.UserNumber;
                    data_this.SalsManNam = string.Empty;
                    IDatabase dbHead = Database.GetDatabase(VarGeneral.BranchCS);
                    dbHead.ClearParameters();
                    dbHead.AddOutParameter("InvHed_ID", DbType.Int32);
                    dbHead.AddParameter("InvId", DbType.Double, data_this.InvId);
                    dbHead.AddParameter("InvNo", DbType.String, data_this.InvNo);
                    dbHead.AddParameter("InvTyp", DbType.Int32, data_this.InvTyp);
                    dbHead.AddParameter("InvCashPay", DbType.Int32, data_this.InvCashPay);
                    dbHead.AddParameter("CusVenNo", DbType.String, data_this.CusVenNo);
                    dbHead.AddParameter("CusVenNm", DbType.String, data_this.CusVenNm);
                    dbHead.AddParameter("CusVenAdd", DbType.String, data_this.CusVenAdd);
                    dbHead.AddParameter("CusVenTel", DbType.String, data_this.CusVenTel);
                    dbHead.AddParameter("Remark", DbType.String, data_this.Remark);
                    dbHead.AddParameter("HDat", DbType.String, data_this.HDat);
                    dbHead.AddParameter("GDat", DbType.String, data_this.GDat);
                    dbHead.AddParameter("MndNo", DbType.Int32, data_this.MndNo);
                    dbHead.AddParameter("SalsManNo", DbType.String, data_this.SalsManNo);
                    dbHead.AddParameter("SalsManNam", DbType.String, data_this.SalsManNam);
                    dbHead.AddParameter("InvTot", DbType.Double, data_this.InvTot);
                    dbHead.AddParameter("InvTotLocCur", DbType.Double, data_this.InvTotLocCur);
                    dbHead.AddParameter("InvDisPrs", DbType.Double, data_this.InvDisPrs);
                    dbHead.AddParameter("InvDisVal", DbType.Double, data_this.InvDisVal);
                    dbHead.AddParameter("InvDisValLocCur", DbType.Double, data_this.InvDisValLocCur);
                    dbHead.AddParameter("InvNet", DbType.Double, data_this.InvNet);
                    dbHead.AddParameter("InvNetLocCur", DbType.Double, data_this.InvNetLocCur);
                    dbHead.AddParameter("CashPay", DbType.Double, data_this.CashPay);
                    dbHead.AddParameter("CashPayLocCur", DbType.Double, data_this.CashPayLocCur);
                    dbHead.AddParameter("IfRet", DbType.Int32, data_this.IfRet);
                    dbHead.AddParameter("GadeNo", DbType.Double, data_this.GadeNo);
                    dbHead.AddParameter("GadeId", DbType.Double, data_this.GadeId);
                    dbHead.AddParameter("IfDel", DbType.Int32, data_this.IfDel);
                    dbHead.AddParameter("RetNo", DbType.String, data_this.RetNo);
                    dbHead.AddParameter("RetId", DbType.Double, data_this.RetId);
                    dbHead.AddParameter("InvCstNo", DbType.Int32, data_this.InvCstNo);
                    dbHead.AddParameter("InvCashPayNm", DbType.String, data_this.InvCashPayNm);
                    dbHead.AddParameter("RefNo", DbType.String, data_this.RefNo);
                    dbHead.AddParameter("InvCost", DbType.Int32, data_this.InvCost);
                    dbHead.AddParameter("EstDat", DbType.String, data_this.EstDat);
                    dbHead.AddParameter("CustPri", DbType.Int32, data_this.CustPri);
                    dbHead.AddParameter("ArbTaf", DbType.String, data_this.ArbTaf);
                    dbHead.AddParameter("CurTyp", DbType.Int32, data_this.CurTyp);
                    dbHead.AddParameter("InvCash", DbType.String, data_this.InvCash);
                    dbHead.AddParameter("ToStore", DbType.String, data_this.ToStore);
                    dbHead.AddParameter("ToStoreNm", DbType.String, data_this.ToStoreNm);
                    dbHead.AddParameter("InvQty", DbType.Double, data_this.InvQty);
                    dbHead.AddParameter("EngTaf", DbType.String, data_this.EngTaf);
                    dbHead.AddParameter("IfTrans", DbType.Int32, data_this.IfTrans);
                    dbHead.AddParameter("CustRep", DbType.Double, data_this.CustRep);
                    dbHead.AddParameter("CustNet", DbType.Double, data_this.CustNet);
                    dbHead.AddParameter("InvWight_T", DbType.Double, data_this.InvWight_T);
                    dbHead.AddParameter("IfPrint", DbType.Int32, data_this.IfPrint);
                    dbHead.AddParameter("LTim", DbType.String, data_this.LTim);
                    dbHead.AddParameter("CREATED_BY", DbType.String, data_this.CREATED_BY);
                    dbHead.AddParameter("DATE_CREATED", DbType.DateTime, data_this.DATE_CREATED);
                    dbHead.AddParameter("MODIFIED_BY", DbType.String, data_this.MODIFIED_BY);
                    dbHead.AddParameter("DATE_MODIFIED", DbType.DateTime, data_this.DATE_MODIFIED);
                    dbHead.AddParameter("CreditPay", DbType.Double, data_this.CreditPay);
                    dbHead.AddParameter("CreditPayLocCur", DbType.Double, data_this.CreditPayLocCur);
                    dbHead.AddParameter("NetworkPay", DbType.Double, data_this.NetworkPay);
                    dbHead.AddParameter("NetworkPayLocCur", DbType.Double, data_this.NetworkPayLocCur);
                    dbHead.AddParameter("CommMnd_Inv", DbType.Double, data_this.CommMnd_Inv);
                    dbHead.AddParameter("MndExtrnal", DbType.Boolean, data_this.MndExtrnal);
                    dbHead.AddParameter("CompanyID", DbType.Int32, data_this.CompanyID);
                    dbHead.AddParameter("InvAddCost", DbType.Double, data_this.InvAddCost);
                    dbHead.AddParameter("InvAddCostLoc", DbType.Double, data_this.InvAddCostLoc);
                    dbHead.AddParameter("InvAddCostExtrnal", DbType.Double, data_this.InvAddCostExtrnal);
                    dbHead.AddParameter("InvAddCostExtrnalLoc", DbType.Double, data_this.InvAddCostExtrnalLoc);
                    dbHead.AddParameter("IsExtrnalGaid", DbType.Boolean, data_this.IsExtrnalGaid);
                    dbHead.AddParameter("ExtrnalCostGaidID", DbType.Double, data_this.ExtrnalCostGaidID);
                    dbHead.AddParameter("Puyaid", DbType.Double, data_this.Puyaid);
                    dbHead.AddParameter("Remming", DbType.Double, data_this.Remming);
                    dbHead.AddParameter("RoomNo", DbType.Int32, data_this.RoomNo);
                    dbHead.AddParameter("OrderTyp", DbType.Int32, data_this.OrderTyp);
                    dbHead.AddParameter("RoomSts", DbType.Boolean, data_this.RoomSts);
                    dbHead.AddParameter("chauffeurNo", DbType.Int32, data_this.chauffeurNo);
                    dbHead.AddParameter("RoomPerson", DbType.Int32, data_this.RoomPerson);
                    dbHead.AddParameter("ServiceValue", DbType.Double, data_this.ServiceValue);
                    dbHead.AddParameter("Sts", DbType.Boolean, data_this.Sts);
                    dbHead.AddParameter("PaymentOrderTyp", DbType.Int32, data_this.PaymentOrderTyp);
                    dbHead.AddParameter("AdminLock", DbType.Boolean, data_this.AdminLock);
                    dbHead.AddParameter("DeleteDate", DbType.String, data_this.DeleteDate);
                    dbHead.AddParameter("DeleteTime", DbType.String, data_this.DeleteTime);
                    dbHead.AddParameter("UserNew", DbType.String, data_this.UserNew);
                    dbHead.AddParameter("IfEnter", DbType.Int32, data_this.IfEnter);
                    dbHead.AddParameter("InvAddTax", DbType.Double, data_this.InvAddTax);
                    dbHead.AddParameter("InvAddTaxlLoc", DbType.Double, data_this.InvAddTaxlLoc);
                    dbHead.AddParameter("IsTaxGaid", DbType.Boolean, data_this.IsTaxGaid);
                    dbHead.AddParameter("TaxGaidID", DbType.Double, data_this.TaxGaidID);
                    dbHead.AddParameter("IsTaxUse", DbType.Boolean, data_this.IsTaxUse);
                    dbHead.AddParameter("InvValGaidDis", DbType.Double, data_this.InvValGaidDis);
                    dbHead.AddParameter("InvValGaidDislLoc", DbType.Double, data_this.InvValGaidDislLoc);
                    dbHead.AddParameter("IsDisGaid", DbType.Boolean, data_this.IsDisGaid);
                    dbHead.AddParameter("DisGaidID1", DbType.Double, data_this.DisGaidID1);
                    dbHead.AddParameter("IsDisUse1", DbType.Boolean, data_this.IsDisUse1);
                    dbHead.AddParameter("InvComm", DbType.Double, data_this.InvComm);
                    dbHead.AddParameter("InvCommLoc", DbType.Double, data_this.InvCommLoc);
                    dbHead.AddParameter("IsCommGaid", DbType.Boolean, data_this.IsCommGaid);
                    dbHead.AddParameter("CommGaidID", DbType.Double, data_this.CommGaidID);
                    dbHead.AddParameter("IsCommUse", DbType.Boolean, data_this.IsCommUse);
                    dbHead.AddParameter("IsTaxLines", DbType.Boolean, data_this.IsTaxLines);
                    dbHead.AddParameter("IsTaxByTotal", DbType.Boolean, data_this.IsTaxByTotal);
                    dbHead.AddParameter("IsTaxByNet", DbType.Boolean, data_this.IsTaxByNet);
                    dbHead.AddParameter("TaxByNetValue", DbType.Double, data_this.TaxByNetValue);
                    dbHead.AddParameter("DesPointsValue", DbType.Double, data_this.DesPointsValue);
                    dbHead.AddParameter("DesPointsValueLocCur", DbType.Double, data_this.DesPointsValueLocCur);
                    dbHead.AddParameter("PointsCount", DbType.Double, data_this.PointsCount);
                    dbHead.AddParameter("IsPoints", DbType.Boolean, data_this.IsPoints);
                    dbHead.AddParameter("PriceIncludeTax", DbType.Boolean, ChkPriceIncludeTax.Checked);
                    dbHead.AddParameter("tailor20", DbType.String, data_this.tailor20);
                    dbHead.AddParameter("CInvType", DbType.Int32, VarGeneral.InvTyp);
                    dbHead.ExecuteNonQuery(storedProcedure: true, "S_T_INVHED_INSERT");
                    data_this.InvHed_ID = int.Parse(dbHead.GetParameterValue("InvHed_ID").ToString());
                }
#pragma warning disable CS0168 // The variable 'ex7' is declared but never used
                catch (SqlException ex7)
#pragma warning restore CS0168 // The variable 'ex7' is declared but never used
                {
                }
            }
            IDatabase dbLines = Database.GetDatabase(VarGeneral.BranchCS);
            for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
            {
                if (FlxInv.GetData(iiCnt, 1) == null)
                {
                    continue;
                }
                dbLines.ClearParameters();
                dbLines.AddParameter("InvDet_ID", DbType.Int32, 0);
                dbLines.AddParameter("InvNo", DbType.String, textBox_ID.Text.Trim());
                dbLines.AddParameter("InvId", DbType.Int32, data_this.InvHed_ID);
                dbLines.AddParameter("InvSer", DbType.Int32, iiCnt);
                dbLines.AddParameter("ItmNo", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 1)));
                dbLines.AddParameter("Cost", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 10)))));
                dbLines.AddParameter("Qty", DbType.Double, 0.0 - double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 7)))));
                dbLines.AddParameter("ItmDes", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 2)));
                dbLines.AddParameter("ItmUnt", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 3)));
                dbLines.AddParameter("ItmDesE", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 4)));
                dbLines.AddParameter("ItmUntE", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 5)));
                dbLines.AddParameter("ItmUntPak", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 11)))));
                dbLines.AddParameter("StoreNo", DbType.Int32, int.Parse(VarGeneral.TString.TEmpty(FlxInv.GetData(iiCnt, 6).ToString() ?? string.Empty)));
                dbLines.AddParameter("Price", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 8)))));
                dbLines.AddParameter("Amount", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 38)))));
                dbLines.AddParameter("RealQty", DbType.Double, 0.0 - double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 12)))));
                dbLines.AddParameter("itmInvDsc", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 13)))));
                if (VarGeneral.CheckDate(string.Concat(FlxInv.GetData(iiCnt, 27))))
                {
                    dbLines.AddParameter("DatExper", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 27)));
                }
                else
                {
                    dbLines.AddParameter("DatExper", DbType.String, string.Empty);
                }
                dbLines.AddParameter("CInvType", DbType.Int32, VarGeneral.DraftBillId);
                dbLines.AddParameter("ItmDis", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 9)))));
                dbLines.AddParameter("ItmTyp", DbType.Int32, int.Parse("0" + FlxInv.GetData(iiCnt, 32)));
                dbLines.AddParameter("ItmIndex", DbType.Int32, 0);
                try
                {
                    dbLines.AddParameter("ItmWight", DbType.Double, ((bool)FlxInv.GetData(iiCnt, 33)) ? 1 : 0);
                }
                catch
                {
                    dbLines.AddParameter("ItmWight", DbType.Double, 0);
                }
                dbLines.AddParameter("ItmWight_T", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 34)))));
                if (!string.IsNullOrEmpty(string.Concat(FlxInv.GetData(iiCnt, 35))))
                {
                    dbLines.AddParameter("RunCod", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 35)));
                }
                else
                {
                    dbLines.AddParameter("RunCod", DbType.String, string.Empty);
                }
                dbLines.AddParameter("LineDetails", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 36)));
                dbLines.AddParameter("Serial_Key", DbType.String, string.Concat(FlxInv.GetData(iiCnt, 37)));
                dbLines.AddParameter("ItmTax", DbType.Double, double.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 31)))));
                try
                {
                    if (!string.IsNullOrEmpty(FlxInv.GetData(iiCnt, 39).ToString()))
                    {
                        dbLines.AddParameter("OfferTyp", DbType.Int32, int.Parse(VarGeneral.TString.TEmpty(string.Concat(FlxInv.GetData(iiCnt, 39)))));
                    }
                }
                catch
                {
                }
                dbLines.ExecuteNonQuery(storedProcedure: true, "S_T_INVDET_INSERT");
            }
        }
        private void button_Draft_Click(object sender, EventArgs e)
        {
            string sa; try { sa = FlxInv.GetData(1, 1).ToString(); } catch { sa = string.Empty; }
            if (sa != string.Empty && State == FormState.New)
            {
                T_INVSETTING ts = null;
                try
                {
                    ts = db.StockInvSetting(VarGeneral.UserID, VarGeneral.DraftBillId);
                }
                catch { }
                if (ts.InvSet_ID == 0)
                {
                    DBUdate.DbUpdates.adddraft();
                }
                //  draft = 1;
                saveDraft();
                Clear();
                State = FormState.Saved;
                RefreshPKeys();
               puBar1. TextBox_Index.EditValue = string.Concat(PKeys.IndexOf(data_this.InvNo ?? string.Empty) + 1);
                SetReadOnly = true;
                Button_Add_Click(null, null);
                button_opendraft.Enabled = true;
                //  draft = 0;
                return;
            }
        }

        void checkoversaved()
        {
            int i = db.StockInvHeadSaveover(VarGeneral.InvTyp, VarGeneral.UserNo);
            if (i > 0)
                button_opendraft.Enabled = true;
            else
                button_opendraft.Enabled = false;
        }
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.draft' is assigned but its value is never used
        int draft = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.draft' is assigned but its value is never used
        private void button_opendraft_Click(object sender, EventArgs e)
        {
            if (State != FormState.New)
            {
                Button_Add_Click(null, null);
                if (State != FormState.New)
                    return;
            }
            int oldTyp = VarGeneral.InvTyp;
            try
            {
                columns_Names_visible2.Clear();
                columns_Names_visible2.Add("InvNo", new ColumnDictinary("رقم الفاتورة", "Invoice No", ifDefault: true, string.Empty));
                columns_Names_visible2.Add("HDat", new ColumnDictinary("التاريخ الهجري", "Date Hijri", ifDefault: true, string.Empty));
                columns_Names_visible2.Add("GDat", new ColumnDictinary("التاريخ الميلادي", "Date Gregorian", ifDefault: true, string.Empty));
                columns_Names_visible2.Add("InvTotLocCur", new ColumnDictinary("إجمالي الفاتورة", "Invoice Total", ifDefault: false, string.Empty));
                columns_Names_visible2.Add("InvNetLocCur", new ColumnDictinary("صافي الفاتورة", "Invoice Net", ifDefault: true, string.Empty));
                columns_Names_visible2.Add("InvQty", new ColumnDictinary("إجمالي الكمية", "Quantity Total", ifDefault: true, string.Empty));
                columns_Names_visible2.Add("RefNo", new ColumnDictinary("رقم المرجع", "Refrence No", ifDefault: false, string.Empty));
                columns_Names_visible2.Add("InvDisValLocCur", new ColumnDictinary("الخصم قيمة", "Discount value", ifDefault: true, string.Empty));
                columns_Names_visible2.Add("GadeNo", new ColumnDictinary("رقم القيد المحاسبي", "Gaid No", ifDefault: false, string.Empty));
                columns_Names_visible2.Add("CusVenAdd", new ColumnDictinary("الجوال", "Mobile", ifDefault: true, string.Empty));
                columns_Names_visible2.Add("InvHed_ID", new ColumnDictinary("تسلسل الفاتورة", " ID", ifDefault: true, string.Empty));
                columns_Names_visible2.Add("CusVenNm", new ColumnDictinary("اسم العميل ", " ID", ifDefault: true, string.Empty));
                FrmSearch frm = new FrmSearch();
                frm.Tag = LangArEn;
                ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible2;
                foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
                {
                    frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
                }
                VarGeneral.SFrmTyp = "T_Draft";
                //  VarGeneral.InvTyp = 101;
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    T_INVHED newData = db.StockInvHeadID2(VarGeneral.DraftBillId, int.Parse(frm.SerachNo), VarGeneral.UserNo);
                    newData.InvNo = textBox_ID.Text.ToString();
                    newData.InvTyp = oldTyp;
                    SetData(newData);
                    State = FormState.New;
                     puBar1.Button_Save.Enabled = true;
                    GetInvSetting();
                    AutoGaidAcc();
                    if (_InvSetting.autoTaxGaid.Value)
                    {
                        checkBox_CostGaidTax.Checked = true;
                        checkBox_CostGaidTax_CheckedChanged(null, null);
                    }
                    if (_InvSetting.autoDisGaid.Value)
                    {
                        checkBox_GaidDis.Checked = true;
                        checkBox_GaidDis_CheckedChanged(null, null);
                    }
                    string dl = "DELETE FROM T_INVDET WHERE InvId=" + frm.SerachNo + " AND CInvType=" + VarGeneral.DraftBillId.ToString();
                    DBUdate.DbUpdates.executes(dl, VarGeneral.BranchCS);
                    dl = "Delete From T_INVHED where InvTyp=" + VarGeneral.DraftBillId.ToString() + " AND InvHed_ID=" + frm.SerachNo.ToString() + " and SalsManNo = " + VarGeneral.UserNo;
                    DBUdate.DbUpdates.executes(dl, VarGeneral.BranchCS);
                    //           FlxInv.Rows.Count += VarGeneral.Settings_Sys.LineOfInvoices.Value;
                }
            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("opendraft:", error, enable: true);
            }
            VarGeneral.InvTyp = oldTyp;
            checkoversaved();
            if (!VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 59))
            {
                // switchButton_Lock.Visible = false;
            }
        }
        public void SetLinesShow(List<T_INVDET> listDet)
        {
            try
            {
                FlxInv.Clear(ClearFlags.Content, 1, 1, FlxInv.Rows.Count - 1, 39);
                FlxStkQty.Clear(ClearFlags.Content, 1, 1, 1, 1);
                FlxInv.Rows.Count = listDet.Count + 1;
                FlxInv.Cols[27].Visible = false;
                FlxInv.Cols[35].Visible = false;
                for (int iiCnt = 1; iiCnt <= listDet.Count; iiCnt++)
                {
                    _InvDet = listDet[iiCnt - 1];
                    FlxInv.Row = iiCnt;
                    FlxInv.SetData(iiCnt, 1, _InvDet.ItmNo.Trim());
                    FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 1));
                    if (string.Concat(FlxInv.GetData(iiCnt, 1)) != string.Empty)
                    {
                        FlxInv.SetData(iiCnt, 6, _InvDet.StoreNo.Value);
                        FlxInv.SetData(iiCnt, 9, _InvDet.ItmDis);
                        FlxInv.SetData(iiCnt, 27, _InvDet.DatExper ?? string.Empty);
                        if ((_InvDet.DatExper ?? string.Empty) != string.Empty || (_InvDet.RunCod ?? string.Empty) != string.Empty)
                        {
                            FlxInv.Cols[27].Visible = true;
                            FlxInv.Cols[35].Visible = true;
                            FlxInv.SetData(iiCnt, 28, 1);
                        }
                        try
                        {
                            FlxInv.SetData(iiCnt, 33, (_InvDet.ItmWight.Value != 0.0) ? true : false);
                        }
                        catch
                        {
                            FlxInv.SetData(iiCnt, 33, false);
                        }
                        FlxInv.SetData(iiCnt, 35, _InvDet.RunCod.Trim());
                        FlxInv.SetData(iiCnt, 3, _InvDet.ItmUnt.ToString());
                        FlxInv.SetData(iiCnt, 5, _InvDet.ItmUntE.ToString());
                        if (VarGeneral.CurrentLang.ToString() == "0" || VarGeneral.CurrentLang.ToString() == string.Empty)
                        {
                            FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 3));
                        }
                        else
                        {
                            FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 5));
                        }
                        FlxInv.SetData(iiCnt, 7, Math.Abs((decimal)_InvDet.Qty.Value));
                        FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 7));
                    }
                }
                FlxInv.Rows.Count += VarGeneral.Settings_Sys.LineOfInvoices.Value;
            }
            catch (Exception error)
            {
                MessageBox.Show((LangArEn == 0) ? "حدث خطأ أثناء تعبئة الأسطر ." : "An error occurred while filling lines .", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                VarGeneral.DebLog.writeLog("SetLinesShow:", error, enable: true);
                FlxInv.Clear(ClearFlags.Content, 1, 1, FlxInv.Rows.Count - 1, 39);
                FlxInv.Rows.Count = VarGeneral.Settings_Sys.LineOfInvoices.Value;
            }
        }
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.tt' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.pt' is assigned but its value is never used
        double pt = 0, tt = 0, ta = 0, t1 = 0, tot = 0, fs = 0;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.pt' is assigned but its value is never used
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.tt' is assigned but its value is never used
        private void CatSuperGrid_CellClick(object sender, GridCellClickEventArgs e)
        {
            try
            {
                if (CmbLegate.SelectedIndex <= 0 && CmbInvSide.SelectedIndex == 1)
                {
                    MessageBox.Show((LangArEn == 0) ? "يجب تحديد المندوب الخارجي لهذه البضاعة قبل عرض الأصناف" : "You must specify the external representative of these goods ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    CmbLegate.Focus();
                    return;
                }
                if (CmbInvSide.SelectedIndex > 1 && txtCustNo.Text == string.Empty && VarGeneral.SSSLev != "M")
                {
                    MessageBox.Show((LangArEn == 0) ? "يجب تحديد العميل / المورد لهذه البضاعة قبل عرض الأصناف" : "You must specify the Customer/Supplier of these goods ", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    CmbLegate.Focus();
                    return;
                }
                GridCell q = e.GridCell;
                if (string.IsNullOrEmpty(q.Tag.ToString()))
                {
                    ItmMainParameter = string.Empty;
                    return;
                }
                ItmMainParameter = q.Tag.ToString();
                FillItmesMain(q, vBestSaller: false); Refresh();

            }
            catch (Exception error)
            {
                VarGeneral.DebLog.writeLog("metroTilePanel_Cat_ItemClick:", error, enable: true);
                Refresh();
            }
        }
        private void buttonX1_Click(object sender, EventArgs e)
        {
            dot[ControlNo] = true;
        }
        private void groupBox5_Enter(object sender, EventArgs e)
        {
        }
        private void txtDiscoundPointsLoc_ValueChanged(object sender, EventArgs e)
        {
        }
        private void label46_Click(object sender, EventArgs e)
        {
        }
        private void FrmInvSalePoint_Shown(object sender, EventArgs e)
        {

            textBox_Barcode.Focus();
        }

        private void superTabControl_Main2_SelectedTabChanged(object sender, SuperTabStripSelectedTabChangedEventArgs e)
        {

        }

        private void dataGridView_ItemDet_Click(object sender, EventArgs e)
        {

        }

        private void checkBox_Credit_CheckedChanging(object sender, CheckBoxXChangeEventArgs e)
        {
            if (this.State == FormState.Saved)
            {
                this.Button_Edit_Click(sender, e);
            }
        }
        bool keyisch = false;
        private void FlxInv_KeyPressEdit(object sender, KeyPressEditEventArgs e)
        {

            keyisch = true;


        }

#pragma warning disable CS0414 // The field 'FrmInvSalePoint.keychtax' is assigned but its value is never used
        bool keychtax = false;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.keychtax' is assigned but its value is never used
#pragma warning disable CS0414 // The field 'FrmInvSalePoint.keyishNo' is assigned but its value is never used
        bool keyishNo = false;
#pragma warning restore CS0414 // The field 'FrmInvSalePoint.keyishNo' is assigned but its value is never used
        private void FlxInv_ValidateEdit(object sender, ValidateEditEventArgs e)
        {

            if (e.Col == 8 && keyisch == true)
            {
                double ff = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString());

                lastprice = 0;
                //without = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString());
                pricel = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString());
                //  FlxInv_AfterEdit(null, new RowColEventArgs(e.Row, 8));
            }
            if (e.Col == 38 && keyisch == true)
            {
                enteredtotal = 0;
                //  FlxInv_AfterEdit(null, new RowColEventArgs(e.Row, 8));
            }
            if (e.Col == 31 && keyisch == true)
            {
                keychtax = true;
                //  FlxInv_AfterEdit(null, new RowColEventArgs(e.Row, 8));
            }
            if (e.Col == 31 && keyisch == true)
            {
                keychtax = true;
                //  FlxInv_AfterEdit(null, new RowColEventArgs(e.Row, 8));
            }
            if (e.Col == 1 && keyisch == true)
                keyishNo = true;
            keyisch = false;
        }


        private void FlxInv_KeyUpEdit(object sender, KeyEditEventArgs e)
        {

        }

        private void Label26_Click(object sender, EventArgs e)
        {

        }

        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void button_InitializeBill_Click(object sender, EventArgs e)
        {
            State = FormState.cancel;
            Clear();
            Button_Add_Click(null, null);

        }

        private void buttonAccountat_Click(object sender, EventArgs e)
        {
            P_Main.SendToBack();
        }

        private void BackTOButtons_Click(object sender, EventArgs e)
        {
            P_Main.BringToFront();
        }

        private void button_IncrementDecrement(object sender, EventArgs e)
        {
            P_Menu.BringToFront();
        }

        private void SwitchBill_Click(object sender, EventArgs e)
        {
            switchButtonItem_IsReturn.Value = !switchButtonItem_IsReturn.Value;
            if (switchButtonItem_IsReturn.Value)
            {
                SwitchBill.Text = " مبيعات";
            }
            else { SwitchBill.Text = " مرتجعات "; }
            switchButtonItem_IsReturn_ValueChanged(switchButtonItem_IsReturn, null);
        }

        private void Button_Search_Click_2(object sender, EventArgs e)
        {

        }

        private void FlxInv_CellButtonClick(object sender, RowColEventArgs e)
        {

            button_DeleteLine_Click(null, null);
        }

        private void button_Qty_Click(object sender, EventArgs e)
        {
            ControlNo = 0;

            FlxInv.Focus();
            FlxInv.Col = 7;
            
          
        }

        private void FlxInv_Click_2(object sender, EventArgs e)
        {

        }

        private void button_Price_Click(object sender, EventArgs e)
        {
            FlxInv.Focus();
            FlxInv.Col = 8;
 
        }

        private void panel4_Paint(object sender, PaintEventArgs e)
        {

        }

        private void poS_ItemsPanel1_Load(object sender, EventArgs e)
        {

        }

        private void DetailsPanel_Paint(object sender, PaintEventArgs e)
        {

        }

        private void button_AutoRead_Click(object sender, EventArgs e)
        {
            if (checkBoxItem_BarCode.Checked == true)
            {
                checkBoxItem_BarCode.Checked = false;
                button_AutoRead.Text = "قرائة تلقائية";
                checkBoxItem_BarCode_CheckedChanged(null, null);
            }else
            {
                checkBoxItem_BarCode.Checked = true;
                button_AutoRead.Text = "ايقاف قرائة تلقائية ";
                checkBoxItem_BarCode_CheckedChanged(null, null);
            }
        }

        private void textBox_Sequenc_TextChanged(object sender, EventArgs e)
        {
            Lab_Series.Text = "(" + textBox_Sequenc.Text .Trim()+ ")";
            Lab_Series.Size = Lab_Series.PreferredSize;
     
        }

        private void button1_Click(object sender, EventArgs e)
        {
            P_Main.BringToFront();

        }

        private void button_Disc_Click(object sender, EventArgs e)
        {
            P_Disc.Visible =! P_Disc.Visible;
            txtDiscountVal_Enter(null, null);

        }

        private void button2_Click(object sender, EventArgs e)
        {
            P_Main.BringToFront();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            Button_Close_Click(null, null);
        }

        private void But_PRecords_Click(object sender, EventArgs e)
        {
            P_Records.BringToFront();
        }

        private void but_custDetails_Click(object sender, EventArgs e)
        {
            HP_CustDetails.BringToFront();
        }

        private void button15_Click(object sender, EventArgs e)
        {
            HP_Main.BringToFront();
        }

        private void button13_Click(object sender, EventArgs e)
        {
            HP_TypeOfPayment.BringToFront();
        }

        private void button15_Click_1(object sender, EventArgs e)
        {
            HP_Main.BringToFront();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            HP_Main.BringToFront();
        }

        private void button16_Click(object sender, EventArgs e)
        {
            button16.BackColor = Color.Green;
            checkBox_Chash.Checked = true;
            checkBox_Chash_CheckedChanged(null, null);
            button17.BackColor = Color.White;
            button18.BackColor = Color.White;
        }

        private void button17_Click(object sender, EventArgs e)
        {
            button17.BackColor = Color.Green;
            checkBox_Credit.Checked = true;
            checkBox_Credit_CheckedChanged(null, null);
            button16.BackColor = Color.White;
            button18.BackColor = Color.White;

        }

        private void button18_Click(object sender, EventArgs e)
        {
            button16.BackColor = Color.White;
            button17.BackColor = Color.White;
          
            button18.BackColor = Color.Green;
            checkBox_NetWork.Checked = true;
            checkBox_NetWork_CheckedChanged(null, null);
        }

        private void button13_Click_1(object sender, EventArgs e)
        {
            HP_CustDetails.BringToFront();
        }

        private void button14_Click(object sender, EventArgs e)
        {

        }

        private void textBox_WaiterName_TextChanged(object sender, EventArgs e)
        {

        }

        private void button21_Click(object sender, EventArgs e)
        {
            panel_Table.BringToFront();

        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBox1.SelectedIndex == 0)
            {
                switch_InSide.Value = true;
                switch_InSide_ValueChanged(null, null);
            } else if (comboBox1.SelectedIndex == 1)
            {

                switch_OutSide.Value = true;
                switch_OutSide_ValueChanged(null, null);
            }else if(comboBox1.SelectedIndex==2)
            {
                switch_Dilevry.Value = true;
                switch_Dilevry_ValueChanged(null, null);

            }
        }

        private void button23_Click(object sender, EventArgs e)
        {
            Button_Close_Click(null, null);
        }

        private void button22_Click(object sender, EventArgs e)
        {
            Utilites.exit();

        }

        private void button24_Click(object sender, EventArgs e)
        {
            Program.min();
        }

        private void button19_Click(object sender, EventArgs e)
        {
            HP_Main.BringToFront();
        }

        private void puBar1_Load(object sender, EventArgs e)
        {

        }

        private void ChkPriceIncludeTax_CheckedChanged(object sender, EventArgs e)
        {
            chkPriceIncludeTax_ValueChanged(null, null);
            if (ChkPriceIncludeTax.Checked)
                ChkPriceIncludeTax.Text = "السعر يشمل الضريبة";
            else
                ChkPriceIncludeTax.Text = "السعر لا يشمل الضريبة";

        }

        private void label54_Paint(object sender, PaintEventArgs e)
        {
            label54.Size = label54.PreferredSize;
        }

        private void PanelCOntainer_Paint(object sender, PaintEventArgs e)
        {

        }

        private void Button_Tax(object sender, EventArgs e)
        {
            P_TaxPanel.BringToFront();
        }

        private void superTabControlPanel3_Click(object sender, EventArgs e)
        {

        }

        private void button9_Click(object sender, EventArgs e)
        {
            P_PayementPanel.BringToFront();

        }

        private void button7_Click(object sender, EventArgs e)
        {
            P_Main.BringToFront();
        }

        private void button10_Click(object sender, EventArgs e)
        {
            P_DissCountRecord.BringToFront();
        }

        private void button28_Click(object sender, EventArgs e)
        {
            P_BankCommession.BringToFront();
        }

        private void button11_Click(object sender, EventArgs e)
        {

        }

        private void button_CustC5_Click_1(object sender, EventArgs e)
        {

        }

        private void switchButton_TaxLines_ValueChanged_1(object sender, EventArgs e)
        {

        }

        private void button11_Click_1(object sender, EventArgs e)
        {
            clk = 1;
         //  switchButton_TaxLines.Value = (button11.BackColor == Color.Green ? false : true);
            switchButton_TaxLines_ValueChanged(null, null);
            
        }

        private void switchButton_TaxByNet_ValueChanged_1(object sender, EventArgs e)
        {
           
        }

        private void button30_Click(object sender, EventArgs e)
        {
            clk = 1;
           
        }
        int clk = 0;
        private void button29_Click(object sender, EventArgs e)
        {
            clk = 1;
            // switchButton_TaxByTotal(null, null);
          
        }

        private void textBoxItem_TaxByNetValue_TextChanged(object sender, EventArgs e)
        {
            
        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {
           
        }

        private void superTabControlPanel6_Click(object sender, EventArgs e)
        {

        }

        private void button6_Click(object sender, EventArgs e)
        {
            P_Menu.BringToFront();

        }

        private void button12_Click(object sender, EventArgs e)
        {
            P_Main.BringToFront();
        }

        private void panel_Driver_VisibleChanged_1(object sender, EventArgs e)
        {
           
        }

        private void superTabStripORDER_VisibleChanged(object sender, EventArgs e)
        {
            P_ResturanStatusBar.Visible = superTabStripORDER.Visible;
        }
        private void button_SrchCustNo_Click_1(object sender, EventArgs e)
        {
        }
        private void buttonX_GaidCash_Click(object sender, EventArgs e)
        {
        }
        private void groupBox3_Enter(object sender, EventArgs e)
        {
        }
        private void FlxInv_CellChanged(object sender, RowColEventArgs e)
        {
            if (e.Row <= 0) return;
            if (e.Col == 8)
            {
                pricel = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString()); ;
            }
            if (e.Col == 31)
                ta = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString()); ;
            if (edit)
            {
                if (e.Col == 8)
                {
                    pricel = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString()); without = pricel; edit = false; newprice = true;
                    lastprice = 0;
                }
                if (e.Col == 31)
                {
                    ta = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString()); t1 = ta;
                }
                else
                    t1 = 0;
                if (e.Col == 38)
                {
                    tot = double.Parse(FlxInv.GetData(e.Row, e.Col).ToString());
                }
                else
                    tot = 0;
            }
            try
            {
                if (e.Row > 0 && (e.Col == 38 || e.Col == 8 || e.Col == 7 || e.Col == 31))
                    FlxInv.SetData(e.Row, e.Col, Math.Round(double.Parse(FlxInv.GetData(e.Row, e.Col).ToString()), VarGeneral.TString.ChkStatShow(VarGeneral.Settings_Sys.Seting, 49) ? VarGeneral.DecimalNo : 2));
            }
            catch
            {
            }
        }
        private void FlxInv_LeaveEdit(object sender, RowColEventArgs e)
        {
            if (edit)
            {
                if (e.Col == 8 || e.Col == 38)
                {
                    if (beforeeditprice == 1)
                    {
                        fs = double.Parse(FlxInv.GetData(e.Row, 8).ToString()); without = fs;
                        beforeeditprice = 0;
                    }
                    else
                        if (beforeeditprice == 2)
                    {
                        enteredtotal = double.Parse(FlxInv.GetData(e.Row, 38).ToString());
                        beforeeditprice = 0;
                    }
                }
            }
        }
        double caltax(double amount, double taxpercent)
        {
            without = amount;
            if (switchButton_TaxByNet.Value)
                if (textBoxItem_TaxByNetValue.Text.ToString() != string.Empty) taxpercent = double.Parse(textBoxItem_TaxByNetValue.Text);
                else
            if (switchButton_TaxByTotal.Value == false && switchButton_TaxLines.Value == false) taxpercent = 0;
            if (taxpercent != 0)
            {
                taxpercent = taxpercent / 100;
                taxpercent++;
                return getround(amount / taxpercent);
            }
            else return getround(amount);
        }
        double Rcaltax(double amount, double taxpercent)
        {
            if (switchButton_TaxByNet.Value)
                if (textBoxItem_TaxByNetValue.Text.ToString() != string.Empty) taxpercent = double.Parse(textBoxItem_TaxByNetValue.Text);
                else
            if (switchButton_TaxByTotal.Value == false && switchButton_TaxLines.Value == false) taxpercent = 0;
            if (taxpercent != 0)
            {
                taxpercent = taxpercent / 100;
                taxpercent++;
                without = getround(amount * taxpercent);
                return getround(amount * taxpercent);
            }
            else return getround(amount);
        }
        int convertflag = 0;
        private void chkPriceIncludeTax_ValueChanged(object sender, EventArgs e)
        {
            convertflag = 1;
            if (State != FormState.New && State != FormState.Saved)
                Button_Edit_Click(null, null);
            if (ChkPriceIncludeTax.Checked)
            {
                switchButton_TaxByNet.Value = false;
                switchButton_TaxByTotal.Value = true;
                switchButton_TaxLines.Value = true;
                switchButton_TaxByNet.Enabled = false;
                switchButton_TaxByTotal.Enabled = false;
                switchButton_TaxLines.Enabled = false;
                switchButton_TaxLines_ValueChanged(null, null);
            }
            else
            {
                switchButton_TaxByNet.Enabled = true;
                switchButton_TaxByTotal.Enabled = true;
                switchButton_TaxLines.Enabled = true;
            }
            pricel = 0.0; lastprice = 0.0;
            if (ChkPriceIncludeTax.Checked)
            {
                for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
                {
                    if (FlxInv.GetData(iiCnt, 1) == null)
                    {
                        continue;
                    }
                    else
                    {
                        pricel = double.Parse(FlxInv.GetData(iiCnt, 8).ToString());
                        without = getround(pricel);
                        double t = 0;
                        t = double.Parse(FlxInv.GetData(iiCnt, 31).ToString());
                        pricel = getround(caltax(pricel, t));
                        FlxInv.SetData(iiCnt, 8, pricel);
                        FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 8));//p
                                                                              //   FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 7));
                    }
                    GetInvTot();
                }
            }
            else
            {
                for (int iiCnt = 1; iiCnt < FlxInv.Rows.Count; iiCnt++)
                {
                    if (FlxInv.GetData(iiCnt, 1) == null)
                    {
                        continue;
                    }
                    else
                    {
                        double reprice = 0;
                        reprice = double.Parse(FlxInv.GetData(iiCnt, 8).ToString());
                        double taxx = 0.0;
                        taxx = double.Parse(FlxInv.GetData(iiCnt, 31).ToString());
                        reprice = Rcaltax(reprice, taxx); without = reprice;
                        lastprice = 0; pricel = reprice;
                        reprice = getround(reprice);
                        FlxInv.SetData(iiCnt, 8, reprice);
                        FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 8));//p
                                                                              //   FlxInv_AfterEdit(null, new RowColEventArgs(iiCnt, 7));
                        GetInvTot();
                    }
                }
                GetInvTot();
            }
            convertflag = 0;
        }
    }
}
