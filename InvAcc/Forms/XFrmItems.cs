using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.ComponentModel.DataAnnotations;
using System.IO;
using DevExpress.XtraLayout.Helpers;
using DevExpress.XtraLayout;

namespace InvAcc.Forms.Shared
{
    using DevExpress.XtraDataLayout;
    using InvAcc.Controls;
    using InvAcc.Controls.POS;
    using ProShared.GeneralM;
    using ProShared.Stock_Data;
    using System.Data.Linq;
    using System.Data.SqlClient;

    public partial class XFrmItems : DevExpress.XtraEditors.XtraForm
    {
        private Dictionary<string, ColumnDictinary> columns_Names_visible = new Dictionary<string, ColumnDictinary>();
        private Dictionary<string, ColumnDictinary> Dir_ButSearch = new Dictionary<string, ColumnDictinary>();
        Stock_DataDataContext dbInstance;
          Stock_DataDataContext db
        {
            get
            {
                if (dbInstance == null) 
                    dbInstance = new Stock_DataDataContext();
                return dbInstance;
            }
          
        }
        public XFrmItems()
        {
            InitializeComponent();
            DevExpress.Utils.TouchHelpers.TouchKeyboardSupport.EnableTouchKeyboard = true;
            DevExpress.Utils.TouchHelpers.TouchKeyboardSupport.EnableFocusTracking();
            WindowState = FormWindowState.Maximized;
            if (columns_Names_visible.Count == 0)
            {
                columns_Names_visible.Add("Itm_No", new ColumnDictinary("رقم الصنف", "Item No", ifDefault: true, string.Empty));
                columns_Names_visible.Add("Arb_Des", new ColumnDictinary("الاسم عربي", "Arabic Name", ifDefault: true, string.Empty));
                columns_Names_visible.Add("Eng_Des", new ColumnDictinary("الاسم الانجليزي", "English Name", ifDefault: true, string.Empty));
                if (!File.Exists(Application.StartupPath + "\\Script\\SecriptInvitationCards.dll"))
                {
                    columns_Names_visible.Add("Itm_ID", new ColumnDictinary("الرقم التسلسلي", "Seq No", ifDefault: false, string.Empty));
                    columns_Names_visible.Add("AvrageCost", new ColumnDictinary("متوسط التكلفة", "Average Cost", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("UntPri1", new ColumnDictinary("سعر البيع 1", "Sale Price 1", ifDefault: true, string.Empty));
                    columns_Names_visible.Add("Arb_Des_Cat", new ColumnDictinary("الاسم العربي لمجموعة الصنف", "CATEGORY Arabic Name", ifDefault: false, string.Empty));
                    columns_Names_visible.Add("Eng_Des_Cat", new ColumnDictinary("الاسم الانجليزي لمجموعة الصنف", "CATEGORY English Name", ifDefault: false, string.Empty));
                }
                columns_Names_visible.Add("BarCod1", new ColumnDictinary("رقم الباركود 1", "Barcode No 1", ifDefault: false, string.Empty));
                columns_Names_visible.Add("BarCod2", new ColumnDictinary("رقم الباركود 2", "Barcode No 2", ifDefault: false, string.Empty));
                columns_Names_visible.Add("BarCod3", new ColumnDictinary("رقم الباركود 3", "Barcode No 3", ifDefault: false, string.Empty));
                columns_Names_visible.Add("BarCod4", new ColumnDictinary("رقم الباركود 4", "Barcode No 4", ifDefault: false, string.Empty));
            }
            dd();
        }
void dd()
        {
            // This line of code is generated by Data Source Configuration Wizard
            dbInstance = null;

            // This line of code is generated by Data Source Configuration Wizard

            // This line of code is generated by Data Source Configuration Wizard
            t_ItemsBindingSource.DataSource = db.T_Items;
            // This line of code is generated by Data Source Configuration Wizard
            
            dataLayoutControl1.DataSource = t_ItemsBindingSource;
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource.DataSource = db.T_Units;
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource1.DataSource = db.T_Units;
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource2.DataSource = db.T_Units;
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource3.DataSource = db.T_Units;
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource4.DataSource = db.T_Units;
            // This line of code is generated by Data Source Configuration Wizard
            t_CATEGORiesBindingSource.DataSource = db.T_CATEGORies;
            // This line of code is generated by Data Source Configuration Wizard
            if (ksa == 0) t_ItemsBindingSource.AddNew();
        }
     
      

        private void t_ItemsBindingSource_AddingNew(object sender, AddingNewEventArgs e)
        {
            T_Item n = new T_Item();
            n.Itm_ID = db.MaxItemNo;
            n.Itm_No = db.MaxItemNo.ToString();
            int? nullable = null;
            n.DefultVendor = nullable;
            n.SerialKey = "";
            n.Price1 = new double?(0);
            n.Price2 = new double?(0);
            n.Price3 = new double?(0);
            n.Price4 = new double?(0);
            n.ItmCat = 1;
            n.Price5 = new double?(0);
            n.CompanyID = new int?(1);
            n.ItmImg = null;
            n.IsPoints = new bool?(true);
            n.IsBalance = new bool?(false);
            n.InvSaleStoped = new bool?(false);
            n.InvSaleReturnStoped = new bool?(false);
            n.InvPaymentStoped = new bool?(false);
            n.InvPaymentReturnStoped = new bool?(false);
            n.InvEnterStoped = new bool?(false);
            n.InvOutStoped = new bool?(false);
            n.FirstCost = new double?(0);
            n.StartCost = new double?(0);
            n.AvrageCost = new double?(0);
            n.LastCost = new double?(0);
            n.OpenQty = new double?(0);
            n.ItmLoc = "";
            n.ItmTyp = new int?(0);
            n.QtyMax = new double?(0);
            n.QtyLvl = new double?(0);
            n.Lot = new int?(0);
            n.DMY = new int?(1);
            n.Price1 = new double?(0);
            n.Price2 = new double?(0);
            n.Price3 = new double?(0);
            n.Price4 = new double?(0);
            n.Price5 = new double?(0);
            n.Price6 = new double?(0);
            n.LrnExp = new int?(0);
            n.ItemComm = new double?(0);
            n.ItemDis = new double?(0);
            n.TaxSales = new double?(0);
            n.TaxPurchas = new double?(0);
            n.Unit1 = new int?(1);
            n.UntPri1 = new double?(1);
            n.Pack1 = new double?(1);
            nullable = null;
            n.Unit2 = nullable;
            n.UntPri2 = new double?(0);
            n.Pack2 = new double?(0);
            nullable = null;
            n.Unit3 = nullable;
            n.UntPri3 = new double?(0);
            n.Pack3 = new double?(0);
            nullable = null;
            n.Unit4 = nullable;
            n.UntPri4 = new double?(0);
            n.Pack4 = new double?(0);
            nullable = null;
            n.Unit5 = nullable;
            n.UntPri5 = new double?(0);
            n.Pack5 = new double?(0);
            n.DefultUnit = new int?(1);
            n.DefPack = new double?(1);
            n.BarCod1 = "";
            n.BarCod2 = "";
            n.BarCod3 = "";
            n.BarCod4 = "";
            n.BarCod5 = "";


            e.NewObject = n;
            State = FormState.New;

        }
        FormState State; 
        private void windowsUIButtonPanelMain_ButtonClick(object sender, DevExpress.XtraBars.Docking2010.ButtonEventArgs e)
        {
            if (e.Button.Properties.Tag.ToString() == "6")
            {

                dd();
            }

                if (e.Button.Properties.Tag.ToString() == "5")
            {
                if (Arb_DesTextEdit.Text.Trim() == "" || Eng_DesTextEdit.Text.Trim() == "")
                    if (State==FormState.New)
                {
                    t_ItemsBindingSource.RemoveCurrent();
                    State = FormState.Complete;
                }
                FrmSearch frm = new FrmSearch();
                frm.Tag = 0;
                ICollection<KeyValuePair<string, ColumnDictinary>> animalsAsCollection = columns_Names_visible;
                foreach (KeyValuePair<string, ColumnDictinary> kvp in animalsAsCollection)
                {
                    frm.columns_Names_visible.Add(kvp.Key, new FrmSearch.SColumnDictinary(kvp.Value.AText, kvp.Value.EText, kvp.Value.IfDefault, string.Empty));
                }
                VarGeneral.SFrmTyp = "T_Items";
                frm.TopMost = true;
                frm.ShowDialog();
                if (frm.SerachNo != string.Empty)
                {
                    var q = (from i in db.T_Items where i.Itm_No == (frm.Serach_No) select i).FirstOrDefault();
                    int index = db.T_Items.ToBindingList<T_Item>().IndexOf(q);
                    if (index != -1)
                    {

                        t_ItemsBindingSource.Position = index;
                    }
                }


                return;
            
            }
            if (e.Button.Properties.Tag.ToString() == "3")
            {
                dd();

            }
            if (e.Button.Properties.Tag.ToString() == "4")
            {
                try
                {
                    if (State == FormState.New)
                    {
                        t_ItemsBindingSource.RemoveCurrent();
                        State=FormState.Saved;
                        return;
                    }
                    validation();

                    if (ksa == 1)
                    {
                        if( MessageBox.Show("هل انت متاكد من حذف هذا الصنف") != DialogResult.Yes)
                        {
                            t_ItemsBindingSource.RemoveCurrent();
                        
                            {
                                save();
                                
                            }
                        }
                        ksa = 0;
                     
                    }
                }
                catch { }
                return;

            }
           
            if (e.Button.Properties.Tag.ToString() == "0")
            {
               
                save();


            }
            if (e.Button.Properties.Tag.ToString() == "1")
            {
              
                save();
                Close();
            }
            if (e.Button.Properties.Tag.ToString() == "2")
            {
                
                save();

                dd();
            }
          
            
        }

        private void save()
        {
            if (Arb_DesTextEdit.Text.Trim() == "" || Eng_DesTextEdit.Text.Trim() == "")
            {
               
                MessageBox.Show("يجب تعبئة البيانات الضرورية قبل تنفيذ العملية");
                return;
            }
            t_ItemsBindingSource.EndEdit();
            db.SubmitChanges();
        }

        private void Unit2TextEdit_EditValueChanged(object sender, EventArgs e)
        {
            if (Unit2TextEdit.Text.Trim() == "") return;
            ItemForPack2.Enabled = true;
            ItemForBarCod2.Enabled = true;
            ItemForUnit3.Enabled = true;
            ItemForUntPri2.Enabled = true;




        }
 
        private void Unit3TextEdit_EditValueChanged(object sender, EventArgs e)
        {
            if (Unit3TextEdit.Text.Trim() == "") return;
            ItemForUntPri3.Enabled = true;
            ItemForPack3.Enabled = true;
            ItemForBarCod3.Enabled = true;

            ItemForUnit4.Enabled = true;




        }

        private void Unit4TextEdit_EditValueChanged(object sender, EventArgs e)
        {
            if (Unit4TextEdit.Text.Trim() == "") return;
            ItemForUntPri4.Enabled = true;
            ItemForPack4.Enabled = true;
            ItemForBarCod4.Enabled = true;

            ItemForUnit5.Enabled = true;
        }

        private void Unit5TextEdit_EditValueChanged(object sender, EventArgs e)
        {
            if (Unit5TextEdit.Text.Trim() == "") return;
            ItemForUntPri5.Enabled = true;
            ItemForPack5.Enabled = true;
            ItemForBarCod5.Enabled = true;

        }
 

        
        private void windowsUIButtonPanelMain_BindingContextChanged(object sender, EventArgs e)
        {

        }

        private void windowsUIButtonPanelMain_ButtonClick_1(object sender, DevExpress.XtraBars.Docking2010.ButtonEventArgs e)
        {
            windowsUIButtonPanelMain_ButtonClick(sender, e);

        }

        private void Pack2TextEdit_EditValueChanged(object sender, EventArgs e)
        {

        }
        List<T_Unit> units = new List<T_Unit>();
        private void Unit1TextEdit_EditValueChanged_1(object sender, EventArgs e)
        {
           

        }

        private void XFrmItems_FormClosing_1(object sender, FormClosingEventArgs e)
        {
            
        }
        bool Dirty = false;
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (State == FormState.Saved && (ActiveControl.GetType() == typeof(DataLayoutControl) || ActiveControl.GetType() == typeof(LookUpEditWithDataSource) || ActiveControl.GetType() == typeof(TextEdit) || ActiveControl.GetType() == typeof(ComboBoxEdit) || ActiveControl.GetType() == typeof(SpinEdit)))

            {
                Dirty = true;


                State = FormState.Edit;


            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void XFrmItems_Load_1(object sender, EventArgs e)
        {
            units.AddRange(db.T_Units.ToList());
            
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource1.DataSource = db.T_Units;
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource2.DataSource = db.T_Units;
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource3.DataSource = db.T_Units;
            // This line of code is generated by Data Source Configuration Wizard
            t_UnitsBindingSource4.DataSource = db.T_Units;
            Unit2TextEdit.EditValueChanged += Unit2TextEdit_EditValueChanged;
            Unit3TextEdit.EditValueChanged += Unit3TextEdit_EditValueChanged;
            Unit4TextEdit.EditValueChanged += Unit4TextEdit_EditValueChanged;
            Unit5TextEdit.EditValueChanged += Unit5TextEdit_EditValueChanged;

            Unit2TextEdit.EditValueChanged+=   Unit1TextEdit_EditValueChanged_1;
         Unit3TextEdit.EditValueChanged += Unit1TextEdit_EditValueChanged_1;
         Unit4TextEdit.EditValueChanged += Unit1TextEdit_EditValueChanged_1;
         Unit5TextEdit.EditValueChanged += Unit1TextEdit_EditValueChanged_1;
        }

        private void t_UnitsBindingSource3_CurrentChanged(object sender, EventArgs e)
        {

        }

        private void Unit2TextEdit_EditValueChanged_1(object sender, EventArgs e)
        {
          
        }

        private void Unit3TextEdit_EditValueChanged_1(object sender, EventArgs e)
        {
           
        }

        private void Unit4TextEdit_EditValueChanged_1(object sender, EventArgs e)
        {
           
    
        }

        private void Unit1TextEdit_PopupFilter(object sender, DevExpress.XtraEditors.Controls.PopupFilterEventArgs e)
        {
            e.Criteria = DevExpress.Data.Filtering.CriteriaOperator.Parse("Unit_ID != '" + Unit2TextEdit.EditValue.ToString()+"'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit3TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit4TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit5TextEdit.EditValue.ToString() + "'");

        }

        private void Unit2TextEdit_PopupFilter(object sender, DevExpress.XtraEditors.Controls.PopupFilterEventArgs e)
        {
            e.Criteria = DevExpress.Data.Filtering.CriteriaOperator.Parse("Unit_ID != '" + Unit1TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit3TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit4TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit5TextEdit.EditValue.ToString() + "'");

        }

        private void Unit3TextEdit_PopupFilter(object sender, DevExpress.XtraEditors.Controls.PopupFilterEventArgs e)
        {
            e.Criteria = DevExpress.Data.Filtering.CriteriaOperator.Parse("Unit_ID != '" + Unit1TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit2TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit4TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit5TextEdit.EditValue.ToString() + "'");

        }

        private void Unit4TextEdit_PopupFilter(object sender, DevExpress.XtraEditors.Controls.PopupFilterEventArgs e)
        {
            e.Criteria = DevExpress.Data.Filtering.CriteriaOperator.Parse("Unit_ID != '" + Unit1TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit3TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit2TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit5TextEdit.EditValue.ToString() + "'");

        }

        private void Unit5TextEdit_PopupFilter(object sender, DevExpress.XtraEditors.Controls.PopupFilterEventArgs e)
        {
            e.Criteria = DevExpress.Data.Filtering.CriteriaOperator.Parse("Unit_ID != '" + Unit1TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit3TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit4TextEdit.EditValue.ToString() + "'");
            e.Criteria &= DevExpress.Data.Filtering.CriteriaOperator.Parse(" Unit_ID != '" + Unit2TextEdit.EditValue.ToString() + "'");

        }

        private void Unit2TextEdit_EnabledChanged(object sender, EventArgs e)
        {

        }

        private void ItmCatTextEdit_EditValueChanged(object sender, EventArgs e)
        {
           
        }

        private void Unit5TextEdit_EditValueChanged_1(object sender, EventArgs e)
        {
           
        }

        

        private void Eng_DesTextEdit_EditValueChanged_2(object sender, EventArgs e)
        {
            T_Item gt = t_ItemsBindingSource.Current as T_Item;
            gt.Eng_Des = Eng_DesTextEdit.EditValue.ToString();
        }

        private void ItmImgPictureEdit_ContextButtonClick(object sender, DevExpress.Utils.ContextItemClickEventArgs e)
        {
            if(e.Item.Tag.ToString()=="0")
            {
                ItmImgPictureEdit.LoadImage();

            }else
            if (e.Item.Tag.ToString() == "1")
            {
                ItmImgPictureEdit.Image = null;

            }
        }
       
     

        public static class DataHelper
        {
            public static System.Data.Linq.Binary GetBinaryFromImage(Image image)
            {
                if (image == null) return null;
                System.Data.Linq.Binary binary;

                using (MemoryStream ms = new MemoryStream())
                {
                    image.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                    binary = new System.Data.Linq.Binary(ms.GetBuffer());
                }
                return binary;
            }
        }
    
        private void Itm_NoTextEdit_Enter(object sender, EventArgs e)
        {
            if (VarGeneral.IsTouchScreen)
                System.Diagnostics.Process.Start("osk.exe"); // dis
        }

        private void Itm_NoTextEdit_Leave(object sender, EventArgs e)
        {
            if (!VarGeneral.IsTouchScreen) return;
            System.Diagnostics.Process p = System.Diagnostics.Process.GetProcessesByName("osk").FirstOrDefault();
            if (p != null)
                p.Kill();
        }
        void validation()
        {
            ksa = 0;
            Stock_DataDataContext db1 = new Stock_DataDataContext();
            T_Item DataThis =(T_Item) t_ItemsBindingSource.Current;
            T_Item data_this = (T_Item)t_ItemsBindingSource.Current;
            int LangArEn = 0;
            
            bool returned = db1.StockCheckInvDet(DataThis.Itm_No);
            if (!returned)
            {
                returned = db1.StockCheckInvOffer(DataThis.Itm_No);
            }
            if (returned)
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكن حذف الصنف .. لانه مرتبط باحد الفواتير" : "You can not delete Item .. because it is tied to a Bills", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
            List<T_StoreMnd> vStorMnd = db1.T_StoreMnds.Where((T_StoreMnd t) => t.itmNo == data_this.Itm_No).ToList();
            if (vStorMnd.Count > 0)
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكن حذف المستودع .. لانه مرتبط باحد فواتير صرف البضاعة" : "You can not delete the warehouse .. because it is tied to Item", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
             data_this = db1.StockItem(DataThis.Itm_No);
            if (data_this.ItmTyp == 2)
            {
                Stock_DataDataContext db1c = new Stock_DataDataContext(VarGeneral.BranchCS);
       var     LData_This = db1c.T_ItemDets.Where((T_ItemDet t) => t.ItmNo == data_this.Itm_No).ToList();
                for (int i = 0; i < LData_This.Count; i++)
                {
                    if (db1c.StockCheckInvDet(LData_This[i].GItmNo))
                    {
                        MessageBox.Show((LangArEn == 0) ? "لايمكن حذف الصنف .. لانه يحوي\u064b صنف عليه حركة" : "You can not delete Item .. because it Contains item is tied to a Bills", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return;
                    }
                    db1c.T_ItemDets.DeleteOnSubmit(LData_This[i]);
                    db1c.SubmitChanges();
                }

                ksa = 1;
            }
            else if (db1.StockItemDet(DataThis.Itm_No))
            {
                MessageBox.Show((LangArEn == 0) ? "لايمكن حذف الصنف .. لانه مرتبط بصنف تجميعي " : "You can not delete Item .. because it is tied to a Bills", VarGeneral.ProdectNam, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
            try
            {
                try
                {
                    db1.T_EditItemPrices.DeleteAllOnSubmit(data_this.T_EditItemPrices);
                    db1.SubmitChanges();
                }
                catch
                {
                }
                try
                {
                    db1.T_ItemSerials.DeleteAllOnSubmit(data_this.T_ItemSerials);
                    db1.SubmitChanges();
                }
                catch
                {
                }
                List<T_STKSQTY> StkQty_ = (from t in db1.T_STKSQTies
                                           where t.itmNo == data_this.Itm_No
                                           where Math.Abs(t.stkQty.Value) > 0.0
                                           select t).ToList();
                if (StkQty_.Count > 0)
                {
                    return;
                }
                db1.ExecuteCommand("DELETE FROM [db1o].[T_STKSQTY] WHERE itmNo = '" + data_this.Itm_No + "' and stkQty = 0");
                List<T_QTYEXP> QtyExp = (from t in db1.T_QTYEXPs
                                         where t.itmNo == data_this.Itm_No
                                         where Math.Abs(t.stkQty.Value) > 0.0
                                         select t).ToList();
                if (QtyExp.Count > 0)
                {
                    return;
                }
                db1.ExecuteCommand("DELETE FROM [db1o].[T_QTYEXP] WHERE itmNo = '" + data_this.Itm_No + "' and stkQty = 0");
                List<T_StoreMnd> StorMnd_ = (from t in db1.T_StoreMnds
                                             where t.itmNo == data_this.Itm_No
                                             where Math.Abs(t.stkQty.Value) > 0.0
                                             select t).ToList();
                if (StorMnd_.Count > 0)
                {
                    return;
                }
                db1.ExecuteCommand("DELETE FROM [db1o].[T_StoreMnd] WHERE itmNo = '" + data_this.Itm_No + "' and stkQty = 0");
                ksa = 1;
            
            }
            catch (SqlException)
            {
                ksa = 1;
              //  data_this = db1.StockItem(DataThis.Itm_No);
                return;
            }
            catch (Exception)
            {
                ksa = 1;
                //  data_this = db1.StockItem(DataThis.Itm_No);
                return;
            }
            

        }
        int ksa = 0;
        private void windowsUIButtonPanelMain_Click(object sender, EventArgs e)
        {

        }

        private void ItmImgPictureEdit_EditValueChanged(object sender, EventArgs e)
        {
            if (ItmImgPictureEdit.EditValue is Image|| ItmImgPictureEdit.EditValue  is null)
            {
                T_Item c = (T_Item)t_ItemsBindingSource.Current;
                if(ItmImgPictureEdit.EditValue!=null)
                c.ItmImg = DataHelper.GetBinaryFromImage(ItmImgPictureEdit.EditValue as Image);
            }
        }
        List<int> lis = new List<int>();
        private void t_ItemsBindingSource_CurrentItemChanged(object sender, EventArgs e)
        {
           
        }
       
        private void t_ItemsBindingSource_ListChanged(object sender, ListChangedEventArgs e)
        {
            if(e.ListChangedType==ListChangedType.ItemAdded)
            {
                newitems = true;
            }

            if (e.ListChangedType == ListChangedType.ItemDeleted)
            {
              delete  = true;
            }

            if (e.ListChangedType == ListChangedType.ItemChanged)
            {
           //    change = true;
            }

        }

        private void Unit4TextEdit_EditValueChanged_2(object sender, EventArgs e)
        {

        }

        private void Unit1TextEdit_EditValueChanged(object sender, EventArgs e)
        {

        }
        bool modified, saved, newitems,delete;
    }
  
}
